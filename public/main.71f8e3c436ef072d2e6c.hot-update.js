/*! For license information please see main.71f8e3c436ef072d2e6c.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateimmersive_website("main",{"./app/components/Canvas/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>h});var r=s("./node_modules/ogl/src/core/Renderer.js"),i=s("./node_modules/ogl/src/core/Camera.js"),n=s("./node_modules/ogl/src/extras/Box.js"),a=s("./node_modules/ogl/src/core/Transform.js");class h{constructor(){this.createRenderer()}createRenderer(){this.renderer=new r.Renderer,this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new i.Camera(this.gl),this.camera.position.z=5}createCube(){this.box=new n.Box}createScene(){this.scene=new a.Transform}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight})}}},"./node_modules/ogl/src/core/Camera.js":(t,e,s)=>{s.r(e),s.d(e,{Camera:()=>u});var r=s("./node_modules/ogl/src/core/Transform.js"),i=s("./node_modules/ogl/src/math/Mat4.js"),n=s("./node_modules/ogl/src/math/Vec3.js");const a=new i.Mat4,h=new n.Vec3,o=new n.Vec3;class u extends r.Transform{constructor(t,{near:e=.1,far:s=100,fov:r=45,aspect:a=1,left:h,right:o,bottom:u,top:l,zoom:d=1}={}){super(),Object.assign(this,{near:e,far:s,fov:r,aspect:a,left:h,right:o,bottom:u,top:l,zoom:d}),this.projectionMatrix=new i.Mat4,this.viewMatrix=new i.Mat4,this.projectionViewMatrix=new i.Mat4,this.worldPosition=new n.Vec3,this.type=h||o?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:t=this.near,far:e=this.far,fov:s=this.fov,aspect:r=this.aspect}={}){return Object.assign(this,{near:t,far:e,fov:s,aspect:r}),this.projectionMatrix.fromPerspective({fov:s*(Math.PI/180),aspect:r,near:t,far:e}),this.type="perspective",this}orthographic({near:t=this.near,far:e=this.far,left:s=this.left,right:r=this.right,bottom:i=this.bottom,top:n=this.top,zoom:a=this.zoom}={}){return Object.assign(this,{near:t,far:e,left:s,right:r,bottom:i,top:n,zoom:a}),s/=a,r/=a,i/=a,n/=a,this.projectionMatrix.fromOrthogonal({left:s,right:r,bottom:i,top:n,near:t,far:e}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(t){return super.lookAt(t,!0),this}project(t){return t.applyMatrix4(this.viewMatrix),t.applyMatrix4(this.projectionMatrix),this}unproject(t){return t.applyMatrix4(a.inverse(this.projectionMatrix)),t.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3]);const t=this.projectionViewMatrix;this.frustum[0].set(t[3]-t[0],t[7]-t[4],t[11]-t[8]).constant=t[15]-t[12],this.frustum[1].set(t[3]+t[0],t[7]+t[4],t[11]+t[8]).constant=t[15]+t[12],this.frustum[2].set(t[3]+t[1],t[7]+t[5],t[11]+t[9]).constant=t[15]+t[13],this.frustum[3].set(t[3]-t[1],t[7]-t[5],t[11]-t[9]).constant=t[15]-t[13],this.frustum[4].set(t[3]-t[2],t[7]-t[6],t[11]-t[10]).constant=t[15]-t[14],this.frustum[5].set(t[3]+t[2],t[7]+t[6],t[11]+t[10]).constant=t[15]+t[14];for(let t=0;t<6;t++){const e=1/this.frustum[t].distance();this.frustum[t].multiply(e),this.frustum[t].constant*=e}}frustumIntersectsMesh(t){if(!t.geometry.attributes.position)return!0;if(t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere(),!t.geometry.bounds)return!0;const e=h;e.copy(t.geometry.bounds.center),e.applyMatrix4(t.worldMatrix);const s=t.geometry.bounds.radius*t.worldMatrix.getMaxScaleOnAxis();return this.frustumIntersectsSphere(e,s)}frustumIntersectsSphere(t,e){const s=o;for(let r=0;r<6;r++){const i=this.frustum[r];if(s.copy(i).dot(t)+i.constant<-e)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,s)=>{s.r(e),s.d(e,{Geometry:()=>u});var r=s("./node_modules/ogl/src/math/Vec3.js"),i=s("./node_modules/console-browserify/index.js");const n=new r.Vec3;let a=1,h=1,o=!1;class u{constructor(t,e={}){t.canvas||i.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=a++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=h++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return i.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:s})=>{if(!this.attributes[e])return void i.warn(`active attribute ${e} not being supplied`);const r=this.attributes[e];this.gl.bindBuffer(r.target,r.buffer),this.glState.boundBuffer=r.buffer;let n=1;35674===s&&(n=2),35675===s&&(n=3),35676===s&&(n=4);const a=r.size/n,h=1===n?0:n*n*n,o=1===n?0:n*n;for(let e=0;e<n;e++)this.gl.vertexAttribPointer(t+e,a,r.type,r.normalized,r.stride+h,r.offset+e*o),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,r.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const s=this.attributes[e];s.needsUpdate&&this.updateAttribute(s)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:o?void 0:(i.warn("No position buffer data found to compute bounds"),o=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,s=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||(this.bounds={min:new r.Vec3,max:new r.Vec3,center:new r.Vec3,scale:new r.Vec3,radius:1/0});const i=this.bounds.min,n=this.bounds.max,a=this.bounds.center,h=this.bounds.scale;i.set(1/0),n.set(-1/0);for(let t=0,r=e.length;t<r;t+=s){const s=e[t],r=e[t+1],a=e[t+2];i.x=Math.min(s,i.x),i.y=Math.min(r,i.y),i.z=Math.min(a,i.z),n.x=Math.max(s,n.x),n.y=Math.max(r,n.y),n.z=Math.max(a,n.z)}h.sub(n,i),a.add(i,n).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,s=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||this.computeBoundingBox(t);let r=0;for(let t=0,i=e.length;t<i;t+=s)n.fromArray(e,t),r=Math.max(r,this.bounds.center.squaredDistance(n));this.bounds.radius=Math.sqrt(r)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Renderer.js":(t,e,s)=>{s.r(e),s.d(e,{Renderer:()=>h});var r=s("./node_modules/ogl/src/math/Vec3.js"),i=s("./node_modules/console-browserify/index.js");const n=new r.Vec3;let a=1;class h{constructor({canvas:t=document.createElement("canvas"),width:e=300,height:s=150,dpr:r=1,alpha:n=!1,depth:h=!0,stencil:o=!1,antialias:u=!1,premultipliedAlpha:l=!1,preserveDrawingBuffer:d=!1,powerPreference:c="default",autoClear:g=!0,webgl:f=2}={}){const p={alpha:n,depth:h,stencil:o,antialias:u,premultipliedAlpha:l,preserveDrawingBuffer:d,powerPreference:c};this.dpr=r,this.alpha=n,this.color=!0,this.depth=h,this.stencil=o,this.premultipliedAlpha=l,this.autoClear=g,this.id=a++,2===f&&(this.gl=t.getContext("webgl2",p)),this.isWebgl2=!!this.gl,this.gl||(this.gl=t.getContext("webgl",p)),this.gl||i.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(e,s),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(t,e){this.width=t,this.height=e,this.gl.canvas.width=t*this.dpr,this.gl.canvas.height=e*this.dpr,Object.assign(this.gl.canvas.style,{width:t+"px",height:e+"px"})}setViewport(t,e,s=0,r=0){this.state.viewport.width===t&&this.state.viewport.height===e||(this.state.viewport.width=t,this.state.viewport.height=e,this.state.viewport.x=s,this.state.viewport.y=r,this.gl.viewport(s,r,t,e))}setScissor(t,e,s=0,r=0){this.gl.scissor(s,r,t,e)}enable(t){!0!==this.state[t]&&(this.gl.enable(t),this.state[t]=!0)}disable(t){!1!==this.state[t]&&(this.gl.disable(t),this.state[t]=!1)}setBlendFunc(t,e,s,r){this.state.blendFunc.src===t&&this.state.blendFunc.dst===e&&this.state.blendFunc.srcAlpha===s&&this.state.blendFunc.dstAlpha===r||(this.state.blendFunc.src=t,this.state.blendFunc.dst=e,this.state.blendFunc.srcAlpha=s,this.state.blendFunc.dstAlpha=r,void 0!==s?this.gl.blendFuncSeparate(t,e,s,r):this.gl.blendFunc(t,e))}setBlendEquation(t,e){t=t||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===t&&this.state.blendEquation.modeAlpha===e||(this.state.blendEquation.modeRGB=t,this.state.blendEquation.modeAlpha=e,void 0!==e?this.gl.blendEquationSeparate(t,e):this.gl.blendEquation(t))}setCullFace(t){this.state.cullFace!==t&&(this.state.cullFace=t,this.gl.cullFace(t))}setFrontFace(t){this.state.frontFace!==t&&(this.state.frontFace=t,this.gl.frontFace(t))}setDepthMask(t){this.state.depthMask!==t&&(this.state.depthMask=t,this.gl.depthMask(t))}setDepthFunc(t){this.state.depthFunc!==t&&(this.state.depthFunc=t,this.gl.depthFunc(t))}activeTexture(t){this.state.activeTextureUnit!==t&&(this.state.activeTextureUnit=t,this.gl.activeTexture(this.gl.TEXTURE0+t))}bindFramebuffer({target:t=this.gl.FRAMEBUFFER,buffer:e=null}={}){this.state.framebuffer!==e&&(this.state.framebuffer=e,this.gl.bindFramebuffer(t,e))}getExtension(t,e,s){return e&&this.gl[e]?this.gl[e].bind(this.gl):(this.extensions[t]||(this.extensions[t]=this.gl.getExtension(t)),e?this.extensions[t]?this.extensions[t][s].bind(this.extensions[t]):null:this.extensions[t])}sortOpaque(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:t.zDepth!==e.zDepth?t.zDepth-e.zDepth:e.id-t.id}sortTransparent(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.zDepth!==e.zDepth?e.zDepth-t.zDepth:e.id-t.id}sortUI(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:e.id-t.id}getRenderList({scene:t,camera:e,frustumCull:s,sort:r}){let i=[];if(e&&s&&e.updateFrustum(),t.traverse((t=>{if(!t.visible)return!0;t.draw&&(s&&t.frustumCulled&&e&&!e.frustumIntersectsMesh(t)||i.push(t))})),r){const t=[],s=[],r=[];i.forEach((i=>{i.program.transparent?i.program.depthTest?s.push(i):r.push(i):t.push(i),i.zDepth=0,0===i.renderOrder&&i.program.depthTest&&e&&(i.worldMatrix.getTranslation(n),n.applyMatrix4(e.projectionViewMatrix),i.zDepth=n.z)})),t.sort(this.sortOpaque),s.sort(this.sortTransparent),r.sort(this.sortUI),i=t.concat(s,r)}return i}render({scene:t,camera:e,target:s=null,update:r=!0,sort:i=!0,frustumCull:n=!0,clear:a}){null===s?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(s),this.setViewport(s.width,s.height)),(a||this.autoClear&&!1!==a)&&(!this.depth||s&&!s.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),r&&t.updateMatrixWorld(),e&&e.updateMatrixWorld();this.getRenderList({scene:t,camera:e,frustumCull:n,sort:i}).forEach((t=>{t.draw({camera:e})}))}}},"./node_modules/ogl/src/core/Transform.js":(t,e,s)=>{s.r(e),s.d(e,{Transform:()=>h});var r=s("./node_modules/ogl/src/math/Vec3.js"),i=s("./node_modules/ogl/src/math/Quat.js"),n=s("./node_modules/ogl/src/math/Mat4.js"),a=s("./node_modules/ogl/src/math/Euler.js");class h{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new n.Mat4,this.worldMatrix=new n.Mat4,this.matrixAutoUpdate=!0,this.position=new r.Vec3,this.quaternion=new i.Quat,this.scale=new r.Vec3(1),this.rotation=new a.Euler,this.up=new r.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(t,e=!0){this.parent&&t!==this.parent&&this.parent.removeChild(this,!1),this.parent=t,e&&t&&t.addChild(this,!1)}addChild(t,e=!0){~this.children.indexOf(t)||this.children.push(t),e&&t.setParent(this,!1)}removeChild(t,e=!0){~this.children.indexOf(t)&&this.children.splice(this.children.indexOf(t),1),e&&t.setParent(null,!1)}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||t)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,t=!0);for(let e=0,s=this.children.length;e<s;e++)this.children[e].updateMatrixWorld(t)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(t){if(!t(this))for(let e=0,s=this.children.length;e<s;e++)this.children[e].traverse(t)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(t,e=!1){e?this.matrix.lookAt(this.position,t,this.up):this.matrix.lookAt(t,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Box.js":(t,e,s)=>{s.r(e),s.d(e,{Box:()=>n});var r=s("./node_modules/ogl/src/core/Geometry.js"),i=s("./node_modules/ogl/src/extras/Plane.js");class n extends r.Geometry{constructor(t,{width:e=1,height:s=1,depth:r=1,widthSegments:n=1,heightSegments:a=1,depthSegments:h=1,attributes:o={}}={}){const u=n,l=a,d=h,c=(u+1)*(l+1)*2+(u+1)*(d+1)*2+(l+1)*(d+1)*2,g=6*(u*l*2+u*d*2+l*d*2),f=new Float32Array(3*c),p=new Float32Array(3*c),m=new Float32Array(2*c),x=c>65536?new Uint32Array(g):new Uint16Array(g);let M=0,b=0;i.Plane.buildPlane(f,p,m,x,r,s,e,d,l,2,1,0,-1,-1,M,b),M+=(d+1)*(l+1),b+=d*l,i.Plane.buildPlane(f,p,m,x,r,s,-e,d,l,2,1,0,1,-1,M,b),M+=(d+1)*(l+1),b+=d*l,i.Plane.buildPlane(f,p,m,x,e,r,s,d,u,0,2,1,1,1,M,b),M+=(u+1)*(d+1),b+=u*d,i.Plane.buildPlane(f,p,m,x,e,r,-s,d,u,0,2,1,1,-1,M,b),M+=(u+1)*(d+1),b+=u*d,i.Plane.buildPlane(f,p,m,x,e,s,-r,u,l,0,1,2,-1,-1,M,b),M+=(u+1)*(l+1),b+=u*l,i.Plane.buildPlane(f,p,m,x,e,s,r,u,l,0,1,2,1,-1,M,b),Object.assign(o,{position:{size:3,data:f},normal:{size:3,data:p},uv:{size:2,data:m},index:{data:x}}),super(t,o)}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,s)=>{s.r(e),s.d(e,{Plane:()=>i});var r=s("./node_modules/ogl/src/core/Geometry.js");class i extends r.Geometry{constructor(t,{width:e=1,height:s=1,widthSegments:r=1,heightSegments:n=1,attributes:a={}}={}){const h=r,o=n,u=(h+1)*(o+1),l=h*o*6,d=new Float32Array(3*u),c=new Float32Array(3*u),g=new Float32Array(2*u),f=l>65536?new Uint32Array(l):new Uint16Array(l);i.buildPlane(d,c,g,f,e,s,0,h,o),Object.assign(a,{position:{size:3,data:d},normal:{size:3,data:c},uv:{size:2,data:g},index:{data:f}}),super(t,a)}static buildPlane(t,e,s,r,i,n,a,h,o,u=0,l=1,d=2,c=1,g=-1,f=0,p=0){const m=f,x=i/h,M=n/o;for(let b=0;b<=o;b++){let y=b*M-n/2;for(let n=0;n<=h;n++,f++){let M=n*x-i/2;if(t[3*f+u]=M*c,t[3*f+l]=y*g,t[3*f+d]=a/2,e[3*f+u]=0,e[3*f+l]=0,e[3*f+d]=a>=0?1:-1,s[2*f]=n/h,s[2*f+1]=1-b/o,b===o||n===h)continue;let w=m+n+b*(h+1),_=m+n+(b+1)*(h+1),E=m+n+(b+1)*(h+1)+1,A=m+n+b*(h+1)+1;r[6*p]=w,r[6*p+1]=_,r[6*p+2]=A,r[6*p+3]=_,r[6*p+4]=E,r[6*p+5]=A,p++}}}}},"./node_modules/ogl/src/math/Euler.js":(t,e,s)=>{s.r(e),s.d(e,{Euler:()=>n});var r=s("./node_modules/ogl/src/math/functions/EulerFunc.js");const i=new(s("./node_modules/ogl/src/math/Mat4.js").Mat4);class n extends Array{constructor(t=0,e=t,s=t,r="YXZ"){return super(t,e,s),this.order=r,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set(t,e=t,s=t){return t.length?this.copy(t):(this[0]=t,this[1]=e,this[2]=s,this.onChange(),this)}copy(t){return this[0]=t[0],this[1]=t[1],this[2]=t[2],this.onChange(),this}reorder(t){return this.order=t,this.onChange(),this}fromRotationMatrix(t,e=this.order){return r.fromRotationMatrix(this,t,e),this}fromQuaternion(t,e=this.order){return i.fromQuaternion(t),this.fromRotationMatrix(i,e)}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}}},"./node_modules/ogl/src/math/Mat4.js":(t,e,s)=>{s.r(e),s.d(e,{Mat4:()=>i});var r=s("./node_modules/ogl/src/math/functions/Mat4Func.js");class i extends Array{constructor(t=1,e=0,s=0,r=0,i=0,n=1,a=0,h=0,o=0,u=0,l=1,d=0,c=0,g=0,f=0,p=1){return super(t,e,s,r,i,n,a,h,o,u,l,d,c,g,f,p),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(t){this[12]=t}set y(t){this[13]=t}set z(t){this[14]=t}set w(t){this[15]=t}set(t,e,s,i,n,a,h,o,u,l,d,c,g,f,p,m){return t.length?this.copy(t):(r.set(this,t,e,s,i,n,a,h,o,u,l,d,c,g,f,p,m),this)}translate(t,e=this){return r.translate(this,e,t),this}rotate(t,e,s=this){return r.rotate(this,s,t,e),this}scale(t,e=this){return r.scale(this,e,"number"==typeof t?[t,t,t]:t),this}multiply(t,e){return e?r.multiply(this,t,e):r.multiply(this,this,t),this}identity(){return r.identity(this),this}copy(t){return r.copy(this,t),this}fromPerspective({fov:t,aspect:e,near:s,far:i}={}){return r.perspective(this,t,e,s,i),this}fromOrthogonal({left:t,right:e,bottom:s,top:i,near:n,far:a}){return r.ortho(this,t,e,s,i,n,a),this}fromQuaternion(t){return r.fromQuat(this,t),this}setPosition(t){return this.x=t[0],this.y=t[1],this.z=t[2],this}inverse(t=this){return r.invert(this,t),this}compose(t,e,s){return r.fromRotationTranslationScale(this,t,e,s),this}getRotation(t){return r.getRotation(t,this),this}getTranslation(t){return r.getTranslation(t,this),this}getScaling(t){return r.getScaling(t,this),this}getMaxScaleOnAxis(){return r.getMaxScaleOnAxis(this)}lookAt(t,e,s){return r.targetTo(this,t,e,s),this}determinant(){return r.determinant(this)}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this[4]=t[e+4],this[5]=t[e+5],this[6]=t[e+6],this[7]=t[e+7],this[8]=t[e+8],this[9]=t[e+9],this[10]=t[e+10],this[11]=t[e+11],this[12]=t[e+12],this[13]=t[e+13],this[14]=t[e+14],this[15]=t[e+15],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t[e+4]=this[4],t[e+5]=this[5],t[e+6]=this[6],t[e+7]=this[7],t[e+8]=this[8],t[e+9]=this[9],t[e+10]=this[10],t[e+11]=this[11],t[e+12]=this[12],t[e+13]=this[13],t[e+14]=this[14],t[e+15]=this[15],t}}},"./node_modules/ogl/src/math/Quat.js":(t,e,s)=>{s.r(e),s.d(e,{Quat:()=>i});var r=s("./node_modules/ogl/src/math/functions/QuatFunc.js");class i extends Array{constructor(t=0,e=0,s=0,r=1){return super(t,e,s,r),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set w(t){this[3]=t,this.onChange()}identity(){return r.identity(this),this.onChange(),this}set(t,e,s,i){return t.length?this.copy(t):(r.set(this,t,e,s,i),this.onChange(),this)}rotateX(t){return r.rotateX(this,this,t),this.onChange(),this}rotateY(t){return r.rotateY(this,this,t),this.onChange(),this}rotateZ(t){return r.rotateZ(this,this,t),this.onChange(),this}inverse(t=this){return r.invert(this,t),this.onChange(),this}conjugate(t=this){return r.conjugate(this,t),this.onChange(),this}copy(t){return r.copy(this,t),this.onChange(),this}normalize(t=this){return r.normalize(this,t),this.onChange(),this}multiply(t,e){return e?r.multiply(this,t,e):r.multiply(this,this,t),this.onChange(),this}dot(t){return r.dot(this,t)}fromMatrix3(t){return r.fromMat3(this,t),this.onChange(),this}fromEuler(t){return r.fromEuler(this,t,t.order),this}fromAxisAngle(t,e){return r.setAxisAngle(this,t,e),this}slerp(t,e){return r.slerp(this,this,t,e),this}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}},"./node_modules/ogl/src/math/Vec3.js":(t,e,s)=>{s.r(e),s.d(e,{Vec3:()=>i});var r=s("./node_modules/ogl/src/math/functions/Vec3Func.js");class i extends Array{constructor(t=0,e=t,s=t){return super(t,e,s),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,e=t,s=t){return t.length?this.copy(t):(r.set(this,t,e,s),this)}copy(t){return r.copy(this,t),this}add(t,e){return e?r.add(this,t,e):r.add(this,this,t),this}sub(t,e){return e?r.subtract(this,t,e):r.subtract(this,this,t),this}multiply(t){return t.length?r.multiply(this,this,t):r.scale(this,this,t),this}divide(t){return t.length?r.divide(this,this,t):r.scale(this,this,1/t),this}inverse(t=this){return r.inverse(this,t),this}len(){return r.length(this)}distance(t){return t?r.distance(this,t):r.length(this)}squaredLen(){return r.squaredLength(this)}squaredDistance(t){return t?r.squaredDistance(this,t):r.squaredLength(this)}negate(t=this){return r.negate(this,t),this}cross(t,e){return e?r.cross(this,t,e):r.cross(this,this,t),this}scale(t){return r.scale(this,this,t),this}normalize(){return r.normalize(this,this),this}dot(t){return r.dot(this,t)}equals(t){return r.exactEquals(this,t)}applyMatrix3(t){return r.transformMat3(this,this,t),this}applyMatrix4(t){return r.transformMat4(this,this,t),this}scaleRotateMatrix4(t){return r.scaleRotateMat4(this,this,t),this}applyQuaternion(t){return r.transformQuat(this,this,t),this}angle(t){return r.angle(this,t)}lerp(t,e){return r.lerp(this,this,t,e),this}clone(){return new i(this[0],this[1],this[2])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}transformDirection(t){const e=this[0],s=this[1],r=this[2];return this[0]=t[0]*e+t[4]*s+t[8]*r,this[1]=t[1]*e+t[5]*s+t[9]*r,this[2]=t[2]*e+t[6]*s+t[10]*r,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(t,e,s)=>{function r(t,e,s="YXZ"){return"XYZ"===s?(t[1]=Math.asin(Math.min(Math.max(e[8],-1),1)),Math.abs(e[8])<.99999?(t[0]=Math.atan2(-e[9],e[10]),t[2]=Math.atan2(-e[4],e[0])):(t[0]=Math.atan2(e[6],e[5]),t[2]=0)):"YXZ"===s?(t[0]=Math.asin(-Math.min(Math.max(e[9],-1),1)),Math.abs(e[9])<.99999?(t[1]=Math.atan2(e[8],e[10]),t[2]=Math.atan2(e[1],e[5])):(t[1]=Math.atan2(-e[2],e[0]),t[2]=0)):"ZXY"===s?(t[0]=Math.asin(Math.min(Math.max(e[6],-1),1)),Math.abs(e[6])<.99999?(t[1]=Math.atan2(-e[2],e[10]),t[2]=Math.atan2(-e[4],e[5])):(t[1]=0,t[2]=Math.atan2(e[1],e[0]))):"ZYX"===s?(t[1]=Math.asin(-Math.min(Math.max(e[2],-1),1)),Math.abs(e[2])<.99999?(t[0]=Math.atan2(e[6],e[10]),t[2]=Math.atan2(e[1],e[0])):(t[0]=0,t[2]=Math.atan2(-e[4],e[5]))):"YZX"===s?(t[2]=Math.asin(Math.min(Math.max(e[1],-1),1)),Math.abs(e[1])<.99999?(t[0]=Math.atan2(-e[9],e[5]),t[1]=Math.atan2(-e[2],e[0])):(t[0]=0,t[1]=Math.atan2(e[8],e[10]))):"XZY"===s&&(t[2]=Math.asin(-Math.min(Math.max(e[4],-1),1)),Math.abs(e[4])<.99999?(t[0]=Math.atan2(e[6],e[5]),t[1]=Math.atan2(e[8],e[0])):(t[0]=Math.atan2(-e[9],e[10]),t[1]=0)),t}s.r(e),s.d(e,{fromRotationMatrix:()=>r})},"./node_modules/ogl/src/math/functions/Mat4Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>_,copy:()=>r,determinant:()=>o,fromQuat:()=>M,fromRotationTranslationScale:()=>x,getMaxScaleOnAxis:()=>p,getRotation:()=>m,getScaling:()=>f,getTranslation:()=>g,identity:()=>n,invert:()=>h,multiply:()=>u,multiplyScalar:()=>A,ortho:()=>y,perspective:()=>b,rotate:()=>c,scale:()=>d,set:()=>i,subtract:()=>E,targetTo:()=>w,translate:()=>l,transpose:()=>a});function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function i(t,e,s,r,i,n,a,h,o,u,l,d,c,g,f,p,m){return t[0]=e,t[1]=s,t[2]=r,t[3]=i,t[4]=n,t[5]=a,t[6]=h,t[7]=o,t[8]=u,t[9]=l,t[10]=d,t[11]=c,t[12]=g,t[13]=f,t[14]=p,t[15]=m,t}function n(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function a(t,e){if(t===e){let s=e[1],r=e[2],i=e[3],n=e[6],a=e[7],h=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=s,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=n,t[11]=e[14],t[12]=i,t[13]=a,t[14]=h}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function h(t,e){let s=e[0],r=e[1],i=e[2],n=e[3],a=e[4],h=e[5],o=e[6],u=e[7],l=e[8],d=e[9],c=e[10],g=e[11],f=e[12],p=e[13],m=e[14],x=e[15],M=s*h-r*a,b=s*o-i*a,y=s*u-n*a,w=r*o-i*h,_=r*u-n*h,E=i*u-n*o,A=l*p-d*f,v=l*m-c*f,F=l*x-g*f,O=d*m-c*p,R=d*x-g*p,C=c*x-g*m,j=M*C-b*R+y*O+w*F-_*v+E*A;return j?(j=1/j,t[0]=(h*C-o*R+u*O)*j,t[1]=(i*R-r*C-n*O)*j,t[2]=(p*E-m*_+x*w)*j,t[3]=(c*_-d*E-g*w)*j,t[4]=(o*F-a*C-u*v)*j,t[5]=(s*C-i*F+n*v)*j,t[6]=(m*y-f*E-x*b)*j,t[7]=(l*E-c*y+g*b)*j,t[8]=(a*R-h*F+u*A)*j,t[9]=(r*F-s*R-n*A)*j,t[10]=(f*_-p*y+x*M)*j,t[11]=(d*y-l*_-g*M)*j,t[12]=(h*v-a*O-o*A)*j,t[13]=(s*O-r*v+i*A)*j,t[14]=(p*b-f*w-m*M)*j,t[15]=(l*w-d*b+c*M)*j,t):null}function o(t){let e=t[0],s=t[1],r=t[2],i=t[3],n=t[4],a=t[5],h=t[6],o=t[7],u=t[8],l=t[9],d=t[10],c=t[11],g=t[12],f=t[13],p=t[14],m=t[15];return(e*a-s*n)*(d*m-c*p)-(e*h-r*n)*(l*m-c*f)+(e*o-i*n)*(l*p-d*f)+(s*h-r*a)*(u*m-c*g)-(s*o-i*a)*(u*p-d*g)+(r*o-i*h)*(u*f-l*g)}function u(t,e,s){let r=e[0],i=e[1],n=e[2],a=e[3],h=e[4],o=e[5],u=e[6],l=e[7],d=e[8],c=e[9],g=e[10],f=e[11],p=e[12],m=e[13],x=e[14],M=e[15],b=s[0],y=s[1],w=s[2],_=s[3];return t[0]=b*r+y*h+w*d+_*p,t[1]=b*i+y*o+w*c+_*m,t[2]=b*n+y*u+w*g+_*x,t[3]=b*a+y*l+w*f+_*M,b=s[4],y=s[5],w=s[6],_=s[7],t[4]=b*r+y*h+w*d+_*p,t[5]=b*i+y*o+w*c+_*m,t[6]=b*n+y*u+w*g+_*x,t[7]=b*a+y*l+w*f+_*M,b=s[8],y=s[9],w=s[10],_=s[11],t[8]=b*r+y*h+w*d+_*p,t[9]=b*i+y*o+w*c+_*m,t[10]=b*n+y*u+w*g+_*x,t[11]=b*a+y*l+w*f+_*M,b=s[12],y=s[13],w=s[14],_=s[15],t[12]=b*r+y*h+w*d+_*p,t[13]=b*i+y*o+w*c+_*m,t[14]=b*n+y*u+w*g+_*x,t[15]=b*a+y*l+w*f+_*M,t}function l(t,e,s){let r,i,n,a,h,o,u,l,d,c,g,f,p=s[0],m=s[1],x=s[2];return e===t?(t[12]=e[0]*p+e[4]*m+e[8]*x+e[12],t[13]=e[1]*p+e[5]*m+e[9]*x+e[13],t[14]=e[2]*p+e[6]*m+e[10]*x+e[14],t[15]=e[3]*p+e[7]*m+e[11]*x+e[15]):(r=e[0],i=e[1],n=e[2],a=e[3],h=e[4],o=e[5],u=e[6],l=e[7],d=e[8],c=e[9],g=e[10],f=e[11],t[0]=r,t[1]=i,t[2]=n,t[3]=a,t[4]=h,t[5]=o,t[6]=u,t[7]=l,t[8]=d,t[9]=c,t[10]=g,t[11]=f,t[12]=r*p+h*m+d*x+e[12],t[13]=i*p+o*m+c*x+e[13],t[14]=n*p+u*m+g*x+e[14],t[15]=a*p+l*m+f*x+e[15]),t}function d(t,e,s){let r=s[0],i=s[1],n=s[2];return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function c(t,e,s,r){let i,n,a,h,o,u,l,d,c,g,f,p,m,x,M,b,y,w,_,E,A,v,F,O,R=r[0],C=r[1],j=r[2],T=Math.hypot(R,C,j);return Math.abs(T)<1e-6?null:(T=1/T,R*=T,C*=T,j*=T,i=Math.sin(s),n=Math.cos(s),a=1-n,h=e[0],o=e[1],u=e[2],l=e[3],d=e[4],c=e[5],g=e[6],f=e[7],p=e[8],m=e[9],x=e[10],M=e[11],b=R*R*a+n,y=C*R*a+j*i,w=j*R*a-C*i,_=R*C*a-j*i,E=C*C*a+n,A=j*C*a+R*i,v=R*j*a+C*i,F=C*j*a-R*i,O=j*j*a+n,t[0]=h*b+d*y+p*w,t[1]=o*b+c*y+m*w,t[2]=u*b+g*y+x*w,t[3]=l*b+f*y+M*w,t[4]=h*_+d*E+p*A,t[5]=o*_+c*E+m*A,t[6]=u*_+g*E+x*A,t[7]=l*_+f*E+M*A,t[8]=h*v+d*F+p*O,t[9]=o*v+c*F+m*O,t[10]=u*v+g*F+x*O,t[11]=l*v+f*F+M*O,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function g(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function f(t,e){let s=e[0],r=e[1],i=e[2],n=e[4],a=e[5],h=e[6],o=e[8],u=e[9],l=e[10];return t[0]=Math.hypot(s,r,i),t[1]=Math.hypot(n,a,h),t[2]=Math.hypot(o,u,l),t}function p(t){let e=t[0],s=t[1],r=t[2],i=t[4],n=t[5],a=t[6],h=t[8],o=t[9],u=t[10];const l=e*e+s*s+r*r,d=i*i+n*n+a*a,c=h*h+o*o+u*u;return Math.sqrt(Math.max(l,d,c))}const m=function(){const t=[0,0,0];return function(e,s){let r=t;f(r,s);let i=1/r[0],n=1/r[1],a=1/r[2],h=s[0]*i,o=s[1]*n,u=s[2]*a,l=s[4]*i,d=s[5]*n,c=s[6]*a,g=s[8]*i,p=s[9]*n,m=s[10]*a,x=h+d+m,M=0;return x>0?(M=2*Math.sqrt(x+1),e[3]=.25*M,e[0]=(c-p)/M,e[1]=(g-u)/M,e[2]=(o-l)/M):h>d&&h>m?(M=2*Math.sqrt(1+h-d-m),e[3]=(c-p)/M,e[0]=.25*M,e[1]=(o+l)/M,e[2]=(g+u)/M):d>m?(M=2*Math.sqrt(1+d-h-m),e[3]=(g-u)/M,e[0]=(o+l)/M,e[1]=.25*M,e[2]=(c+p)/M):(M=2*Math.sqrt(1+m-h-d),e[3]=(o-l)/M,e[0]=(g+u)/M,e[1]=(c+p)/M,e[2]=.25*M),e}}();function x(t,e,s,r){let i=e[0],n=e[1],a=e[2],h=e[3],o=i+i,u=n+n,l=a+a,d=i*o,c=i*u,g=i*l,f=n*u,p=n*l,m=a*l,x=h*o,M=h*u,b=h*l,y=r[0],w=r[1],_=r[2];return t[0]=(1-(f+m))*y,t[1]=(c+b)*y,t[2]=(g-M)*y,t[3]=0,t[4]=(c-b)*w,t[5]=(1-(d+m))*w,t[6]=(p+x)*w,t[7]=0,t[8]=(g+M)*_,t[9]=(p-x)*_,t[10]=(1-(d+f))*_,t[11]=0,t[12]=s[0],t[13]=s[1],t[14]=s[2],t[15]=1,t}function M(t,e){let s=e[0],r=e[1],i=e[2],n=e[3],a=s+s,h=r+r,o=i+i,u=s*a,l=r*a,d=r*h,c=i*a,g=i*h,f=i*o,p=n*a,m=n*h,x=n*o;return t[0]=1-d-f,t[1]=l+x,t[2]=c-m,t[3]=0,t[4]=l-x,t[5]=1-u-f,t[6]=g+p,t[7]=0,t[8]=c+m,t[9]=g-p,t[10]=1-u-d,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function b(t,e,s,r,i){let n=1/Math.tan(e/2),a=1/(r-i);return t[0]=n/s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(i+r)*a,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*i*r*a,t[15]=0,t}function y(t,e,s,r,i,n,a){let h=1/(e-s),o=1/(r-i),u=1/(n-a);return t[0]=-2*h,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*u,t[11]=0,t[12]=(e+s)*h,t[13]=(i+r)*o,t[14]=(a+n)*u,t[15]=1,t}function w(t,e,s,r){let i=e[0],n=e[1],a=e[2],h=r[0],o=r[1],u=r[2],l=i-s[0],d=n-s[1],c=a-s[2],g=l*l+d*d+c*c;0===g?c=1:(g=1/Math.sqrt(g),l*=g,d*=g,c*=g);let f=o*c-u*d,p=u*l-h*c,m=h*d-o*l;return g=f*f+p*p+m*m,0===g&&(u?h+=1e-6:o?u+=1e-6:o+=1e-6,f=o*c-u*d,p=u*l-h*c,m=h*d-o*l,g=f*f+p*p+m*m),g=1/Math.sqrt(g),f*=g,p*=g,m*=g,t[0]=f,t[1]=p,t[2]=m,t[3]=0,t[4]=d*m-c*p,t[5]=c*f-l*m,t[6]=l*p-d*f,t[7]=0,t[8]=l,t[9]=d,t[10]=c,t[11]=0,t[12]=i,t[13]=n,t[14]=a,t[15]=1,t}function _(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t[4]=e[4]+s[4],t[5]=e[5]+s[5],t[6]=e[6]+s[6],t[7]=e[7]+s[7],t[8]=e[8]+s[8],t[9]=e[9]+s[9],t[10]=e[10]+s[10],t[11]=e[11]+s[11],t[12]=e[12]+s[12],t[13]=e[13]+s[13],t[14]=e[14]+s[14],t[15]=e[15]+s[15],t}function E(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t[3]=e[3]-s[3],t[4]=e[4]-s[4],t[5]=e[5]-s[5],t[6]=e[6]-s[6],t[7]=e[7]-s[7],t[8]=e[8]-s[8],t[9]=e[9]-s[9],t[10]=e[10]-s[10],t[11]=e[11]-s[11],t[12]=e[12]-s[12],t[13]=e[13]-s[13],t[14]=e[14]-s[14],t[15]=e[15]-s[15],t}function A(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*s,t[9]=e[9]*s,t[10]=e[10]*s,t[11]=e[11]*s,t[12]=e[12]*s,t[13]=e[13]*s,t[14]=e[14]*s,t[15]=e[15]*s,t}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>x,conjugate:()=>c,copy:()=>p,dot:()=>b,fromEuler:()=>f,fromMat3:()=>g,identity:()=>i,invert:()=>d,length:()=>w,lerp:()=>y,multiply:()=>a,normalize:()=>_,rotateX:()=>h,rotateY:()=>o,rotateZ:()=>u,scale:()=>M,set:()=>m,setAxisAngle:()=>n,slerp:()=>l});var r=s("./node_modules/ogl/src/math/functions/Vec4Func.js");function i(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function n(t,e,s){s*=.5;let r=Math.sin(s);return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=Math.cos(s),t}function a(t,e,s){let r=e[0],i=e[1],n=e[2],a=e[3],h=s[0],o=s[1],u=s[2],l=s[3];return t[0]=r*l+a*h+i*u-n*o,t[1]=i*l+a*o+n*h-r*u,t[2]=n*l+a*u+r*o-i*h,t[3]=a*l-r*h-i*o-n*u,t}function h(t,e,s){s*=.5;let r=e[0],i=e[1],n=e[2],a=e[3],h=Math.sin(s),o=Math.cos(s);return t[0]=r*o+a*h,t[1]=i*o+n*h,t[2]=n*o-i*h,t[3]=a*o-r*h,t}function o(t,e,s){s*=.5;let r=e[0],i=e[1],n=e[2],a=e[3],h=Math.sin(s),o=Math.cos(s);return t[0]=r*o-n*h,t[1]=i*o+a*h,t[2]=n*o+r*h,t[3]=a*o-i*h,t}function u(t,e,s){s*=.5;let r=e[0],i=e[1],n=e[2],a=e[3],h=Math.sin(s),o=Math.cos(s);return t[0]=r*o+i*h,t[1]=i*o-r*h,t[2]=n*o+a*h,t[3]=a*o-n*h,t}function l(t,e,s,r){let i,n,a,h,o,u=e[0],l=e[1],d=e[2],c=e[3],g=s[0],f=s[1],p=s[2],m=s[3];return n=u*g+l*f+d*p+c*m,n<0&&(n=-n,g=-g,f=-f,p=-p,m=-m),1-n>1e-6?(i=Math.acos(n),a=Math.sin(i),h=Math.sin((1-r)*i)/a,o=Math.sin(r*i)/a):(h=1-r,o=r),t[0]=h*u+o*g,t[1]=h*l+o*f,t[2]=h*d+o*p,t[3]=h*c+o*m,t}function d(t,e){let s=e[0],r=e[1],i=e[2],n=e[3],a=s*s+r*r+i*i+n*n,h=a?1/a:0;return t[0]=-s*h,t[1]=-r*h,t[2]=-i*h,t[3]=n*h,t}function c(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function g(t,e){let s,r=e[0]+e[4]+e[8];if(r>0)s=Math.sqrt(r+1),t[3]=.5*s,s=.5/s,t[0]=(e[5]-e[7])*s,t[1]=(e[6]-e[2])*s,t[2]=(e[1]-e[3])*s;else{let r=0;e[4]>e[0]&&(r=1),e[8]>e[3*r+r]&&(r=2);let i=(r+1)%3,n=(r+2)%3;s=Math.sqrt(e[3*r+r]-e[3*i+i]-e[3*n+n]+1),t[r]=.5*s,s=.5/s,t[3]=(e[3*i+n]-e[3*n+i])*s,t[i]=(e[3*i+r]+e[3*r+i])*s,t[n]=(e[3*n+r]+e[3*r+n])*s}return t}function f(t,e,s="YXZ"){let r=Math.sin(.5*e[0]),i=Math.cos(.5*e[0]),n=Math.sin(.5*e[1]),a=Math.cos(.5*e[1]),h=Math.sin(.5*e[2]),o=Math.cos(.5*e[2]);return"XYZ"===s?(t[0]=r*a*o+i*n*h,t[1]=i*n*o-r*a*h,t[2]=i*a*h+r*n*o,t[3]=i*a*o-r*n*h):"YXZ"===s?(t[0]=r*a*o+i*n*h,t[1]=i*n*o-r*a*h,t[2]=i*a*h-r*n*o,t[3]=i*a*o+r*n*h):"ZXY"===s?(t[0]=r*a*o-i*n*h,t[1]=i*n*o+r*a*h,t[2]=i*a*h+r*n*o,t[3]=i*a*o-r*n*h):"ZYX"===s?(t[0]=r*a*o-i*n*h,t[1]=i*n*o+r*a*h,t[2]=i*a*h-r*n*o,t[3]=i*a*o+r*n*h):"YZX"===s?(t[0]=r*a*o+i*n*h,t[1]=i*n*o+r*a*h,t[2]=i*a*h-r*n*o,t[3]=i*a*o-r*n*h):"XZY"===s&&(t[0]=r*a*o-i*n*h,t[1]=i*n*o-r*a*h,t[2]=i*a*h+r*n*o,t[3]=i*a*o+r*n*h),t}const p=r.copy,m=r.set,x=r.add,M=r.scale,b=r.dot,y=r.lerp,w=r.length,_=r.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>a,angle:()=>A,copy:()=>i,cross:()=>M,distance:()=>d,divide:()=>u,dot:()=>x,exactEquals:()=>v,inverse:()=>p,length:()=>r,lerp:()=>b,multiply:()=>o,negate:()=>f,normalize:()=>m,scale:()=>l,scaleRotateMat4:()=>w,set:()=>n,squaredDistance:()=>c,squaredLength:()=>g,subtract:()=>h,transformMat3:()=>_,transformMat4:()=>y,transformQuat:()=>E});function r(t){let e=t[0],s=t[1],r=t[2];return Math.sqrt(e*e+s*s+r*r)}function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function n(t,e,s,r){return t[0]=e,t[1]=s,t[2]=r,t}function a(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t}function h(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t}function o(t,e,s){return t[0]=e[0]*s[0],t[1]=e[1]*s[1],t[2]=e[2]*s[2],t}function u(t,e,s){return t[0]=e[0]/s[0],t[1]=e[1]/s[1],t[2]=e[2]/s[2],t}function l(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}function d(t,e){let s=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return Math.sqrt(s*s+r*r+i*i)}function c(t,e){let s=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return s*s+r*r+i*i}function g(t){let e=t[0],s=t[1],r=t[2];return e*e+s*s+r*r}function f(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function p(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function m(t,e){let s=e[0],r=e[1],i=e[2],n=s*s+r*r+i*i;return n>0&&(n=1/Math.sqrt(n)),t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function x(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function M(t,e,s){let r=e[0],i=e[1],n=e[2],a=s[0],h=s[1],o=s[2];return t[0]=i*o-n*h,t[1]=n*a-r*o,t[2]=r*h-i*a,t}function b(t,e,s,r){let i=e[0],n=e[1],a=e[2];return t[0]=i+r*(s[0]-i),t[1]=n+r*(s[1]-n),t[2]=a+r*(s[2]-a),t}function y(t,e,s){let r=e[0],i=e[1],n=e[2],a=s[3]*r+s[7]*i+s[11]*n+s[15];return a=a||1,t[0]=(s[0]*r+s[4]*i+s[8]*n+s[12])/a,t[1]=(s[1]*r+s[5]*i+s[9]*n+s[13])/a,t[2]=(s[2]*r+s[6]*i+s[10]*n+s[14])/a,t}function w(t,e,s){let r=e[0],i=e[1],n=e[2],a=s[3]*r+s[7]*i+s[11]*n+s[15];return a=a||1,t[0]=(s[0]*r+s[4]*i+s[8]*n)/a,t[1]=(s[1]*r+s[5]*i+s[9]*n)/a,t[2]=(s[2]*r+s[6]*i+s[10]*n)/a,t}function _(t,e,s){let r=e[0],i=e[1],n=e[2];return t[0]=r*s[0]+i*s[3]+n*s[6],t[1]=r*s[1]+i*s[4]+n*s[7],t[2]=r*s[2]+i*s[5]+n*s[8],t}function E(t,e,s){let r=e[0],i=e[1],n=e[2],a=s[0],h=s[1],o=s[2],u=h*n-o*i,l=o*r-a*n,d=a*i-h*r,c=h*d-o*l,g=o*u-a*d,f=a*l-h*u,p=2*s[3];return u*=p,l*=p,d*=p,c*=2,g*=2,f*=2,t[0]=r+u+c,t[1]=i+l+g,t[2]=n+d+f,t}const A=function(){const t=[0,0,0],e=[0,0,0];return function(s,r){i(t,s),i(e,r),m(t,t),m(e,e);let n=x(t,e);return n>1?0:n<-1?Math.PI:Math.acos(n)}}();function v(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>n,copy:()=>r,dot:()=>u,length:()=>h,lerp:()=>l,normalize:()=>o,scale:()=>a,set:()=>i});function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function i(t,e,s,r,i){return t[0]=e,t[1]=s,t[2]=r,t[3]=i,t}function n(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t}function a(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t}function h(t){let e=t[0],s=t[1],r=t[2],i=t[3];return Math.sqrt(e*e+s*s+r*r+i*i)}function o(t,e){let s=e[0],r=e[1],i=e[2],n=e[3],a=s*s+r*r+i*i+n*n;return a>0&&(a=1/Math.sqrt(a)),t[0]=s*a,t[1]=r*a,t[2]=i*a,t[3]=n*a,t}function u(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function l(t,e,s,r){let i=e[0],n=e[1],a=e[2],h=e[3];return t[0]=i+r*(s[0]-i),t[1]=n+r*(s[1]-n),t[2]=a+r*(s[2]-a),t[3]=h+r*(s[3]-h),t}}},(function(t){t.h=()=>"58a54fbd8890a3a1a605"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,