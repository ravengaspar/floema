/*! For license information please see main.c20cf6cb554b79bce421.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateimmersive_website("main",{"./app/shaders/plane-fragment.glsl":(t,e,i)=>{i.r(e),i.d(e,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n}\n"},"./app/shaders/plane-vertex.glsl":(t,e,i)=>{i.r(e),i.d(e,{default:()=>s});const s="#define GLSLIFY 1\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"},"./app/components/Canvas/Home.js":(t,e,i)=>{i.r(e),i.d(e,{default:()=>o});var s=i("./app/components/Canvas/Media.js"),r=i("./node_modules/lodash/map.js"),a=i("./node_modules/gsap/index.js"),n=i("./node_modules/ogl/src/core/Transform.js"),h=i("./node_modules/ogl/src/extras/Plane.js");const o=class{constructor({gl:t,scene:e,sizes:i}){this.group=new n.Transform,this.gl=t,this.sizes=i,this.galleryElement=document.querySelector(".home__gallery"),this.mediasElements=document.querySelectorAll(".home__gallery__media__image"),this.createGeometry(),this.createGallery(),this.group.setParent(e),this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0}}createGeometry(){this.geometry=new h.Plane(this.gl)}createGallery(){this.medias=r(this.mediasElements,((t,e)=>new s.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}onResize(t){this.galleryBounds=this.galleryElement.getBoundingClientRect(),r(this.medias,(e=>e.onResize(t))),this.sizes=t.sizes,this.gallerySizes={height:this.galleryBounds.height/window.innerHeight*this.sizes.height,width:this.galleryBounds.width/window.innerWidth*this.sizes.width}}onTouchDown({x:t,y:e}){this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onTouchMove({x:t,y:e}){const i=t.start-t.end,s=e.start-e.end;this.x.target=this.scrollCurrent.x-i,this.y.target=this.scrollCurrent.y-s}onTouchUp({x:t,y:e}){}onWheel({pixelX:t,pixelY:e}){}update(){this.galleryBounds&&(this.x.current=a.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=a.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="right":this.scroll.x>this.x.current&&(this.x.direction="left"),this.scroll.y<this.y.current?this.y.direction="top":this.scroll.y>this.y.current&&(this.y.direction="bottom"),this.scroll.x=this.x.current,this.scroll.y=this.y.current,r(this.medias,((t,e)=>{const i=t.mesh.scale.x/2,s=t.mesh.scale.y/2;if("left"===this.x.direction){t.mesh.position.x+i<-this.sizes.width/2&&(t.extra.x+=this.gallerySizes.width,t.mesh.rotation.z=a.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("right"===this.x.direction){t.mesh.position.x-i>this.sizes.width/2&&(t.extra.x-=this.gallerySizes.width,t.mesh.rotation.z=a.default.utils.random(.03*-Math.PI,.03*Math.PI))}if("top"===this.y.direction){t.mesh.position.y-s<-this.sizes.width/2&&(t.extra.y+=this.gallerySizes.height,t.mesh.rotation.z=a.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("bottom"===this.y.direction){t.mesh.position.y+s>this.sizes.width/2&&(t.extra.y-=this.gallerySizes.height,t.mesh.rotation.z=a.default.utils.random(.03*-Math.PI,.03*Math.PI))}t.update(this.scroll)})))}}},"./app/components/Canvas/Media.js":(t,e,i)=>{i.r(e),i.d(e,{default:()=>l});var s=i("./node_modules/ogl/src/core/Texture.js"),r=i("./node_modules/ogl/src/core/Program.js"),a=i("./node_modules/ogl/src/core/Mesh.js"),n=i("./node_modules/gsap/index.js"),h=i("./app/shaders/plane-fragment.glsl"),o=i("./app/shaders/plane-vertex.glsl");const l=class{constructor({element:t,geometry:e,gl:i,index:s,scene:r,sizes:a}){this.element=t,this.geometry=e,this.gl=i,this.scene=r,this.index=s,this.sizes=a,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){this.texture=new s.Texture(this.gl),this.image=new window.Image,this.image.crossOrigin="anonymous",this.image.src=this.element.getAttribute("data-src"),this.image.onload=t=>this.texture.image=this.image}createProgram(){this.program=new r.Program(this.gl,{fragment:h.default,vertex:o.default,uniforms:{tMap:{value:this.texture}}})}createMesh(){this.mesh=new a.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.rotation.z=n.default.utils.random(.03*-Math.PI,.03*Math.PI)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(t),this.updateX(),this.updateY()}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(t){this.bounds&&(this.updateX(t.x),this.updateY(t.y))}onResize(t){this.createBounds(t)}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,i)=>{i.r(e),i.d(e,{Geometry:()=>l});var s=i("./node_modules/ogl/src/math/Vec3.js"),r=i("./node_modules/console-browserify/index.js");const a=new s.Vec3;let n=1,h=1,o=!1;class l{constructor(t,e={}){t.canvas||r.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=n++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=h++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return r.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:i})=>{if(!this.attributes[e])return void r.warn(`active attribute ${e} not being supplied`);const s=this.attributes[e];this.gl.bindBuffer(s.target,s.buffer),this.glState.boundBuffer=s.buffer;let a=1;35674===i&&(a=2),35675===i&&(a=3),35676===i&&(a=4);const n=s.size/a,h=1===a?0:a*a*a,o=1===a?0:a*a;for(let e=0;e<a;e++)this.gl.vertexAttribPointer(t+e,n,s.type,s.normalized,s.stride+h,s.offset+e*o),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,s.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const i=this.attributes[e];i.needsUpdate&&this.updateAttribute(i)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:o?void 0:(r.warn("No position buffer data found to compute bounds"),o=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,i=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||(this.bounds={min:new s.Vec3,max:new s.Vec3,center:new s.Vec3,scale:new s.Vec3,radius:1/0});const r=this.bounds.min,a=this.bounds.max,n=this.bounds.center,h=this.bounds.scale;r.set(1/0),a.set(-1/0);for(let t=0,s=e.length;t<s;t+=i){const i=e[t],s=e[t+1],n=e[t+2];r.x=Math.min(i,r.x),r.y=Math.min(s,r.y),r.z=Math.min(n,r.z),a.x=Math.max(i,a.x),a.y=Math.max(s,a.y),a.z=Math.max(n,a.z)}h.sub(a,r),n.add(r,a).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,i=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||this.computeBoundingBox(t);let s=0;for(let t=0,r=e.length;t<r;t+=i)a.fromArray(e,t),s=Math.max(s,this.bounds.center.squaredDistance(a));this.bounds.radius=Math.sqrt(s)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,i)=>{i.r(e),i.d(e,{Mesh:()=>o});var s=i("./node_modules/ogl/src/core/Transform.js"),r=i("./node_modules/ogl/src/math/Mat3.js"),a=i("./node_modules/ogl/src/math/Mat4.js"),n=i("./node_modules/console-browserify/index.js");let h=0;class o extends s.Transform{constructor(t,{geometry:e,program:i,mode:s=t.TRIANGLES,frustumCulled:o=!0,renderOrder:l=0}={}){super(),t.canvas||n.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=h++,this.geometry=e,this.program=i,this.mode=s,this.frustumCulled=o,this.renderOrder=l,this.modelViewMatrix=new a.Mat4,this.normalMatrix=new r.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t}))),t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,i)=>{i.r(e),i.d(e,{Program:()=>n});var s=i("./node_modules/console-browserify/index.js");let r=1;const a={};class n{constructor(t,{vertex:e,fragment:i,uniforms:a={},transparent:n=!1,cullFace:h=t.BACK,frontFace:l=t.CCW,depthTest:u=!0,depthWrite:d=!0,depthFunc:g=t.LESS}={}){t.canvas||s.error("gl not passed as fist argument to Program"),this.gl=t,this.uniforms=a,this.id=r++,e||s.warn("vertex shader not supplied"),i||s.warn("fragment shader not supplied"),this.transparent=n,this.cullFace=h,this.frontFace=l,this.depthTest=u,this.depthWrite=d,this.depthFunc=g,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const c=t.createShader(t.VERTEX_SHADER);t.shaderSource(c,e),t.compileShader(c),""!==t.getShaderInfoLog(c)&&s.warn(`${t.getShaderInfoLog(c)}\nVertex Shader\n${o(e)}`);const m=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(m,i),t.compileShader(m),""!==t.getShaderInfoLog(m)&&s.warn(`${t.getShaderInfoLog(m)}\nFragment Shader\n${o(i)}`),this.program=t.createProgram(),t.attachShader(this.program,c),t.attachShader(this.program,m),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return s.warn(t.getProgramInfoLog(this.program));t.deleteShader(c),t.deleteShader(m),this.uniformLocations=new Map;let p=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<p;e++){let i=t.getActiveUniform(this.program,e);this.uniformLocations.set(i,t.getUniformLocation(this.program,i.name));const s=i.name.match(/(\w+)/g);i.uniformName=s[0],3===s.length?(i.isStructArray=!0,i.structIndex=Number(s[1]),i.structProperty=s[2]):2===s.length&&isNaN(Number(s[1]))&&(i.isStruct=!0,i.structProperty=s[1])}this.attributeLocations=new Map;const f=[],x=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<x;e++){const i=t.getActiveAttrib(this.program,e),s=t.getAttribLocation(this.program,i.name);-1!==s&&(f[s]=i.name,this.attributeLocations.set(i,s))}this.attributeOrder=f.join("")}setBlendFunc(t,e,i,s){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=i,this.blendFunc.dstAlpha=s,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,i)=>{let s=i.uniformName,r=this.uniforms[s];if(i.isStruct&&(r=r[i.structProperty],s+=`.${i.structProperty}`),i.isStructArray&&(r=r[i.structIndex][i.structProperty],s+=`[${i.structIndex}].${i.structProperty}`),!r)return u(`Active uniform ${s} has not been supplied`);if(r&&void 0===r.value)return u(`${s} uniform is missing a value parameter`);if(r.value.texture)return e+=1,r.value.update(e),h(this.gl,i.type,t,e);if(r.value.length&&r.value[0].texture){const s=[];return r.value.forEach((t=>{e+=1,t.update(e),s.push(e)})),h(this.gl,i.type,t,s)}h(this.gl,i.type,t,r.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function h(t,e,i,s){s=s.length?function(t){const e=t.length,i=t[0].length;if(void 0===i)return t;const s=e*i;let r=a[s];r||(a[s]=r=new Float32Array(s));for(let s=0;s<e;s++)r.set(t[s],s*i);return r}(s):s;const r=t.renderer.state.uniformLocations.get(i);if(s.length)if(void 0===r||r.length!==s.length)t.renderer.state.uniformLocations.set(i,s.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let i=0,s=t.length;i<s;i++)if(t[i]!==e[i])return!1;return!0}(r,s))return;r.set?r.set(s):function(t,e){for(let i=0,s=t.length;i<s;i++)t[i]=e[i]}(r,s),t.renderer.state.uniformLocations.set(i,r)}else{if(r===s)return;t.renderer.state.uniformLocations.set(i,s)}switch(e){case 5126:return s.length?t.uniform1fv(i,s):t.uniform1f(i,s);case 35664:return t.uniform2fv(i,s);case 35665:return t.uniform3fv(i,s);case 35666:return t.uniform4fv(i,s);case 35670:case 5124:case 35678:case 35680:return s.length?t.uniform1iv(i,s):t.uniform1i(i,s);case 35671:case 35667:return t.uniform2iv(i,s);case 35672:case 35668:return t.uniform3iv(i,s);case 35673:case 35669:return t.uniform4iv(i,s);case 35674:return t.uniformMatrix2fv(i,!1,s);case 35675:return t.uniformMatrix3fv(i,!1,s);case 35676:return t.uniformMatrix4fv(i,!1,s)}}function o(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let l=0;function u(t){l>100||(s.warn(t),l++,l>100&&s.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Texture.js":(t,e,i)=>{i.r(e),i.d(e,{Texture:()=>n});const s=new Uint8Array(4);function r(t){return 0==(t&t-1)}let a=1;class n{constructor(t,{image:e,target:i=t.TEXTURE_2D,type:s=t.UNSIGNED_BYTE,format:r=t.RGBA,internalFormat:n=r,wrapS:h=t.CLAMP_TO_EDGE,wrapT:o=t.CLAMP_TO_EDGE,generateMipmaps:l=!0,minFilter:u=(l?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:d=t.LINEAR,premultiplyAlpha:g=!1,unpackAlignment:c=4,flipY:m=i==t.TEXTURE_2D,anisotropy:p=0,level:f=0,width:x,height:y=x}={}){this.gl=t,this.id=a++,this.image=e,this.target=i,this.type=s,this.format=r,this.internalFormat=n,this.minFilter=u,this.magFilter=d,this.wrapS=h,this.wrapT=o,this.generateMipmaps=l,this.premultiplyAlpha=g,this.unpackAlignment=c,this.flipY=m,this.anisotropy=Math.min(p,this.gl.renderer.parameters.maxAnisotropy),this.level=f,this.width=x,this.height=y,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||r(this.image.width)&&r(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);this.store.image=this.image}}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,i)=>{i.r(e),i.d(e,{Plane:()=>r});var s=i("./node_modules/ogl/src/core/Geometry.js");class r extends s.Geometry{constructor(t,{width:e=1,height:i=1,widthSegments:s=1,heightSegments:a=1,attributes:n={}}={}){const h=s,o=a,l=(h+1)*(o+1),u=h*o*6,d=new Float32Array(3*l),g=new Float32Array(3*l),c=new Float32Array(2*l),m=u>65536?new Uint32Array(u):new Uint16Array(u);r.buildPlane(d,g,c,m,e,i,0,h,o),Object.assign(n,{position:{size:3,data:d},normal:{size:3,data:g},uv:{size:2,data:c},index:{data:m}}),super(t,n)}static buildPlane(t,e,i,s,r,a,n,h,o,l=0,u=1,d=2,g=1,c=-1,m=0,p=0){const f=m,x=r/h,y=a/o;for(let b=0;b<=o;b++){let w=b*y-a/2;for(let a=0;a<=h;a++,m++){let y=a*x-r/2;if(t[3*m+l]=y*g,t[3*m+u]=w*c,t[3*m+d]=n/2,e[3*m+l]=0,e[3*m+u]=0,e[3*m+d]=n>=0?1:-1,i[2*m]=a/h,i[2*m+1]=1-b/o,b===o||a===h)continue;let A=f+a+b*(h+1),E=f+a+(b+1)*(h+1),M=f+a+(b+1)*(h+1)+1,_=f+a+b*(h+1)+1;s[6*p]=A,s[6*p+1]=E,s[6*p+2]=_,s[6*p+3]=E,s[6*p+4]=M,s[6*p+5]=_,p++}}}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,i)=>{i.r(e),i.d(e,{Mat3:()=>r});var s=i("./node_modules/ogl/src/math/functions/Mat3Func.js");class r extends Array{constructor(t=1,e=0,i=0,s=0,r=1,a=0,n=0,h=0,o=1){return super(t,e,i,s,r,a,n,h,o),this}set(t,e,i,r,a,n,h,o,l){return t.length?this.copy(t):(s.set(this,t,e,i,r,a,n,h,o,l),this)}translate(t,e=this){return s.translate(this,e,t),this}rotate(t,e=this){return s.rotate(this,e,t),this}scale(t,e=this){return s.scale(this,e,t),this}multiply(t,e){return e?s.multiply(this,t,e):s.multiply(this,this,t),this}identity(){return s.identity(this),this}copy(t){return s.copy(this,t),this}fromMatrix4(t){return s.fromMat4(this,t),this}fromQuaternion(t){return s.fromQuat(this,t),this}fromBasis(t,e,i){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],i[0],i[1],i[2]),this}inverse(t=this){return s.invert(this,t),this}getNormalMatrix(t){return s.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,i)=>{i.r(e),i.d(e,{add:()=>x,copy:()=>a,determinant:()=>u,fromMat4:()=>s,fromQuat:()=>r,identity:()=>h,invert:()=>l,multiply:()=>d,multiplyScalar:()=>b,normalFromMat4:()=>p,projection:()=>f,rotate:()=>c,scale:()=>m,set:()=>n,subtract:()=>y,translate:()=>g,transpose:()=>o});function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function r(t,e){let i=e[0],s=e[1],r=e[2],a=e[3],n=i+i,h=s+s,o=r+r,l=i*n,u=s*n,d=s*h,g=r*n,c=r*h,m=r*o,p=a*n,f=a*h,x=a*o;return t[0]=1-d-m,t[3]=u-x,t[6]=g+f,t[1]=u+x,t[4]=1-l-m,t[7]=c-p,t[2]=g-f,t[5]=c+p,t[8]=1-l-d,t}function a(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function n(t,e,i,s,r,a,n,h,o,l){return t[0]=e,t[1]=i,t[2]=s,t[3]=r,t[4]=a,t[5]=n,t[6]=h,t[7]=o,t[8]=l,t}function h(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function o(t,e){if(t===e){let i=e[1],s=e[2],r=e[5];t[1]=e[3],t[2]=e[6],t[3]=i,t[5]=e[7],t[6]=s,t[7]=r}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function l(t,e){let i=e[0],s=e[1],r=e[2],a=e[3],n=e[4],h=e[5],o=e[6],l=e[7],u=e[8],d=u*n-h*l,g=-u*a+h*o,c=l*a-n*o,m=i*d+s*g+r*c;return m?(m=1/m,t[0]=d*m,t[1]=(-u*s+r*l)*m,t[2]=(h*s-r*n)*m,t[3]=g*m,t[4]=(u*i-r*o)*m,t[5]=(-h*i+r*a)*m,t[6]=c*m,t[7]=(-l*i+s*o)*m,t[8]=(n*i-s*a)*m,t):null}function u(t){let e=t[0],i=t[1],s=t[2],r=t[3],a=t[4],n=t[5],h=t[6],o=t[7],l=t[8];return e*(l*a-n*o)+i*(-l*r+n*h)+s*(o*r-a*h)}function d(t,e,i){let s=e[0],r=e[1],a=e[2],n=e[3],h=e[4],o=e[5],l=e[6],u=e[7],d=e[8],g=i[0],c=i[1],m=i[2],p=i[3],f=i[4],x=i[5],y=i[6],b=i[7],w=i[8];return t[0]=g*s+c*n+m*l,t[1]=g*r+c*h+m*u,t[2]=g*a+c*o+m*d,t[3]=p*s+f*n+x*l,t[4]=p*r+f*h+x*u,t[5]=p*a+f*o+x*d,t[6]=y*s+b*n+w*l,t[7]=y*r+b*h+w*u,t[8]=y*a+b*o+w*d,t}function g(t,e,i){let s=e[0],r=e[1],a=e[2],n=e[3],h=e[4],o=e[5],l=e[6],u=e[7],d=e[8],g=i[0],c=i[1];return t[0]=s,t[1]=r,t[2]=a,t[3]=n,t[4]=h,t[5]=o,t[6]=g*s+c*n+l,t[7]=g*r+c*h+u,t[8]=g*a+c*o+d,t}function c(t,e,i){let s=e[0],r=e[1],a=e[2],n=e[3],h=e[4],o=e[5],l=e[6],u=e[7],d=e[8],g=Math.sin(i),c=Math.cos(i);return t[0]=c*s+g*n,t[1]=c*r+g*h,t[2]=c*a+g*o,t[3]=c*n-g*s,t[4]=c*h-g*r,t[5]=c*o-g*a,t[6]=l,t[7]=u,t[8]=d,t}function m(t,e,i){let s=i[0],r=i[1];return t[0]=s*e[0],t[1]=s*e[1],t[2]=s*e[2],t[3]=r*e[3],t[4]=r*e[4],t[5]=r*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function p(t,e){let i=e[0],s=e[1],r=e[2],a=e[3],n=e[4],h=e[5],o=e[6],l=e[7],u=e[8],d=e[9],g=e[10],c=e[11],m=e[12],p=e[13],f=e[14],x=e[15],y=i*h-s*n,b=i*o-r*n,w=i*l-a*n,A=s*o-r*h,E=s*l-a*h,M=r*l-a*o,_=u*p-d*m,v=u*f-g*m,T=u*x-c*m,S=d*f-g*p,P=d*x-c*p,F=g*x-c*f,R=y*F-b*P+w*S+A*T-E*v+M*_;return R?(R=1/R,t[0]=(h*F-o*P+l*S)*R,t[1]=(o*T-n*F-l*v)*R,t[2]=(n*P-h*T+l*_)*R,t[3]=(r*P-s*F-a*S)*R,t[4]=(i*F-r*T+a*v)*R,t[5]=(s*T-i*P-a*_)*R,t[6]=(p*M-f*E+x*A)*R,t[7]=(f*w-m*M-x*b)*R,t[8]=(m*E-p*w+x*y)*R,t):null}function f(t,e,i){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/i,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function x(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t[8]=e[8]+i[8],t}function y(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t[6]=e[6]-i[6],t[7]=e[7]-i[7],t[8]=e[8]-i[8],t}function b(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*i,t}}},(function(t){t.h=()=>"6e06da3a75a6427fa18d"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,