/*! For license information please see main.30678b3c5f3dafef9276.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefloema("main",{"./app/shaders/collections-fragment.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec4 vPosition;\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n  gl_FragColor.a = (1.0 - abs(vPosition.x * 0.5)) * uAlpha;\n}\n"},"./app/shaders/collections-vertex.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="#define GLSLIFY 1\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec4 vPosition;\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n  vPosition = newPosition;\n  gl_Position = projectionMatrix * newPosition;\n}\n"},"./app/shaders/home-fragment.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n\n    gl_FragColor = texture;\n    gl_FragColor.a = uAlpha;\n}\n"},"./app/shaders/home-vertex.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="#define GLSLIFY 1\n#define PI 3.1415926535897932384626433832795\n\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform float uSpeed;\nuniform vec2 uViewportSizes;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n\n    vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n    newPosition.z -= (sin(newPosition.y / uViewportSizes.y * PI + PI / 2.0) + sin(newPosition.x / uViewportSizes.x * PI + PI / 2.0)) * abs(uSpeed);\n\n    gl_Position = projectionMatrix * newPosition;\n}\n"},"./app/shaders/plane-fragment.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n  gl_FragColor.a = uAlpha;\n}\n"},"./app/shaders/plane-vertex.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="#define GLSLIFY 1\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"},"./app/components/Canvas/About/Gallery.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>a});var i=s("./node_modules/gsap/index.js"),r=s("./node_modules/ogl/src/core/Transform.js"),n=s("./node_modules/lodash/map.js"),h=s("./app/components/Canvas/About/Media.js");class a{constructor({element:t,geometry:e,index:s,gl:i,scene:n,sizes:h}){this.element=t,this.elementsWrapper=t.querySelector(".about__gallery__wrapper"),this.geometry=e,this.index=s,this.gl=i,this.scene=n,this.sizes=h,this.group=new r.Transform,this.scroll={current:0,target:0,start:0,lerp:.1,velocity:1},this.createMedias(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene)}createMedias(){this.mediasElements=this.element.querySelectorAll(".about__gallery__media"),this.medias=n(this.mediasElements,((t,e)=>new h.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){n(this.medias,(t=>t.show()))}hide(){n(this.medias,(t=>t.hide()))}onResize(t){this.bounds=this.elementsWrapper.getBoundingClientRect(),this.sizes=t.sizes,this.width=this.bounds.width/window.innerWidth*this.sizes.width,this.scroll.current=this.scroll.target=0,n(this.medias,(e=>e.onResize(t,this.scroll.current)))}onTouchDown({x:t,y:e}){this.scroll.start=this.scroll.current}onTouchMove({x:t,y:e}){const s=t.start-t.end;this.scroll.target=this.scroll.start-s}onTouchUp({x:t,y:e}){}update(t){const e=.1*(t.current-t.target),s=t.current/window.innerHeight;this.scroll.current<this.scroll.target?(this.direction="right",this.scroll.velocity=-1):this.scroll.current>this.scroll.target&&(this.direction="left",this.scroll.velocity=1),this.scroll.target-=this.scroll.velocity,this.scroll.target+=e,this.scroll.current=i.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),n(this.medias,((t,e)=>{const s=t.mesh.scale.x/2+.25;if("left"===this.direction){t.mesh.position.x+s<-this.sizes.width/2&&(t.extra+=this.width)}else if("right"===this.direction){t.mesh.position.x-s>this.sizes.width/2&&(t.extra-=this.width)}t.update(this.scroll.current)})),this.group.position.y=s*this.sizes.height}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/About/Media.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/ogl/src/core/Program.js"),r=s("./node_modules/ogl/src/core/Mesh.js"),n=s("./node_modules/gsap/index.js"),h=s("./app/shaders/plane-fragment.glsl"),a=s("./app/shaders/plane-vertex.glsl");const o=class{constructor({element:t,geometry:e,gl:s,index:i,scene:r,sizes:n}){this.element=t,this.geometry=e,this.gl=s,this.scene=r,this.index=i,this.sizes=n,this.extra={x:0,y:0},this.createTexture(),this.createProgram(),this.createMesh()}createTexture(){const t=this.element.querySelector("img");this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new i.Program(this.gl,{fragment:h.default,vertex:a.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new r.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){n.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){n.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(t,e){this.extra=0,this.createBounds(t),this.updateX(e),this.updateY(0)}updateRotation(){this.mesh.rotation.z=n.default.utils.mapRange(-this.sizes.width/2,this.sizes.width/2,.1*Math.PI,.1*-Math.PI,this.mesh.position.x)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height;const t=n.default.utils.mapRange(0,this.sizes.width/2,.1,0,Math.abs(this.mesh.position.x));this.mesh.scale.x+=t,this.mesh.scale.y+=t}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height,this.mesh.position.y+=40*Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.1)-40}update(t){this.bounds&&(this.updateRotation(),this.updateScale(),this.updateX(t),this.updateY(0))}}},"./app/components/Canvas/About/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>a});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/extras/Plane.js"),n=s("./node_modules/lodash/map.js"),h=s("./app/components/Canvas/About/Gallery.js");const a=class{constructor({gl:t,scene:e,sizes:s}){this.gl=t,this.sizes=s,this.group=new i.Transform,this.createGeometry(),this.createGalleries(),this.group.setParent(e),this.show()}createGeometry(){this.geometry=new r.Plane(this.gl)}createGalleries(){this.galleriesElements=document.querySelectorAll(".about__gallery"),this.galleries=n(this.galleriesElements,((t,e)=>new h.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){n(this.galleries,(t=>t.show()))}hide(){n(this.galleries,(t=>t.hide()))}onResize(t){n(this.galleries,(e=>e.onResize(t)))}onTouchDown(t){n(this.galleries,(e=>e.onTouchDown(t)))}onTouchMove(t){n(this.galleries,(e=>e.onTouchMove(t)))}onTouchUp(t){n(this.galleries,(e=>e.onTouchUp(t)))}onWheel({pixelX:t,pixelY:e}){}update(t){n(this.galleries,(e=>e.update(t)))}destroy(){n(this.galleries,(t=>t.destroy()))}}},"./app/components/Canvas/Collections/Media.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/ogl/src/core/Program.js"),r=s("./node_modules/ogl/src/core/Mesh.js"),n=s("./node_modules/gsap/index.js"),h=s("./app/shaders/collections-fragment.glsl"),a=s("./app/shaders/collections-vertex.glsl");const o=class{constructor({element:t,geometry:e,gl:s,index:i,scene:r,sizes:n}){this.element=t,this.geometry=e,this.gl=s,this.scene=r,this.index=i,this.sizes=n,this.extra={x:0,y:0},this.opacity={current:0,target:0,lerp:.1,multiplier:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const t=this.element.querySelector(".collections__gallery__media__image");this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new i.Program(this.gl,{fragment:h.default,vertex:a.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new r.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(t),this.updateX(),this.updateY()}show(){n.default.fromTo(this.opacity,{multiplier:0},{multiplier:1})}hide(){n.default.to(this.opacity,{multiplier:0})}onResize(t,e){this.extra={x:0,y:0},this.createBounds(t),this.updateX(e&&e.x),this.updateY(e&&e.y)}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2+this.mesh.scale.y/2+this.y*this.sizes.height+this.extra.y}update(t,e){this.bounds&&(this.updateX(t),this.updateY(),this.program.uniforms.uAlpha.value=this.opacity.multiplier)}}},"./app/components/Canvas/Collections/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>l});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/extras/Plane.js"),n=s("./node_modules/gsap/index.js"),h=s("./node_modules/prefix/index.js"),a=s("./node_modules/lodash/map.js"),o=s("./app/components/Canvas/Collections/Media.js");const l=class{constructor({gl:t,scene:e,sizes:s,transition:r}){this.gl=t,this.sizes=s,this.scene=e,this.transition=r,this.transfromPrefix=h("transform"),this.group=new i.Transform,this.galleryElement=document.querySelector(".collections__gallery"),this.galleryWrapperElement=document.querySelector(".collections__gallery__wrapper"),this.titlesElement=document.querySelector(".collections__titles"),this.collectionsElements=document.querySelectorAll(".collections__article"),this.collectionsElementsActive="collections__article--active",this.mediasElements=document.querySelectorAll(".collections__gallery__media"),this.scroll={current:0,start:0,target:0,lerp:.1,velocity:1},this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new r.Plane(this.gl)}createGallery(){this.medias=a(this.mediasElements,((t,e)=>new o.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}async show(){if(this.transition){const{src:t}=this.transition.mesh.program.uniforms.tMap.value.image,e=window.TEXTURES[t],s=this.medias.find((t=>t.texture===e)),i=-s.bounds.left-s.bounds.width/2+window.innerWidth/2;this.update(),this.transition.animate({position:{x:0,y:s.mesh.position.y,z:0},rotation:s.mesh.rotation,scale:s.mesh.scale},(t=>{s.opacity.multiplier=1,a(this.medias,(t=>{s!==t&&t.show()})),this.scroll.current=this.scroll.target=this.scroll.start=this.scroll.last=i}))}else a(this.medias,(t=>t.show()))}hide(){a(this.medias,(t=>t.hide()))}onResize(t){this.sizes=t.sizes,this.bounds=this.galleryWrapperElement.getBoundingClientRect(),this.scroll.last=this.scroll.target=0,a(this.medias,(e=>e.onResize(t,this.scroll))),this.scroll.limit=this.bounds.width-this.medias[0].element.clientWidth}onTouchDown({x:t,y:e}){this.scroll.last=this.scroll.current}onTouchMove({x:t,y:e}){const s=t.start-t.end;this.scroll.target=this.scroll.last-s}onTouchUp({x:t,y:e}){}onWheel({pixelY:t}){this.scroll.target+=t}onChange(t){this.index=t;const e=parseInt(this.mediasElements[this.index].getAttribute("data-index"));a(this.collectionsElements,((t,s)=>{s===e?t.classList.add(this.collectionsElementsActive):t.classList.remove(this.collectionsElementsActive)})),this.titlesElement.style[this.transfromPrefix]=`\n      translateY(-${25*e}%)\n      translate(-50%, -50%)\n      rotate(-90deg)\n    `}update(){if(!this.bounds)return;this.scroll.target=n.default.utils.clamp(-this.scroll.limit,0,this.scroll.target),this.scroll.current=n.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),this.galleryElement.style[this.transfromPrefix]=`translateX(${this.scroll.current}px)`,this.scroll.last<this.scroll.current?this.scroll.direction="right":this.scroll.last>this.scroll.current&&(this.scroll.direction="left"),this.scroll.last=this.scroll.current;const t=Math.floor(Math.abs(this.scroll.current/this.scroll.limit)*this.medias.length);this.index!==t&&this.onChange(t),a(this.medias,((t,e)=>{t.update(this.scroll.current,this.index),t.mesh.position.y+=40*Math.cos(t.mesh.position.x/this.sizes.width*Math.PI*.1)-40}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Detail/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/ogl/src/extras/Plane.js"),r=s("./node_modules/ogl/src/core/Program.js"),n=s("./node_modules/ogl/src/core/Mesh.js"),h=s("./app/shaders/plane-fragment.glsl"),a=s("./app/shaders/plane-vertex.glsl");const o=class{constructor({gl:t,scene:e,sizes:s}){this.element=document.querySelector(".detail__media__image"),this.gl=t,this.scene=e,this.sizes=s,this.geometry=new i.Plane(this.gl),this.createTexture(),this.createProgram(),this.createMesh()}createTexture(){const t=this.element.getAttribute("data-src");this.texture=window.TEXTURES[t]}createProgram(){this.program=new r.Program(this.gl,{fragment:h.default,vertex:a.default,uniforms:{uAlpha:{value:1},tMap:{value:this.texture}}})}createMesh(){this.mesh=new n.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){}hide(){}onResize(t){this.createBounds(t),this.updateX(),this.updateY()}onTouchDown(){}onTouchMove(){}onTouchUp(){}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(){this.x=this.bounds.left/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width}updateY(){this.y=this.bounds.top/window.innerWidth,this.mesh.position.y=this.sizes.height/2+this.mesh.scale.y/2+this.y*this.sizes.height}update(){this.bounds&&(this.updateX(),this.updateY())}}},"./app/components/Canvas/Home/Media.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/ogl/src/core/Program.js"),r=s("./node_modules/ogl/src/core/Mesh.js"),n=s("./node_modules/gsap/index.js"),h=s("./app/shaders/home-vertex.glsl"),a=s("./app/shaders/home-fragment.glsl");class o{constructor({element:t,geometry:e,gl:s,index:i,scene:r,sizes:n}){this.element=t,this.gl=s,this.geometry=e,this.scene=r,this.index=i,this.sizes=n,this.extra={x:0,y:0},this.createTexture(),this.createProgram(),this.createMesh()}createTexture(){const t=this.element;this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new i.Program(this.gl,{fragment:a.default,vertex:h.default,uniforms:{uAlpha:{value:0},uSpeed:{value:0},uViewportSizes:{value:[this.sizes.width,this.sizes.height]},tMap:{value:this.texture}}})}createMesh(){this.mesh=new r.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.rotation.z=n.default.utils.random(.03*-Math.PI,.03*Math.PI)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){n.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:.4})}hide(){n.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(t,e){this.extra={x:0,y:0},this.createBounds(t),this.updateX(e&&e.x),this.updateY(e&&e.y)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(t,e){this.updateX(t.x),this.updateY(t.y),this.program.uniforms.uSpeed.value=e}}},"./app/components/Canvas/Home/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/extras/Plane.js"),n=s("./node_modules/gsap/index.js"),h=s("./node_modules/lodash/map.js"),a=s("./app/components/Canvas/Home/Media.js");const o=class{constructor({gl:t,scene:e,sizes:s}){this.gl=t,this.scene=e,this.sizes=s,this.group=new i.Transform,this.galleryElement=document.querySelector(".home__gallery"),this.mediasElements=document.querySelectorAll(".home__gallery__media__image"),this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0},this.speed={current:0,target:0,lerp:.1},this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new r.Plane(this.gl,{heightSegments:20,widthSegments:20})}createGallery(){this.medias=h(this.mediasElements,((t,e)=>new a.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){h(this.medias,(t=>t.show()))}hide(){h(this.medias,(t=>t.hide()))}onResize(t){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=t.sizes,this.gallerySizes={width:this.galleryBounds.width/window.innerWidth*this.sizes.width,height:this.galleryBounds.height/window.innerHeight*this.sizes.height},this.scroll.x=this.x.target=0,this.scroll.y=this.y.target=0,h(this.medias,(e=>e.onResize(t,this.scroll)))}onTouchDown({x:t,y:e}){this.speed.target=1,this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onTouchMove({x:t,y:e}){const s=t.start-t.end,i=e.start-e.end;this.x.target=this.scrollCurrent.x-s,this.y.target=this.scrollCurrent.y-i}onTouchUp({x:t,y:e}){this.speed.target=0}onWheel({pixelX:t,pixelY:e}){this.x.target+=t,this.y.target+=e}update(){this.speed.current=n.default.utils.interpolate(this.speed.current,this.speed.target,this.speed.lerp),this.x.current=n.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=n.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="right":this.scroll.x>this.x.current&&(this.x.direction="left"),this.scroll.y<this.y.current?this.y.direction="top":this.scroll.y>this.y.current&&(this.y.direction="bottom"),this.scroll.x=this.x.current,this.scroll.y=this.y.current,h(this.medias,((t,e)=>{const s=.6*this.sizes.width,i=t.mesh.scale.x/2;if("left"===this.x.direction){t.mesh.position.x+i<-s&&(t.extra.x+=this.gallerySizes.width,t.mesh.rotation.z=n.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("right"===this.x.direction){t.mesh.position.x-i>s&&(t.extra.x-=this.gallerySizes.width,t.mesh.rotation.z=n.default.utils.random(.03*-Math.PI,.03*Math.PI))}const r=.6*this.sizes.height,h=t.mesh.scale.y/2;if("top"===this.y.direction){t.mesh.position.y+h<-r&&(t.extra.y+=this.gallerySizes.height,t.mesh.rotation.z=n.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("bottom"===this.y.direction){t.mesh.position.y-h>r&&(t.extra.y-=this.gallerySizes.height,t.mesh.rotation.z=n.default.utils.random(.03*-Math.PI,.03*Math.PI))}t.update(this.scroll,this.speed.current)}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Transition.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/ogl/src/extras/Plane.js"),r=s("./node_modules/ogl/src/core/Program.js"),n=s("./node_modules/ogl/src/core/Mesh.js"),h=s("./app/shaders/plane-fragment.glsl"),a=s("./app/shaders/plane-vertex.glsl");const o=class{constructor({collections:t,gl:e,scene:s,sizes:r,url:n}){this.collections=t,this.gl=e,this.scene=s,this.sizes=r,this.url=n,this.geometry=new i.Plane(this.gl),this.createTexture(),this.createProgram(),this.createMesh()}createTexture(){const{index:t,medias:e}=this.collections;this.media=e[t]}createProgram(){this.program=new r.Program(this.gl,{fragment:h.default,vertex:a.default,uniforms:{uAlpha:{value:1},tMap:{value:this.media.texture}}})}createMesh(){this.mesh=new n.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.scale.x=this.media.mesh.scale.x,this.mesh.scale.y=this.media.mesh.scale.y,this.mesh.scale.z=this.media.mesh.scale.z,this.mesh.position.z=this.media.mesh.position.z+.01,this.mesh.setParent(this.scene)}transition(t){}}},"./app/components/Canvas/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>c});var i=s("./node_modules/ogl/src/core/Renderer.js"),r=s("./node_modules/ogl/src/core/Camera.js"),n=s("./node_modules/ogl/src/core/Transform.js"),h=s("./app/components/Canvas/Home/index.js"),a=s("./app/components/Canvas/About/index.js"),o=s("./app/components/Canvas/Collections/index.js"),l=s("./app/components/Canvas/Detail/index.js"),u=s("./app/components/Canvas/Transition.js");class c{constructor({template:t}){this.template=t,this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize()}createRenderer(){this.renderer=new i.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new r.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new n.Transform}createHome(){this.home=new h.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyHome(){this.home&&(this.home.destroy(),this.home=null)}createAbout(){this.about=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyAbout(){this.about&&(this.about.destroy(),this.about=null)}createCollections(){this.collections=new o.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyCollections(){this.collections&&(this.collections.destroy(),this.collections=null)}createDetail(){this.detail=new l.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyDetail(){this.detail&&(this.detail.destroy(),this.detail=null)}onPreloaded(){this.onChangeEnd(this.template)}onChangeStart(t,e){this.home&&this.home.hide(),this.about&&this.about.hide(),this.collections&&this.collections.hide(),this.isFromCollectionsToDetail="collections"===this.template&&e.indexOf("detail")>-1,this.isFromDetailToCollections="detail"===this.template&&e.indexOf("collections")>-1,(this.isFromCollectionsToDetail||this.isFromDetailToCollections)&&(this.transition=new u.default({collections:this.collections,gl:this.gl,scene:this.scene,sizes:this.sizes,url:e}))}onChangeEnd(t){"about"===t?this.createAbout():this.about&&this.destroyAbout(),"collections"===t?this.createCollections():this.collections&&this.destroyCollections(),"detail"===t?(this.createDetail(),this.transition):this.detail&&this.destroyDetail(),"home"===t?this.createHome():this.destroyHome(),this.template=t}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const t=this.camera.fov*(Math.PI/180),e=2*Math.tan(t/2)*this.camera.position.z,s=e*this.camera.aspect;this.sizes={height:e,width:s};const i={sizes:this.sizes};this.home&&this.home.onResize(i),this.about&&this.about.onResize(i),this.collections&&this.collections.onResize(i),this.detail&&this.detail.onResize(i)}onTouchDown(t){this.isDown=!0,this.x.start=t.touches?t.touches[0].clientX:t.clientX,this.y.start=t.touches?t.touches[0].clientY:t.clientY;const e={x:this.x,y:this.y};this.home&&this.home.onTouchDown(e),this.about&&this.about.onTouchDown(e),this.detail&&this.detail.onTouchDown(e),this.collections&&this.collections.onTouchDown(e)}onTouchMove(t){if(!this.isDown)return;const e=t.touches?t.touches[0].clientX:t.clientX,s=t.touches?t.touches[0].clientY:t.clientY;this.x.end=e,this.y.end=s;const i={x:this.x,y:this.y};this.home&&this.home.onTouchMove(i),this.about&&this.about.onTouchMove(i),this.collections&&this.collections.onTouchMove(i),this.detail&&this.detail.onTouchMove(i)}onTouchUp(t){this.isDown=!1;const e=t.touches?t.touches[0].clientX:t.clientX,s=t.touches?t.touches[0].clientY:t.clientY;this.x.end=e,this.y.end=s;const i={x:this.x,y:this.y};this.home&&this.home.onTouchUp(i),this.about&&this.about.onTouchUp(i),this.collections&&this.collections.onTouchUp(i),this.detail&&this.detail.onTouchUp(i)}onWheel(t){this.home&&this.home.onWheel(t),this.collections&&this.collections.onWheel(t)}update(t){this.about&&this.about.update(t),this.home&&this.home.update(),this.collections&&this.collections.update(),this.detail&&this.detail.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./node_modules/ogl/src/core/Camera.js":(t,e,s)=>{s.r(e),s.d(e,{Camera:()=>l});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/math/Mat4.js"),n=s("./node_modules/ogl/src/math/Vec3.js");const h=new r.Mat4,a=new n.Vec3,o=new n.Vec3;class l extends i.Transform{constructor(t,{near:e=.1,far:s=100,fov:i=45,aspect:h=1,left:a,right:o,bottom:l,top:u,zoom:c=1}={}){super(),Object.assign(this,{near:e,far:s,fov:i,aspect:h,left:a,right:o,bottom:l,top:u,zoom:c}),this.projectionMatrix=new r.Mat4,this.viewMatrix=new r.Mat4,this.projectionViewMatrix=new r.Mat4,this.worldPosition=new n.Vec3,this.type=a||o?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:t=this.near,far:e=this.far,fov:s=this.fov,aspect:i=this.aspect}={}){return Object.assign(this,{near:t,far:e,fov:s,aspect:i}),this.projectionMatrix.fromPerspective({fov:s*(Math.PI/180),aspect:i,near:t,far:e}),this.type="perspective",this}orthographic({near:t=this.near,far:e=this.far,left:s=this.left,right:i=this.right,bottom:r=this.bottom,top:n=this.top,zoom:h=this.zoom}={}){return Object.assign(this,{near:t,far:e,left:s,right:i,bottom:r,top:n,zoom:h}),s/=h,i/=h,r/=h,n/=h,this.projectionMatrix.fromOrthogonal({left:s,right:i,bottom:r,top:n,near:t,far:e}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(t){return super.lookAt(t,!0),this}project(t){return t.applyMatrix4(this.viewMatrix),t.applyMatrix4(this.projectionMatrix),this}unproject(t){return t.applyMatrix4(h.inverse(this.projectionMatrix)),t.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3]);const t=this.projectionViewMatrix;this.frustum[0].set(t[3]-t[0],t[7]-t[4],t[11]-t[8]).constant=t[15]-t[12],this.frustum[1].set(t[3]+t[0],t[7]+t[4],t[11]+t[8]).constant=t[15]+t[12],this.frustum[2].set(t[3]+t[1],t[7]+t[5],t[11]+t[9]).constant=t[15]+t[13],this.frustum[3].set(t[3]-t[1],t[7]-t[5],t[11]-t[9]).constant=t[15]-t[13],this.frustum[4].set(t[3]-t[2],t[7]-t[6],t[11]-t[10]).constant=t[15]-t[14],this.frustum[5].set(t[3]+t[2],t[7]+t[6],t[11]+t[10]).constant=t[15]+t[14];for(let t=0;t<6;t++){const e=1/this.frustum[t].distance();this.frustum[t].multiply(e),this.frustum[t].constant*=e}}frustumIntersectsMesh(t){if(!t.geometry.attributes.position)return!0;if(t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere(),!t.geometry.bounds)return!0;const e=a;e.copy(t.geometry.bounds.center),e.applyMatrix4(t.worldMatrix);const s=t.geometry.bounds.radius*t.worldMatrix.getMaxScaleOnAxis();return this.frustumIntersectsSphere(e,s)}frustumIntersectsSphere(t,e){const s=o;for(let i=0;i<6;i++){const r=this.frustum[i];if(s.copy(r).dot(t)+r.constant<-e)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,s)=>{s.r(e),s.d(e,{Geometry:()=>l});var i=s("./node_modules/ogl/src/math/Vec3.js"),r=s("./node_modules/console-browserify/index.js");const n=new i.Vec3;let h=1,a=1,o=!1;class l{constructor(t,e={}){t.canvas||r.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=h++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=a++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return r.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:s})=>{if(!this.attributes[e])return void r.warn(`active attribute ${e} not being supplied`);const i=this.attributes[e];this.gl.bindBuffer(i.target,i.buffer),this.glState.boundBuffer=i.buffer;let n=1;35674===s&&(n=2),35675===s&&(n=3),35676===s&&(n=4);const h=i.size/n,a=1===n?0:n*n*n,o=1===n?0:n*n;for(let e=0;e<n;e++)this.gl.vertexAttribPointer(t+e,h,i.type,i.normalized,i.stride+a,i.offset+e*o),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,i.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const s=this.attributes[e];s.needsUpdate&&this.updateAttribute(s)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:o?void 0:(r.warn("No position buffer data found to compute bounds"),o=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,s=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||(this.bounds={min:new i.Vec3,max:new i.Vec3,center:new i.Vec3,scale:new i.Vec3,radius:1/0});const r=this.bounds.min,n=this.bounds.max,h=this.bounds.center,a=this.bounds.scale;r.set(1/0),n.set(-1/0);for(let t=0,i=e.length;t<i;t+=s){const s=e[t],i=e[t+1],h=e[t+2];r.x=Math.min(s,r.x),r.y=Math.min(i,r.y),r.z=Math.min(h,r.z),n.x=Math.max(s,n.x),n.y=Math.max(i,n.y),n.z=Math.max(h,n.z)}a.sub(n,r),h.add(r,n).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,s=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||this.computeBoundingBox(t);let i=0;for(let t=0,r=e.length;t<r;t+=s)n.fromArray(e,t),i=Math.max(i,this.bounds.center.squaredDistance(n));this.bounds.radius=Math.sqrt(i)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,s)=>{s.r(e),s.d(e,{Mesh:()=>o});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/math/Mat3.js"),n=s("./node_modules/ogl/src/math/Mat4.js"),h=s("./node_modules/console-browserify/index.js");let a=0;class o extends i.Transform{constructor(t,{geometry:e,program:s,mode:i=t.TRIANGLES,frustumCulled:o=!0,renderOrder:l=0}={}){super(),t.canvas||h.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=a++,this.geometry=e,this.program=s,this.mode=i,this.frustumCulled=o,this.renderOrder=l,this.modelViewMatrix=new n.Mat4,this.normalMatrix=new r.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t}))),t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,s)=>{s.r(e),s.d(e,{Program:()=>h});var i=s("./node_modules/console-browserify/index.js");let r=1;const n={};class h{constructor(t,{vertex:e,fragment:s,uniforms:n={},transparent:h=!1,cullFace:a=t.BACK,frontFace:l=t.CCW,depthTest:u=!0,depthWrite:c=!0,depthFunc:d=t.LESS}={}){t.canvas||i.error("gl not passed as fist argument to Program"),this.gl=t,this.uniforms=n,this.id=r++,e||i.warn("vertex shader not supplied"),s||i.warn("fragment shader not supplied"),this.transparent=h,this.cullFace=a,this.frontFace=l,this.depthTest=u,this.depthWrite=c,this.depthFunc=d,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const m=t.createShader(t.VERTEX_SHADER);t.shaderSource(m,e),t.compileShader(m),""!==t.getShaderInfoLog(m)&&i.warn(`${t.getShaderInfoLog(m)}\nVertex Shader\n${o(e)}`);const g=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(g,s),t.compileShader(g),""!==t.getShaderInfoLog(g)&&i.warn(`${t.getShaderInfoLog(g)}\nFragment Shader\n${o(s)}`),this.program=t.createProgram(),t.attachShader(this.program,m),t.attachShader(this.program,g),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return i.warn(t.getProgramInfoLog(this.program));t.deleteShader(m),t.deleteShader(g),this.uniformLocations=new Map;let p=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<p;e++){let s=t.getActiveUniform(this.program,e);this.uniformLocations.set(s,t.getUniformLocation(this.program,s.name));const i=s.name.match(/(\w+)/g);s.uniformName=i[0],3===i.length?(s.isStructArray=!0,s.structIndex=Number(i[1]),s.structProperty=i[2]):2===i.length&&isNaN(Number(i[1]))&&(s.isStruct=!0,s.structProperty=i[1])}this.attributeLocations=new Map;const f=[],x=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<x;e++){const s=t.getActiveAttrib(this.program,e),i=t.getAttribLocation(this.program,s.name);-1!==i&&(f[i]=s.name,this.attributeLocations.set(s,i))}this.attributeOrder=f.join("")}setBlendFunc(t,e,s,i){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=s,this.blendFunc.dstAlpha=i,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,s)=>{let i=s.uniformName,r=this.uniforms[i];if(s.isStruct&&(r=r[s.structProperty],i+=`.${s.structProperty}`),s.isStructArray&&(r=r[s.structIndex][s.structProperty],i+=`[${s.structIndex}].${s.structProperty}`),!r)return u(`Active uniform ${i} has not been supplied`);if(r&&void 0===r.value)return u(`${i} uniform is missing a value parameter`);if(r.value.texture)return e+=1,r.value.update(e),a(this.gl,s.type,t,e);if(r.value.length&&r.value[0].texture){const i=[];return r.value.forEach((t=>{e+=1,t.update(e),i.push(e)})),a(this.gl,s.type,t,i)}a(this.gl,s.type,t,r.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function a(t,e,s,i){i=i.length?function(t){const e=t.length,s=t[0].length;if(void 0===s)return t;const i=e*s;let r=n[i];r||(n[i]=r=new Float32Array(i));for(let i=0;i<e;i++)r.set(t[i],i*s);return r}(i):i;const r=t.renderer.state.uniformLocations.get(s);if(i.length)if(void 0===r||r.length!==i.length)t.renderer.state.uniformLocations.set(s,i.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let s=0,i=t.length;s<i;s++)if(t[s]!==e[s])return!1;return!0}(r,i))return;r.set?r.set(i):function(t,e){for(let s=0,i=t.length;s<i;s++)t[s]=e[s]}(r,i),t.renderer.state.uniformLocations.set(s,r)}else{if(r===i)return;t.renderer.state.uniformLocations.set(s,i)}switch(e){case 5126:return i.length?t.uniform1fv(s,i):t.uniform1f(s,i);case 35664:return t.uniform2fv(s,i);case 35665:return t.uniform3fv(s,i);case 35666:return t.uniform4fv(s,i);case 35670:case 5124:case 35678:case 35680:return i.length?t.uniform1iv(s,i):t.uniform1i(s,i);case 35671:case 35667:return t.uniform2iv(s,i);case 35672:case 35668:return t.uniform3iv(s,i);case 35673:case 35669:return t.uniform4iv(s,i);case 35674:return t.uniformMatrix2fv(s,!1,i);case 35675:return t.uniformMatrix3fv(s,!1,i);case 35676:return t.uniformMatrix4fv(s,!1,i)}}function o(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let l=0;function u(t){l>100||(i.warn(t),l++,l>100&&i.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(t,e,s)=>{s.r(e),s.d(e,{Renderer:()=>a});var i=s("./node_modules/ogl/src/math/Vec3.js"),r=s("./node_modules/console-browserify/index.js");const n=new i.Vec3;let h=1;class a{constructor({canvas:t=document.createElement("canvas"),width:e=300,height:s=150,dpr:i=1,alpha:n=!1,depth:a=!0,stencil:o=!1,antialias:l=!1,premultipliedAlpha:u=!1,preserveDrawingBuffer:c=!1,powerPreference:d="default",autoClear:m=!0,webgl:g=2}={}){const p={alpha:n,depth:a,stencil:o,antialias:l,premultipliedAlpha:u,preserveDrawingBuffer:c,powerPreference:d};this.dpr=i,this.alpha=n,this.color=!0,this.depth=a,this.stencil=o,this.premultipliedAlpha=u,this.autoClear=m,this.id=h++,2===g&&(this.gl=t.getContext("webgl2",p)),this.isWebgl2=!!this.gl,this.gl||(this.gl=t.getContext("webgl",p)),this.gl||r.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(e,s),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(t,e){this.width=t,this.height=e,this.gl.canvas.width=t*this.dpr,this.gl.canvas.height=e*this.dpr,Object.assign(this.gl.canvas.style,{width:t+"px",height:e+"px"})}setViewport(t,e,s=0,i=0){this.state.viewport.width===t&&this.state.viewport.height===e||(this.state.viewport.width=t,this.state.viewport.height=e,this.state.viewport.x=s,this.state.viewport.y=i,this.gl.viewport(s,i,t,e))}setScissor(t,e,s=0,i=0){this.gl.scissor(s,i,t,e)}enable(t){!0!==this.state[t]&&(this.gl.enable(t),this.state[t]=!0)}disable(t){!1!==this.state[t]&&(this.gl.disable(t),this.state[t]=!1)}setBlendFunc(t,e,s,i){this.state.blendFunc.src===t&&this.state.blendFunc.dst===e&&this.state.blendFunc.srcAlpha===s&&this.state.blendFunc.dstAlpha===i||(this.state.blendFunc.src=t,this.state.blendFunc.dst=e,this.state.blendFunc.srcAlpha=s,this.state.blendFunc.dstAlpha=i,void 0!==s?this.gl.blendFuncSeparate(t,e,s,i):this.gl.blendFunc(t,e))}setBlendEquation(t,e){t=t||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===t&&this.state.blendEquation.modeAlpha===e||(this.state.blendEquation.modeRGB=t,this.state.blendEquation.modeAlpha=e,void 0!==e?this.gl.blendEquationSeparate(t,e):this.gl.blendEquation(t))}setCullFace(t){this.state.cullFace!==t&&(this.state.cullFace=t,this.gl.cullFace(t))}setFrontFace(t){this.state.frontFace!==t&&(this.state.frontFace=t,this.gl.frontFace(t))}setDepthMask(t){this.state.depthMask!==t&&(this.state.depthMask=t,this.gl.depthMask(t))}setDepthFunc(t){this.state.depthFunc!==t&&(this.state.depthFunc=t,this.gl.depthFunc(t))}activeTexture(t){this.state.activeTextureUnit!==t&&(this.state.activeTextureUnit=t,this.gl.activeTexture(this.gl.TEXTURE0+t))}bindFramebuffer({target:t=this.gl.FRAMEBUFFER,buffer:e=null}={}){this.state.framebuffer!==e&&(this.state.framebuffer=e,this.gl.bindFramebuffer(t,e))}getExtension(t,e,s){return e&&this.gl[e]?this.gl[e].bind(this.gl):(this.extensions[t]||(this.extensions[t]=this.gl.getExtension(t)),e?this.extensions[t]?this.extensions[t][s].bind(this.extensions[t]):null:this.extensions[t])}sortOpaque(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:t.zDepth!==e.zDepth?t.zDepth-e.zDepth:e.id-t.id}sortTransparent(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.zDepth!==e.zDepth?e.zDepth-t.zDepth:e.id-t.id}sortUI(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:e.id-t.id}getRenderList({scene:t,camera:e,frustumCull:s,sort:i}){let r=[];if(e&&s&&e.updateFrustum(),t.traverse((t=>{if(!t.visible)return!0;t.draw&&(s&&t.frustumCulled&&e&&!e.frustumIntersectsMesh(t)||r.push(t))})),i){const t=[],s=[],i=[];r.forEach((r=>{r.program.transparent?r.program.depthTest?s.push(r):i.push(r):t.push(r),r.zDepth=0,0===r.renderOrder&&r.program.depthTest&&e&&(r.worldMatrix.getTranslation(n),n.applyMatrix4(e.projectionViewMatrix),r.zDepth=n.z)})),t.sort(this.sortOpaque),s.sort(this.sortTransparent),i.sort(this.sortUI),r=t.concat(s,i)}return r}render({scene:t,camera:e,target:s=null,update:i=!0,sort:r=!0,frustumCull:n=!0,clear:h}){null===s?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(s),this.setViewport(s.width,s.height)),(h||this.autoClear&&!1!==h)&&(!this.depth||s&&!s.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),i&&t.updateMatrixWorld(),e&&e.updateMatrixWorld();this.getRenderList({scene:t,camera:e,frustumCull:n,sort:r}).forEach((t=>{t.draw({camera:e})}))}}},"./node_modules/ogl/src/core/Transform.js":(t,e,s)=>{s.r(e),s.d(e,{Transform:()=>a});var i=s("./node_modules/ogl/src/math/Vec3.js"),r=s("./node_modules/ogl/src/math/Quat.js"),n=s("./node_modules/ogl/src/math/Mat4.js"),h=s("./node_modules/ogl/src/math/Euler.js");class a{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new n.Mat4,this.worldMatrix=new n.Mat4,this.matrixAutoUpdate=!0,this.position=new i.Vec3,this.quaternion=new r.Quat,this.scale=new i.Vec3(1),this.rotation=new h.Euler,this.up=new i.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(t,e=!0){this.parent&&t!==this.parent&&this.parent.removeChild(this,!1),this.parent=t,e&&t&&t.addChild(this,!1)}addChild(t,e=!0){~this.children.indexOf(t)||this.children.push(t),e&&t.setParent(this,!1)}removeChild(t,e=!0){~this.children.indexOf(t)&&this.children.splice(this.children.indexOf(t),1),e&&t.setParent(null,!1)}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||t)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,t=!0);for(let e=0,s=this.children.length;e<s;e++)this.children[e].updateMatrixWorld(t)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(t){if(!t(this))for(let e=0,s=this.children.length;e<s;e++)this.children[e].traverse(t)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(t,e=!1){e?this.matrix.lookAt(this.position,t,this.up):this.matrix.lookAt(t,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,s)=>{s.r(e),s.d(e,{Plane:()=>r});var i=s("./node_modules/ogl/src/core/Geometry.js");class r extends i.Geometry{constructor(t,{width:e=1,height:s=1,widthSegments:i=1,heightSegments:n=1,attributes:h={}}={}){const a=i,o=n,l=(a+1)*(o+1),u=a*o*6,c=new Float32Array(3*l),d=new Float32Array(3*l),m=new Float32Array(2*l),g=u>65536?new Uint32Array(u):new Uint16Array(u);r.buildPlane(c,d,m,g,e,s,0,a,o),Object.assign(h,{position:{size:3,data:c},normal:{size:3,data:d},uv:{size:2,data:m},index:{data:g}}),super(t,h)}static buildPlane(t,e,s,i,r,n,h,a,o,l=0,u=1,c=2,d=1,m=-1,g=0,p=0){const f=g,x=r/a,y=n/o;for(let w=0;w<=o;w++){let M=w*y-n/2;for(let n=0;n<=a;n++,g++){let y=n*x-r/2;if(t[3*g+l]=y*d,t[3*g+u]=M*m,t[3*g+c]=h/2,e[3*g+l]=0,e[3*g+u]=0,e[3*g+c]=h>=0?1:-1,s[2*g]=n/a,s[2*g+1]=1-w/o,w===o||n===a)continue;let v=f+n+w*(a+1),b=f+n+(w+1)*(a+1),_=f+n+(w+1)*(a+1)+1,E=f+n+w*(a+1)+1;i[6*p]=v,i[6*p+1]=b,i[6*p+2]=E,i[6*p+3]=b,i[6*p+4]=_,i[6*p+5]=E,p++}}}}},"./node_modules/ogl/src/math/Euler.js":(t,e,s)=>{s.r(e),s.d(e,{Euler:()=>n});var i=s("./node_modules/ogl/src/math/functions/EulerFunc.js");const r=new(s("./node_modules/ogl/src/math/Mat4.js").Mat4);class n extends Array{constructor(t=0,e=t,s=t,i="YXZ"){return super(t,e,s),this.order=i,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set(t,e=t,s=t){return t.length?this.copy(t):(this[0]=t,this[1]=e,this[2]=s,this.onChange(),this)}copy(t){return this[0]=t[0],this[1]=t[1],this[2]=t[2],this.onChange(),this}reorder(t){return this.order=t,this.onChange(),this}fromRotationMatrix(t,e=this.order){return i.fromRotationMatrix(this,t,e),this}fromQuaternion(t,e=this.order){return r.fromQuaternion(t),this.fromRotationMatrix(r,e)}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,s)=>{s.r(e),s.d(e,{Mat3:()=>r});var i=s("./node_modules/ogl/src/math/functions/Mat3Func.js");class r extends Array{constructor(t=1,e=0,s=0,i=0,r=1,n=0,h=0,a=0,o=1){return super(t,e,s,i,r,n,h,a,o),this}set(t,e,s,r,n,h,a,o,l){return t.length?this.copy(t):(i.set(this,t,e,s,r,n,h,a,o,l),this)}translate(t,e=this){return i.translate(this,e,t),this}rotate(t,e=this){return i.rotate(this,e,t),this}scale(t,e=this){return i.scale(this,e,t),this}multiply(t,e){return e?i.multiply(this,t,e):i.multiply(this,this,t),this}identity(){return i.identity(this),this}copy(t){return i.copy(this,t),this}fromMatrix4(t){return i.fromMat4(this,t),this}fromQuaternion(t){return i.fromQuat(this,t),this}fromBasis(t,e,s){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],s[0],s[1],s[2]),this}inverse(t=this){return i.invert(this,t),this}getNormalMatrix(t){return i.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/Mat4.js":(t,e,s)=>{s.r(e),s.d(e,{Mat4:()=>r});var i=s("./node_modules/ogl/src/math/functions/Mat4Func.js");class r extends Array{constructor(t=1,e=0,s=0,i=0,r=0,n=1,h=0,a=0,o=0,l=0,u=1,c=0,d=0,m=0,g=0,p=1){return super(t,e,s,i,r,n,h,a,o,l,u,c,d,m,g,p),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(t){this[12]=t}set y(t){this[13]=t}set z(t){this[14]=t}set w(t){this[15]=t}set(t,e,s,r,n,h,a,o,l,u,c,d,m,g,p,f){return t.length?this.copy(t):(i.set(this,t,e,s,r,n,h,a,o,l,u,c,d,m,g,p,f),this)}translate(t,e=this){return i.translate(this,e,t),this}rotate(t,e,s=this){return i.rotate(this,s,t,e),this}scale(t,e=this){return i.scale(this,e,"number"==typeof t?[t,t,t]:t),this}multiply(t,e){return e?i.multiply(this,t,e):i.multiply(this,this,t),this}identity(){return i.identity(this),this}copy(t){return i.copy(this,t),this}fromPerspective({fov:t,aspect:e,near:s,far:r}={}){return i.perspective(this,t,e,s,r),this}fromOrthogonal({left:t,right:e,bottom:s,top:r,near:n,far:h}){return i.ortho(this,t,e,s,r,n,h),this}fromQuaternion(t){return i.fromQuat(this,t),this}setPosition(t){return this.x=t[0],this.y=t[1],this.z=t[2],this}inverse(t=this){return i.invert(this,t),this}compose(t,e,s){return i.fromRotationTranslationScale(this,t,e,s),this}getRotation(t){return i.getRotation(t,this),this}getTranslation(t){return i.getTranslation(t,this),this}getScaling(t){return i.getScaling(t,this),this}getMaxScaleOnAxis(){return i.getMaxScaleOnAxis(this)}lookAt(t,e,s){return i.targetTo(this,t,e,s),this}determinant(){return i.determinant(this)}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this[4]=t[e+4],this[5]=t[e+5],this[6]=t[e+6],this[7]=t[e+7],this[8]=t[e+8],this[9]=t[e+9],this[10]=t[e+10],this[11]=t[e+11],this[12]=t[e+12],this[13]=t[e+13],this[14]=t[e+14],this[15]=t[e+15],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t[e+4]=this[4],t[e+5]=this[5],t[e+6]=this[6],t[e+7]=this[7],t[e+8]=this[8],t[e+9]=this[9],t[e+10]=this[10],t[e+11]=this[11],t[e+12]=this[12],t[e+13]=this[13],t[e+14]=this[14],t[e+15]=this[15],t}}},"./node_modules/ogl/src/math/Quat.js":(t,e,s)=>{s.r(e),s.d(e,{Quat:()=>r});var i=s("./node_modules/ogl/src/math/functions/QuatFunc.js");class r extends Array{constructor(t=0,e=0,s=0,i=1){return super(t,e,s,i),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set w(t){this[3]=t,this.onChange()}identity(){return i.identity(this),this.onChange(),this}set(t,e,s,r){return t.length?this.copy(t):(i.set(this,t,e,s,r),this.onChange(),this)}rotateX(t){return i.rotateX(this,this,t),this.onChange(),this}rotateY(t){return i.rotateY(this,this,t),this.onChange(),this}rotateZ(t){return i.rotateZ(this,this,t),this.onChange(),this}inverse(t=this){return i.invert(this,t),this.onChange(),this}conjugate(t=this){return i.conjugate(this,t),this.onChange(),this}copy(t){return i.copy(this,t),this.onChange(),this}normalize(t=this){return i.normalize(this,t),this.onChange(),this}multiply(t,e){return e?i.multiply(this,t,e):i.multiply(this,this,t),this.onChange(),this}dot(t){return i.dot(this,t)}fromMatrix3(t){return i.fromMat3(this,t),this.onChange(),this}fromEuler(t){return i.fromEuler(this,t,t.order),this}fromAxisAngle(t,e){return i.setAxisAngle(this,t,e),this}slerp(t,e){return i.slerp(this,this,t,e),this}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}},"./node_modules/ogl/src/math/Vec3.js":(t,e,s)=>{s.r(e),s.d(e,{Vec3:()=>r});var i=s("./node_modules/ogl/src/math/functions/Vec3Func.js");class r extends Array{constructor(t=0,e=t,s=t){return super(t,e,s),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,e=t,s=t){return t.length?this.copy(t):(i.set(this,t,e,s),this)}copy(t){return i.copy(this,t),this}add(t,e){return e?i.add(this,t,e):i.add(this,this,t),this}sub(t,e){return e?i.subtract(this,t,e):i.subtract(this,this,t),this}multiply(t){return t.length?i.multiply(this,this,t):i.scale(this,this,t),this}divide(t){return t.length?i.divide(this,this,t):i.scale(this,this,1/t),this}inverse(t=this){return i.inverse(this,t),this}len(){return i.length(this)}distance(t){return t?i.distance(this,t):i.length(this)}squaredLen(){return i.squaredLength(this)}squaredDistance(t){return t?i.squaredDistance(this,t):i.squaredLength(this)}negate(t=this){return i.negate(this,t),this}cross(t,e){return e?i.cross(this,t,e):i.cross(this,this,t),this}scale(t){return i.scale(this,this,t),this}normalize(){return i.normalize(this,this),this}dot(t){return i.dot(this,t)}equals(t){return i.exactEquals(this,t)}applyMatrix3(t){return i.transformMat3(this,this,t),this}applyMatrix4(t){return i.transformMat4(this,this,t),this}scaleRotateMatrix4(t){return i.scaleRotateMat4(this,this,t),this}applyQuaternion(t){return i.transformQuat(this,this,t),this}angle(t){return i.angle(this,t)}lerp(t,e){return i.lerp(this,this,t,e),this}clone(){return new r(this[0],this[1],this[2])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}transformDirection(t){const e=this[0],s=this[1],i=this[2];return this[0]=t[0]*e+t[4]*s+t[8]*i,this[1]=t[1]*e+t[5]*s+t[9]*i,this[2]=t[2]*e+t[6]*s+t[10]*i,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(t,e,s)=>{function i(t,e,s="YXZ"){return"XYZ"===s?(t[1]=Math.asin(Math.min(Math.max(e[8],-1),1)),Math.abs(e[8])<.99999?(t[0]=Math.atan2(-e[9],e[10]),t[2]=Math.atan2(-e[4],e[0])):(t[0]=Math.atan2(e[6],e[5]),t[2]=0)):"YXZ"===s?(t[0]=Math.asin(-Math.min(Math.max(e[9],-1),1)),Math.abs(e[9])<.99999?(t[1]=Math.atan2(e[8],e[10]),t[2]=Math.atan2(e[1],e[5])):(t[1]=Math.atan2(-e[2],e[0]),t[2]=0)):"ZXY"===s?(t[0]=Math.asin(Math.min(Math.max(e[6],-1),1)),Math.abs(e[6])<.99999?(t[1]=Math.atan2(-e[2],e[10]),t[2]=Math.atan2(-e[4],e[5])):(t[1]=0,t[2]=Math.atan2(e[1],e[0]))):"ZYX"===s?(t[1]=Math.asin(-Math.min(Math.max(e[2],-1),1)),Math.abs(e[2])<.99999?(t[0]=Math.atan2(e[6],e[10]),t[2]=Math.atan2(e[1],e[0])):(t[0]=0,t[2]=Math.atan2(-e[4],e[5]))):"YZX"===s?(t[2]=Math.asin(Math.min(Math.max(e[1],-1),1)),Math.abs(e[1])<.99999?(t[0]=Math.atan2(-e[9],e[5]),t[1]=Math.atan2(-e[2],e[0])):(t[0]=0,t[1]=Math.atan2(e[8],e[10]))):"XZY"===s&&(t[2]=Math.asin(-Math.min(Math.max(e[4],-1),1)),Math.abs(e[4])<.99999?(t[0]=Math.atan2(e[6],e[5]),t[1]=Math.atan2(e[8],e[0])):(t[0]=Math.atan2(-e[9],e[10]),t[1]=0)),t}s.r(e),s.d(e,{fromRotationMatrix:()=>i})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>x,copy:()=>n,determinant:()=>u,fromMat4:()=>i,fromQuat:()=>r,identity:()=>a,invert:()=>l,multiply:()=>c,multiplyScalar:()=>w,normalFromMat4:()=>p,projection:()=>f,rotate:()=>m,scale:()=>g,set:()=>h,subtract:()=>y,translate:()=>d,transpose:()=>o});function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function r(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],h=s+s,a=i+i,o=r+r,l=s*h,u=i*h,c=i*a,d=r*h,m=r*a,g=r*o,p=n*h,f=n*a,x=n*o;return t[0]=1-c-g,t[3]=u-x,t[6]=d+f,t[1]=u+x,t[4]=1-l-g,t[7]=m-p,t[2]=d-f,t[5]=m+p,t[8]=1-l-c,t}function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function h(t,e,s,i,r,n,h,a,o,l){return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t[4]=n,t[5]=h,t[6]=a,t[7]=o,t[8]=l,t}function a(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function o(t,e){if(t===e){let s=e[1],i=e[2],r=e[5];t[1]=e[3],t[2]=e[6],t[3]=s,t[5]=e[7],t[6]=i,t[7]=r}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function l(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],h=e[4],a=e[5],o=e[6],l=e[7],u=e[8],c=u*h-a*l,d=-u*n+a*o,m=l*n-h*o,g=s*c+i*d+r*m;return g?(g=1/g,t[0]=c*g,t[1]=(-u*i+r*l)*g,t[2]=(a*i-r*h)*g,t[3]=d*g,t[4]=(u*s-r*o)*g,t[5]=(-a*s+r*n)*g,t[6]=m*g,t[7]=(-l*s+i*o)*g,t[8]=(h*s-i*n)*g,t):null}function u(t){let e=t[0],s=t[1],i=t[2],r=t[3],n=t[4],h=t[5],a=t[6],o=t[7],l=t[8];return e*(l*n-h*o)+s*(-l*r+h*a)+i*(o*r-n*a)}function c(t,e,s){let i=e[0],r=e[1],n=e[2],h=e[3],a=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=s[0],m=s[1],g=s[2],p=s[3],f=s[4],x=s[5],y=s[6],w=s[7],M=s[8];return t[0]=d*i+m*h+g*l,t[1]=d*r+m*a+g*u,t[2]=d*n+m*o+g*c,t[3]=p*i+f*h+x*l,t[4]=p*r+f*a+x*u,t[5]=p*n+f*o+x*c,t[6]=y*i+w*h+M*l,t[7]=y*r+w*a+M*u,t[8]=y*n+w*o+M*c,t}function d(t,e,s){let i=e[0],r=e[1],n=e[2],h=e[3],a=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=s[0],m=s[1];return t[0]=i,t[1]=r,t[2]=n,t[3]=h,t[4]=a,t[5]=o,t[6]=d*i+m*h+l,t[7]=d*r+m*a+u,t[8]=d*n+m*o+c,t}function m(t,e,s){let i=e[0],r=e[1],n=e[2],h=e[3],a=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=Math.sin(s),m=Math.cos(s);return t[0]=m*i+d*h,t[1]=m*r+d*a,t[2]=m*n+d*o,t[3]=m*h-d*i,t[4]=m*a-d*r,t[5]=m*o-d*n,t[6]=l,t[7]=u,t[8]=c,t}function g(t,e,s){let i=s[0],r=s[1];return t[0]=i*e[0],t[1]=i*e[1],t[2]=i*e[2],t[3]=r*e[3],t[4]=r*e[4],t[5]=r*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function p(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],h=e[4],a=e[5],o=e[6],l=e[7],u=e[8],c=e[9],d=e[10],m=e[11],g=e[12],p=e[13],f=e[14],x=e[15],y=s*a-i*h,w=s*o-r*h,M=s*l-n*h,v=i*o-r*a,b=i*l-n*a,_=r*l-n*o,E=u*p-c*g,z=u*f-d*g,A=u*x-m*g,T=c*f-d*p,C=c*x-m*p,S=d*x-m*f,P=y*S-w*C+M*T+v*A-b*z+_*E;return P?(P=1/P,t[0]=(a*S-o*C+l*T)*P,t[1]=(o*A-h*S-l*z)*P,t[2]=(h*C-a*A+l*E)*P,t[3]=(r*C-i*S-n*T)*P,t[4]=(s*S-r*A+n*z)*P,t[5]=(i*A-s*C-n*E)*P,t[6]=(p*_-f*b+x*v)*P,t[7]=(f*M-g*_-x*w)*P,t[8]=(g*b-p*M+x*y)*P,t):null}function f(t,e,s){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/s,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function x(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t[4]=e[4]+s[4],t[5]=e[5]+s[5],t[6]=e[6]+s[6],t[7]=e[7]+s[7],t[8]=e[8]+s[8],t}function y(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t[3]=e[3]-s[3],t[4]=e[4]-s[4],t[5]=e[5]-s[5],t[6]=e[6]-s[6],t[7]=e[7]-s[7],t[8]=e[8]-s[8],t}function w(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*s,t}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>b,copy:()=>i,determinant:()=>o,fromQuat:()=>y,fromRotationTranslationScale:()=>x,getMaxScaleOnAxis:()=>p,getRotation:()=>f,getScaling:()=>g,getTranslation:()=>m,identity:()=>n,invert:()=>a,multiply:()=>l,multiplyScalar:()=>E,ortho:()=>M,perspective:()=>w,rotate:()=>d,scale:()=>c,set:()=>r,subtract:()=>_,targetTo:()=>v,translate:()=>u,transpose:()=>h});function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function r(t,e,s,i,r,n,h,a,o,l,u,c,d,m,g,p,f){return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t[4]=n,t[5]=h,t[6]=a,t[7]=o,t[8]=l,t[9]=u,t[10]=c,t[11]=d,t[12]=m,t[13]=g,t[14]=p,t[15]=f,t}function n(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function h(t,e){if(t===e){let s=e[1],i=e[2],r=e[3],n=e[6],h=e[7],a=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=s,t[6]=e[9],t[7]=e[13],t[8]=i,t[9]=n,t[11]=e[14],t[12]=r,t[13]=h,t[14]=a}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function a(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],h=e[4],a=e[5],o=e[6],l=e[7],u=e[8],c=e[9],d=e[10],m=e[11],g=e[12],p=e[13],f=e[14],x=e[15],y=s*a-i*h,w=s*o-r*h,M=s*l-n*h,v=i*o-r*a,b=i*l-n*a,_=r*l-n*o,E=u*p-c*g,z=u*f-d*g,A=u*x-m*g,T=c*f-d*p,C=c*x-m*p,S=d*x-m*f,P=y*S-w*C+M*T+v*A-b*z+_*E;return P?(P=1/P,t[0]=(a*S-o*C+l*T)*P,t[1]=(r*C-i*S-n*T)*P,t[2]=(p*_-f*b+x*v)*P,t[3]=(d*b-c*_-m*v)*P,t[4]=(o*A-h*S-l*z)*P,t[5]=(s*S-r*A+n*z)*P,t[6]=(f*M-g*_-x*w)*P,t[7]=(u*_-d*M+m*w)*P,t[8]=(h*C-a*A+l*E)*P,t[9]=(i*A-s*C-n*E)*P,t[10]=(g*b-p*M+x*y)*P,t[11]=(c*M-u*b-m*y)*P,t[12]=(a*z-h*T-o*E)*P,t[13]=(s*T-i*z+r*E)*P,t[14]=(p*w-g*v-f*y)*P,t[15]=(u*v-c*w+d*y)*P,t):null}function o(t){let e=t[0],s=t[1],i=t[2],r=t[3],n=t[4],h=t[5],a=t[6],o=t[7],l=t[8],u=t[9],c=t[10],d=t[11],m=t[12],g=t[13],p=t[14],f=t[15];return(e*h-s*n)*(c*f-d*p)-(e*a-i*n)*(u*f-d*g)+(e*o-r*n)*(u*p-c*g)+(s*a-i*h)*(l*f-d*m)-(s*o-r*h)*(l*p-c*m)+(i*o-r*a)*(l*g-u*m)}function l(t,e,s){let i=e[0],r=e[1],n=e[2],h=e[3],a=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=e[9],m=e[10],g=e[11],p=e[12],f=e[13],x=e[14],y=e[15],w=s[0],M=s[1],v=s[2],b=s[3];return t[0]=w*i+M*a+v*c+b*p,t[1]=w*r+M*o+v*d+b*f,t[2]=w*n+M*l+v*m+b*x,t[3]=w*h+M*u+v*g+b*y,w=s[4],M=s[5],v=s[6],b=s[7],t[4]=w*i+M*a+v*c+b*p,t[5]=w*r+M*o+v*d+b*f,t[6]=w*n+M*l+v*m+b*x,t[7]=w*h+M*u+v*g+b*y,w=s[8],M=s[9],v=s[10],b=s[11],t[8]=w*i+M*a+v*c+b*p,t[9]=w*r+M*o+v*d+b*f,t[10]=w*n+M*l+v*m+b*x,t[11]=w*h+M*u+v*g+b*y,w=s[12],M=s[13],v=s[14],b=s[15],t[12]=w*i+M*a+v*c+b*p,t[13]=w*r+M*o+v*d+b*f,t[14]=w*n+M*l+v*m+b*x,t[15]=w*h+M*u+v*g+b*y,t}function u(t,e,s){let i,r,n,h,a,o,l,u,c,d,m,g,p=s[0],f=s[1],x=s[2];return e===t?(t[12]=e[0]*p+e[4]*f+e[8]*x+e[12],t[13]=e[1]*p+e[5]*f+e[9]*x+e[13],t[14]=e[2]*p+e[6]*f+e[10]*x+e[14],t[15]=e[3]*p+e[7]*f+e[11]*x+e[15]):(i=e[0],r=e[1],n=e[2],h=e[3],a=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=e[9],m=e[10],g=e[11],t[0]=i,t[1]=r,t[2]=n,t[3]=h,t[4]=a,t[5]=o,t[6]=l,t[7]=u,t[8]=c,t[9]=d,t[10]=m,t[11]=g,t[12]=i*p+a*f+c*x+e[12],t[13]=r*p+o*f+d*x+e[13],t[14]=n*p+l*f+m*x+e[14],t[15]=h*p+u*f+g*x+e[15]),t}function c(t,e,s){let i=s[0],r=s[1],n=s[2];return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function d(t,e,s,i){let r,n,h,a,o,l,u,c,d,m,g,p,f,x,y,w,M,v,b,_,E,z,A,T,C=i[0],S=i[1],P=i[2],j=Math.hypot(C,S,P);return Math.abs(j)<1e-6?null:(j=1/j,C*=j,S*=j,P*=j,r=Math.sin(s),n=Math.cos(s),h=1-n,a=e[0],o=e[1],l=e[2],u=e[3],c=e[4],d=e[5],m=e[6],g=e[7],p=e[8],f=e[9],x=e[10],y=e[11],w=C*C*h+n,M=S*C*h+P*r,v=P*C*h-S*r,b=C*S*h-P*r,_=S*S*h+n,E=P*S*h+C*r,z=C*P*h+S*r,A=S*P*h-C*r,T=P*P*h+n,t[0]=a*w+c*M+p*v,t[1]=o*w+d*M+f*v,t[2]=l*w+m*M+x*v,t[3]=u*w+g*M+y*v,t[4]=a*b+c*_+p*E,t[5]=o*b+d*_+f*E,t[6]=l*b+m*_+x*E,t[7]=u*b+g*_+y*E,t[8]=a*z+c*A+p*T,t[9]=o*z+d*A+f*T,t[10]=l*z+m*A+x*T,t[11]=u*z+g*A+y*T,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function m(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function g(t,e){let s=e[0],i=e[1],r=e[2],n=e[4],h=e[5],a=e[6],o=e[8],l=e[9],u=e[10];return t[0]=Math.hypot(s,i,r),t[1]=Math.hypot(n,h,a),t[2]=Math.hypot(o,l,u),t}function p(t){let e=t[0],s=t[1],i=t[2],r=t[4],n=t[5],h=t[6],a=t[8],o=t[9],l=t[10];const u=e*e+s*s+i*i,c=r*r+n*n+h*h,d=a*a+o*o+l*l;return Math.sqrt(Math.max(u,c,d))}const f=function(){const t=[0,0,0];return function(e,s){let i=t;g(i,s);let r=1/i[0],n=1/i[1],h=1/i[2],a=s[0]*r,o=s[1]*n,l=s[2]*h,u=s[4]*r,c=s[5]*n,d=s[6]*h,m=s[8]*r,p=s[9]*n,f=s[10]*h,x=a+c+f,y=0;return x>0?(y=2*Math.sqrt(x+1),e[3]=.25*y,e[0]=(d-p)/y,e[1]=(m-l)/y,e[2]=(o-u)/y):a>c&&a>f?(y=2*Math.sqrt(1+a-c-f),e[3]=(d-p)/y,e[0]=.25*y,e[1]=(o+u)/y,e[2]=(m+l)/y):c>f?(y=2*Math.sqrt(1+c-a-f),e[3]=(m-l)/y,e[0]=(o+u)/y,e[1]=.25*y,e[2]=(d+p)/y):(y=2*Math.sqrt(1+f-a-c),e[3]=(o-u)/y,e[0]=(m+l)/y,e[1]=(d+p)/y,e[2]=.25*y),e}}();function x(t,e,s,i){let r=e[0],n=e[1],h=e[2],a=e[3],o=r+r,l=n+n,u=h+h,c=r*o,d=r*l,m=r*u,g=n*l,p=n*u,f=h*u,x=a*o,y=a*l,w=a*u,M=i[0],v=i[1],b=i[2];return t[0]=(1-(g+f))*M,t[1]=(d+w)*M,t[2]=(m-y)*M,t[3]=0,t[4]=(d-w)*v,t[5]=(1-(c+f))*v,t[6]=(p+x)*v,t[7]=0,t[8]=(m+y)*b,t[9]=(p-x)*b,t[10]=(1-(c+g))*b,t[11]=0,t[12]=s[0],t[13]=s[1],t[14]=s[2],t[15]=1,t}function y(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],h=s+s,a=i+i,o=r+r,l=s*h,u=i*h,c=i*a,d=r*h,m=r*a,g=r*o,p=n*h,f=n*a,x=n*o;return t[0]=1-c-g,t[1]=u+x,t[2]=d-f,t[3]=0,t[4]=u-x,t[5]=1-l-g,t[6]=m+p,t[7]=0,t[8]=d+f,t[9]=m-p,t[10]=1-l-c,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function w(t,e,s,i,r){let n=1/Math.tan(e/2),h=1/(i-r);return t[0]=n/s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(r+i)*h,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*r*i*h,t[15]=0,t}function M(t,e,s,i,r,n,h){let a=1/(e-s),o=1/(i-r),l=1/(n-h);return t[0]=-2*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*l,t[11]=0,t[12]=(e+s)*a,t[13]=(r+i)*o,t[14]=(h+n)*l,t[15]=1,t}function v(t,e,s,i){let r=e[0],n=e[1],h=e[2],a=i[0],o=i[1],l=i[2],u=r-s[0],c=n-s[1],d=h-s[2],m=u*u+c*c+d*d;0===m?d=1:(m=1/Math.sqrt(m),u*=m,c*=m,d*=m);let g=o*d-l*c,p=l*u-a*d,f=a*c-o*u;return m=g*g+p*p+f*f,0===m&&(l?a+=1e-6:o?l+=1e-6:o+=1e-6,g=o*d-l*c,p=l*u-a*d,f=a*c-o*u,m=g*g+p*p+f*f),m=1/Math.sqrt(m),g*=m,p*=m,f*=m,t[0]=g,t[1]=p,t[2]=f,t[3]=0,t[4]=c*f-d*p,t[5]=d*g-u*f,t[6]=u*p-c*g,t[7]=0,t[8]=u,t[9]=c,t[10]=d,t[11]=0,t[12]=r,t[13]=n,t[14]=h,t[15]=1,t}function b(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t[4]=e[4]+s[4],t[5]=e[5]+s[5],t[6]=e[6]+s[6],t[7]=e[7]+s[7],t[8]=e[8]+s[8],t[9]=e[9]+s[9],t[10]=e[10]+s[10],t[11]=e[11]+s[11],t[12]=e[12]+s[12],t[13]=e[13]+s[13],t[14]=e[14]+s[14],t[15]=e[15]+s[15],t}function _(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t[3]=e[3]-s[3],t[4]=e[4]-s[4],t[5]=e[5]-s[5],t[6]=e[6]-s[6],t[7]=e[7]-s[7],t[8]=e[8]-s[8],t[9]=e[9]-s[9],t[10]=e[10]-s[10],t[11]=e[11]-s[11],t[12]=e[12]-s[12],t[13]=e[13]-s[13],t[14]=e[14]-s[14],t[15]=e[15]-s[15],t}function E(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*s,t[9]=e[9]*s,t[10]=e[10]*s,t[11]=e[11]*s,t[12]=e[12]*s,t[13]=e[13]*s,t[14]=e[14]*s,t[15]=e[15]*s,t}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>x,conjugate:()=>d,copy:()=>p,dot:()=>w,fromEuler:()=>g,fromMat3:()=>m,identity:()=>r,invert:()=>c,length:()=>v,lerp:()=>M,multiply:()=>h,normalize:()=>b,rotateX:()=>a,rotateY:()=>o,rotateZ:()=>l,scale:()=>y,set:()=>f,setAxisAngle:()=>n,slerp:()=>u});var i=s("./node_modules/ogl/src/math/functions/Vec4Func.js");function r(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function n(t,e,s){s*=.5;let i=Math.sin(s);return t[0]=i*e[0],t[1]=i*e[1],t[2]=i*e[2],t[3]=Math.cos(s),t}function h(t,e,s){let i=e[0],r=e[1],n=e[2],h=e[3],a=s[0],o=s[1],l=s[2],u=s[3];return t[0]=i*u+h*a+r*l-n*o,t[1]=r*u+h*o+n*a-i*l,t[2]=n*u+h*l+i*o-r*a,t[3]=h*u-i*a-r*o-n*l,t}function a(t,e,s){s*=.5;let i=e[0],r=e[1],n=e[2],h=e[3],a=Math.sin(s),o=Math.cos(s);return t[0]=i*o+h*a,t[1]=r*o+n*a,t[2]=n*o-r*a,t[3]=h*o-i*a,t}function o(t,e,s){s*=.5;let i=e[0],r=e[1],n=e[2],h=e[3],a=Math.sin(s),o=Math.cos(s);return t[0]=i*o-n*a,t[1]=r*o+h*a,t[2]=n*o+i*a,t[3]=h*o-r*a,t}function l(t,e,s){s*=.5;let i=e[0],r=e[1],n=e[2],h=e[3],a=Math.sin(s),o=Math.cos(s);return t[0]=i*o+r*a,t[1]=r*o-i*a,t[2]=n*o+h*a,t[3]=h*o-n*a,t}function u(t,e,s,i){let r,n,h,a,o,l=e[0],u=e[1],c=e[2],d=e[3],m=s[0],g=s[1],p=s[2],f=s[3];return n=l*m+u*g+c*p+d*f,n<0&&(n=-n,m=-m,g=-g,p=-p,f=-f),1-n>1e-6?(r=Math.acos(n),h=Math.sin(r),a=Math.sin((1-i)*r)/h,o=Math.sin(i*r)/h):(a=1-i,o=i),t[0]=a*l+o*m,t[1]=a*u+o*g,t[2]=a*c+o*p,t[3]=a*d+o*f,t}function c(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],h=s*s+i*i+r*r+n*n,a=h?1/h:0;return t[0]=-s*a,t[1]=-i*a,t[2]=-r*a,t[3]=n*a,t}function d(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function m(t,e){let s,i=e[0]+e[4]+e[8];if(i>0)s=Math.sqrt(i+1),t[3]=.5*s,s=.5/s,t[0]=(e[5]-e[7])*s,t[1]=(e[6]-e[2])*s,t[2]=(e[1]-e[3])*s;else{let i=0;e[4]>e[0]&&(i=1),e[8]>e[3*i+i]&&(i=2);let r=(i+1)%3,n=(i+2)%3;s=Math.sqrt(e[3*i+i]-e[3*r+r]-e[3*n+n]+1),t[i]=.5*s,s=.5/s,t[3]=(e[3*r+n]-e[3*n+r])*s,t[r]=(e[3*r+i]+e[3*i+r])*s,t[n]=(e[3*n+i]+e[3*i+n])*s}return t}function g(t,e,s="YXZ"){let i=Math.sin(.5*e[0]),r=Math.cos(.5*e[0]),n=Math.sin(.5*e[1]),h=Math.cos(.5*e[1]),a=Math.sin(.5*e[2]),o=Math.cos(.5*e[2]);return"XYZ"===s?(t[0]=i*h*o+r*n*a,t[1]=r*n*o-i*h*a,t[2]=r*h*a+i*n*o,t[3]=r*h*o-i*n*a):"YXZ"===s?(t[0]=i*h*o+r*n*a,t[1]=r*n*o-i*h*a,t[2]=r*h*a-i*n*o,t[3]=r*h*o+i*n*a):"ZXY"===s?(t[0]=i*h*o-r*n*a,t[1]=r*n*o+i*h*a,t[2]=r*h*a+i*n*o,t[3]=r*h*o-i*n*a):"ZYX"===s?(t[0]=i*h*o-r*n*a,t[1]=r*n*o+i*h*a,t[2]=r*h*a-i*n*o,t[3]=r*h*o+i*n*a):"YZX"===s?(t[0]=i*h*o+r*n*a,t[1]=r*n*o+i*h*a,t[2]=r*h*a-i*n*o,t[3]=r*h*o-i*n*a):"XZY"===s&&(t[0]=i*h*o-r*n*a,t[1]=r*n*o-i*h*a,t[2]=r*h*a+i*n*o,t[3]=r*h*o+i*n*a),t}const p=i.copy,f=i.set,x=i.add,y=i.scale,w=i.dot,M=i.lerp,v=i.length,b=i.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>h,angle:()=>E,copy:()=>r,cross:()=>y,distance:()=>c,divide:()=>l,dot:()=>x,exactEquals:()=>z,inverse:()=>p,length:()=>i,lerp:()=>w,multiply:()=>o,negate:()=>g,normalize:()=>f,scale:()=>u,scaleRotateMat4:()=>v,set:()=>n,squaredDistance:()=>d,squaredLength:()=>m,subtract:()=>a,transformMat3:()=>b,transformMat4:()=>M,transformQuat:()=>_});function i(t){let e=t[0],s=t[1],i=t[2];return Math.sqrt(e*e+s*s+i*i)}function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function n(t,e,s,i){return t[0]=e,t[1]=s,t[2]=i,t}function h(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t}function a(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t}function o(t,e,s){return t[0]=e[0]*s[0],t[1]=e[1]*s[1],t[2]=e[2]*s[2],t}function l(t,e,s){return t[0]=e[0]/s[0],t[1]=e[1]/s[1],t[2]=e[2]/s[2],t}function u(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}function c(t,e){let s=e[0]-t[0],i=e[1]-t[1],r=e[2]-t[2];return Math.sqrt(s*s+i*i+r*r)}function d(t,e){let s=e[0]-t[0],i=e[1]-t[1],r=e[2]-t[2];return s*s+i*i+r*r}function m(t){let e=t[0],s=t[1],i=t[2];return e*e+s*s+i*i}function g(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function p(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function f(t,e){let s=e[0],i=e[1],r=e[2],n=s*s+i*i+r*r;return n>0&&(n=1/Math.sqrt(n)),t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function x(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function y(t,e,s){let i=e[0],r=e[1],n=e[2],h=s[0],a=s[1],o=s[2];return t[0]=r*o-n*a,t[1]=n*h-i*o,t[2]=i*a-r*h,t}function w(t,e,s,i){let r=e[0],n=e[1],h=e[2];return t[0]=r+i*(s[0]-r),t[1]=n+i*(s[1]-n),t[2]=h+i*(s[2]-h),t}function M(t,e,s){let i=e[0],r=e[1],n=e[2],h=s[3]*i+s[7]*r+s[11]*n+s[15];return h=h||1,t[0]=(s[0]*i+s[4]*r+s[8]*n+s[12])/h,t[1]=(s[1]*i+s[5]*r+s[9]*n+s[13])/h,t[2]=(s[2]*i+s[6]*r+s[10]*n+s[14])/h,t}function v(t,e,s){let i=e[0],r=e[1],n=e[2],h=s[3]*i+s[7]*r+s[11]*n+s[15];return h=h||1,t[0]=(s[0]*i+s[4]*r+s[8]*n)/h,t[1]=(s[1]*i+s[5]*r+s[9]*n)/h,t[2]=(s[2]*i+s[6]*r+s[10]*n)/h,t}function b(t,e,s){let i=e[0],r=e[1],n=e[2];return t[0]=i*s[0]+r*s[3]+n*s[6],t[1]=i*s[1]+r*s[4]+n*s[7],t[2]=i*s[2]+r*s[5]+n*s[8],t}function _(t,e,s){let i=e[0],r=e[1],n=e[2],h=s[0],a=s[1],o=s[2],l=a*n-o*r,u=o*i-h*n,c=h*r-a*i,d=a*c-o*u,m=o*l-h*c,g=h*u-a*l,p=2*s[3];return l*=p,u*=p,c*=p,d*=2,m*=2,g*=2,t[0]=i+l+d,t[1]=r+u+m,t[2]=n+c+g,t}const E=function(){const t=[0,0,0],e=[0,0,0];return function(s,i){r(t,s),r(e,i),f(t,t),f(e,e);let n=x(t,e);return n>1?0:n<-1?Math.PI:Math.acos(n)}}();function z(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>n,copy:()=>i,dot:()=>l,length:()=>a,lerp:()=>u,normalize:()=>o,scale:()=>h,set:()=>r});function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function r(t,e,s,i,r){return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t}function n(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t}function h(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t}function a(t){let e=t[0],s=t[1],i=t[2],r=t[3];return Math.sqrt(e*e+s*s+i*i+r*r)}function o(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],h=s*s+i*i+r*r+n*n;return h>0&&(h=1/Math.sqrt(h)),t[0]=s*h,t[1]=i*h,t[2]=r*h,t[3]=n*h,t}function l(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function u(t,e,s,i){let r=e[0],n=e[1],h=e[2],a=e[3];return t[0]=r+i*(s[0]-r),t[1]=n+i*(s[1]-n),t[2]=h+i*(s[2]-h),t[3]=a+i*(s[3]-a),t}}},(function(t){t.h=()=>"666b07663365110c45de"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,