/*! For license information please see main.637a9d56416f03994d1a.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateimmersive_website("main",{"./app/animations/Title.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>l});var n=s("./app/classes/Animation.js"),a=s("./node_modules/gsap/index.js"),i=s("./app/utils/text.js");class l extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t}),(0,i.split)({element:this.element,append:!0}),(0,i.split)({element:this.element,append:!0}),this.elementLinesSpans=this.element.querySelectorAll("span span")}animateIn(){a.default.set(this.element,{autoAlpha:1}),a.default.fromTo(this.elementsLines,{y:"100%"},{delay:.5,duration:1.5,stagger:{grid:"y"},y:"0%"})}animateOut(){a.default.set(this.element,{autoAlpha:0})}onResize(){this.elementsLines=(0,i.calculate)(this.elementLinesSpans)}}},"./app/classes/Animation.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});var n=s("./app/classes/Component.js"),a=s("./node_modules/console-browserify/index.js");class i extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t}),this.createObserver(),this.animateOut()}createObserver(){this.observer=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting?(a.log("animate in"),this.animateIn()):(a.log("animate out"),this.animateOut())}))})),this.observer.observe(this.element)}animateOut(){}animateIn(){}}}},(function(e){e.h=()=>"cc3e9b5129df540ed826"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi42MzdhOWQ1NjQxNmYwMzk5NGQxYS5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7cU9BSWUsTUFBTUEsVUFBY0MsRUFBQUEsUUFDakNDLGFBQVksUUFBRUMsRUFBRixTQUFXQyxJQUNyQkMsTUFBTSxDQUFFRixVQUFTQyxjQUVqQkUsRUFBQUEsRUFBQUEsT0FBTSxDQUNKSCxRQUFTSSxLQUFLSixRQUNkSyxRQUFRLEtBRVZGLEVBQUFBLEVBQUFBLE9BQU0sQ0FDSkgsUUFBU0ksS0FBS0osUUFDZEssUUFBUSxJQUdWRCxLQUFLRSxrQkFBb0JGLEtBQUtKLFFBQVFPLGlCQUFpQixZQUN4RCxDQUVEQyxZQUNFQyxFQUFBQSxRQUFBQSxJQUFTTCxLQUFLSixRQUFTLENBQ3JCVSxVQUFXLElBR2JELEVBQUFBLFFBQUFBLE9BQ0VMLEtBQUtPLGNBQ0wsQ0FDRUMsRUFBRyxRQUVMLENBQ0VDLE1BQU8sR0FDUEMsU0FBVSxJQUNWQyxRQUFTLENBQ1BDLEtBQU0sS0FHUkosRUFBRyxNQUdSLENBQ0RLLGFBQ0VSLEVBQUFBLFFBQUFBLElBQVNMLEtBQUtKLFFBQVMsQ0FDckJVLFVBQVcsR0FFZCxDQUVEUSxXQUNFZCxLQUFLTyxlQUFnQlEsRUFBQUEsRUFBQUEsV0FBVWYsS0FBS0Usa0JBQ3JDLGlLQy9DWSxNQUFNUixVQUFrQnNCLEVBQUFBLFFBQ3JDckIsYUFBWSxRQUFFQyxFQUFGLFNBQVdDLElBQ3JCQyxNQUFNLENBQUVGLFVBQVNDLGFBRWpCRyxLQUFLaUIsaUJBRUxqQixLQUFLYSxZQUNOLENBRURJLGlCQUNFakIsS0FBS2tCLFNBQVcsSUFBSUMsc0JBQXNCQyxJQUN4Q0EsRUFBUUMsU0FBU0MsSUFDWEEsRUFBTUMsZ0JBQ1JDLEVBQVFDLElBQUksY0FDWnpCLEtBQUtJLGNBRUxvQixFQUFRQyxJQUFJLGVBQ1p6QixLQUFLYSxhQUNOLEdBUEgsSUFXRmIsS0FBS2tCLFNBQVNRLFFBQVExQixLQUFLSixRQUM1QixDQUVEaUIsYUFBZSxDQUVmVCxZQUFjLGtCQzdCaEJ1QixFQUFvQkMsRUFBSSxJQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9hcHAvYW5pbWF0aW9ucy9UaXRsZS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL2FwcC9jbGFzc2VzL0FuaW1hdGlvbi5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFuaW1hdGlvbiBmcm9tIFwiY2xhc3Nlcy9BbmltYXRpb25cIjtcbmltcG9ydCBHU0FQIGZyb20gXCJnc2FwXCI7XG5pbXBvcnQgeyBjYWxjdWxhdGUsIHNwbGl0IH0gZnJvbSBcInV0aWxzL3RleHRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGl0bGUgZXh0ZW5kcyBBbmltYXRpb24ge1xuICBjb25zdHJ1Y3Rvcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pIHtcbiAgICBzdXBlcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pO1xuXG4gICAgc3BsaXQoe1xuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgYXBwZW5kOiB0cnVlLFxuICAgIH0pO1xuICAgIHNwbGl0KHtcbiAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcbiAgICAgIGFwcGVuZDogdHJ1ZSxcbiAgICB9KTtcblxuICAgIHRoaXMuZWxlbWVudExpbmVzU3BhbnMgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcInNwYW4gc3BhblwiKTtcbiAgfVxuXG4gIGFuaW1hdGVJbigpIHtcbiAgICBHU0FQLnNldCh0aGlzLmVsZW1lbnQsIHtcbiAgICAgIGF1dG9BbHBoYTogMSxcbiAgICB9KTtcblxuICAgIEdTQVAuZnJvbVRvKFxuICAgICAgdGhpcy5lbGVtZW50c0xpbmVzLFxuICAgICAge1xuICAgICAgICB5OiBcIjEwMCVcIixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGRlbGF5OiAwLjUsXG4gICAgICAgIGR1cmF0aW9uOiAxLjUsXG4gICAgICAgIHN0YWdnZXI6IHtcbiAgICAgICAgICBncmlkOiAneScsXG5cbiAgICAgICAgfSxcbiAgICAgICAgeTogXCIwJVwiLFxuICAgICAgfVxuICAgICk7XG4gIH1cbiAgYW5pbWF0ZU91dCgpIHtcbiAgICBHU0FQLnNldCh0aGlzLmVsZW1lbnQsIHtcbiAgICAgIGF1dG9BbHBoYTogMCxcbiAgICB9KTtcbiAgfVxuXG4gIG9uUmVzaXplKCkge1xuICAgIHRoaXMuZWxlbWVudHNMaW5lcyA9IGNhbGN1bGF0ZSh0aGlzLmVsZW1lbnRMaW5lc1NwYW5zKTtcbiAgfVxufVxuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tIFwiY2xhc3Nlcy9Db21wb25lbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5pbWF0aW9uIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoeyBlbGVtZW50LCBlbGVtZW50cyB9KSB7XG4gICAgc3VwZXIoeyBlbGVtZW50LCBlbGVtZW50cyB9KTtcblxuICAgIHRoaXMuY3JlYXRlT2JzZXJ2ZXIoKTtcblxuICAgIHRoaXMuYW5pbWF0ZU91dCgpO1xuICB9XG5cbiAgY3JlYXRlT2JzZXJ2ZXIoKSB7XG4gICAgdGhpcy5vYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImFuaW1hdGUgaW5cIik7XG4gICAgICAgICAgdGhpcy5hbmltYXRlSW4oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcImFuaW1hdGUgb3V0XCIpO1xuICAgICAgICAgIHRoaXMuYW5pbWF0ZU91dCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQpO1xuICB9XG5cbiAgYW5pbWF0ZU91dCgpIHt9XG5cbiAgYW5pbWF0ZUluKCkge31cbn1cbiIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IChcImNjM2U5YjUxMjlkZjU0MGVkODI2XCIpIl0sIm5hbWVzIjpbIlRpdGxlIiwiQW5pbWF0aW9uIiwiY29uc3RydWN0b3IiLCJlbGVtZW50IiwiZWxlbWVudHMiLCJzdXBlciIsInNwbGl0IiwidGhpcyIsImFwcGVuZCIsImVsZW1lbnRMaW5lc1NwYW5zIiwicXVlcnlTZWxlY3RvckFsbCIsImFuaW1hdGVJbiIsIkdTQVAiLCJhdXRvQWxwaGEiLCJlbGVtZW50c0xpbmVzIiwieSIsImRlbGF5IiwiZHVyYXRpb24iLCJzdGFnZ2VyIiwiZ3JpZCIsImFuaW1hdGVPdXQiLCJvblJlc2l6ZSIsImNhbGN1bGF0ZSIsIkNvbXBvbmVudCIsImNyZWF0ZU9ic2VydmVyIiwib2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImVudHJpZXMiLCJmb3JFYWNoIiwiZW50cnkiLCJpc0ludGVyc2VjdGluZyIsImNvbnNvbGUiLCJsb2ciLCJvYnNlcnZlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImgiXSwic291cmNlUm9vdCI6IiJ9