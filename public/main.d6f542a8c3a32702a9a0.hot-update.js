/*! For license information please see main.d6f542a8c3a32702a9a0.hot-update.js.LICENSE.txt */
self.webpackHotUpdatefloema("main",{"./node_modules/gsap/CSSPlugin.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{CSSPlugin:()=>Mt,_createElement:()=>I,_getBBox:()=>V,checkPrefix:()=>N,default:()=>Mt});var i,r,n,o,a,h,l,u,d=s("./node_modules/gsap/gsap-core.js"),c={},p=180/Math.PI,m=Math.PI/180,f=Math.atan2,_=/([A-Z])/g,g=/(left|right|width|margin|padding|x)/i,v=/[\s,\(]\S/,y={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},x=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},b=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},w=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},j=function(t,e){var s=e.s+e.c*t;e.set(e.t,e.p,~~(s+(s<0?-.5:.5))+e.u,e)},M=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},T=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},A=function(t,e,s){return t.style[e]=s},E=function(t,e,s){return t.style.setProperty(e,s)},S=function(t,e,s){return t._gsap[e]=s},C=function(t,e,s){return t._gsap.scaleX=t._gsap.scaleY=s},P=function(t,e,s,i,r){var n=t._gsap;n.scaleX=n.scaleY=s,n.renderTransform(r,n)},z=function(t,e,s,i,r){var n=t._gsap;n[e]=s,n.renderTransform(r,n)},O="transform",R=O+"Origin",F=function(t){var e=this,s=this.target,i=s.style;if(t in c){if(this.tfm=this.tfm||{},"transform"!==t&&(~(t=y[t]||t).indexOf(",")?t.split(",").forEach((function(t){return e.tfm[t]=Z(s,t)})):this.tfm[t]=s._gsap.x?s._gsap[t]:Z(s,t)),s._gsap.svg&&(this.svg=s.getAttribute(t)||""),this.props.indexOf(O)>=0)return;t=O}i&&this.props.push(t,i[t])},L=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},D=function(){var t,e,s=this.props,i=this.target,r=i.style,n=i._gsap;for(t=0;t<s.length;t+=2)s[t+1]?r[s[t]]=s[t+1]:r.removeProperty(s[t].replace(_,"-$1").toLowerCase());if(this.tfm){for(e in n.svg&&i.setAttribute("transform",this.svg||""),this.tfm)n[e]=this.tfm[e];!(t=l())||t.isStart||r[O]||(L(r),n.uncache=1)}},k=function(t,e){var s={target:t,props:[],revert:D,save:F};return e&&e.split(",").forEach((function(t){return s.save(t)})),s},I=function(t,e){var s=r.createElementNS?r.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):r.createElement(t);return s.style?s:r.createElement(t)},U=function t(e,s,i){var r=getComputedStyle(e);return r[s]||r.getPropertyValue(s.replace(_,"-$1").toLowerCase())||r.getPropertyValue(s)||!i&&t(e,N(s)||s,1)||""},B="O,Moz,ms,Ms,Webkit".split(","),N=function(t,e,s){var i=(e||a).style,r=5;if(t in i&&!s)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);r--&&!(B[r]+t in i););return r<0?null:(3===r?"ms":r>=0?B[r]:"")+t},q=function(){"undefined"!=typeof window&&window.document&&(i=window,r=i.document,n=r.documentElement,a=I("div")||{style:{}},I("div"),O=N(O),R=O+"Origin",a.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",u=!!N("perspective"),l=d.gsap.core.reverting,o=1)},X=function t(e){var s,i=I("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),r=this.parentNode,o=this.nextSibling,a=this.style.cssText;if(n.appendChild(i),i.appendChild(this),this.style.display="block",e)try{s=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(s=this._gsapBBox());return r&&(o?r.insertBefore(this,o):r.appendChild(this)),n.removeChild(i),this.style.cssText=a,s},G=function(t,e){for(var s=e.length;s--;)if(t.hasAttribute(e[s]))return t.getAttribute(e[s])},V=function(t){var e;try{e=t.getBBox()}catch(s){e=X.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===X||(e=X.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+G(t,["x","cx","x1"])||0,y:+G(t,["y","cy","y1"])||0,width:0,height:0}},Y=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!V(t))},W=function(t,e){if(e){var s=t.style;e in c&&e!==R&&(e=O),s.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),s.removeProperty(e.replace(_,"-$1").toLowerCase())):s.removeAttribute(e)}},H=function(t,e,s,i,r,n){var o=new d.PropTween(t._pt,e,s,0,1,n?T:M);return t._pt=o,o.b=i,o.e=r,t._props.push(s),o},$={deg:1,rad:1,turn:1},Q={grid:1,flex:1},K=function t(e,s,i,n){var o,h,l,u,p=parseFloat(i)||0,m=(i+"").trim().substr((p+"").length)||"px",f=a.style,_=g.test(s),v="svg"===e.tagName.toLowerCase(),y=(v?"client":"offset")+(_?"Width":"Height"),x=100,b="px"===n,w="%"===n;return n===m||!p||$[n]||$[m]?p:("px"!==m&&!b&&(p=t(e,s,i,"px")),u=e.getCTM&&Y(e),!w&&"%"!==m||!c[s]&&!~s.indexOf("adius")?(f[_?"width":"height"]=x+(b?m:n),h=~s.indexOf("adius")||"em"===n&&e.appendChild&&!v?e:e.parentNode,u&&(h=(e.ownerSVGElement||{}).parentNode),h&&h!==r&&h.appendChild||(h=r.body),(l=h._gsap)&&w&&l.width&&_&&l.time===d._ticker.time&&!l.uncache?(0,d._round)(p/l.width*x):((w||"%"===m)&&!Q[U(h,"display")]&&(f.position=U(e,"position")),h===e&&(f.position="static"),h.appendChild(a),o=a[y],h.removeChild(a),f.position="absolute",_&&w&&((l=(0,d._getCache)(h)).time=d._ticker.time,l.width=h[y]),(0,d._round)(b?o*p/x:o&&p?x/o*p:0))):(o=u?e.getBBox()[_?"width":"height"]:e[y],(0,d._round)(w?p/o*x:p/100*o)))},Z=function(t,e,s,i){var r;return o||q(),e in y&&"transform"!==e&&~(e=y[e]).indexOf(",")&&(e=e.split(",")[0]),c[e]&&"transform"!==e?(r=lt(t,i),r="transformOrigin"!==e?r[e]:r.svg?r.origin:ut(U(t,R))+" "+r.zOrigin+"px"):(!(r=t.style[e])||"auto"===r||i||~(r+"").indexOf("calc("))&&(r=st[e]&&st[e](t,e,s)||U(t,e)||(0,d._getProperty)(t,e)||("opacity"===e?1:0)),s&&!~(r+"").trim().indexOf(" ")?K(t,e,r,s)+s:r},J=function(t,e,s,i){if(!s||"none"===s){var r=N(e,t,1),n=r&&U(t,r,1);n&&n!==s?(e=r,s=n):"borderColor"===e&&(s=U(t,"borderTopColor"))}var o,a,h,l,u,c,p,m,f,_,g,v=new d.PropTween(this._pt,t.style,e,0,1,d._renderComplexString),y=0,x=0;if(v.b=s,v.e=i,s+="","auto"===(i+="")&&(t.style[e]=i,i=U(t,e)||i,t.style[e]=s),o=[s,i],(0,d._colorStringFilter)(o),i=o[1],h=(s=o[0]).match(d._numWithUnitExp)||[],(i.match(d._numWithUnitExp)||[]).length){for(;a=d._numWithUnitExp.exec(i);)p=a[0],f=i.substring(y,a.index),u?u=(u+1)%5:"rgba("!==f.substr(-5)&&"hsla("!==f.substr(-5)||(u=1),p!==(c=h[x++]||"")&&(l=parseFloat(c)||0,g=c.substr((l+"").length),"="===p.charAt(1)&&(p=(0,d._parseRelative)(l,p)+g),m=parseFloat(p),_=p.substr((m+"").length),y=d._numWithUnitExp.lastIndex-_.length,_||(_=_||d._config.units[e]||g,y===i.length&&(i+=_,v.e+=_)),g!==_&&(l=K(t,e,c,_)||0),v._pt={_next:v._pt,p:f||1===x?f:",",s:l,c:m-l,m:u&&u<4||"zIndex"===e?Math.round:0});v.c=y<i.length?i.substring(y,i.length):""}else v.r="display"===e&&"none"===i?T:M;return d._relExp.test(i)&&(v.e=0),this._pt=v,v},tt={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},et=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var s,i,r,n=e.t,o=n.style,a=e.u,h=n._gsap;if("all"===a||!0===a)o.cssText="",i=1;else for(r=(a=a.split(",")).length;--r>-1;)s=a[r],c[s]&&(i=1,s="transformOrigin"===s?R:O),W(n,s);i&&(W(n,O),h&&(h.svg&&n.removeAttribute("transform"),lt(n,1),h.uncache=1,L(o)))}},st={clearProps:function(t,e,s,i,r){if("isFromStart"!==r.data){var n=t._pt=new d.PropTween(t._pt,e,s,0,0,et);return n.u=i,n.pr=-10,n.tween=r,t._props.push(s),1}}},it=[1,0,0,1,0,0],rt={},nt=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},ot=function(t){var e=U(t,O);return nt(e)?it:e.substr(7).match(d._numExp).map(d._round)},at=function(t,e){var s,i,r,o,a=t._gsap||(0,d._getCache)(t),h=t.style,l=ot(t);return a.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(l=[(r=t.transform.baseVal.consolidate().matrix).a,r.b,r.c,r.d,r.e,r.f]).join(",")?it:l:(l!==it||t.offsetParent||t===n||a.svg||(r=h.display,h.display="block",(s=t.parentNode)&&t.offsetParent||(o=1,i=t.nextElementSibling,n.appendChild(t)),l=ot(t),r?h.display=r:W(t,"display"),o&&(i?s.insertBefore(t,i):s?s.appendChild(t):n.removeChild(t))),e&&l.length>6?[l[0],l[1],l[4],l[5],l[12],l[13]]:l)},ht=function(t,e,s,i,r,n){var o,a,h,l=t._gsap,u=r||at(t,!0),d=l.xOrigin||0,c=l.yOrigin||0,p=l.xOffset||0,m=l.yOffset||0,f=u[0],_=u[1],g=u[2],v=u[3],y=u[4],x=u[5],b=e.split(" "),w=parseFloat(b[0])||0,j=parseFloat(b[1])||0;s?u!==it&&(a=f*v-_*g)&&(h=w*(-_/a)+j*(f/a)-(f*x-_*y)/a,w=w*(v/a)+j*(-g/a)+(g*x-v*y)/a,j=h):(w=(o=V(t)).x+(~b[0].indexOf("%")?w/100*o.width:w),j=o.y+(~(b[1]||b[0]).indexOf("%")?j/100*o.height:j)),i||!1!==i&&l.smooth?(y=w-d,x=j-c,l.xOffset=p+(y*f+x*g)-y,l.yOffset=m+(y*_+x*v)-x):l.xOffset=l.yOffset=0,l.xOrigin=w,l.yOrigin=j,l.smooth=!!i,l.origin=e,l.originIsAbsolute=!!s,t.style[R]="0px 0px",n&&(H(n,l,"xOrigin",d,w),H(n,l,"yOrigin",c,j),H(n,l,"xOffset",p,l.xOffset),H(n,l,"yOffset",m,l.yOffset)),t.setAttribute("data-svg-origin",w+" "+j)},lt=function(t,e){var s=t._gsap||new d.GSCache(t);if("x"in s&&!e&&!s.uncache)return s;var i,r,n,o,a,h,l,c,_,g,v,y,x,b,w,j,M,T,A,E,S,C,P,z,F,L,D,k,I,B,N,q,X=t.style,G=s.scaleX<0,V="px",W="deg",H=getComputedStyle(t),$=U(t,R)||"0";return i=r=n=h=l=c=_=g=v=0,o=a=1,s.svg=!(!t.getCTM||!Y(t)),H.translate&&("none"===H.translate&&"none"===H.scale&&"none"===H.rotate||(X[O]=("none"!==H.translate?"translate3d("+(H.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==H.rotate?"rotate("+H.rotate+") ":"")+("none"!==H.scale?"scale("+H.scale.split(" ").join(",")+") ":"")+H[O]),X.scale=X.rotate=X.translate="none"),b=at(t,s.svg),s.svg&&(z=(!s.uncache||"0px 0px"===$)&&!e&&t.getAttribute("data-svg-origin"),ht(t,z||$,!!z||s.originIsAbsolute,!1!==s.smooth,b)),y=s.xOrigin||0,x=s.yOrigin||0,b!==it&&(T=b[0],A=b[1],E=b[2],S=b[3],i=C=b[4],r=P=b[5],6===b.length?(o=Math.sqrt(T*T+A*A),a=Math.sqrt(S*S+E*E),h=T||A?f(A,T)*p:0,(_=E||S?f(E,S)*p+h:0)&&(a*=Math.abs(Math.cos(_*m))),s.svg&&(i-=y-(y*T+x*E),r-=x-(y*A+x*S))):(q=b[6],B=b[7],D=b[8],k=b[9],I=b[10],N=b[11],i=b[12],r=b[13],n=b[14],l=(w=f(q,I))*p,w&&(z=C*(j=Math.cos(-w))+D*(M=Math.sin(-w)),F=P*j+k*M,L=q*j+I*M,D=C*-M+D*j,k=P*-M+k*j,I=q*-M+I*j,N=B*-M+N*j,C=z,P=F,q=L),c=(w=f(-E,I))*p,w&&(j=Math.cos(-w),N=S*(M=Math.sin(-w))+N*j,T=z=T*j-D*M,A=F=A*j-k*M,E=L=E*j-I*M),h=(w=f(A,T))*p,w&&(z=T*(j=Math.cos(w))+A*(M=Math.sin(w)),F=C*j+P*M,A=A*j-T*M,P=P*j-C*M,T=z,C=F),l&&Math.abs(l)+Math.abs(h)>359.9&&(l=h=0,c=180-c),o=(0,d._round)(Math.sqrt(T*T+A*A+E*E)),a=(0,d._round)(Math.sqrt(P*P+q*q)),w=f(C,P),_=Math.abs(w)>2e-4?w*p:0,v=N?1/(N<0?-N:N):0),s.svg&&(z=t.getAttribute("transform"),s.forceCSS=t.setAttribute("transform","")||!nt(U(t,O)),z&&t.setAttribute("transform",z))),Math.abs(_)>90&&Math.abs(_)<270&&(G?(o*=-1,_+=h<=0?180:-180,h+=h<=0?180:-180):(a*=-1,_+=_<=0?180:-180)),e=e||s.uncache,s.x=i-((s.xPercent=i&&(!e&&s.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-i)?-50:0)))?t.offsetWidth*s.xPercent/100:0)+V,s.y=r-((s.yPercent=r&&(!e&&s.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-r)?-50:0)))?t.offsetHeight*s.yPercent/100:0)+V,s.z=n+V,s.scaleX=(0,d._round)(o),s.scaleY=(0,d._round)(a),s.rotation=(0,d._round)(h)+W,s.rotationX=(0,d._round)(l)+W,s.rotationY=(0,d._round)(c)+W,s.skewX=_+W,s.skewY=g+W,s.transformPerspective=v+V,(s.zOrigin=parseFloat($.split(" ")[2])||0)&&(X[R]=ut($)),s.xOffset=s.yOffset=0,s.force3D=d._config.force3D,s.renderTransform=s.svg?gt:u?_t:ct,s.uncache=0,s},ut=function(t){return(t=t.split(" "))[0]+" "+t[1]},dt=function(t,e,s){var i=(0,d.getUnit)(e);return(0,d._round)(parseFloat(e)+parseFloat(K(t,"x",s+"px",i)))+i},ct=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,_t(t,e)},pt="0deg",mt="0px",ft=") ",_t=function(t,e){var s=e||this,i=s.xPercent,r=s.yPercent,n=s.x,o=s.y,a=s.z,h=s.rotation,l=s.rotationY,u=s.rotationX,d=s.skewX,c=s.skewY,p=s.scaleX,f=s.scaleY,_=s.transformPerspective,g=s.force3D,v=s.target,y=s.zOrigin,x="",b="auto"===g&&t&&1!==t||!0===g;if(y&&(u!==pt||l!==pt)){var w,j=parseFloat(l)*m,M=Math.sin(j),T=Math.cos(j);j=parseFloat(u)*m,w=Math.cos(j),n=dt(v,n,M*w*-y),o=dt(v,o,-Math.sin(j)*-y),a=dt(v,a,T*w*-y+y)}_!==mt&&(x+="perspective("+_+ft),(i||r)&&(x+="translate("+i+"%, "+r+"%) "),(b||n!==mt||o!==mt||a!==mt)&&(x+=a!==mt||b?"translate3d("+n+", "+o+", "+a+") ":"translate("+n+", "+o+ft),h!==pt&&(x+="rotate("+h+ft),l!==pt&&(x+="rotateY("+l+ft),u!==pt&&(x+="rotateX("+u+ft),d===pt&&c===pt||(x+="skew("+d+", "+c+ft),1===p&&1===f||(x+="scale("+p+", "+f+ft),v.style[O]=x||"translate(0, 0)"},gt=function(t,e){var s,i,r,n,o,a=e||this,h=a.xPercent,l=a.yPercent,u=a.x,c=a.y,p=a.rotation,f=a.skewX,_=a.skewY,g=a.scaleX,v=a.scaleY,y=a.target,x=a.xOrigin,b=a.yOrigin,w=a.xOffset,j=a.yOffset,M=a.forceCSS,T=parseFloat(u),A=parseFloat(c);p=parseFloat(p),f=parseFloat(f),(_=parseFloat(_))&&(f+=_=parseFloat(_),p+=_),p||f?(p*=m,f*=m,s=Math.cos(p)*g,i=Math.sin(p)*g,r=Math.sin(p-f)*-v,n=Math.cos(p-f)*v,f&&(_*=m,o=Math.tan(f-_),r*=o=Math.sqrt(1+o*o),n*=o,_&&(o=Math.tan(_),s*=o=Math.sqrt(1+o*o),i*=o)),s=(0,d._round)(s),i=(0,d._round)(i),r=(0,d._round)(r),n=(0,d._round)(n)):(s=g,n=v,i=r=0),(T&&!~(u+"").indexOf("px")||A&&!~(c+"").indexOf("px"))&&(T=K(y,"x",u,"px"),A=K(y,"y",c,"px")),(x||b||w||j)&&(T=(0,d._round)(T+x-(x*s+b*r)+w),A=(0,d._round)(A+b-(x*i+b*n)+j)),(h||l)&&(o=y.getBBox(),T=(0,d._round)(T+h/100*o.width),A=(0,d._round)(A+l/100*o.height)),o="matrix("+s+","+i+","+r+","+n+","+T+","+A+")",y.setAttribute("transform",o),M&&(y.style[O]=o)},vt=function(t,e,s,i,r){var n,o,a=360,h=(0,d._isString)(r),l=parseFloat(r)*(h&&~r.indexOf("rad")?p:1)-i,u=i+l+"deg";return h&&("short"===(n=r.split("_")[1])&&(l%=a)!==l%180&&(l+=l<0?a:-360),"cw"===n&&l<0?l=(l+36e9)%a-~~(l/a)*a:"ccw"===n&&l>0&&(l=(l-36e9)%a-~~(l/a)*a)),t._pt=o=new d.PropTween(t._pt,e,s,i,l,b),o.e=u,o.u="deg",t._props.push(s),o},yt=function(t,e){for(var s in e)t[s]=e[s];return t},xt=function(t,e,s){var i,r,n,o,a,h,l,u=yt({},s._gsap),p=s.style;for(r in u.svg?(n=s.getAttribute("transform"),s.setAttribute("transform",""),p[O]=e,i=lt(s,1),W(s,O),s.setAttribute("transform",n)):(n=getComputedStyle(s)[O],p[O]=e,i=lt(s,1),p[O]=n),c)(n=u[r])!==(o=i[r])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(r)<0&&(a=(0,d.getUnit)(n)!==(l=(0,d.getUnit)(o))?K(s,r,n,l):parseFloat(n),h=parseFloat(o),t._pt=new d.PropTween(t._pt,i,r,a,h-a,x),t._pt.u=l||0,t._props.push(r));yt(i,u)};(0,d._forEachName)("padding,margin,Width,Radius",(function(t,e){var s="Top",i="Right",r="Bottom",n="Left",o=(e<3?[s,i,r,n]:[s+n,s+i,r+i,r+n]).map((function(s){return e<2?t+s:"border"+s+t}));st[e>1?"border"+t:t]=function(t,e,s,i,r){var n,a;if(arguments.length<4)return n=o.map((function(e){return Z(t,e,s)})),5===(a=n.join(" ")).split(n[0]).length?n[0]:a;n=(i+"").split(" "),a={},o.forEach((function(t,e){return a[t]=n[e]=n[e]||n[(e-1)/2|0]})),t.init(e,a,r)}}));var bt,wt,jt,Mt={name:"css",register:q,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,s,i,r){var n,a,h,l,u,p,m,f,_,g,b,M,T,A,E,S,C,P,z,F,L=this._props,D=t.style,I=s.vars.startAt;for(m in o||q(),this.styles=this.styles||k(t),S=this.styles.props,this.tween=s,e)if("autoRound"!==m&&(a=e[m],!d._plugins[m]||!(0,d._checkPlugin)(m,e,s,i,t,r)))if(u=typeof a,p=st[m],"function"===u&&(u=typeof(a=a.call(s,i,t,r))),"string"===u&&~a.indexOf("random(")&&(a=(0,d._replaceRandom)(a)),p)p(this,t,m,a,s)&&(E=1);else if("--"===m.substr(0,2))n=(getComputedStyle(t).getPropertyValue(m)+"").trim(),a+="",d._colorExp.lastIndex=0,d._colorExp.test(n)||(f=(0,d.getUnit)(n),_=(0,d.getUnit)(a)),_?f!==_&&(n=K(t,m,n,_)+_):f&&(a+=f),this.add(D,"setProperty",n,a,i,r,0,0,m),L.push(m),S.push(m,D[m]);else if("undefined"!==u){if(I&&m in I?(n="function"==typeof I[m]?I[m].call(s,i,t,r):I[m],(0,d._isString)(n)&&~n.indexOf("random(")&&(n=(0,d._replaceRandom)(n)),(0,d.getUnit)(n+"")||(n+=d._config.units[m]||(0,d.getUnit)(Z(t,m))||""),"="===(n+"").charAt(1)&&(n=Z(t,m))):n=Z(t,m),l=parseFloat(n),(g="string"===u&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),h=parseFloat(a),m in y&&("autoAlpha"===m&&(1===l&&"hidden"===Z(t,"visibility")&&h&&(l=0),S.push("visibility",D.visibility),H(this,D,"visibility",l?"inherit":"hidden",h?"inherit":"hidden",!h)),"scale"!==m&&"transform"!==m&&~(m=y[m]).indexOf(",")&&(m=m.split(",")[0])),b=m in c)if(this.styles.save(m),M||((T=t._gsap).renderTransform&&!e.parseTransform||lt(t,e.parseTransform),A=!1!==e.smoothOrigin&&T.smooth,(M=this._pt=new d.PropTween(this._pt,D,O,0,1,T.renderTransform,T,0,-1)).dep=1),"scale"===m)this._pt=new d.PropTween(this._pt,T,"scaleY",T.scaleY,(g?(0,d._parseRelative)(T.scaleY,g+h):h)-T.scaleY||0,x),this._pt.u=0,L.push("scaleY",m),m+="X";else{if("transformOrigin"===m){S.push(R,D[R]),P=void 0,z=void 0,F=void 0,P=(C=a).split(" "),z=P[0],F=P[1]||"50%","top"!==z&&"bottom"!==z&&"left"!==F&&"right"!==F||(C=z,z=F,F=C),P[0]=tt[z]||z,P[1]=tt[F]||F,a=P.join(" "),T.svg?ht(t,a,0,A,0,this):((_=parseFloat(a.split(" ")[2])||0)!==T.zOrigin&&H(this,T,"zOrigin",T.zOrigin,_),H(this,D,m,ut(n),ut(a)));continue}if("svgOrigin"===m){ht(t,a,1,A,0,this);continue}if(m in rt){vt(this,T,m,l,g?(0,d._parseRelative)(l,g+a):a);continue}if("smoothOrigin"===m){H(this,T,"smooth",T.smooth,a);continue}if("force3D"===m){T[m]=a;continue}if("transform"===m){xt(this,a,t);continue}}else m in D||(m=N(m)||m);if(b||(h||0===h)&&(l||0===l)&&!v.test(a)&&m in D)h||(h=0),(f=(n+"").substr((l+"").length))!==(_=(0,d.getUnit)(a)||(m in d._config.units?d._config.units[m]:f))&&(l=K(t,m,n,_)),this._pt=new d.PropTween(this._pt,b?T:D,m,l,(g?(0,d._parseRelative)(l,g+h):h)-l,b||"px"!==_&&"zIndex"!==m||!1===e.autoRound?x:j),this._pt.u=_||0,f!==_&&"%"!==_&&(this._pt.b=n,this._pt.r=w);else if(m in D)J.call(this,t,m,n,g?g+a:a);else{if(!(m in t)){(0,d._missingPlugin)(m,a);continue}this.add(t,m,n||t[m],g?g+a:a,i,r)}b||S.push(m,D[m]),L.push(m)}E&&(0,d._sortPropTweensByPriority)(this)},render:function(t,e){if(e.tween._time||!l())for(var s=e._pt;s;)s.r(t,s.d),s=s._next;else e.styles.revert()},get:Z,aliases:y,getSetter:function(t,e,s){var i=y[e];return i&&i.indexOf(",")<0&&(e=i),e in c&&e!==R&&(t._gsap.x||Z(t,"x"))?s&&h===s?"scale"===e?C:S:(h=s||{})&&("scale"===e?P:z):t.style&&!(0,d._isUndefined)(t.style[e])?A:~e.indexOf("-")?E:(0,d._getSetter)(t,e)},core:{_removeProperty:W,_getMatrix:at}};d.gsap.utils.checkPrefix=N,d.gsap.core.getStyleSaver=k,bt="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",wt="rotation,rotationX,rotationY,skewX,skewY",jt=(0,d._forEachName)(bt+","+wt+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){c[t]=1})),(0,d._forEachName)(wt,(function(t){d._config.units[t]="deg",rt[t]=1})),y[jt[13]]=bt+","+wt,(0,d._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");y[e[1]]=jt[e[0]]})),(0,d._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){d._config.units[t]="px"})),d.gsap.registerPlugin(Mt)},"./node_modules/gsap/gsap-core.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Animation:()=>We,Back:()=>Gs,Bounce:()=>Ys,Circ:()=>$s,Cubic:()=>Us,Elastic:()=>Xs,Expo:()=>Hs,GSCache:()=>Ye,Linear:()=>ks,Power0:()=>Os,Power1:()=>Rs,Power2:()=>Fs,Power3:()=>Ls,Power4:()=>Ds,PropTween:()=>ys,Quad:()=>Is,Quart:()=>Bs,Quint:()=>Ns,Sine:()=>Ws,SteppedEase:()=>Vs,Strong:()=>qs,Timeline:()=>He,TimelineLite:()=>He,TimelineMax:()=>He,Tween:()=>ns,TweenLite:()=>ns,TweenMax:()=>ns,_checkPlugin:()=>Je,_colorExp:()=>Pe,_colorStringFilter:()=>Oe,_config:()=>b,_forEachName:()=>mt,_getCache:()=>ct,_getProperty:()=>pt,_getSetter:()=>us,_isString:()=>z,_isUndefined:()=>F,_missingPlugin:()=>K,_numExp:()=>q,_numWithUnitExp:()=>X,_parseRelative:()=>gt,_plugins:()=>ot,_relExp:()=>V,_removeLinkedListItem:()=>Ct,_renderComplexString:()=>ps,_replaceRandom:()=>ge,_round:()=>ft,_roundModifier:()=>he,_setDefaults:()=>jt,_sortPropTweensByPriority:()=>vs,_ticker:()=>Re,clamp:()=>te,default:()=>zs,distribute:()=>ae,getUnit:()=>Jt,gsap:()=>zs,interpolate:()=>ye,mapRange:()=>ve,normalize:()=>pe,pipe:()=>de,random:()=>ue,selector:()=>ne,shuffle:()=>oe,snap:()=>le,splitColor:()=>Ee,toArray:()=>re,unitize:()=>ce,wrap:()=>fe,wrapYoyo:()=>_e});var i=s("./node_modules/console-browserify/index.js");function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function n(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var o,a,h,l,u,d,c,p,m,f,_,g,v,y,x,b={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},w={duration:.5,overwrite:!1,delay:0},j=1e8,M=1e-8,T=2*Math.PI,A=T/4,E=0,S=Math.sqrt,C=Math.cos,P=Math.sin,z=function(t){return"string"==typeof t},O=function(t){return"function"==typeof t},R=function(t){return"number"==typeof t},F=function(t){return void 0===t},L=function(t){return"object"==typeof t},D=function(t){return!1!==t},k=function(){return"undefined"!=typeof window},I=function(t){return O(t)||z(t)},U="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},B=Array.isArray,N=/(?:-?\.?\d|\.)+/gi,q=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,X=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,G=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,V=/[+-]=-?[.\d]+/,Y=/[^,'"\[\]\s]+/gi,W=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,H={},$={},Q=function(t){return($=Mt(t,H))&&zs},K=function(t,e){return i.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},Z=function(t,e){return!e&&i.warn(t)},J=function(t,e){return t&&(H[t]=e)&&$&&($[t]=e)||H},tt=function(){return 0},et={suppressEvents:!0,isStart:!0},st={suppressEvents:!0},it={},rt=[],nt={},ot={},at={},ht=30,lt=[],ut="",dt=function(t){var e,s,i=t[0];if(L(i)||O(i)||(t=[t]),!(e=(i._gsap||{}).harness)){for(s=lt.length;s--&&!lt[s].targetTest(i););e=lt[s]}for(s=t.length;s--;)t[s]&&(t[s]._gsap||(t[s]._gsap=new Ye(t[s],e)))||t.splice(s,1);return t},ct=function(t){return t._gsap||dt(re(t))[0]._gsap},pt=function(t,e,s){return(s=t[e])&&O(s)?t[e]():F(s)&&t.getAttribute&&t.getAttribute(e)||s},mt=function(t,e){return(t=t.split(",")).forEach(e)||t},ft=function(t){return Math.round(1e5*t)/1e5||0},_t=function(t){return Math.round(1e7*t)/1e7||0},gt=function(t,e){var s=e.charAt(0),i=parseFloat(e.substr(2));return t=parseFloat(t),"+"===s?t+i:"-"===s?t-i:"*"===s?t*i:t/i},vt=function(t,e){for(var s=e.length,i=0;t.indexOf(e[i])<0&&++i<s;);return i<s},yt=function(){var t,e,s=rt.length,i=rt.slice(0);for(nt={},rt.length=0,t=0;t<s;t++)(e=i[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},xt=function(t,e,s,i){rt.length&&yt(),t.render(e,s,i||a),rt.length&&yt()},bt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(Y).length<2?e:z(t)?t.trim():t},wt=function(t){return t},jt=function(t,e){for(var s in e)s in t||(t[s]=e[s]);return t},Mt=function(t,e){for(var s in e)t[s]=e[s];return t},Tt=function t(e,s){for(var i in s)"__proto__"!==i&&"constructor"!==i&&"prototype"!==i&&(e[i]=L(s[i])?t(e[i]||(e[i]={}),s[i]):s[i]);return e},At=function(t,e){var s,i={};for(s in t)s in e||(i[s]=t[s]);return i},Et=function(t){var e,s=t.parent||l,i=t.keyframes?(e=B(t.keyframes),function(t,s){for(var i in s)i in t||"duration"===i&&e||"ease"===i||(t[i]=s[i])}):jt;if(D(t.inherit))for(;s;)i(t,s.vars.defaults),s=s.parent||s._dp;return t},St=function(t,e,s,i,r){void 0===s&&(s="_first"),void 0===i&&(i="_last");var n,o=t[i];if(r)for(n=e[r];o&&o[r]>n;)o=o._prev;return o?(e._next=o._next,o._next=e):(e._next=t[s],t[s]=e),e._next?e._next._prev=e:t[i]=e,e._prev=o,e.parent=e._dp=t,e},Ct=function(t,e,s,i){void 0===s&&(s="_first"),void 0===i&&(i="_last");var r=e._prev,n=e._next;r?r._next=n:t[s]===e&&(t[s]=n),n?n._prev=r:t[i]===e&&(t[i]=r),e._next=e._prev=e.parent=null},Pt=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove(t),t._act=0},zt=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var s=t;s;)s._dirty=1,s=s.parent;return t},Ot=function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t},Rt=function(t,e,s,i){return t._startAt&&(a?t._startAt.revert(st):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,i))},Ft=function t(e){return!e||e._ts&&t(e.parent)},Lt=function(t){return t._repeat?Dt(t._tTime,t=t.duration()+t._rDelay)*t:0},Dt=function(t,e){var s=Math.floor(t/=e);return t&&s===t?s-1:s},kt=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},It=function(t){return t._end=_t(t._start+(t._tDur/Math.abs(t._ts||t._rts||M)||0))},Ut=function(t,e){var s=t._dp;return s&&s.smoothChildTiming&&t._ts&&(t._start=_t(s._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),It(t),s._dirty||zt(s,t)),t},Bt=function(t,e){var s;if((e._time||e._initted&&!e._dur)&&(s=kt(t.rawTime(),e),(!e._dur||Zt(0,e.totalDuration(),s)-e._tTime>M)&&e.render(s,!0)),zt(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(s=t;s._dp;)s.rawTime()>=0&&s.totalTime(s._tTime),s=s._dp;t._zTime=-1e-8}},Nt=function(t,e,s,i){return e.parent&&Pt(e),e._start=_t((R(s)?s:s||t!==l?$t(t,s,e):t._time)+e._delay),e._end=_t(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),St(t,e,"_first","_last",t._sort?"_start":0),Vt(e)||(t._recent=e),i||Bt(t,e),t._ts<0&&Ut(t,t._tTime),t},qt=function(t,e){return(H.ScrollTrigger||K("scrollTrigger",e))&&H.ScrollTrigger.create(e,t)},Xt=function(t,e,s,i){return ts(t,e),t._initted?!s&&t._pt&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&m!==Re.frame?(rt.push(t),t._lazy=[e,i],1):void 0:1},Gt=function t(e){var s=e.parent;return s&&s._ts&&s._initted&&!s._lock&&(s.rawTime()<0||t(s))},Vt=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},Yt=function(t,e,s,i){var r=t._repeat,n=_t(e)||0,o=t._tTime/t._tDur;return o&&!i&&(t._time*=n/t._dur),t._dur=n,t._tDur=r?r<0?1e10:_t(n*(r+1)+t._rDelay*r):n,o>0&&!i?Ut(t,t._tTime=t._tDur*o):t.parent&&It(t),s||zt(t.parent,t),t},Wt=function(t){return t instanceof He?zt(t):Yt(t,t._dur)},Ht={_start:0,endTime:tt,totalDuration:tt},$t=function t(e,s,i){var r,n,o,a=e.labels,h=e._recent||Ht,l=e.duration()>=j?h.endTime(!1):e._dur;return z(s)&&(isNaN(s)||s in a)?(n=s.charAt(0),o="%"===s.substr(-1),r=s.indexOf("="),"<"===n||">"===n?(r>=0&&(s=s.replace(/=/,"")),("<"===n?h._start:h.endTime(h._repeat>=0))+(parseFloat(s.substr(1))||0)*(o?(r<0?h:i).totalDuration()/100:1)):r<0?(s in a||(a[s]=l),a[s]):(n=parseFloat(s.charAt(r-1)+s.substr(r+1)),o&&i&&(n=n/100*(B(i)?i[0]:i).totalDuration()),r>1?t(e,s.substr(0,r-1),i)+n:l+n)):null==s?l:+s},Qt=function(t,e,s){var i,r,n=R(e[1]),o=(n?2:1)+(t<2?0:1),a=e[o];if(n&&(a.duration=e[1]),a.parent=s,t){for(i=a,r=s;r&&!("immediateRender"in i);)i=r.vars.defaults||{},r=D(r.vars.inherit)&&r.parent;a.immediateRender=D(i.immediateRender),t<2?a.runBackwards=1:a.startAt=e[o-1]}return new ns(e[0],a,e[o+1])},Kt=function(t,e){return t||0===t?e(t):e},Zt=function(t,e,s){return s<t?t:s>e?e:s},Jt=function(t,e){return z(t)&&(e=W.exec(t))?e[1]:""},te=function(t,e,s){return Kt(s,(function(s){return Zt(t,e,s)}))},ee=[].slice,se=function(t,e){return t&&L(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&L(t[0]))&&!t.nodeType&&t!==u},ie=function(t,e,s){return void 0===s&&(s=[]),t.forEach((function(t){var i;return z(t)&&!e||se(t,1)?(i=s).push.apply(i,re(t)):s.push(t)}))||s},re=function(t,e,s){return h&&!e&&h.selector?h.selector(t):!z(t)||s||!d&&Fe()?B(t)?ie(t,s):se(t)?ee.call(t,0):t?[t]:[]:ee.call((e||c).querySelectorAll(t),0)},ne=function(t){return t=re(t)[0]||Z("Invalid scope")||{},function(e){var s=t.current||t.nativeElement||t;return re(e,s.querySelectorAll?s:s===t?Z("Invalid scope")||c.createElement("div"):t)}},oe=function(t){return t.sort((function(){return.5-Math.random()}))},ae=function(t){if(O(t))return t;var e=L(t)?t:{each:t},s=Ne(e.ease),i=e.from||0,r=parseFloat(e.base)||0,n={},o=i>0&&i<1,a=isNaN(i)||o,h=e.axis,l=i,u=i;return z(i)?l=u={center:.5,edges:.5,end:1}[i]||0:!o&&a&&(l=i[0],u=i[1]),function(t,o,d){var c,p,m,f,_,g,v,y,x,b=(d||e).length,w=n[b];if(!w){if(!(x="auto"===e.grid?0:(e.grid||[1,j])[1])){for(v=-j;v<(v=d[x++].getBoundingClientRect().left)&&x<b;);x--}for(w=n[b]=[],c=a?Math.min(x,b)*l-.5:i%x,p=x===j?0:a?b*u/x-.5:i/x|0,v=0,y=j,g=0;g<b;g++)m=g%x-c,f=p-(g/x|0),w[g]=_=h?Math.abs("y"===h?f:m):S(m*m+f*f),_>v&&(v=_),_<y&&(y=_);"random"===i&&oe(w),w.max=v-y,w.min=y,w.v=b=(parseFloat(e.amount)||parseFloat(e.each)*(x>b?b-1:h?"y"===h?b/x:x:Math.max(x,b/x))||0)*("edges"===i?-1:1),w.b=b<0?r-b:r,w.u=Jt(e.amount||e.each)||0,s=s&&b<0?Ue(s):s}return b=(w[t]-w.min)/w.max||0,_t(w.b+(s?s(b):b)*w.v)+w.u}},he=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(s){var i=_t(Math.round(parseFloat(s)/t)*t*e);return(i-i%1)/e+(R(s)?0:Jt(s))}},le=function(t,e){var s,i,r=B(t);return!r&&L(t)&&(s=r=t.radius||j,t.values?(t=re(t.values),(i=!R(t[0]))&&(s*=s)):t=he(t.increment)),Kt(e,r?O(t)?function(e){return i=t(e),Math.abs(i-e)<=s?i:e}:function(e){for(var r,n,o=parseFloat(i?e.x:e),a=parseFloat(i?e.y:0),h=j,l=0,u=t.length;u--;)(r=i?(r=t[u].x-o)*r+(n=t[u].y-a)*n:Math.abs(t[u]-o))<h&&(h=r,l=u);return l=!s||h<=s?t[l]:e,i||l===e||R(e)?l:l+Jt(e)}:he(t))},ue=function(t,e,s,i){return Kt(B(t)?!e:!0===s?!!(s=0):!i,(function(){return B(t)?t[~~(Math.random()*t.length)]:(s=s||1e-5)&&(i=s<1?Math.pow(10,(s+"").length-2):1)&&Math.floor(Math.round((t-s/2+Math.random()*(e-t+.99*s))/s)*s*i)/i}))},de=function(){for(var t=arguments.length,e=new Array(t),s=0;s<t;s++)e[s]=arguments[s];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},ce=function(t,e){return function(s){return t(parseFloat(s))+(e||Jt(s))}},pe=function(t,e,s){return ve(t,e,0,1,s)},me=function(t,e,s){return Kt(s,(function(s){return t[~~e(s)]}))},fe=function t(e,s,i){var r=s-e;return B(e)?me(e,t(0,e.length),s):Kt(i,(function(t){return(r+(t-e)%r)%r+e}))},_e=function t(e,s,i){var r=s-e,n=2*r;return B(e)?me(e,t(0,e.length-1),s):Kt(i,(function(t){return e+((t=(n+(t-e)%n)%n||0)>r?n-t:t)}))},ge=function(t){for(var e,s,i,r,n=0,o="";~(e=t.indexOf("random(",n));)i=t.indexOf(")",e),r="["===t.charAt(e+7),s=t.substr(e+7,i-e-7).match(r?Y:N),o+=t.substr(n,e-n)+ue(r?s:+s[0],r?0:+s[1],+s[2]||1e-5),n=i+1;return o+t.substr(n,t.length-n)},ve=function(t,e,s,i,r){var n=e-t,o=i-s;return Kt(r,(function(e){return s+((e-t)/n*o||0)}))},ye=function t(e,s,i,r){var n=isNaN(e+s)?0:function(t){return(1-t)*e+t*s};if(!n){var o,a,h,l,u,d=z(e),c={};if(!0===i&&(r=1)&&(i=null),d)e={p:e},s={p:s};else if(B(e)&&!B(s)){for(h=[],l=e.length,u=l-2,a=1;a<l;a++)h.push(t(e[a-1],e[a]));l--,n=function(t){t*=l;var e=Math.min(u,~~t);return h[e](t-e)},i=s}else r||(e=Mt(B(e)?[]:{},e));if(!h){for(o in s)Ze.call(c,e,o,"get",s[o]);n=function(t){return ms(t,c)||(d?e.p:e)}}}return Kt(i,n)},xe=function(t,e,s){var i,r,n,o=t.labels,a=j;for(i in o)(r=o[i]-e)<0==!!s&&r&&a>(r=Math.abs(r))&&(n=i,a=r);return n},be=function(t,e,s){var i,r,n,o=t.vars,a=o[e],l=h,u=t._ctx;if(a)return i=o[e+"Params"],r=o.callbackScope||t,s&&rt.length&&yt(),u&&(h=u),n=i?a.apply(r,i):a.call(r),h=l,n},we=function(t){return Pt(t),t.scrollTrigger&&t.scrollTrigger.kill(!1),t.progress()<1&&be(t,"onInterrupt"),t},je=function(t){var e=(t=!t.name&&t.default||t).name,s=O(t),i=e&&!s&&t.init?function(){this._props=[]}:t,r={init:tt,render:ms,add:Ze,kill:_s,modifier:fs,rawVars:0},n={targetTest:0,get:0,getSetter:us,aliases:{},register:0};if(Fe(),t!==i){if(ot[e])return;jt(i,jt(At(t,r),n)),Mt(i.prototype,Mt(r,At(t,n))),ot[i.prop=e]=i,t.targetTest&&(lt.push(i),it[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}J(e,i),t.register&&t.register(zs,i,ys)},Me=255,Te={aqua:[0,Me,Me],lime:[0,Me,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Me],navy:[0,0,128],white:[Me,Me,Me],olive:[128,128,0],yellow:[Me,Me,0],orange:[Me,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Me,0,0],pink:[Me,192,203],cyan:[0,Me,Me],transparent:[Me,Me,Me,0]},Ae=function(t,e,s){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(s-e)*t*6:t<.5?s:3*t<2?e+(s-e)*(2/3-t)*6:e)*Me+.5|0},Ee=function(t,e,s){var i,r,n,o,a,h,l,u,d,c,p=t?R(t)?[t>>16,t>>8&Me,t&Me]:0:Te.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),Te[t])p=Te[t];else if("#"===t.charAt(0)){if(t.length<6&&(i=t.charAt(1),r=t.charAt(2),n=t.charAt(3),t="#"+i+i+r+r+n+n+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&Me,p&Me,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&Me,t&Me]}else if("hsl"===t.substr(0,3))if(p=c=t.match(N),e){if(~t.indexOf("="))return p=t.match(q),s&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,a=+p[1]/100,i=2*(h=+p[2]/100)-(r=h<=.5?h*(a+1):h+a-h*a),p.length>3&&(p[3]*=1),p[0]=Ae(o+1/3,i,r),p[1]=Ae(o,i,r),p[2]=Ae(o-1/3,i,r);else p=t.match(N)||Te.transparent;p=p.map(Number)}return e&&!c&&(i=p[0]/Me,r=p[1]/Me,n=p[2]/Me,h=((l=Math.max(i,r,n))+(u=Math.min(i,r,n)))/2,l===u?o=a=0:(d=l-u,a=h>.5?d/(2-l-u):d/(l+u),o=l===i?(r-n)/d+(r<n?6:0):l===r?(n-i)/d+2:(i-r)/d+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*a+.5),p[2]=~~(100*h+.5)),s&&p.length<4&&(p[3]=1),p},Se=function(t){var e=[],s=[],i=-1;return t.split(Pe).forEach((function(t){var r=t.match(X)||[];e.push.apply(e,r),s.push(i+=r.length+1)})),e.c=s,e},Ce=function(t,e,s){var i,r,n,o,a="",h=(t+a).match(Pe),l=e?"hsla(":"rgba(",u=0;if(!h)return t;if(h=h.map((function(t){return(t=Ee(t,e,1))&&l+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),s&&(n=Se(t),(i=s.c).join(a)!==n.c.join(a)))for(o=(r=t.replace(Pe,"1").split(X)).length-1;u<o;u++)a+=r[u]+(~i.indexOf(u)?h.shift()||l+"0,0,0,0)":(n.length?n:h.length?h:s).shift());if(!r)for(o=(r=t.split(Pe)).length-1;u<o;u++)a+=r[u]+h[u];return a+r[o]},Pe=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in Te)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),ze=/hsl[a]?\(/,Oe=function(t){var e,s=t.join(" ");if(Pe.lastIndex=0,Pe.test(s))return e=ze.test(s),t[1]=Ce(t[1],e),t[0]=Ce(t[0],e,Se(t[1])),!0},Re=function(){var t,e,s,i,r,n,o=Date.now,a=500,h=33,l=o(),m=l,f=1e3/240,g=f,v=[],y=function s(u){var d,c,p,_,y=o()-m,x=!0===u;if(y>a&&(l+=y-h),((d=(p=(m+=y)-l)-g)>0||x)&&(_=++i.frame,r=p-1e3*i.time,i.time=p/=1e3,g+=d+(d>=f?4:f-d),c=1),x||(t=e(s)),c)for(n=0;n<v.length;n++)v[n](p,r,_,u)};return i={time:0,frame:0,tick:function(){y(!0)},deltaRatio:function(t){return r/(1e3/(t||60))},wake:function(){p&&(!d&&k()&&(u=d=window,c=u.document||{},H.gsap=zs,(u.gsapVersions||(u.gsapVersions=[])).push(zs.version),Q($||u.GreenSockGlobals||!u.gsap&&u||{}),s=u.requestAnimationFrame),t&&i.sleep(),e=s||function(t){return setTimeout(t,g-1e3*i.time+1|0)},_=1,y(2))},sleep:function(){(s?u.cancelAnimationFrame:clearTimeout)(t),_=0,e=tt},lagSmoothing:function(t,e){a=t||1e8,h=Math.min(e,a,0)},fps:function(t){f=1e3/(t||240),g=1e3*i.time+f},add:function(t,e,s){var r=e?function(e,s,n,o){t(e,s,n,o),i.remove(r)}:t;return i.remove(t),v[s?"unshift":"push"](r),Fe(),r},remove:function(t,e){~(e=v.indexOf(t))&&v.splice(e,1)&&n>=e&&n--},_listeners:v}}(),Fe=function(){return!_&&Re.wake()},Le={},De=/^[\d.\-M][\d.\-,\s]/,ke=/["']/g,Ie=function(t){for(var e,s,i,r={},n=t.substr(1,t.length-3).split(":"),o=n[0],a=1,h=n.length;a<h;a++)s=n[a],e=a!==h-1?s.lastIndexOf(","):s.length,i=s.substr(0,e),r[o]=isNaN(i)?i.replace(ke,"").trim():+i,o=s.substr(e+1).trim();return r},Ue=function(t){return function(e){return 1-t(1-e)}},Be=function t(e,s){for(var i,r=e._first;r;)r instanceof He?t(r,s):!r.vars.yoyoEase||r._yoyo&&r._repeat||r._yoyo===s||(r.timeline?t(r.timeline,s):(i=r._ease,r._ease=r._yEase,r._yEase=i,r._yoyo=s)),r=r._next},Ne=function(t,e){return t&&(O(t)?t:Le[t]||function(t){var e,s,i,r,n=(t+"").split("("),o=Le[n[0]];return o&&n.length>1&&o.config?o.config.apply(null,~t.indexOf("{")?[Ie(n[1])]:(e=t,s=e.indexOf("(")+1,i=e.indexOf(")"),r=e.indexOf("(",s),e.substring(s,~r&&r<i?e.indexOf(")",i+1):i)).split(",").map(bt)):Le._CE&&De.test(t)?Le._CE("",t):o}(t))||e},qe=function(t,e,s,i){void 0===s&&(s=function(t){return 1-e(1-t)}),void 0===i&&(i=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var r,n={easeIn:e,easeOut:s,easeInOut:i};return mt(t,(function(t){for(var e in Le[t]=H[t]=n,Le[r=t.toLowerCase()]=s,n)Le[r+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=Le[t+"."+e]=n[e]})),n},Xe=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},Ge=function t(e,s,i){var r=s>=1?s:1,n=(i||(e?.3:.45))/(s<1?s:1),o=n/T*(Math.asin(1/r)||0),a=function(t){return 1===t?1:r*Math.pow(2,-10*t)*P((t-o)*n)+1},h="out"===e?a:"in"===e?function(t){return 1-a(1-t)}:Xe(a);return n=T/n,h.config=function(s,i){return t(e,s,i)},h},Ve=function t(e,s){void 0===s&&(s=1.70158);var i=function(t){return t?--t*t*((s+1)*t+s)+1:0},r="out"===e?i:"in"===e?function(t){return 1-i(1-t)}:Xe(i);return r.config=function(s){return t(e,s)},r};mt("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var s=e<5?e+1:e;qe(t+",Power"+(s-1),e?function(t){return Math.pow(t,s)}:function(t){return t},(function(t){return 1-Math.pow(1-t,s)}),(function(t){return t<.5?Math.pow(2*t,s)/2:1-Math.pow(2*(1-t),s)/2}))})),Le.Linear.easeNone=Le.none=Le.Linear.easeIn,qe("Elastic",Ge("in"),Ge("out"),Ge()),g=7.5625,y=1/(v=2.75),qe("Bounce",(function(t){return 1-x(1-t)}),x=function(t){return t<y?g*t*t:t<.7272727272727273?g*Math.pow(t-1.5/v,2)+.75:t<.9090909090909092?g*(t-=2.25/v)*t+.9375:g*Math.pow(t-2.625/v,2)+.984375}),qe("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),qe("Circ",(function(t){return-(S(1-t*t)-1)})),qe("Sine",(function(t){return 1===t?1:1-C(t*A)})),qe("Back",Ve("in"),Ve("out"),Ve()),Le.SteppedEase=Le.steps=H.SteppedEase={config:function(t,e){void 0===t&&(t=1);var s=1/t,i=t+(e?0:1),r=e?1:0;return function(t){return((i*Zt(0,.99999999,t)|0)+r)*s}}},w.ease=Le["quad.out"],mt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return ut+=t+","+t+"Params,"}));var Ye=function(t,e){this.id=E++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:pt,this.set=e?e.getSetter:us},We=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Yt(this,+t.duration,1,1),this.data=t.data,h&&(this._ctx=h,h.data.push(this)),_||Re.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Yt(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(Fe(),!arguments.length)return this._tTime;var s=this._dp;if(s&&s.smoothChildTiming&&this._ts){for(Ut(this,t),!s._dp||s.parent||Bt(s,this);s&&s.parent;)s.parent._time!==s._start+(s._ts>=0?s._tTime/s._ts:(s.totalDuration()-s._tTime)/-s._ts)&&s.totalTime(s._tTime,!0),s=s.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&Nt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===M||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),xt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Lt(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Lt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},e.iteration=function(t,e){var s=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*s,e):this._repeat?Dt(this._tTime,s)+1:1},e.timeScale=function(t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var e=this.parent&&this._ts?kt(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Zt(-this._delay,this._tDur,e),!0),It(this),Ot(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Fe(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==M&&(this._tTime-=M)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&Nt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(D(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?kt(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=st);var e=a;return a=t,this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents),"nested"!==this.data&&Pt(this),a=e,this},e.globalTime=function(t){for(var e=this,s=arguments.length?t:e.rawTime();e;)s=e._start+s/(e._ts||1),e=e._dp;return!this.parent&&this.vars.immediateRender?-1:s},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,Wt(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,Wt(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime($t(this,t),D(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,D(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,s=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=s&&t<this.endTime(!0)-M))},e.eventCallback=function(t,e,s){var i=this.vars;return arguments.length>1?(e?(i[t]=e,s&&(i[t+"Params"]=s),"onUpdate"===t&&(this._onUpdate=e)):delete i[t],this):i[t]},e.then=function(t){var e=this;return new Promise((function(s){var i=O(t)?t:wt,r=function(){var t=e.then;e.then=null,O(i)&&(i=i(e))&&(i.then||i===e)&&(e.then=t),s(i),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?r():e._prom=r}))},e.kill=function(){we(this)},t}();jt(We.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var He=function(t){function e(e,s){var i;return void 0===e&&(e={}),(i=t.call(this,e)||this).labels={},i.smoothChildTiming=!!e.smoothChildTiming,i.autoRemoveChildren=!!e.autoRemoveChildren,i._sort=D(e.sortChildren),l&&Nt(e.parent||l,r(i),s),e.reversed&&i.reverse(),e.paused&&i.paused(!0),e.scrollTrigger&&qt(r(i),e.scrollTrigger),i}n(e,t);var s=e.prototype;return s.to=function(t,e,s){return Qt(0,arguments,this),this},s.from=function(t,e,s){return Qt(1,arguments,this),this},s.fromTo=function(t,e,s,i){return Qt(2,arguments,this),this},s.set=function(t,e,s){return e.duration=0,e.parent=this,Et(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new ns(t,e,$t(this,s),1),this},s.call=function(t,e,s){return Nt(this,ns.delayedCall(0,t,e),s)},s.staggerTo=function(t,e,s,i,r,n,o){return s.duration=e,s.stagger=s.stagger||i,s.onComplete=n,s.onCompleteParams=o,s.parent=this,new ns(t,s,$t(this,r)),this},s.staggerFrom=function(t,e,s,i,r,n,o){return s.runBackwards=1,Et(s).immediateRender=D(s.immediateRender),this.staggerTo(t,e,s,i,r,n,o)},s.staggerFromTo=function(t,e,s,i,r,n,o,a){return i.startAt=s,Et(i).immediateRender=D(i.immediateRender),this.staggerTo(t,e,i,r,n,o,a)},s.render=function(t,e,s){var i,r,n,o,h,u,d,c,p,m,f,_,g=this._time,v=this._dirty?this.totalDuration():this._tDur,y=this._dur,x=t<=0?0:_t(t),b=this._zTime<0!=t<0&&(this._initted||!y);if(this!==l&&x>v&&t>=0&&(x=v),x!==this._tTime||s||b){if(g!==this._time&&y&&(x+=this._time-g,t+=this._time-g),i=x,p=this._start,u=!(c=this._ts),b&&(y||(g=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(f=this._yoyo,h=y+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*h+t,e,s);if(i=_t(x%h),x===v?(o=this._repeat,i=y):((o=~~(x/h))&&o===x/h&&(i=y,o--),i>y&&(i=y)),m=Dt(this._tTime,h),!g&&this._tTime&&m!==o&&(m=o),f&&1&o&&(i=y-i,_=1),o!==m&&!this._lock){var w=f&&1&m,j=w===(f&&1&o);if(o<m&&(w=!w),g=w?0:y,this._lock=1,this.render(g||(_?0:_t(o*h)),e,!y)._lock=0,this._tTime=x,!e&&this.parent&&be(this,"onRepeat"),this.vars.repeatRefresh&&!_&&(this.invalidate()._lock=1),g&&g!==this._time||u!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(y=this._dur,v=this._tDur,j&&(this._lock=2,g=w?y:-1e-4,this.render(g,!0),this.vars.repeatRefresh&&!_&&this.invalidate()),this._lock=0,!this._ts&&!u)return this;Be(this,_)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(d=function(t,e,s){var i;if(s>e)for(i=t._first;i&&i._start<=s;){if("isPause"===i.data&&i._start>e)return i;i=i._next}else for(i=t._last;i&&i._start>=s;){if("isPause"===i.data&&i._start<e)return i;i=i._prev}}(this,_t(g),_t(i)),d&&(x-=i-(i=d._start))),this._tTime=x,this._time=i,this._act=!c,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,g=0),!g&&i&&!e&&(be(this,"onStart"),this._tTime!==x))return this;if(i>=g&&t>=0)for(r=this._first;r;){if(n=r._next,(r._act||i>=r._start)&&r._ts&&d!==r){if(r.parent!==this)return this.render(t,e,s);if(r.render(r._ts>0?(i-r._start)*r._ts:(r._dirty?r.totalDuration():r._tDur)+(i-r._start)*r._ts,e,s),i!==this._time||!this._ts&&!u){d=0,n&&(x+=this._zTime=-1e-8);break}}r=n}else{s=s||a,r=this._last;for(var T=t<0?t:i;r;){if(n=r._prev,(r._act||T<=r._end)&&r._ts&&d!==r){if(r.parent!==this)return this.render(t,e,s);if(r.render(r._ts>0?(T-r._start)*r._ts:(r._dirty?r.totalDuration():r._tDur)+(T-r._start)*r._ts,e,s),i!==this._time||!this._ts&&!u){d=0,n&&(x+=this._zTime=T?-1e-8:M);break}}r=n}}if(d&&!e&&(this.pause(),d.render(i>=g?0:-1e-8)._zTime=i>=g?1:-1,this._ts))return this._start=p,It(this),this.render(t,e,s);this._onUpdate&&!e&&be(this,"onUpdate",!0),(x===v&&this._tTime>=this.totalDuration()||!x&&g)&&(p!==this._start&&Math.abs(c)===Math.abs(this._ts)||this._lock||((t||!y)&&(x===v&&this._ts>0||!x&&this._ts<0)&&Pt(this,1),e||t<0&&!g||!x&&!g&&v||(be(this,x===v&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(x<v&&this.timeScale()>0)&&this._prom())))}return this},s.add=function(t,e){var s=this;if(R(e)||(e=$t(this,e,t)),!(t instanceof We)){if(B(t))return t.forEach((function(t){return s.add(t,e)})),this;if(z(t))return this.addLabel(t,e);if(!O(t))return this;t=ns.delayedCall(0,t)}return this!==t?Nt(this,t,e):this},s.getChildren=function(t,e,s,i){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===s&&(s=!0),void 0===i&&(i=-j);for(var r=[],n=this._first;n;)n._start>=i&&(n instanceof ns?e&&r.push(n):(s&&r.push(n),t&&r.push.apply(r,n.getChildren(!0,e,s)))),n=n._next;return r},s.getById=function(t){for(var e=this.getChildren(1,1,1),s=e.length;s--;)if(e[s].vars.id===t)return e[s]},s.remove=function(t){return z(t)?this.removeLabel(t):O(t)?this.killTweensOf(t):(Ct(this,t),t===this._recent&&(this._recent=this._last),zt(this))},s.totalTime=function(e,s){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=_t(Re.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,s),this._forcing=0,this):this._tTime},s.addLabel=function(t,e){return this.labels[t]=$t(this,e),this},s.removeLabel=function(t){return delete this.labels[t],this},s.addPause=function(t,e,s){var i=ns.delayedCall(0,e||tt,s);return i.data="isPause",this._hasPause=1,Nt(this,i,$t(this,t))},s.removePause=function(t){var e=this._first;for(t=$t(this,t);e;)e._start===t&&"isPause"===e.data&&Pt(e),e=e._next},s.killTweensOf=function(t,e,s){for(var i=this.getTweensOf(t,s),r=i.length;r--;)$e!==i[r]&&i[r].kill(t,e);return this},s.getTweensOf=function(t,e){for(var s,i=[],r=re(t),n=this._first,o=R(e);n;)n instanceof ns?vt(n._targets,r)&&(o?(!$e||n._initted&&n._ts)&&n.globalTime(0)<=e&&n.globalTime(n.totalDuration())>e:!e||n.isActive())&&i.push(n):(s=n.getTweensOf(r,e)).length&&i.push.apply(i,s),n=n._next;return i},s.tweenTo=function(t,e){e=e||{};var s,i=this,r=$t(i,t),n=e,o=n.startAt,a=n.onStart,h=n.onStartParams,l=n.immediateRender,u=ns.to(i,jt({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:r,overwrite:"auto",duration:e.duration||Math.abs((r-(o&&"time"in o?o.time:i._time))/i.timeScale())||M,onStart:function(){if(i.pause(),!s){var t=e.duration||Math.abs((r-(o&&"time"in o?o.time:i._time))/i.timeScale());u._dur!==t&&Yt(u,t,0,1).render(u._time,!0,!0),s=1}a&&a.apply(u,h||[])}},e));return l?u.render(0):u},s.tweenFromTo=function(t,e,s){return this.tweenTo(e,jt({startAt:{time:$t(this,t)}},s))},s.recent=function(){return this._recent},s.nextLabel=function(t){return void 0===t&&(t=this._time),xe(this,$t(this,t))},s.previousLabel=function(t){return void 0===t&&(t=this._time),xe(this,$t(this,t),1)},s.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+M)},s.shiftChildren=function(t,e,s){void 0===s&&(s=0);for(var i,r=this._first,n=this.labels;r;)r._start>=s&&(r._start+=t,r._end+=t),r=r._next;if(e)for(i in n)n[i]>=s&&(n[i]+=t);return zt(this)},s.invalidate=function(){var e=this._first;for(this._lock=0;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},s.clear=function(t){void 0===t&&(t=!0);for(var e,s=this._first;s;)e=s._next,this.remove(s),s=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),zt(this)},s.totalDuration=function(t){var e,s,i,r=0,n=this,o=n._last,a=j;if(arguments.length)return n.timeScale((n._repeat<0?n.duration():n.totalDuration())/(n.reversed()?-t:t));if(n._dirty){for(i=n.parent;o;)e=o._prev,o._dirty&&o.totalDuration(),(s=o._start)>a&&n._sort&&o._ts&&!n._lock?(n._lock=1,Nt(n,o,s-o._delay,1)._lock=0):a=s,s<0&&o._ts&&(r-=s,(!i&&!n._dp||i&&i.smoothChildTiming)&&(n._start+=s/n._ts,n._time-=s,n._tTime-=s),n.shiftChildren(-s,!1,-Infinity),a=0),o._end>r&&o._ts&&(r=o._end),o=e;Yt(n,n===l&&n._time>r?n._time:r,1,1),n._dirty=0}return n._tDur},e.updateRoot=function(t){if(l._ts&&(xt(l,kt(t,l)),m=Re.frame),Re.frame>=ht){ht+=b.autoSleep||120;var e=l._first;if((!e||!e._ts)&&b.autoSleep&&Re._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Re.sleep()}}},e}(We);jt(He.prototype,{_lock:0,_hasPause:0,_forcing:0});var $e,Qe,Ke=function(t,e,s,i,r,n,o){var a,h,l,u,d,c,p,m,f=new ys(this._pt,t,e,0,1,ps,null,r),_=0,g=0;for(f.b=s,f.e=i,s+="",(p=~(i+="").indexOf("random("))&&(i=ge(i)),n&&(n(m=[s,i],t,e),s=m[0],i=m[1]),h=s.match(G)||[];a=G.exec(i);)u=a[0],d=i.substring(_,a.index),l?l=(l+1)%5:"rgba("===d.substr(-5)&&(l=1),u!==h[g++]&&(c=parseFloat(h[g-1])||0,f._pt={_next:f._pt,p:d||1===g?d:",",s:c,c:"="===u.charAt(1)?gt(c,u)-c:parseFloat(u)-c,m:l&&l<4?Math.round:0},_=G.lastIndex);return f.c=_<i.length?i.substring(_,i.length):"",f.fp=o,(V.test(i)||p)&&(f.e=0),this._pt=f,f},Ze=function(t,e,s,i,r,n,o,a,h,l){O(i)&&(i=i(r||0,t,n));var u,d=t[e],c="get"!==s?s:O(d)?h?t[e.indexOf("set")||!O(t["get"+e.substr(3)])?e:"get"+e.substr(3)](h):t[e]():d,p=O(d)?h?hs:as:os;if(z(i)&&(~i.indexOf("random(")&&(i=ge(i)),"="===i.charAt(1)&&((u=gt(c,i)+(Jt(c)||0))||0===u)&&(i=u)),!l||c!==i||Qe)return isNaN(c*i)||""===i?(!d&&!(e in t)&&K(e,i),Ke.call(this,t,e,c,i,p,a||b.stringFilter,h)):(u=new ys(this._pt,t,e,+c||0,i-(c||0),"boolean"==typeof d?cs:ds,0,p),h&&(u.fp=h),o&&u.modifier(o,this,t),this._pt=u)},Je=function(t,e,s,i,r,n){var o,a,h,l;if(ot[t]&&!1!==(o=new ot[t]).init(r,o.rawVars?e[t]:function(t,e,s,i,r){if(O(t)&&(t=ss(t,r,e,s,i)),!L(t)||t.style&&t.nodeType||B(t)||U(t))return z(t)?ss(t,r,e,s,i):t;var n,o={};for(n in t)o[n]=ss(t[n],r,e,s,i);return o}(e[t],i,r,n,s),s,i,n)&&(s._pt=a=new ys(s._pt,r,t,0,1,o.render,o,0,o.priority),s!==f))for(h=s._ptLookup[s._targets.indexOf(r)],l=o._props.length;l--;)h[o._props[l]]=a;return o},ts=function t(e,s){var i,r,n,h,u,d,c,p,m,f,_,g,v,y=e.vars,x=y.ease,b=y.startAt,T=y.immediateRender,A=y.lazy,E=y.onUpdate,S=y.onUpdateParams,C=y.callbackScope,P=y.runBackwards,z=y.yoyoEase,O=y.keyframes,R=y.autoRevert,F=e._dur,L=e._startAt,k=e._targets,I=e.parent,U=I&&"nested"===I.data?I.parent._targets:k,B="auto"===e._overwrite&&!o,N=e.timeline;if(N&&(!O||!x)&&(x="none"),e._ease=Ne(x,w.ease),e._yEase=z?Ue(Ne(!0===z?x:z,w.ease)):0,z&&e._yoyo&&!e._repeat&&(z=e._yEase,e._yEase=e._ease,e._ease=z),e._from=!N&&!!y.runBackwards,!N||O&&!y.stagger){if(g=(p=k[0]?ct(k[0]).harness:0)&&y[p.prop],i=At(y,it),L&&(L.revert(P&&F?st:et),L._lazy=0),b){if(Pt(e._startAt=ns.set(k,jt({data:"isStart",overwrite:!1,parent:I,immediateRender:!0,lazy:D(A),startAt:null,delay:0,onUpdate:E,onUpdateParams:S,callbackScope:C,stagger:0},b))),s<0&&(a||!T&&!R)&&e._startAt.revert(st),T&&F&&s<=0)return void(s&&(e._zTime=s))}else if(P&&F&&!L)if(s&&(T=!1),n=jt({overwrite:!1,data:"isFromStart",lazy:T&&D(A),immediateRender:T,stagger:0,parent:I},i),g&&(n[p.prop]=g),Pt(e._startAt=ns.set(k,n)),s<0&&(a?e._startAt.revert(st):e._startAt.render(-1,!0)),e._zTime=s,T){if(!s)return}else t(e._startAt,M);for(e._pt=e._ptCache=0,A=F&&D(A)||A&&!F,r=0;r<k.length;r++){if(c=(u=k[r])._gsap||dt(k)[r]._gsap,e._ptLookup[r]=f={},nt[c.id]&&rt.length&&yt(),_=U===k?r:U.indexOf(u),p&&!1!==(m=new p).init(u,g||i,e,_,U)&&(e._pt=h=new ys(e._pt,u,m.name,0,1,m.render,m,0,m.priority),m._props.forEach((function(t){f[t]=h})),m.priority&&(d=1)),!p||g)for(n in i)ot[n]&&(m=Je(n,i,e,_,u,U))?m.priority&&(d=1):f[n]=h=Ze.call(e,u,n,"get",i[n],_,U,0,y.stringFilter);e._op&&e._op[r]&&e.kill(u,e._op[r]),B&&e._pt&&($e=e,l.killTweensOf(u,f,e.globalTime(s)),v=!e.parent,$e=0),e._pt&&A&&(nt[c.id]=1)}d&&vs(e),e._onInit&&e._onInit(e)}e._onUpdate=E,e._initted=(!e._op||e._pt)&&!v,O&&s<=0&&N.render(j,!0,!0)},es=function(t,e,s,i){var r,n,o=e.ease||i||"power1.inOut";if(B(e))n=s[t]||(s[t]=[]),e.forEach((function(t,s){return n.push({t:s/(e.length-1)*100,v:t,e:o})}));else for(r in e)n=s[r]||(s[r]=[]),"ease"===r||n.push({t:parseFloat(t),v:e[r],e:o})},ss=function(t,e,s,i,r){return O(t)?t.call(e,s,i,r):z(t)&&~t.indexOf("random(")?ge(t):t},is=ut+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",rs={};mt(is+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return rs[t]=1}));var ns=function(t){function e(e,s,i,n){var a;"number"==typeof s&&(i.duration=s,s=i,i=null);var h,u,d,c,p,m,f,_,g=(a=t.call(this,n?s:Et(s))||this).vars,v=g.duration,y=g.delay,x=g.immediateRender,w=g.stagger,j=g.overwrite,M=g.keyframes,T=g.defaults,A=g.scrollTrigger,E=g.yoyoEase,S=s.parent||l,C=(B(e)||U(e)?R(e[0]):"length"in s)?[e]:re(e);if(a._targets=C.length?dt(C):Z("GSAP target "+e+" not found. https://greensock.com",!b.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=j,M||w||I(v)||I(y)){if(s=a.vars,(h=a.timeline=new He({data:"nested",defaults:T||{}})).kill(),h.parent=h._dp=r(a),h._start=0,w||I(v)||I(y)){if(c=C.length,f=w&&ae(w),L(w))for(p in w)~is.indexOf(p)&&(_||(_={}),_[p]=w[p]);for(u=0;u<c;u++)(d=At(s,rs)).stagger=0,E&&(d.yoyoEase=E),_&&Mt(d,_),m=C[u],d.duration=+ss(v,r(a),u,m,C),d.delay=(+ss(y,r(a),u,m,C)||0)-a._delay,!w&&1===c&&d.delay&&(a._delay=y=d.delay,a._start+=y,d.delay=0),h.to(m,d,f?f(u,m,C):0),h._ease=Le.none;h.duration()?v=y=0:a.timeline=0}else if(M){Et(jt(h.vars.defaults,{ease:"none"})),h._ease=Ne(M.ease||s.ease||"none");var P,z,O,F=0;if(B(M))M.forEach((function(t){return h.to(C,t,">")})),h.duration();else{for(p in d={},M)"ease"===p||"easeEach"===p||es(p,M[p],d,M.easeEach);for(p in d)for(P=d[p].sort((function(t,e){return t.t-e.t})),F=0,u=0;u<P.length;u++)(O={ease:(z=P[u]).e,duration:(z.t-(u?P[u-1].t:0))/100*v})[p]=z.v,h.to(C,O,F),F+=O.duration;h.duration()<v&&h.to({},{duration:v-h.duration()})}}v||a.duration(v=h.duration())}else a.timeline=0;return!0!==j||o||($e=r(a),l.killTweensOf(C),$e=0),Nt(S,r(a),i),s.reversed&&a.reverse(),s.paused&&a.paused(!0),(x||!v&&!M&&a._start===_t(S._time)&&D(x)&&Ft(r(a))&&"nested"!==S.data)&&(a._tTime=-1e-8,a.render(Math.max(0,-y))),A&&qt(r(a),A),a}n(e,t);var s=e.prototype;return s.render=function(t,e,s){var i,r,n,o,h,l,u,d,c,p=this._time,m=this._tDur,f=this._dur,_=t<0,g=t>m-M&&!_?m:t<M?0:t;if(f){if(g!==this._tTime||!t||s||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==_){if(i=g,d=this.timeline,this._repeat){if(o=f+this._rDelay,this._repeat<-1&&_)return this.totalTime(100*o+t,e,s);if(i=_t(g%o),g===m?(n=this._repeat,i=f):((n=~~(g/o))&&n===g/o&&(i=f,n--),i>f&&(i=f)),(l=this._yoyo&&1&n)&&(c=this._yEase,i=f-i),h=Dt(this._tTime,o),i===p&&!s&&this._initted)return this._tTime=g,this;n!==h&&(d&&this._yEase&&Be(d,l),!this.vars.repeatRefresh||l||this._lock||(this._lock=s=1,this.render(_t(o*n),!0).invalidate()._lock=0))}if(!this._initted){if(Xt(this,_?t:i,s,e))return this._tTime=0,this;if(p!==this._time)return this;if(f!==this._dur)return this.render(t,e,s)}if(this._tTime=g,this._time=i,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(c||this._ease)(i/f),this._from&&(this.ratio=u=1-u),i&&!p&&!e&&(be(this,"onStart"),this._tTime!==g))return this;for(r=this._pt;r;)r.r(u,r.d),r=r._next;d&&d.render(t<0?t:!i&&l?-1e-8:d._dur*d._ease(i/this._dur),e,s)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(_&&Rt(this,t,0,s),be(this,"onUpdate")),this._repeat&&n!==h&&this.vars.onRepeat&&!e&&this.parent&&be(this,"onRepeat"),g!==this._tDur&&g||this._tTime!==g||(_&&!this._onUpdate&&Rt(this,t,0,!0),(t||!f)&&(g===this._tDur&&this._ts>0||!g&&this._ts<0)&&Pt(this,1),e||_&&!p||!g&&!p||(be(this,g===m?"onComplete":"onReverseComplete",!0),this._prom&&!(g<m&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,s,i){var r,n,o,h=t.ratio,l=e<0||!e&&(!t._start&&Gt(t)&&(t._initted||!Vt(t))||(t._ts<0||t._dp._ts<0)&&!Vt(t))?0:1,u=t._rDelay,d=0;if(u&&t._repeat&&(d=Zt(0,t._tDur,e),n=Dt(d,u),t._yoyo&&1&n&&(l=1-l),n!==Dt(t._tTime,u)&&(h=1-l,t.vars.repeatRefresh&&t._initted&&t.invalidate())),l!==h||a||i||t._zTime===M||!e&&t._zTime){if(!t._initted&&Xt(t,e,i,s))return;for(o=t._zTime,t._zTime=e||(s?M:0),s||(s=e&&!o),t.ratio=l,t._from&&(l=1-l),t._time=0,t._tTime=d,r=t._pt;r;)r.r(l,r.d),r=r._next;e<0&&Rt(t,e,0,!0),t._onUpdate&&!s&&be(t,"onUpdate"),d&&t._repeat&&!s&&t.parent&&be(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===l&&(l&&Pt(t,1),s||(be(t,l?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,s);return this},s.targets=function(){return this._targets},s.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),t.prototype.invalidate.call(this)},s.resetTo=function(t,e,s,i){_||Re.wake(),this._ts||this.play();var r=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||ts(this,r),function(t,e,s,i,r,n,o){var a,h,l,u,d=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!d)for(d=t._ptCache[e]=[],l=t._ptLookup,u=t._targets.length;u--;){if((a=l[u][e])&&a.d&&a.d._pt)for(a=a.d._pt;a&&a.p!==e&&a.fp!==e;)a=a._next;if(!a)return Qe=1,t.vars[e]="+=0",ts(t,o),Qe=0,1;d.push(a)}for(u=d.length;u--;)(a=(h=d[u])._pt||h).s=!i&&0!==i||r?a.s+(i||0)+n*a.c:i,a.c=s-a.s,h.e&&(h.e=ft(s)+Jt(h.e)),h.b&&(h.b=a.s+Jt(h.b))}(this,t,e,s,i,this._ease(r/this._dur),r)?this.resetTo(t,e,s,i):(Ut(this,0),this.parent||St(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},s.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?we(this):this;if(this.timeline){var s=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,$e&&!0!==$e.vars.overwrite)._first||we(this),this.parent&&s!==this.timeline.totalDuration()&&Yt(this,this._dur*this.timeline._tDur/s,0,1),this}var i,r,n,o,a,h,l,u=this._targets,d=t?re(t):u,c=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var s=t.length,i=s===e.length;i&&s--&&t[s]===e[s];);return s<0}(u,d))return"all"===e&&(this._pt=0),we(this);for(i=this._op=this._op||[],"all"!==e&&(z(e)&&(a={},mt(e,(function(t){return a[t]=1})),e=a),e=function(t,e){var s,i,r,n,o=t[0]?ct(t[0]).harness:0,a=o&&o.aliases;if(!a)return e;for(i in s=Mt({},e),a)if(i in s)for(r=(n=a[i].split(",")).length;r--;)s[n[r]]=s[i];return s}(u,e)),l=u.length;l--;)if(~d.indexOf(u[l]))for(a in r=c[l],"all"===e?(i[l]=e,o=r,n={}):(n=i[l]=i[l]||{},o=e),o)(h=r&&r[a])&&("kill"in h.d&&!0!==h.d.kill(a)||Ct(this,h,"_pt"),delete r[a]),"all"!==n&&(n[a]=1);return this._initted&&!this._pt&&p&&we(this),this},e.to=function(t,s){return new e(t,s,arguments[2])},e.from=function(t,e){return Qt(1,arguments)},e.delayedCall=function(t,s,i,r){return new e(s,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:s,onReverseComplete:s,onCompleteParams:i,onReverseCompleteParams:i,callbackScope:r})},e.fromTo=function(t,e,s){return Qt(2,arguments)},e.set=function(t,s){return s.duration=0,s.repeatDelay||(s.repeat=0),new e(t,s)},e.killTweensOf=function(t,e,s){return l.killTweensOf(t,e,s)},e}(We);jt(ns.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),mt("staggerTo,staggerFrom,staggerFromTo",(function(t){ns[t]=function(){var e=new He,s=ee.call(arguments,0);return s.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,s)}}));var os=function(t,e,s){return t[e]=s},as=function(t,e,s){return t[e](s)},hs=function(t,e,s,i){return t[e](i.fp,s)},ls=function(t,e,s){return t.setAttribute(e,s)},us=function(t,e){return O(t[e])?as:F(t[e])&&t.setAttribute?ls:os},ds=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},cs=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},ps=function(t,e){var s=e._pt,i="";if(!t&&e.b)i=e.b;else if(1===t&&e.e)i=e.e;else{for(;s;)i=s.p+(s.m?s.m(s.s+s.c*t):Math.round(1e4*(s.s+s.c*t))/1e4)+i,s=s._next;i+=e.c}e.set(e.t,e.p,i,e)},ms=function(t,e){for(var s=e._pt;s;)s.r(t,s.d),s=s._next},fs=function(t,e,s,i){for(var r,n=this._pt;n;)r=n._next,n.p===i&&n.modifier(t,e,s),n=r},_s=function(t){for(var e,s,i=this._pt;i;)s=i._next,i.p===t&&!i.op||i.op===t?Ct(this,i,"_pt"):i.dep||(e=1),i=s;return!e},gs=function(t,e,s,i){i.mSet(t,e,i.m.call(i.tween,s,i.mt),i)},vs=function(t){for(var e,s,i,r,n=t._pt;n;){for(e=n._next,s=i;s&&s.pr>n.pr;)s=s._next;(n._prev=s?s._prev:r)?n._prev._next=n:i=n,(n._next=s)?s._prev=n:r=n,n=e}t._pt=i},ys=function(){function t(t,e,s,i,r,n,o,a,h){this.t=e,this.s=i,this.c=r,this.p=s,this.r=n||ds,this.d=o||this,this.set=a||os,this.pr=h||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,s){this.mSet=this.mSet||this.set,this.set=gs,this.m=t,this.mt=s,this.tween=e},t}();mt(ut+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return it[t]=1})),H.TweenMax=H.TweenLite=ns,H.TimelineLite=H.TimelineMax=He,l=new He({sortChildren:!1,defaults:w,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),b.stringFilter=Oe;var xs=[],bs={},ws=[],js=0,Ms=function(t){return(bs[t]||ws).map((function(t){return t()}))},Ts=function(){var t=Date.now(),e=[];t-js>2&&(Ms("matchMediaInit"),xs.forEach((function(t){var s,i,r,n,o=t.queries,a=t.conditions;for(i in o)(s=u.matchMedia(o[i]).matches)&&(r=1),s!==a[i]&&(a[i]=s,n=1);n&&(t.revert(),r&&e.push(t))})),Ms("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t)})),js=t,Ms("matchMedia"))},As=function(){function t(t,e){this.selector=e&&ne(e),this.data=[],this._r=[],this.isReverted=!1,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,s){O(t)&&(s=e,e=t,t=O);var i=this,r=function(){var t,r=h,n=i.selector;return r&&r.data.push(i),s&&(i.selector=ne(s)),h=i,t=e.apply(i,arguments),O(t)&&i._r.push(t),h=r,i.selector=n,i.isReverted=!1,t};return i.last=r,t===O?r(i):t?i[t]=r:r},e.ignore=function(t){var e=h;h=null,t(this),h=e},e.getTweens=function(){var e=[];return this.data.forEach((function(s){return s instanceof t?e.push.apply(e,s.getTweens()):s instanceof ns&&s._targets[0]!==s.vars.onComplete&&e.push(s)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var s=this;if(t?(this.getTweens().map((function(t){return{g:t.globalTime(0),t}})).sort((function(t,e){return e.g-t.g||-1})).forEach((function(e){return e.t.revert(t)})),this.data.forEach((function(e){return!(e instanceof We)&&e.revert&&e.revert(t)})),this._r.forEach((function(e){return e(t,s)})),this.isReverted=!0):this.data.forEach((function(t){return t.kill&&t.kill()})),this.clear(),e){var i=xs.indexOf(this);~i&&xs.splice(i,1)}},e.revert=function(t){this.kill(t||{})},t}(),Es=function(){function t(t){this.contexts=[],this.scope=t}var e=t.prototype;return e.add=function(t,e,s){L(t)||(t={matches:t});var i,r,n,o=new As(0,s||this.scope),a=o.conditions={};for(r in this.contexts.push(o),e=o.add("onMatch",e),o.queries=t,t)"all"===r?n=1:(i=u.matchMedia(t[r]))&&(xs.indexOf(o)<0&&xs.push(o),(a[r]=i.matches)&&(n=1),i.addListener?i.addListener(Ts):i.addEventListener("change",Ts));return n&&e(o),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),Ss={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),s=0;s<t;s++)e[s]=arguments[s];e.forEach((function(t){return je(t)}))},timeline:function(t){return new He(t)},getTweensOf:function(t,e){return l.getTweensOf(t,e)},getProperty:function(t,e,s,i){z(t)&&(t=re(t)[0]);var r=ct(t||{}).get,n=s?wt:bt;return"native"===s&&(s=""),t?e?n((ot[e]&&ot[e].get||r)(t,e,s,i)):function(e,s,i){return n((ot[e]&&ot[e].get||r)(t,e,s,i))}:t},quickSetter:function(t,e,s){if((t=re(t)).length>1){var i=t.map((function(t){return zs.quickSetter(t,e,s)})),r=i.length;return function(t){for(var e=r;e--;)i[e](t)}}t=t[0]||{};var n=ot[e],o=ct(t),a=o.harness&&(o.harness.aliases||{})[e]||e,h=n?function(e){var i=new n;f._pt=0,i.init(t,s?e+s:e,f,0,[t]),i.render(1,i),f._pt&&ms(1,f)}:o.set(t,a);return n?h:function(e){return h(t,a,s?e+s:e,o,1)}},quickTo:function(t,e,s){var i,r=zs.to(t,Mt(((i={})[e]="+=0.1",i.paused=!0,i),s||{})),n=function(t,s,i){return r.resetTo(e,t,s,i)};return n.tween=r,n},isTweening:function(t){return l.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Ne(t.ease,w.ease)),Tt(w,t||{})},config:function(t){return Tt(b,t||{})},registerEffect:function(t){var e=t.name,s=t.effect,i=t.plugins,r=t.defaults,n=t.extendTimeline;(i||"").split(",").forEach((function(t){return t&&!ot[t]&&!H[t]&&Z(e+" effect requires "+t+" plugin.")})),at[e]=function(t,e,i){return s(re(t),jt(e||{},r),i)},n&&(He.prototype[e]=function(t,s,i){return this.add(at[e](t,L(s)?s:(i=s)&&{},this),i)})},registerEase:function(t,e){Le[t]=Ne(e)},parseEase:function(t,e){return arguments.length?Ne(t,e):Le},getById:function(t){return l.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var s,i,r=new He(t);for(r.smoothChildTiming=D(t.smoothChildTiming),l.remove(r),r._dp=0,r._time=r._tTime=l._time,s=l._first;s;)i=s._next,!e&&!s._dur&&s instanceof ns&&s.vars.onComplete===s._targets[0]||Nt(r,s,s._start-s._delay),s=i;return Nt(l,r,0),r},context:function(t,e){return t?new As(t,e):h},matchMedia:function(t){return new Es(t)},matchMediaRefresh:function(){return xs.forEach((function(t){var e,s,i=t.conditions;for(s in i)i[s]&&(i[s]=!1,e=1);e&&t.revert()}))||Ts()},addEventListener:function(t,e){var s=bs[t]||(bs[t]=[]);~s.indexOf(e)||s.push(e)},removeEventListener:function(t,e){var s=bs[t],i=s&&s.indexOf(e);i>=0&&s.splice(i,1)},utils:{wrap:fe,wrapYoyo:_e,distribute:ae,random:ue,snap:le,normalize:pe,getUnit:Jt,clamp:te,splitColor:Ee,toArray:re,selector:ne,mapRange:ve,pipe:de,unitize:ce,interpolate:ye,shuffle:oe},install:Q,effects:at,ticker:Re,updateRoot:He.updateRoot,plugins:ot,globalTimeline:l,core:{PropTween:ys,globals:J,Tween:ns,Timeline:He,Animation:We,getCache:ct,_removeLinkedListItem:Ct,reverting:function(){return a},context:function(t){return t&&h&&(h.data.push(t),t._ctx=h),h},suppressOverwrites:function(t){return o=t}}};mt("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return Ss[t]=ns[t]})),Re.add(He.updateRoot),f=Ss.to({},{duration:0});var Cs=function(t,e){for(var s=t._pt;s&&s.p!==e&&s.op!==e&&s.fp!==e;)s=s._next;return s},Ps=function(t,e){return{name:t,rawVars:1,init:function(t,s,i){i._onInit=function(t){var i,r;if(z(s)&&(i={},mt(s,(function(t){return i[t]=1})),s=i),e){for(r in i={},s)i[r]=e(s[r]);s=i}!function(t,e){var s,i,r,n=t._targets;for(s in e)for(i=n.length;i--;)(r=t._ptLookup[i][s])&&(r=r.d)&&(r._pt&&(r=Cs(r,s)),r&&r.modifier&&r.modifier(e[s],t,n[i],s))}(t,s)}}}},zs=Ss.registerPlugin({name:"attr",init:function(t,e,s,i,r){var n,o,a;for(n in this.tween=s,e)a=t.getAttribute(n)||"",(o=this.add(t,"setAttribute",(a||0)+"",e[n],i,r,0,0,n)).op=n,o.b=a,this._props.push(n)},render:function(t,e){for(var s=e._pt;s;)a?s.set(s.t,s.p,s.b,s):s.r(t,s.d),s=s._next}},{name:"endArray",init:function(t,e){for(var s=e.length;s--;)this.add(t,s,t[s]||0,e[s],0,0,0,0,0,1)}},Ps("roundProps",he),Ps("modifiers"),Ps("snap",le))||Ss;ns.version=He.version=zs.version="3.11.0",p=1,k()&&Fe();var Os=Le.Power0,Rs=Le.Power1,Fs=Le.Power2,Ls=Le.Power3,Ds=Le.Power4,ks=Le.Linear,Is=Le.Quad,Us=Le.Cubic,Bs=Le.Quart,Ns=Le.Quint,qs=Le.Strong,Xs=Le.Elastic,Gs=Le.Back,Vs=Le.SteppedEase,Ys=Le.Bounce,Ws=Le.Sine,Hs=Le.Expo,$s=Le.Circ},"./node_modules/gsap/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Back:()=>i.Back,Bounce:()=>i.Bounce,CSSPlugin:()=>r.CSSPlugin,Circ:()=>i.Circ,Cubic:()=>i.Cubic,Elastic:()=>i.Elastic,Expo:()=>i.Expo,Linear:()=>i.Linear,Power0:()=>i.Power0,Power1:()=>i.Power1,Power2:()=>i.Power2,Power3:()=>i.Power3,Power4:()=>i.Power4,Quad:()=>i.Quad,Quart:()=>i.Quart,Quint:()=>i.Quint,Sine:()=>i.Sine,SteppedEase:()=>i.SteppedEase,Strong:()=>i.Strong,TimelineLite:()=>i.TimelineLite,TimelineMax:()=>i.TimelineMax,TweenLite:()=>i.TweenLite,TweenMax:()=>o,default:()=>n,gsap:()=>n});var i=s("./node_modules/gsap/gsap-core.js"),r=s("./node_modules/gsap/CSSPlugin.js"),n=i.gsap.registerPlugin(r.CSSPlugin)||i.gsap,o=n.core.Tween},"./node_modules/lodash/_DataView.js":(t,e,s)=>{var i=s("./node_modules/lodash/_getNative.js")(s("./node_modules/lodash/_root.js"),"DataView");t.exports=i},"./node_modules/lodash/_Hash.js":(t,e,s)=>{var i=s("./node_modules/lodash/_hashClear.js"),r=s("./node_modules/lodash/_hashDelete.js"),n=s("./node_modules/lodash/_hashGet.js"),o=s("./node_modules/lodash/_hashHas.js"),a=s("./node_modules/lodash/_hashSet.js");function h(t){var e=-1,s=null==t?0:t.length;for(this.clear();++e<s;){var i=t[e];this.set(i[0],i[1])}}h.prototype.clear=i,h.prototype.delete=r,h.prototype.get=n,h.prototype.has=o,h.prototype.set=a,t.exports=h},"./node_modules/lodash/_ListCache.js":(t,e,s)=>{var i=s("./node_modules/lodash/_listCacheClear.js"),r=s("./node_modules/lodash/_listCacheDelete.js"),n=s("./node_modules/lodash/_listCacheGet.js"),o=s("./node_modules/lodash/_listCacheHas.js"),a=s("./node_modules/lodash/_listCacheSet.js");function h(t){var e=-1,s=null==t?0:t.length;for(this.clear();++e<s;){var i=t[e];this.set(i[0],i[1])}}h.prototype.clear=i,h.prototype.delete=r,h.prototype.get=n,h.prototype.has=o,h.prototype.set=a,t.exports=h},"./node_modules/lodash/_Map.js":(t,e,s)=>{var i=s("./node_modules/lodash/_getNative.js")(s("./node_modules/lodash/_root.js"),"Map");t.exports=i},"./node_modules/lodash/_MapCache.js":(t,e,s)=>{var i=s("./node_modules/lodash/_mapCacheClear.js"),r=s("./node_modules/lodash/_mapCacheDelete.js"),n=s("./node_modules/lodash/_mapCacheGet.js"),o=s("./node_modules/lodash/_mapCacheHas.js"),a=s("./node_modules/lodash/_mapCacheSet.js");function h(t){var e=-1,s=null==t?0:t.length;for(this.clear();++e<s;){var i=t[e];this.set(i[0],i[1])}}h.prototype.clear=i,h.prototype.delete=r,h.prototype.get=n,h.prototype.has=o,h.prototype.set=a,t.exports=h},"./node_modules/lodash/_Promise.js":(t,e,s)=>{var i=s("./node_modules/lodash/_getNative.js")(s("./node_modules/lodash/_root.js"),"Promise");t.exports=i},"./node_modules/lodash/_Set.js":(t,e,s)=>{var i=s("./node_modules/lodash/_getNative.js")(s("./node_modules/lodash/_root.js"),"Set");t.exports=i},"./node_modules/lodash/_SetCache.js":(t,e,s)=>{var i=s("./node_modules/lodash/_MapCache.js"),r=s("./node_modules/lodash/_setCacheAdd.js"),n=s("./node_modules/lodash/_setCacheHas.js");function o(t){var e=-1,s=null==t?0:t.length;for(this.__data__=new i;++e<s;)this.add(t[e])}o.prototype.add=o.prototype.push=r,o.prototype.has=n,t.exports=o},"./node_modules/lodash/_Stack.js":(t,e,s)=>{var i=s("./node_modules/lodash/_ListCache.js"),r=s("./node_modules/lodash/_stackClear.js"),n=s("./node_modules/lodash/_stackDelete.js"),o=s("./node_modules/lodash/_stackGet.js"),a=s("./node_modules/lodash/_stackHas.js"),h=s("./node_modules/lodash/_stackSet.js");function l(t){var e=this.__data__=new i(t);this.size=e.size}l.prototype.clear=r,l.prototype.delete=n,l.prototype.get=o,l.prototype.has=a,l.prototype.set=h,t.exports=l},"./node_modules/lodash/_Symbol.js":(t,e,s)=>{var i=s("./node_modules/lodash/_root.js").Symbol;t.exports=i},"./node_modules/lodash/_Uint8Array.js":(t,e,s)=>{var i=s("./node_modules/lodash/_root.js").Uint8Array;t.exports=i},"./node_modules/lodash/_WeakMap.js":(t,e,s)=>{var i=s("./node_modules/lodash/_getNative.js")(s("./node_modules/lodash/_root.js"),"WeakMap");t.exports=i},"./node_modules/lodash/_arrayEach.js":t=>{t.exports=function(t,e){for(var s=-1,i=null==t?0:t.length;++s<i&&!1!==e(t[s],s,t););return t}},"./node_modules/lodash/_arrayFilter.js":t=>{t.exports=function(t,e){for(var s=-1,i=null==t?0:t.length,r=0,n=[];++s<i;){var o=t[s];e(o,s,t)&&(n[r++]=o)}return n}},"./node_modules/lodash/_arrayLikeKeys.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseTimes.js"),r=s("./node_modules/lodash/isArguments.js"),n=s("./node_modules/lodash/isArray.js"),o=s("./node_modules/lodash/isBuffer.js"),a=s("./node_modules/lodash/_isIndex.js"),h=s("./node_modules/lodash/isTypedArray.js"),l=Object.prototype.hasOwnProperty;t.exports=function(t,e){var s=n(t),u=!s&&r(t),d=!s&&!u&&o(t),c=!s&&!u&&!d&&h(t),p=s||u||d||c,m=p?i(t.length,String):[],f=m.length;for(var _ in t)!e&&!l.call(t,_)||p&&("length"==_||d&&("offset"==_||"parent"==_)||c&&("buffer"==_||"byteLength"==_||"byteOffset"==_)||a(_,f))||m.push(_);return m}},"./node_modules/lodash/_arrayMap.js":t=>{t.exports=function(t,e){for(var s=-1,i=null==t?0:t.length,r=Array(i);++s<i;)r[s]=e(t[s],s,t);return r}},"./node_modules/lodash/_arrayPush.js":t=>{t.exports=function(t,e){for(var s=-1,i=e.length,r=t.length;++s<i;)t[r+s]=e[s];return t}},"./node_modules/lodash/_arraySome.js":t=>{t.exports=function(t,e){for(var s=-1,i=null==t?0:t.length;++s<i;)if(e(t[s],s,t))return!0;return!1}},"./node_modules/lodash/_assocIndexOf.js":(t,e,s)=>{var i=s("./node_modules/lodash/eq.js");t.exports=function(t,e){for(var s=t.length;s--;)if(i(t[s][0],e))return s;return-1}},"./node_modules/lodash/_baseEach.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseForOwn.js"),r=s("./node_modules/lodash/_createBaseEach.js")(i);t.exports=r},"./node_modules/lodash/_baseFor.js":(t,e,s)=>{var i=s("./node_modules/lodash/_createBaseFor.js")();t.exports=i},"./node_modules/lodash/_baseForOwn.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseFor.js"),r=s("./node_modules/lodash/keys.js");t.exports=function(t,e){return t&&i(t,e,r)}},"./node_modules/lodash/_baseGet.js":(t,e,s)=>{var i=s("./node_modules/lodash/_castPath.js"),r=s("./node_modules/lodash/_toKey.js");t.exports=function(t,e){for(var s=0,n=(e=i(e,t)).length;null!=t&&s<n;)t=t[r(e[s++])];return s&&s==n?t:void 0}},"./node_modules/lodash/_baseGetAllKeys.js":(t,e,s)=>{var i=s("./node_modules/lodash/_arrayPush.js"),r=s("./node_modules/lodash/isArray.js");t.exports=function(t,e,s){var n=e(t);return r(t)?n:i(n,s(t))}},"./node_modules/lodash/_baseGetTag.js":(t,e,s)=>{var i=s("./node_modules/lodash/_Symbol.js"),r=s("./node_modules/lodash/_getRawTag.js"),n=s("./node_modules/lodash/_objectToString.js"),o=i?i.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":o&&o in Object(t)?r(t):n(t)}},"./node_modules/lodash/_baseHasIn.js":t=>{t.exports=function(t,e){return null!=t&&e in Object(t)}},"./node_modules/lodash/_baseIsArguments.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseGetTag.js"),r=s("./node_modules/lodash/isObjectLike.js");t.exports=function(t){return r(t)&&"[object Arguments]"==i(t)}},"./node_modules/lodash/_baseIsEqual.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseIsEqualDeep.js"),r=s("./node_modules/lodash/isObjectLike.js");t.exports=function t(e,s,n,o,a){return e===s||(null==e||null==s||!r(e)&&!r(s)?e!=e&&s!=s:i(e,s,n,o,t,a))}},"./node_modules/lodash/_baseIsEqualDeep.js":(t,e,s)=>{var i=s("./node_modules/lodash/_Stack.js"),r=s("./node_modules/lodash/_equalArrays.js"),n=s("./node_modules/lodash/_equalByTag.js"),o=s("./node_modules/lodash/_equalObjects.js"),a=s("./node_modules/lodash/_getTag.js"),h=s("./node_modules/lodash/isArray.js"),l=s("./node_modules/lodash/isBuffer.js"),u=s("./node_modules/lodash/isTypedArray.js"),d="[object Arguments]",c="[object Array]",p="[object Object]",m=Object.prototype.hasOwnProperty;t.exports=function(t,e,s,f,_,g){var v=h(t),y=h(e),x=v?c:a(t),b=y?c:a(e),w=(x=x==d?p:x)==p,j=(b=b==d?p:b)==p,M=x==b;if(M&&l(t)){if(!l(e))return!1;v=!0,w=!1}if(M&&!w)return g||(g=new i),v||u(t)?r(t,e,s,f,_,g):n(t,e,x,s,f,_,g);if(!(1&s)){var T=w&&m.call(t,"__wrapped__"),A=j&&m.call(e,"__wrapped__");if(T||A){var E=T?t.value():t,S=A?e.value():e;return g||(g=new i),_(E,S,s,f,g)}}return!!M&&(g||(g=new i),o(t,e,s,f,_,g))}},"./node_modules/lodash/_baseIsMatch.js":(t,e,s)=>{var i=s("./node_modules/lodash/_Stack.js"),r=s("./node_modules/lodash/_baseIsEqual.js");t.exports=function(t,e,s,n){var o=s.length,a=o,h=!n;if(null==t)return!a;for(t=Object(t);o--;){var l=s[o];if(h&&l[2]?l[1]!==t[l[0]]:!(l[0]in t))return!1}for(;++o<a;){var u=(l=s[o])[0],d=t[u],c=l[1];if(h&&l[2]){if(void 0===d&&!(u in t))return!1}else{var p=new i;if(n)var m=n(d,c,u,t,e,p);if(!(void 0===m?r(c,d,3,n,p):m))return!1}}return!0}},"./node_modules/lodash/_baseIsNative.js":(t,e,s)=>{var i=s("./node_modules/lodash/isFunction.js"),r=s("./node_modules/lodash/_isMasked.js"),n=s("./node_modules/lodash/isObject.js"),o=s("./node_modules/lodash/_toSource.js"),a=/^\[object .+?Constructor\]$/,h=Function.prototype,l=Object.prototype,u=h.toString,d=l.hasOwnProperty,c=RegExp("^"+u.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!n(t)||r(t))&&(i(t)?c:a).test(o(t))}},"./node_modules/lodash/_baseIsTypedArray.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseGetTag.js"),r=s("./node_modules/lodash/isLength.js"),n=s("./node_modules/lodash/isObjectLike.js"),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,t.exports=function(t){return n(t)&&r(t.length)&&!!o[i(t)]}},"./node_modules/lodash/_baseIteratee.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseMatches.js"),r=s("./node_modules/lodash/_baseMatchesProperty.js"),n=s("./node_modules/lodash/identity.js"),o=s("./node_modules/lodash/isArray.js"),a=s("./node_modules/lodash/property.js");t.exports=function(t){return"function"==typeof t?t:null==t?n:"object"==typeof t?o(t)?r(t[0],t[1]):i(t):a(t)}},"./node_modules/lodash/_baseKeys.js":(t,e,s)=>{var i=s("./node_modules/lodash/_isPrototype.js"),r=s("./node_modules/lodash/_nativeKeys.js"),n=Object.prototype.hasOwnProperty;t.exports=function(t){if(!i(t))return r(t);var e=[];for(var s in Object(t))n.call(t,s)&&"constructor"!=s&&e.push(s);return e}},"./node_modules/lodash/_baseMap.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseEach.js"),r=s("./node_modules/lodash/isArrayLike.js");t.exports=function(t,e){var s=-1,n=r(t)?Array(t.length):[];return i(t,(function(t,i,r){n[++s]=e(t,i,r)})),n}},"./node_modules/lodash/_baseMatches.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseIsMatch.js"),r=s("./node_modules/lodash/_getMatchData.js"),n=s("./node_modules/lodash/_matchesStrictComparable.js");t.exports=function(t){var e=r(t);return 1==e.length&&e[0][2]?n(e[0][0],e[0][1]):function(s){return s===t||i(s,t,e)}}},"./node_modules/lodash/_baseMatchesProperty.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseIsEqual.js"),r=s("./node_modules/lodash/get.js"),n=s("./node_modules/lodash/hasIn.js"),o=s("./node_modules/lodash/_isKey.js"),a=s("./node_modules/lodash/_isStrictComparable.js"),h=s("./node_modules/lodash/_matchesStrictComparable.js"),l=s("./node_modules/lodash/_toKey.js");t.exports=function(t,e){return o(t)&&a(e)?h(l(t),e):function(s){var o=r(s,t);return void 0===o&&o===e?n(s,t):i(e,o,3)}}},"./node_modules/lodash/_baseProperty.js":t=>{t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},"./node_modules/lodash/_basePropertyDeep.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseGet.js");t.exports=function(t){return function(e){return i(e,t)}}},"./node_modules/lodash/_baseTimes.js":t=>{t.exports=function(t,e){for(var s=-1,i=Array(t);++s<t;)i[s]=e(s);return i}},"./node_modules/lodash/_baseToString.js":(t,e,s)=>{var i=s("./node_modules/lodash/_Symbol.js"),r=s("./node_modules/lodash/_arrayMap.js"),n=s("./node_modules/lodash/isArray.js"),o=s("./node_modules/lodash/isSymbol.js"),a=i?i.prototype:void 0,h=a?a.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(n(e))return r(e,t)+"";if(o(e))return h?h.call(e):"";var s=e+"";return"0"==s&&1/e==-Infinity?"-0":s}},"./node_modules/lodash/_baseUnary.js":t=>{t.exports=function(t){return function(e){return t(e)}}},"./node_modules/lodash/_cacheHas.js":t=>{t.exports=function(t,e){return t.has(e)}},"./node_modules/lodash/_castFunction.js":(t,e,s)=>{var i=s("./node_modules/lodash/identity.js");t.exports=function(t){return"function"==typeof t?t:i}},"./node_modules/lodash/_castPath.js":(t,e,s)=>{var i=s("./node_modules/lodash/isArray.js"),r=s("./node_modules/lodash/_isKey.js"),n=s("./node_modules/lodash/_stringToPath.js"),o=s("./node_modules/lodash/toString.js");t.exports=function(t,e){return i(t)?t:r(t,e)?[t]:n(o(t))}},"./node_modules/lodash/_coreJsData.js":(t,e,s)=>{var i=s("./node_modules/lodash/_root.js")["__core-js_shared__"];t.exports=i},"./node_modules/lodash/_createBaseEach.js":(t,e,s)=>{var i=s("./node_modules/lodash/isArrayLike.js");t.exports=function(t,e){return function(s,r){if(null==s)return s;if(!i(s))return t(s,r);for(var n=s.length,o=e?n:-1,a=Object(s);(e?o--:++o<n)&&!1!==r(a[o],o,a););return s}}},"./node_modules/lodash/_createBaseFor.js":t=>{t.exports=function(t){return function(e,s,i){for(var r=-1,n=Object(e),o=i(e),a=o.length;a--;){var h=o[t?a:++r];if(!1===s(n[h],h,n))break}return e}}},"./node_modules/lodash/_equalArrays.js":(t,e,s)=>{var i=s("./node_modules/lodash/_SetCache.js"),r=s("./node_modules/lodash/_arraySome.js"),n=s("./node_modules/lodash/_cacheHas.js");t.exports=function(t,e,s,o,a,h){var l=1&s,u=t.length,d=e.length;if(u!=d&&!(l&&d>u))return!1;var c=h.get(t),p=h.get(e);if(c&&p)return c==e&&p==t;var m=-1,f=!0,_=2&s?new i:void 0;for(h.set(t,e),h.set(e,t);++m<u;){var g=t[m],v=e[m];if(o)var y=l?o(v,g,m,e,t,h):o(g,v,m,t,e,h);if(void 0!==y){if(y)continue;f=!1;break}if(_){if(!r(e,(function(t,e){if(!n(_,e)&&(g===t||a(g,t,s,o,h)))return _.push(e)}))){f=!1;break}}else if(g!==v&&!a(g,v,s,o,h)){f=!1;break}}return h.delete(t),h.delete(e),f}},"./node_modules/lodash/_equalByTag.js":(t,e,s)=>{var i=s("./node_modules/lodash/_Symbol.js"),r=s("./node_modules/lodash/_Uint8Array.js"),n=s("./node_modules/lodash/eq.js"),o=s("./node_modules/lodash/_equalArrays.js"),a=s("./node_modules/lodash/_mapToArray.js"),h=s("./node_modules/lodash/_setToArray.js"),l=i?i.prototype:void 0,u=l?l.valueOf:void 0;t.exports=function(t,e,s,i,l,d,c){switch(s){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!d(new r(t),new r(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return n(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var p=a;case"[object Set]":var m=1&i;if(p||(p=h),t.size!=e.size&&!m)return!1;var f=c.get(t);if(f)return f==e;i|=2,c.set(t,e);var _=o(p(t),p(e),i,l,d,c);return c.delete(t),_;case"[object Symbol]":if(u)return u.call(t)==u.call(e)}return!1}},"./node_modules/lodash/_equalObjects.js":(t,e,s)=>{var i=s("./node_modules/lodash/_getAllKeys.js"),r=Object.prototype.hasOwnProperty;t.exports=function(t,e,s,n,o,a){var h=1&s,l=i(t),u=l.length;if(u!=i(e).length&&!h)return!1;for(var d=u;d--;){var c=l[d];if(!(h?c in e:r.call(e,c)))return!1}var p=a.get(t),m=a.get(e);if(p&&m)return p==e&&m==t;var f=!0;a.set(t,e),a.set(e,t);for(var _=h;++d<u;){var g=t[c=l[d]],v=e[c];if(n)var y=h?n(v,g,c,e,t,a):n(g,v,c,t,e,a);if(!(void 0===y?g===v||o(g,v,s,n,a):y)){f=!1;break}_||(_="constructor"==c)}if(f&&!_){var x=t.constructor,b=e.constructor;x==b||!("constructor"in t)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof b&&b instanceof b||(f=!1)}return a.delete(t),a.delete(e),f}},"./node_modules/lodash/_freeGlobal.js":(t,e,s)=>{var i="object"==typeof s.g&&s.g&&s.g.Object===Object&&s.g;t.exports=i},"./node_modules/lodash/_getAllKeys.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseGetAllKeys.js"),r=s("./node_modules/lodash/_getSymbols.js"),n=s("./node_modules/lodash/keys.js");t.exports=function(t){return i(t,n,r)}},"./node_modules/lodash/_getMapData.js":(t,e,s)=>{var i=s("./node_modules/lodash/_isKeyable.js");t.exports=function(t,e){var s=t.__data__;return i(e)?s["string"==typeof e?"string":"hash"]:s.map}},"./node_modules/lodash/_getMatchData.js":(t,e,s)=>{var i=s("./node_modules/lodash/_isStrictComparable.js"),r=s("./node_modules/lodash/keys.js");t.exports=function(t){for(var e=r(t),s=e.length;s--;){var n=e[s],o=t[n];e[s]=[n,o,i(o)]}return e}},"./node_modules/lodash/_getNative.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseIsNative.js"),r=s("./node_modules/lodash/_getValue.js");t.exports=function(t,e){var s=r(t,e);return i(s)?s:void 0}},"./node_modules/lodash/_getRawTag.js":(t,e,s)=>{var i=s("./node_modules/lodash/_Symbol.js"),r=Object.prototype,n=r.hasOwnProperty,o=r.toString,a=i?i.toStringTag:void 0;t.exports=function(t){var e=n.call(t,a),s=t[a];try{t[a]=void 0;var i=!0}catch(t){}var r=o.call(t);return i&&(e?t[a]=s:delete t[a]),r}},"./node_modules/lodash/_getSymbols.js":(t,e,s)=>{var i=s("./node_modules/lodash/_arrayFilter.js"),r=s("./node_modules/lodash/stubArray.js"),n=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,a=o?function(t){return null==t?[]:(t=Object(t),i(o(t),(function(e){return n.call(t,e)})))}:r;t.exports=a},"./node_modules/lodash/_getTag.js":(t,e,s)=>{var i=s("./node_modules/lodash/_DataView.js"),r=s("./node_modules/lodash/_Map.js"),n=s("./node_modules/lodash/_Promise.js"),o=s("./node_modules/lodash/_Set.js"),a=s("./node_modules/lodash/_WeakMap.js"),h=s("./node_modules/lodash/_baseGetTag.js"),l=s("./node_modules/lodash/_toSource.js"),u="[object Map]",d="[object Promise]",c="[object Set]",p="[object WeakMap]",m="[object DataView]",f=l(i),_=l(r),g=l(n),v=l(o),y=l(a),x=h;(i&&x(new i(new ArrayBuffer(1)))!=m||r&&x(new r)!=u||n&&x(n.resolve())!=d||o&&x(new o)!=c||a&&x(new a)!=p)&&(x=function(t){var e=h(t),s="[object Object]"==e?t.constructor:void 0,i=s?l(s):"";if(i)switch(i){case f:return m;case _:return u;case g:return d;case v:return c;case y:return p}return e}),t.exports=x},"./node_modules/lodash/_getValue.js":t=>{t.exports=function(t,e){return null==t?void 0:t[e]}},"./node_modules/lodash/_hasPath.js":(t,e,s)=>{var i=s("./node_modules/lodash/_castPath.js"),r=s("./node_modules/lodash/isArguments.js"),n=s("./node_modules/lodash/isArray.js"),o=s("./node_modules/lodash/_isIndex.js"),a=s("./node_modules/lodash/isLength.js"),h=s("./node_modules/lodash/_toKey.js");t.exports=function(t,e,s){for(var l=-1,u=(e=i(e,t)).length,d=!1;++l<u;){var c=h(e[l]);if(!(d=null!=t&&s(t,c)))break;t=t[c]}return d||++l!=u?d:!!(u=null==t?0:t.length)&&a(u)&&o(c,u)&&(n(t)||r(t))}},"./node_modules/lodash/_hashClear.js":(t,e,s)=>{var i=s("./node_modules/lodash/_nativeCreate.js");t.exports=function(){this.__data__=i?i(null):{},this.size=0}},"./node_modules/lodash/_hashDelete.js":t=>{t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},"./node_modules/lodash/_hashGet.js":(t,e,s)=>{var i=s("./node_modules/lodash/_nativeCreate.js"),r=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(i){var s=e[t];return"__lodash_hash_undefined__"===s?void 0:s}return r.call(e,t)?e[t]:void 0}},"./node_modules/lodash/_hashHas.js":(t,e,s)=>{var i=s("./node_modules/lodash/_nativeCreate.js"),r=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return i?void 0!==e[t]:r.call(e,t)}},"./node_modules/lodash/_hashSet.js":(t,e,s)=>{var i=s("./node_modules/lodash/_nativeCreate.js");t.exports=function(t,e){var s=this.__data__;return this.size+=this.has(t)?0:1,s[t]=i&&void 0===e?"__lodash_hash_undefined__":e,this}},"./node_modules/lodash/_isIndex.js":t=>{var e=/^(?:0|[1-9]\d*)$/;t.exports=function(t,s){var i=typeof t;return!!(s=null==s?9007199254740991:s)&&("number"==i||"symbol"!=i&&e.test(t))&&t>-1&&t%1==0&&t<s}},"./node_modules/lodash/_isKey.js":(t,e,s)=>{var i=s("./node_modules/lodash/isArray.js"),r=s("./node_modules/lodash/isSymbol.js"),n=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;t.exports=function(t,e){if(i(t))return!1;var s=typeof t;return!("number"!=s&&"symbol"!=s&&"boolean"!=s&&null!=t&&!r(t))||(o.test(t)||!n.test(t)||null!=e&&t in Object(e))}},"./node_modules/lodash/_isKeyable.js":t=>{t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},"./node_modules/lodash/_isMasked.js":(t,e,s)=>{var i,r=s("./node_modules/lodash/_coreJsData.js"),n=(i=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||""))?"Symbol(src)_1."+i:"";t.exports=function(t){return!!n&&n in t}},"./node_modules/lodash/_isPrototype.js":t=>{var e=Object.prototype;t.exports=function(t){var s=t&&t.constructor;return t===("function"==typeof s&&s.prototype||e)}},"./node_modules/lodash/_isStrictComparable.js":(t,e,s)=>{var i=s("./node_modules/lodash/isObject.js");t.exports=function(t){return t==t&&!i(t)}},"./node_modules/lodash/_listCacheClear.js":t=>{t.exports=function(){this.__data__=[],this.size=0}},"./node_modules/lodash/_listCacheDelete.js":(t,e,s)=>{var i=s("./node_modules/lodash/_assocIndexOf.js"),r=Array.prototype.splice;t.exports=function(t){var e=this.__data__,s=i(e,t);return!(s<0)&&(s==e.length-1?e.pop():r.call(e,s,1),--this.size,!0)}},"./node_modules/lodash/_listCacheGet.js":(t,e,s)=>{var i=s("./node_modules/lodash/_assocIndexOf.js");t.exports=function(t){var e=this.__data__,s=i(e,t);return s<0?void 0:e[s][1]}},"./node_modules/lodash/_listCacheHas.js":(t,e,s)=>{var i=s("./node_modules/lodash/_assocIndexOf.js");t.exports=function(t){return i(this.__data__,t)>-1}},"./node_modules/lodash/_listCacheSet.js":(t,e,s)=>{var i=s("./node_modules/lodash/_assocIndexOf.js");t.exports=function(t,e){var s=this.__data__,r=i(s,t);return r<0?(++this.size,s.push([t,e])):s[r][1]=e,this}},"./node_modules/lodash/_mapCacheClear.js":(t,e,s)=>{var i=s("./node_modules/lodash/_Hash.js"),r=s("./node_modules/lodash/_ListCache.js"),n=s("./node_modules/lodash/_Map.js");t.exports=function(){this.size=0,this.__data__={hash:new i,map:new(n||r),string:new i}}},"./node_modules/lodash/_mapCacheDelete.js":(t,e,s)=>{var i=s("./node_modules/lodash/_getMapData.js");t.exports=function(t){var e=i(this,t).delete(t);return this.size-=e?1:0,e}},"./node_modules/lodash/_mapCacheGet.js":(t,e,s)=>{var i=s("./node_modules/lodash/_getMapData.js");t.exports=function(t){return i(this,t).get(t)}},"./node_modules/lodash/_mapCacheHas.js":(t,e,s)=>{var i=s("./node_modules/lodash/_getMapData.js");t.exports=function(t){return i(this,t).has(t)}},"./node_modules/lodash/_mapCacheSet.js":(t,e,s)=>{var i=s("./node_modules/lodash/_getMapData.js");t.exports=function(t,e){var s=i(this,t),r=s.size;return s.set(t,e),this.size+=s.size==r?0:1,this}},"./node_modules/lodash/_mapToArray.js":t=>{t.exports=function(t){var e=-1,s=Array(t.size);return t.forEach((function(t,i){s[++e]=[i,t]})),s}},"./node_modules/lodash/_matchesStrictComparable.js":t=>{t.exports=function(t,e){return function(s){return null!=s&&(s[t]===e&&(void 0!==e||t in Object(s)))}}},"./node_modules/lodash/_memoizeCapped.js":(t,e,s)=>{var i=s("./node_modules/lodash/memoize.js");t.exports=function(t){var e=i(t,(function(t){return 500===s.size&&s.clear(),t})),s=e.cache;return e}},"./node_modules/lodash/_nativeCreate.js":(t,e,s)=>{var i=s("./node_modules/lodash/_getNative.js")(Object,"create");t.exports=i},"./node_modules/lodash/_nativeKeys.js":(t,e,s)=>{var i=s("./node_modules/lodash/_overArg.js")(Object.keys,Object);t.exports=i},"./node_modules/lodash/_nodeUtil.js":(t,e,s)=>{t=s.nmd(t);var i=s("./node_modules/lodash/_freeGlobal.js"),r=e&&!e.nodeType&&e,n=r&&t&&!t.nodeType&&t,o=n&&n.exports===r&&i.process,a=function(){try{var t=n&&n.require&&n.require("util").types;return t||o&&o.binding&&o.binding("util")}catch(t){}}();t.exports=a},"./node_modules/lodash/_objectToString.js":t=>{var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},"./node_modules/lodash/_overArg.js":t=>{t.exports=function(t,e){return function(s){return t(e(s))}}},"./node_modules/lodash/_root.js":(t,e,s)=>{var i=s("./node_modules/lodash/_freeGlobal.js"),r="object"==typeof self&&self&&self.Object===Object&&self,n=i||r||Function("return this")();t.exports=n},"./node_modules/lodash/_setCacheAdd.js":t=>{t.exports=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this}},"./node_modules/lodash/_setCacheHas.js":t=>{t.exports=function(t){return this.__data__.has(t)}},"./node_modules/lodash/_setToArray.js":t=>{t.exports=function(t){var e=-1,s=Array(t.size);return t.forEach((function(t){s[++e]=t})),s}},"./node_modules/lodash/_stackClear.js":(t,e,s)=>{var i=s("./node_modules/lodash/_ListCache.js");t.exports=function(){this.__data__=new i,this.size=0}},"./node_modules/lodash/_stackDelete.js":t=>{t.exports=function(t){var e=this.__data__,s=e.delete(t);return this.size=e.size,s}},"./node_modules/lodash/_stackGet.js":t=>{t.exports=function(t){return this.__data__.get(t)}},"./node_modules/lodash/_stackHas.js":t=>{t.exports=function(t){return this.__data__.has(t)}},"./node_modules/lodash/_stackSet.js":(t,e,s)=>{var i=s("./node_modules/lodash/_ListCache.js"),r=s("./node_modules/lodash/_Map.js"),n=s("./node_modules/lodash/_MapCache.js");t.exports=function(t,e){var s=this.__data__;if(s instanceof i){var o=s.__data__;if(!r||o.length<199)return o.push([t,e]),this.size=++s.size,this;s=this.__data__=new n(o)}return s.set(t,e),this.size=s.size,this}},"./node_modules/lodash/_stringToPath.js":(t,e,s)=>{var i=s("./node_modules/lodash/_memoizeCapped.js"),r=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,n=/\\(\\)?/g,o=i((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(r,(function(t,s,i,r){e.push(i?r.replace(n,"$1"):s||t)})),e}));t.exports=o},"./node_modules/lodash/_toKey.js":(t,e,s)=>{var i=s("./node_modules/lodash/isSymbol.js");t.exports=function(t){if("string"==typeof t||i(t))return t;var e=t+"";return"0"==e&&1/t==-Infinity?"-0":e}},"./node_modules/lodash/_toSource.js":t=>{var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},"./node_modules/lodash/each.js":(t,e,s)=>{t.exports=s("./node_modules/lodash/forEach.js")},"./node_modules/lodash/eq.js":t=>{t.exports=function(t,e){return t===e||t!=t&&e!=e}},"./node_modules/lodash/forEach.js":(t,e,s)=>{var i=s("./node_modules/lodash/_arrayEach.js"),r=s("./node_modules/lodash/_baseEach.js"),n=s("./node_modules/lodash/_castFunction.js"),o=s("./node_modules/lodash/isArray.js");t.exports=function(t,e){return(o(t)?i:r)(t,n(e))}},"./node_modules/lodash/get.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseGet.js");t.exports=function(t,e,s){var r=null==t?void 0:i(t,e);return void 0===r?s:r}},"./node_modules/lodash/hasIn.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseHasIn.js"),r=s("./node_modules/lodash/_hasPath.js");t.exports=function(t,e){return null!=t&&r(t,e,i)}},"./node_modules/lodash/identity.js":t=>{t.exports=function(t){return t}},"./node_modules/lodash/isArguments.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseIsArguments.js"),r=s("./node_modules/lodash/isObjectLike.js"),n=Object.prototype,o=n.hasOwnProperty,a=n.propertyIsEnumerable,h=i(function(){return arguments}())?i:function(t){return r(t)&&o.call(t,"callee")&&!a.call(t,"callee")};t.exports=h},"./node_modules/lodash/isArray.js":t=>{var e=Array.isArray;t.exports=e},"./node_modules/lodash/isArrayLike.js":(t,e,s)=>{var i=s("./node_modules/lodash/isFunction.js"),r=s("./node_modules/lodash/isLength.js");t.exports=function(t){return null!=t&&r(t.length)&&!i(t)}},"./node_modules/lodash/isBuffer.js":(t,e,s)=>{t=s.nmd(t);var i=s("./node_modules/lodash/_root.js"),r=s("./node_modules/lodash/stubFalse.js"),n=e&&!e.nodeType&&e,o=n&&t&&!t.nodeType&&t,a=o&&o.exports===n?i.Buffer:void 0,h=(a?a.isBuffer:void 0)||r;t.exports=h},"./node_modules/lodash/isFunction.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseGetTag.js"),r=s("./node_modules/lodash/isObject.js");t.exports=function(t){if(!r(t))return!1;var e=i(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},"./node_modules/lodash/isLength.js":t=>{t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},"./node_modules/lodash/isObject.js":t=>{t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},"./node_modules/lodash/isObjectLike.js":t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},"./node_modules/lodash/isSymbol.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseGetTag.js"),r=s("./node_modules/lodash/isObjectLike.js");t.exports=function(t){return"symbol"==typeof t||r(t)&&"[object Symbol]"==i(t)}},"./node_modules/lodash/isTypedArray.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseIsTypedArray.js"),r=s("./node_modules/lodash/_baseUnary.js"),n=s("./node_modules/lodash/_nodeUtil.js"),o=n&&n.isTypedArray,a=o?r(o):i;t.exports=a},"./node_modules/lodash/keys.js":(t,e,s)=>{var i=s("./node_modules/lodash/_arrayLikeKeys.js"),r=s("./node_modules/lodash/_baseKeys.js"),n=s("./node_modules/lodash/isArrayLike.js");t.exports=function(t){return n(t)?i(t):r(t)}},"./node_modules/lodash/map.js":(t,e,s)=>{var i=s("./node_modules/lodash/_arrayMap.js"),r=s("./node_modules/lodash/_baseIteratee.js"),n=s("./node_modules/lodash/_baseMap.js"),o=s("./node_modules/lodash/isArray.js");t.exports=function(t,e){return(o(t)?i:n)(t,r(e,3))}},"./node_modules/lodash/memoize.js":(t,e,s)=>{var i=s("./node_modules/lodash/_MapCache.js");function r(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var s=function(){var i=arguments,r=e?e.apply(this,i):i[0],n=s.cache;if(n.has(r))return n.get(r);var o=t.apply(this,i);return s.cache=n.set(r,o)||n,o};return s.cache=new(r.Cache||i),s}r.Cache=i,t.exports=r},"./node_modules/lodash/property.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseProperty.js"),r=s("./node_modules/lodash/_basePropertyDeep.js"),n=s("./node_modules/lodash/_isKey.js"),o=s("./node_modules/lodash/_toKey.js");t.exports=function(t){return n(t)?i(o(t)):r(t)}},"./node_modules/lodash/stubArray.js":t=>{t.exports=function(){return[]}},"./node_modules/lodash/stubFalse.js":t=>{t.exports=function(){return!1}},"./node_modules/lodash/toString.js":(t,e,s)=>{var i=s("./node_modules/lodash/_baseToString.js");t.exports=function(t){return null==t?"":i(t)}},"./node_modules/normalize-wheel/index.js":(t,e,s)=>{t.exports=s("./node_modules/normalize-wheel/src/normalizeWheel.js")},"./node_modules/normalize-wheel/src/ExecutionEnvironment.js":t=>{"use strict";var e=!("undefined"==typeof window||!window.document||!window.document.createElement),s={canUseDOM:e,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:e&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:e&&!!window.screen,isInWorker:!e};t.exports=s},"./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":t=>{var e,s,i,r,n,o,a,h,l,u,d,c,p,m,f,_=!1;function g(){if(!_){_=!0;var t=navigator.userAgent,g=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(t),v=/(Mac OS X)|(Windows)|(Linux)/.exec(t);if(c=/\b(iPhone|iP[ao]d)/.exec(t),p=/\b(iP[ao]d)/.exec(t),u=/Android/i.exec(t),m=/FBAN\/\w+;/i.exec(t),f=/Mobile/i.exec(t),d=!!/Win64/.exec(t),g){(e=g[1]?parseFloat(g[1]):g[5]?parseFloat(g[5]):NaN)&&document&&document.documentMode&&(e=document.documentMode);var y=/(?:Trident\/(\d+.\d+))/.exec(t);o=y?parseFloat(y[1])+4:e,s=g[2]?parseFloat(g[2]):NaN,i=g[3]?parseFloat(g[3]):NaN,(r=g[4]?parseFloat(g[4]):NaN)?(g=/(?:Chrome\/(\d+\.\d+))/.exec(t),n=g&&g[1]?parseFloat(g[1]):NaN):n=NaN}else e=s=i=n=r=NaN;if(v){if(v[1]){var x=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(t);a=!x||parseFloat(x[1].replace("_","."))}else a=!1;h=!!v[2],l=!!v[3]}else a=h=l=!1}}var v={ie:function(){return g()||e},ieCompatibilityMode:function(){return g()||o>e},ie64:function(){return v.ie()&&d},firefox:function(){return g()||s},opera:function(){return g()||i},webkit:function(){return g()||r},safari:function(){return v.webkit()},chrome:function(){return g()||n},windows:function(){return g()||h},osx:function(){return g()||a},linux:function(){return g()||l},iphone:function(){return g()||c},mobile:function(){return g()||c||p||u||f},nativeApp:function(){return g()||m},android:function(){return g()||u},ipad:function(){return g()||p}};t.exports=v},"./node_modules/normalize-wheel/src/isEventSupported.js":(t,e,s)=>{"use strict";var i,r=s("./node_modules/normalize-wheel/src/ExecutionEnvironment.js");r.canUseDOM&&(i=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),t.exports=function(t,e){if(!r.canUseDOM||e&&!("addEventListener"in document))return!1;var s="on"+t,n=s in document;if(!n){var o=document.createElement("div");o.setAttribute(s,"return;"),n="function"==typeof o[s]}return!n&&i&&"wheel"===t&&(n=document.implementation.hasFeature("Events.wheel","3.0")),n}},"./node_modules/normalize-wheel/src/normalizeWheel.js":(t,e,s)=>{"use strict";var i=s("./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"),r=s("./node_modules/normalize-wheel/src/isEventSupported.js");function n(t){var e=0,s=0,i=0,r=0;return"detail"in t&&(s=t.detail),"wheelDelta"in t&&(s=-t.wheelDelta/120),"wheelDeltaY"in t&&(s=-t.wheelDeltaY/120),"wheelDeltaX"in t&&(e=-t.wheelDeltaX/120),"axis"in t&&t.axis===t.HORIZONTAL_AXIS&&(e=s,s=0),i=10*e,r=10*s,"deltaY"in t&&(r=t.deltaY),"deltaX"in t&&(i=t.deltaX),(i||r)&&t.deltaMode&&(1==t.deltaMode?(i*=40,r*=40):(i*=800,r*=800)),i&&!e&&(e=i<1?-1:1),r&&!s&&(s=r<1?-1:1),{spinX:e,spinY:s,pixelX:i,pixelY:r}}n.getEventType=function(){return i.firefox()?"DOMMouseScroll":r("wheel")?"wheel":"mousewheel"},t.exports=n},"./node_modules/prefix/index.js":t=>{var e="undefined"!=typeof document?document.createElement("p").style:{},s=["O","ms","Moz","Webkit"],i=/([A-Z])/g,r={};function n(t){if(t=t.replace(/-([a-z])/g,(function(t,e){return e.toUpperCase()})),void 0!==e[t])return t;for(var i=t.charAt(0).toUpperCase()+t.slice(1),r=s.length;r--;){var n=s[r]+i;if(void 0!==e[n])return n}return t}t.exports=function(t){return t in r?r[t]:r[t]=n(t)},t.exports.dash=function(t){return t=n(t),i.test(t)&&(t="-"+t.replace(i,"-$1"),i.lastIndex=0),t.toLowerCase()}},"./app/shaders/collections-fragment.glsl":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>i});const i="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec4 vPosition;\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n  gl_FragColor.a = uAlpha;\n}\n"},"./app/shaders/collections-vertex.glsl":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>i});const i="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec4 vPosition;\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n  vPosition = newPosition;\n\n  gl_Position = projectionMatrix * newPosition;\n}\n"},"./app/shaders/home-fragment.glsl":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>i});const i="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n\n    gl_FragColor = texture;\n    gl_FragColor.a = uAlpha;\n}\n"},"./app/shaders/home-vertex.glsl":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>i});const i="#define GLSLIFY 1\n#define PI 3.1415926535897932384626433832795\n\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform float uSpeed;\nuniform vec2 uViewportSizes;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n\n    vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n    newPosition.z -= (sin(newPosition.y / uViewportSizes.y * PI + PI / 2.0) + sin(newPosition.x / uViewportSizes.x * PI + PI / 2.0)) * abs(uSpeed);\n\n    gl_Position = projectionMatrix * newPosition;\n}\n"},"./app/shaders/plane-fragment.glsl":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>i});const i="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n  gl_FragColor.a = uAlpha;\n}\n"},"./app/shaders/plane-vertex.glsl":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>i});const i="#define GLSLIFY 1\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"},"./app/animations/Highlight.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var i=s("./app/classes/Animation.js"),r=s("./node_modules/gsap/index.js");class n extends i.default{constructor({element:t,elements:e}){super({element:t,elements:e})}animateIn(){r.default.fromTo(this.element,{autoAlpha:0,delay:.5},{autoAlpha:1,duration:1})}animateOut(){r.default.set(this.element,{autoAlpha:0})}}},"./app/animations/Label.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var i=s("./app/classes/Animation.js"),r=s("./node_modules/gsap/index.js");class n extends i.default{constructor({element:t,elements:e}){super({element:t,elements:e})}animateIn(){r.default.fromTo(this.element,{autoAlpha:0,delay:.5},{autoAlpha:1,duration:1})}animateOut(){r.default.set(this.element,{autoAlpha:0})}}},"./app/animations/Paragraph.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var i=s("./app/classes/Animation.js"),r=s("./node_modules/gsap/index.js");class n extends i.default{constructor({element:t,elements:e}){super({element:t,elements:e})}animateIn(){r.default.fromTo(this.element,{autoAlpha:0,delay:.5},{autoAlpha:1,duration:1})}animateOut(){r.default.set(this.element,{autoAlpha:0})}}},"./app/animations/Title.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var i=s("./app/classes/Animation.js"),r=s("./node_modules/gsap/index.js");class n extends i.default{constructor({element:t,elements:e}){super({element:t,elements:e})}animateIn(){r.default.fromTo(this.element,{autoAlpha:0,delay:.5},{autoAlpha:1,duration:1})}animateOut(){r.default.set(this.element,{autoAlpha:0})}}},"./app/classes/Animation.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>r});var i=s("./app/classes/Component.js");class r extends i.default{constructor({element:t,elements:e}){super({element:t,elements:e}),this.createObserver(),this.animateOut()}createObserver(){this.observer=new IntersectionObserver((t=>{t.forEach((t=>{t.isIntersecting?this.animateIn():this.animateOut()}))})),this.observer.observe(this.element)}animateOut(){}animateIn(){}onResize(){}}},"./app/classes/AsyncLoad.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>r});var i=s("./app/classes/Component.js");class r extends i.default{constructor({element:t}){super({element:t}),this.createObserver()}createObserver(){this.observer=new window.IntersectionObserver((t=>{t.forEach((t=>{t.isIntersecting&&(this.element.src||(this.element.src=this.element.getAttribute("data-src"),this.element.onload=t=>{this.element.classList.add("loaded")}))}))})),this.observer.observe(this.element)}}},"./app/classes/Button.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var i=s("./node_modules/gsap/index.js"),r=s("./app/classes/Component.js");class n extends r.default{constructor({element:t}){super({element:t}),this.path=t.querySelector("path:last-child"),this.pathLength=this.path.getTotalLength(),this.timeline=i.default.timeline({paused:!0}),this.timeline.fromTo(this.path,{strokeDashoffset:this.pathLength,strokeDasharray:`${this.pathLength} ${this.pathLength}`},{strokeDashoffset:0,strokeDasharray:`${this.pathLength} ${this.pathLength}`})}onMouseEnter(){this.timeline.play()}onMouseLeave(){this.timeline.reverse()}addEventListeners(){this.onMouseEnterEvent=this.onMouseEnter.bind(this),this.onMouseLeaveEvent=this.onMouseLeave.bind(this),this.element.addEventListener("mouseenter",this.onMouseEnterEvent),this.element.addEventListener("mouseleave",this.onMouseLeaveEvent)}removerEventListener(){this.element.removeEventListener("mouseenter",this.onMouseEnterEvent),this.element.removeEventListener("mouseleave",this.onMouseLeaveEvent)}}},"./app/classes/Colors.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{ColorsManager:()=>r});var i=s("./node_modules/gsap/index.js");const r=new class{change({backgroundColor:t,color:e}){i.default.to(document.documentElement,{background:t,color:e,duration:1.5})}}},"./app/classes/Component.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var i=s("./node_modules/events/events.js"),r=s("./node_modules/lodash/each.js");class n extends i{constructor({element:t,elements:e}){super(),this.selector=t,this.selectorChildren={...e},this.create(),this.addEventListeners()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},r(this.selectorChildren,((t,e)=>{t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=document.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=document.querySelector(t)))}))}addEventListeners(){}removeEventListeners(){}}},"./app/classes/Page.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>p});var i=s("./node_modules/lodash/each.js"),r=s("./node_modules/lodash/map.js"),n=s("./node_modules/gsap/index.js"),o=s("./node_modules/prefix/index.js"),a=s("./app/animations/Title.js"),h=s("./app/animations/Paragraph.js"),l=s("./app/animations/Label.js"),u=s("./app/animations/Highlight.js"),d=s("./app/classes/AsyncLoad.js"),c=s("./app/classes/Colors.js");class p{constructor({element:t,elements:e,id:s}){this.selector=t,this.selectorChildren={...e,animationsTitles:'[data-animation="title"]',animationsParagraphs:'[data-animation="paragraph"]',animationsLabel:'[data-animation="label"]',animationsHighlights:'[data-animation="highlight"]',preloaders:"[data-src]"},this.id=s,this.transformPrefix=o("transform")}create(){this.element=document.querySelector(this.selector),this.elements={},this.scroll={current:0,target:0,last:0,limit:0},i(this.selectorChildren,((t,e)=>{t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=document.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=document.querySelector(t)))})),this.createAnimations(),this.createPreloader()}createAnimations(){this.animations=[],this.animationsTitles=r(this.elements.animationsTitles,(t=>new a.default({element:t}))),this.animations.push(...this.animationsTitles),this.animationsParagraphs=r(this.elements.animationsParagraphs,(t=>new h.default({element:t}))),this.animations.push(...this.animationsParagraphs),this.animationsLabel=r(this.elements.animationsLabel,(t=>new l.default({element:t}))),this.animations.push(...this.animationsLabel),this.animationsHighlights=r(this.elements.animationsHighlights,(t=>new u.default({element:t}))),this.animations.push(...this.animationsHighlights)}createPreloader(){this.preloaders=r(this.elements.preloaders,(t=>new d.default({element:t})))}show(){return new Promise((t=>{c.ColorsManager.change({backgroundColor:this.element.getAttribute("data-background"),color:this.element.getAttribute("data-color")}),this.animationIn=n.default.timeline(),n.default.fromTo(this.element,{autoAlpha:0},{autoAlpha:1}),this.animationIn.call((e=>{this.addEventListeners(),t()}))}))}hide(){return new Promise((t=>{this.destroy(),this.animationOut=n.default.timeline(),n.default.to(this.element,{autoAlpha:0,onComplete:t})}))}onResize(){this.elements.wrapper&&(this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight),i(this.animations,(t=>t.onResize()))}onWheel({pixelY:t}){this.scroll.target+=t}update(){this.scroll.target=n.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=n.default.utils.interpolate(this.scroll.current,this.scroll.target,.1),this.scroll.current<.01&&(this.scroll.current=0),this.elements.wrapper&&(this.elements.wrapper.style[this.transformPrefix]=`translateY(-${this.scroll.current}px)`)}addEventListeners(){}removeEventListeners(){}destroy(){this.removeEventListeners()}}},"./app/components/Canvas/About/Gallery.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>a});var i=s("./node_modules/gsap/index.js"),r=s("./node_modules/ogl/src/core/Transform.js"),n=s("./node_modules/lodash/map.js"),o=s("./app/components/Canvas/About/Media.js");class a{constructor({element:t,geometry:e,index:s,gl:i,scene:n,sizes:o}){this.element=t,this.elementsWrapper=t.querySelector(".about__gallery__wrapper"),this.geometry=e,this.index=s,this.gl=i,this.scene=n,this.sizes=o,this.group=new r.Transform,this.scroll={current:0,target:0,start:0,lerp:.1,velocity:1},this.createMedias(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene)}createMedias(){this.mediasElements=this.element.querySelectorAll(".about__gallery__media"),this.medias=n(this.mediasElements,((t,e)=>new o.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){n(this.medias,(t=>t.show()))}hide(){n(this.medias,(t=>t.hide()))}onResize(t){this.bounds=this.elementsWrapper.getBoundingClientRect(),this.sizes=t.sizes,this.width=this.bounds.width/window.innerWidth*this.sizes.width,this.scroll.current=this.scroll.target=0,n(this.medias,(e=>e.onResize(t,this.scroll.current)))}onTouchDown({x:t,y:e}){this.scroll.start=this.scroll.current}onTouchMove({x:t,y:e}){const s=t.start-t.end;this.scroll.target=this.scroll.start-s}onTouchUp({x:t,y:e}){}update(t){const e=.1*(t.current-t.target),s=t.current/window.innerHeight;this.scroll.current<this.scroll.target?(this.direction="right",this.scroll.velocity=-1):this.scroll.current>this.scroll.target&&(this.direction="left",this.scroll.velocity=1),this.scroll.target-=this.scroll.velocity,this.scroll.target+=e,this.scroll.current=i.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),n(this.medias,((t,e)=>{const s=t.mesh.scale.x/2+.25;if("left"===this.direction){t.mesh.position.x+s<-this.sizes.width/2&&(t.extra+=this.width)}else if("right"===this.direction){t.mesh.position.x-s>this.sizes.width/2&&(t.extra-=this.width)}t.update(this.scroll.current)})),this.group.position.y=s*this.sizes.height}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/About/Media.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>h});var i=s("./node_modules/ogl/src/core/Program.js"),r=s("./node_modules/ogl/src/core/Mesh.js"),n=s("./node_modules/gsap/index.js"),o=s("./app/shaders/plane-fragment.glsl"),a=s("./app/shaders/plane-vertex.glsl");const h=class{constructor({element:t,geometry:e,gl:s,index:i,scene:r,sizes:n}){this.element=t,this.geometry=e,this.gl=s,this.scene=r,this.index=i,this.sizes=n,this.extra={x:0,y:0},this.createTexture(),this.createProgram(),this.createMesh()}createTexture(){const t=this.element.querySelector("img");this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new i.Program(this.gl,{fragment:o.default,vertex:a.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new r.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){n.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){n.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(t,e){this.extra=0,this.createBounds(t),this.updateX(e),this.updateY(0)}updateRotation(){this.mesh.rotation.z=n.default.utils.mapRange(-this.sizes.width/2,this.sizes.width/2,.1*Math.PI,.1*-Math.PI,this.mesh.position.x)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height;const t=n.default.utils.mapRange(0,this.sizes.width/2,.1,0,Math.abs(this.mesh.position.x));this.mesh.scale.x+=t,this.mesh.scale.y+=t}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height,this.mesh.position.y+=40*Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.1)-40}update(t){this.bounds&&(this.updateRotation(),this.updateScale(),this.updateX(t),this.updateY(0))}}},"./app/components/Canvas/About/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>a});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/extras/Plane.js"),n=s("./node_modules/lodash/map.js"),o=s("./app/components/Canvas/About/Gallery.js");const a=class{constructor({gl:t,scene:e,sizes:s}){this.gl=t,this.sizes=s,this.group=new i.Transform,this.createGeometry(),this.createGalleries(),this.group.setParent(e),this.show()}createGeometry(){this.geometry=new r.Plane(this.gl)}createGalleries(){this.galleriesElements=document.querySelectorAll(".about__gallery"),this.galleries=n(this.galleriesElements,((t,e)=>new o.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){n(this.galleries,(t=>t.show()))}hide(){n(this.galleries,(t=>t.hide()))}onResize(t){n(this.galleries,(e=>e.onResize(t)))}onTouchDown(t){n(this.galleries,(e=>e.onTouchDown(t)))}onTouchMove(t){n(this.galleries,(e=>e.onTouchMove(t)))}onTouchUp(t){n(this.galleries,(e=>e.onTouchUp(t)))}onWheel({pixelX:t,pixelY:e}){}update(t){n(this.galleries,(e=>e.update(t)))}destroy(){n(this.galleries,(t=>t.destroy()))}}},"./app/components/Canvas/Collections/Media.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>h});var i=s("./node_modules/gsap/index.js"),r=s("./node_modules/ogl/src/core/Program.js"),n=s("./node_modules/ogl/src/core/Mesh.js"),o=s("./app/shaders/collections-fragment.glsl"),a=s("./app/shaders/collections-vertex.glsl");const h=class{constructor({element:t,geometry:e,gl:s,index:i,scene:r,sizes:n}){this.element=t,this.geometry=e,this.gl=s,this.index=i,this.scene=r,this.sizes=n,this.extra={x:0,y:0},this.opacity={current:0,target:0,lerp:.1,multiplier:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const t=this.element.querySelector(".collections__gallery__media__image");this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new r.Program(this.gl,{fragment:o.default,vertex:a.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new n.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX()}show(){i.default.fromTo(this.opacity,{multiplier:0},{multiplier:1})}hide(){i.default.to(this.opacity,{multiplier:0})}onResize(t,e){this.extra={x:0,y:0},this.createBounds(t),this.updateX(e&&e.x)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}update(t,e){this.updateX(t);this.mesh.rotation.z=-.02*Math.PI*Math.sin(this.index/1),this.mesh.position.y=.1*Math.sin(this.index/1),this.opacity.target=e===this.index?1:.4,this.opacity.current=i.default.utils.interpolate(this.opacity.current,this.opacity.target,this.opacity.lerp),this.program.uniforms.uAlpha.value=this.opacity.multiplier,this.program.uniforms.uAlpha.value=this.opacity.multiplier*this.opacity.current}}},"./app/components/Canvas/Collections/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>l});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/extras/Plane.js"),n=s("./node_modules/gsap/index.js"),o=s("./node_modules/prefix/index.js"),a=s("./node_modules/lodash/map.js"),h=s("./app/components/Canvas/Collections/Media.js");const l=class{constructor({gl:t,scene:e,sizes:s,transition:r}){this.id="collections",this.gl=t,this.scene=e,this.sizes=s,this.transition=r,this.transformPrefix=o("transform"),this.group=new i.Transform,this.galleryElement=document.querySelector(".collections__gallery"),this.galleryWrapperElement=document.querySelector(".collections__gallery__wrapper"),this.titlesElement=document.querySelector(".collections__titles"),this.collectionsElements=document.querySelectorAll(".collections__article"),this.collectionsElementsActive="collections__article--active",this.mediasElements=document.querySelectorAll(".collections__gallery__media"),this.scroll={current:0,start:0,target:0,lerp:.1,velocity:1},this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new r.Plane(this.gl)}createGallery(){this.medias=a(this.mediasElements,((t,e)=>new h.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}async show(){if(this.transition){const{src:t}=this.transition.mesh.program.uniforms.tMap.value.image,e=window.TEXTURES[t],s=this.medias.find((t=>t.texture===e)),i=-s.bounds.left-s.bounds.width/2+window.innerWidth/2;this.update(),this.transition.animate({position:{x:0,y:s.mesh.position.y,z:0},rotation:s.mesh.rotation,scale:s.mesh.scale},(t=>{s.opacity.multiplier=1,a(this.medias,(t=>{s!==t&&t.show()})),this.scroll.current=this.scroll.target=this.scroll.start=this.scroll.last=i}))}else a(this.medias,(t=>t.show()))}hide(){a(this.medias,(t=>t.hide()))}onResize(t){this.sizes=t.sizes,this.bounds=this.galleryWrapperElement.getBoundingClientRect(),this.scroll.last=this.scroll.target=0,a(this.medias,(e=>e.onResize(t,this.scroll))),this.scroll.limit=this.bounds.width-this.medias[0].element.clientWidth}onTouchDown({x:t,y:e}){this.scroll.last=this.scroll.current}onTouchMove({x:t,y:e}){const s=t.start-t.end;this.scroll.target=this.scroll.last-s}onTouchUp({x:t,y:e}){}onWheel({pixelY:t}){this.scroll.target+=t}onChange(t){this.index=t;const e=parseInt(this.mediasElements[this.index].getAttribute("data-index"));a(this.collectionsElements,((t,s)=>{s===e?t.classList.add(this.collectionsElementsActive):t.classList.remove(this.collectionsElementsActive)})),this.titlesElement.style[this.transformPrefix]=`translateY(-${25*e}%) translate(-50%, -50%) rotate(-90deg)`}update(){this.scroll.target=n.default.utils.clamp(-this.scroll.limit,0,this.scroll.target),this.scroll.current=n.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),this.galleryElement.style[this.transformPrefix]=`translateX(${this.scroll.current}px)`,this.scroll.last<this.scroll.current?this.scroll.direction="right":this.scroll.last>this.scroll.current&&(this.scroll.direction="left"),this.scroll.last=this.scroll.current;const t=Math.floor(Math.abs((this.scroll.current-this.medias[0].bounds.width/2)/this.scroll.limit)*(this.medias.length-1));this.index!==t&&this.onChange(t),a(this.medias,((t,e)=>{t.update(this.scroll.current,this.index),t.mesh.rotation.z=Math.abs(n.default.utils.mapRange(0,1,-.2,.2,e/(this.medias.length-1)))-.1,t.mesh.position.y+=40*Math.cos(t.mesh.position.x/this.sizes.width*Math.PI*.1)-40}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Detail/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>l});var i=s("./node_modules/gsap/index.js"),r=s("./node_modules/ogl/src/extras/Plane.js"),n=s("./node_modules/ogl/src/core/Program.js"),o=s("./node_modules/ogl/src/core/Mesh.js"),a=s("./app/shaders/plane-fragment.glsl"),h=s("./app/shaders/plane-vertex.glsl");const l=class{constructor({gl:t,scene:e,sizes:s,transition:i}){this.id="detail",this.element=document.querySelector(".detail__media__image"),this.gl=t,this.scene=e,this.sizes=s,this.transition=i,this.geometry=new r.Plane(this.gl),this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes}),this.show()}createTexture(){const t=this.element.getAttribute("data-src");this.texture=window.TEXTURES[t]}createProgram(){this.program=new n.Program(this.gl,{fragment:a.default,vertex:h.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new o.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.rotation.z=.01*Math.PI,this.mesh.setParent(this.scene)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){this.transition?this.transition.animate(this.mesh,(t=>{this.program.uniforms.uAlpha.value=1})):i.default.to(this.program.uniforms.uAlpha,{value:1})}hide(){i.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(t){this.createBounds(t),this.updateX(),this.updateY()}onTouchDown(){}onTouchMove(){}onTouchUp(){}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(){this.x=this.bounds.left/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width}updateY(){this.y=this.bounds.top/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height}update(){this.updateX()}destroy(){this.scene.removeChild(this.mesh)}}},"./app/components/Canvas/Home/Media.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>h});var i=s("./node_modules/ogl/src/core/Program.js"),r=s("./node_modules/ogl/src/core/Mesh.js"),n=s("./node_modules/gsap/index.js"),o=s("./app/shaders/home-vertex.glsl"),a=s("./app/shaders/home-fragment.glsl");class h{constructor({element:t,geometry:e,gl:s,index:i,scene:r,sizes:n}){this.element=t,this.gl=s,this.geometry=e,this.scene=r,this.index=i,this.sizes=n,this.extra={x:0,y:0},this.createTexture(),this.createProgram(),this.createMesh()}createTexture(){const t=this.element;this.texture=window.TEXTURES[t.getAttribute("data-src")]}createProgram(){this.program=new i.Program(this.gl,{fragment:a.default,vertex:o.default,uniforms:{uAlpha:{value:0},uSpeed:{value:0},uViewportSizes:{value:[this.sizes.width,this.sizes.height]},tMap:{value:this.texture}}})}createMesh(){this.mesh=new r.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.rotation.z=n.default.utils.random(.03*-Math.PI,.03*Math.PI)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){n.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:.4})}hide(){n.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(t,e){this.extra={x:0,y:0},this.createBounds(t),this.updateX(e&&e.x),this.updateY(e&&e.y)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(t,e){this.updateX(t.x),this.updateY(t.y),this.program.uniforms.uSpeed.value=e}}},"./app/components/Canvas/Home/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>h});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/extras/Plane.js"),n=s("./node_modules/gsap/index.js"),o=s("./node_modules/lodash/map.js"),a=s("./app/components/Canvas/Home/Media.js");const h=class{constructor({gl:t,scene:e,sizes:s}){this.gl=t,this.scene=e,this.sizes=s,this.group=new i.Transform,this.galleryElement=document.querySelector(".home__gallery"),this.mediasElements=document.querySelectorAll(".home__gallery__media__image"),this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0},this.speed={current:0,target:0,lerp:.1},this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new r.Plane(this.gl,{heightSegments:20,widthSegments:20})}createGallery(){this.medias=o(this.mediasElements,((t,e)=>new a.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){o(this.medias,(t=>t.show()))}hide(){o(this.medias,(t=>t.hide()))}onResize(t){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=t.sizes,this.gallerySizes={width:this.galleryBounds.width/window.innerWidth*this.sizes.width,height:this.galleryBounds.height/window.innerHeight*this.sizes.height},this.scroll.x=this.x.target=0,this.scroll.y=this.y.target=0,o(this.medias,(e=>e.onResize(t,this.scroll)))}onTouchDown({x:t,y:e}){this.speed.target=1,this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onTouchMove({x:t,y:e}){const s=t.start-t.end,i=e.start-e.end;this.x.target=this.scrollCurrent.x-s,this.y.target=this.scrollCurrent.y-i}onTouchUp({x:t,y:e}){this.speed.target=0}onWheel({pixelX:t,pixelY:e}){this.x.target+=t,this.y.target+=e}update(){this.speed.current=n.default.utils.interpolate(this.speed.current,this.speed.target,this.speed.lerp),this.x.current=n.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=n.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="right":this.scroll.x>this.x.current&&(this.x.direction="left"),this.scroll.y<this.y.current?this.y.direction="top":this.scroll.y>this.y.current&&(this.y.direction="bottom"),this.scroll.x=this.x.current,this.scroll.y=this.y.current,o(this.medias,((t,e)=>{const s=.6*this.sizes.width,i=t.mesh.scale.x/2;if("left"===this.x.direction){t.mesh.position.x+i<-s&&(t.extra.x+=this.gallerySizes.width,t.mesh.rotation.z=n.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("right"===this.x.direction){t.mesh.position.x-i>s&&(t.extra.x-=this.gallerySizes.width,t.mesh.rotation.z=n.default.utils.random(.03*-Math.PI,.03*Math.PI))}const r=.6*this.sizes.height,o=t.mesh.scale.y/2;if("top"===this.y.direction){t.mesh.position.y+o<-r&&(t.extra.y+=this.gallerySizes.height,t.mesh.rotation.z=n.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("bottom"===this.y.direction){t.mesh.position.y-o>r&&(t.extra.y-=this.gallerySizes.height,t.mesh.rotation.z=n.default.utils.random(.03*-Math.PI,.03*Math.PI))}t.update(this.scroll,this.speed.current)}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Transition.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>l});var i=s("./node_modules/gsap/index.js"),r=s("./node_modules/ogl/src/extras/Plane.js"),n=s("./node_modules/ogl/src/core/Program.js"),o=s("./node_modules/ogl/src/core/Mesh.js"),a=s("./app/shaders/plane-fragment.glsl"),h=s("./app/shaders/plane-vertex.glsl");const l=class{constructor({collections:t,gl:e,scene:s,sizes:i,url:n}){this.collections=t,this.gl=e,this.scene=s,this.sizes=i,this.url=n,this.geometry=new r.Plane(this.gl)}createProgram(t){this.program=new n.Program(this.gl,{fragment:a.default,vertex:h.default,uniforms:{uAlpha:{value:1},tMap:{value:t}}})}createMesh(t){this.mesh=new o.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.scale.x=t.scale.x,this.mesh.scale.y=t.scale.y,this.mesh.scale.z=t.scale.z,this.mesh.position.x=t.position.x,this.mesh.position.y=t.position.y,this.mesh.position.z=t.position.z+.01,this.mesh.rotation.x=t.rotation.x,this.mesh.rotation.y=t.rotation.y,this.mesh.rotation.z=t.rotation.z,this.mesh.setParent(this.scene)}setElement(t){if("collections"===t.id){const{index:e,medias:s}=t,i=s[e];this.createProgram(i.texture),this.createMesh(i.mesh),this.transition="detail"}else this.createProgram(t.texture),this.createMesh(t.mesh),this.transition="collections"}animate(t,e){const s=i.default.timeline({});s.to(this.mesh.scale,{duration:1.5,ease:"expo.inOut",x:t.scale.x,y:t.scale.y,z:t.scale.z},0),s.to(this.mesh.position,{duration:1.5,ease:"expo.inOut",x:t.position.x,y:t.position.y,z:t.position.z},0),s.to(this.mesh.rotation,{duration:1.5,ease:"expo.inOut",x:t.rotation.x,y:t.rotation.y,z:t.rotation.z},0),s.call((t=>{e()})),s.call((t=>{this.scene.removeChild(this.mesh)}),null,"+=0.2")}}},"./app/components/Canvas/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>d});var i=s("./node_modules/ogl/src/core/Renderer.js"),r=s("./node_modules/ogl/src/core/Camera.js"),n=s("./node_modules/ogl/src/core/Transform.js"),o=s("./app/components/Canvas/About/index.js"),a=s("./app/components/Canvas/Collections/index.js"),h=s("./app/components/Canvas/Detail/index.js"),l=s("./app/components/Canvas/Home/index.js"),u=s("./app/components/Canvas/Transition.js");class d{constructor({template:t}){this.template=t,this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize()}createRenderer(){this.renderer=new i.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new r.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new n.Transform}createHome(){this.home=new l.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyHome(){this.home&&(this.home.destroy(),this.home=null)}createAbout(){this.about=new o.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyAbout(){this.about&&(this.about.destroy(),this.about=null)}createCollections(){this.collections=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes,transition:this.transition})}destroyCollections(){this.collections&&(this.collections.destroy(),this.collections=null)}createDetail(){this.detail=new h.default({gl:this.gl,scene:this.scene,sizes:this.sizes,transition:this.transition})}destroyDetail(){this.detail&&(this.detail.destroy(),this.detail=null)}onPreloaded(){this.onChangeEnd(this.template)}onChangeStart(t,e){this.home&&this.home.hide(),this.collections&&this.collections.hide(),this.detail&&this.detail.hide(),this.about&&this.about.hide(),this.isFromCollectionsToDetail="collections"===this.template&&e.indexOf("detail")>-1,this.isFromDetailToCollections="detail"===this.template&&e.indexOf("collections")>-1,(this.isFromCollectionsToDetail||this.isFromDetailToCollections)&&(this.transition=new u.default({gl:this.gl,scene:this.scene,sizes:this.sizes,url:e}),this.transition.setElement(this.collections||this.detail))}onChangeEnd(t){"home"===t?this.createHome():this.destroyHome(),"about"===t?this.createAbout():this.about&&this.destroyAbout(),"detail"===t?this.createDetail():this.detail&&this.destroyDetail(),"collections"===t?this.createCollections():this.collections&&this.destroyCollections(),this.template=t}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const t=this.camera.fov*(Math.PI/180),e=2*Math.tan(t/2)*this.camera.position.z,s=e*this.camera.aspect;this.sizes={height:e,width:s};const i={sizes:this.sizes};this.about&&this.about.onResize(i),this.collections&&this.collections.onResize(i),this.detail&&this.detail.onResize(i),this.home&&this.home.onResize(i)}onTouchDown(t){this.isDown=!0,this.x.start=t.touches?t.touches[0].clientX:t.clientX,this.y.start=t.touches?t.touches[0].clientY:t.clientY;const e={x:this.x,y:this.y};this.about&&this.about.onTouchDown(e),this.collections&&this.collections.onTouchDown(e),this.detail&&this.detail.onTouchDown(e),this.home&&this.home.onTouchDown(e)}onTouchMove(t){if(!this.isDown)return;const e=t.touches?t.touches[0].clientX:t.clientX,s=t.touches?t.touches[0].clientY:t.clientY;this.x.end=e,this.y.end=s;const i={x:this.x,y:this.y};this.about&&this.about.onTouchMove(i),this.collections&&this.collections.onTouchMove(i),this.detail&&this.detail.onTouchMove(i),this.home&&this.home.onTouchMove(i)}onTouchUp(t){this.isDown=!1;const e=t.changedTouches?t.changedTouches[0].clientX:t.clientX,s=t.changedTouches?t.changedTouches[0].clientY:t.clientY;this.x.end=e,this.y.end=s;const i={x:this.x,y:this.y};this.about&&this.about.onTouchUp(i),this.collections&&this.collections.onTouchUp(i),this.detail&&this.detail.onTouchUp(i),this.home&&this.home.onTouchUp(i)}onWheel(t){this.home&&this.home.onWheel(t),this.collections&&this.collections.onWheel(t)}update(t){this.about&&this.about.update(t),this.collections&&this.collections.update(),this.detail&&this.detail.update(),this.home&&this.home.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/components/Navigation.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>o});var i=s("./node_modules/gsap/index.js"),r=s("./app/classes/Component.js"),n=s("./app/utils/colors.js");class o extends r.default{constructor({template:t}){super({element:".navigation",elements:{items:".navigation__list__item",links:".navigation__list__link"}}),this.onChange(t)}onChange(t){"about"===t?(i.default.to(this.element,{autoAlpha:1,color:n.COLOR_BRIGHT_GRAY,duration:1.5}),i.default.to(this.elements.items[0],{autoAlpha:1,delay:.75,duration:.75}),i.default.to(this.elements.items[1],{autoAlpha:0,duration:.75})):(i.default.to(this.element,{autoAlpha:1,color:n.COLOR_QUARTER_SPANISH_WHITE,duration:1.5}),i.default.to(this.elements.items[0],{autoAlpha:0,duration:.75}),i.default.to(this.elements.items[1],{autoAlpha:1,delay:.75,duration:.75}))}}},"./app/components/Preloader.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>a});var i=s("./node_modules/ogl/src/core/Texture.js"),r=s("./node_modules/gsap/index.js"),n=s("./app/classes/Component.js"),o=s("./app/utils/text.js");class a extends n.default{constructor({canvas:t}){super({element:".preloader",elements:{title:".preloader__text",number:".preloader__number",numberText:".preloader__number__text"}}),this.canvas=t,window.TEXTURES={},(0,o.split)({element:this.elements.title,expression:"<br>"}),(0,o.split)({element:this.elements.title,expression:"<br>"}),this.elements.titleSpans=this.elements.title.querySelectorAll("span span"),this.length=0,this.createLoader()}createLoader(){window.ASSETS.forEach((t=>{const e=new i.Texture(this.canvas.gl,{generateMipmaps:!1}),s=new window.Image;s.crossOrigin="anonymous",s.src=t,s.onload=t=>{e.image=s,this.onAssetLoaded()},window.TEXTURES[t]=e}))}onAssetLoaded(t){this.length+=1;const e=this.length/window.ASSETS.length;this.elements.numberText.innerHTML=`${Math.round(100*e)}%`,1===e&&this.onLoaded()}onLoaded(){return new Promise((t=>{this.emit("completed"),this.animateOut=r.default.timeline({delay:1}),this.animateOut.to(this.elements.titleSpans,{duration:1.5,ease:"expo.out",stagger:.1,y:"100%"}),this.animateOut.to(this.elements.numberText,{autoAlpha:0,duration:1.5,ease:"expo.out",stagger:.1,y:50},"-=1.4"),this.animateOut.to(this.element,{autoAlpha:0,duration:1}),this.animateOut.call((t=>this.destroy()))}))}destroy(){this.element.parentNode.removeChild(this.element)}}},"./app/index.js":(t,e,s)=>{"use strict";s.r(e);var i=s("./app/pages/About/index.js"),r=s("./app/pages/Collections/index.js"),n=s("./app/pages/Detail/index.js"),o=s("./app/pages/Home/index.js"),a=s("./node_modules/normalize-wheel/index.js"),h=s("./node_modules/lodash/each.js"),l=s("./app/components/Canvas/index.js"),u=s("./app/components/Preloader.js"),d=s("./app/components/Navigation.js"),c=s("./node_modules/console-browserify/index.js");new class{constructor(){this.createContent(),this.createCanvas(),this.createPreloader(),this.createNavigation(),this.createPages(),this.addEventListeners(),this.addLinkListeners(),this.onResize(),this.update()}createNavigation(){this.navigation=new d.default({template:this.template})}createPreloader(){this.preloader=new u.default({canvas:this.canvas}),this.preloader.once("completed",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new l.default({template:this.template})}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new i.default,collections:new r.default,detail:new n.default,home:new o.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.onResize(),this.canvas.onPreloaded(),this.page.show()}onPopState(){this.onChange({url:window.location.pathname,push:!1})}async onChange({url:t,push:e}){this.canvas.onChangeStart(this.template,t),await this.page.hide();const s=await window.fetch(t);if(200===s.status){const e=await s.text(),i=document.createElement("div");i.innerHTML=e,window.history.pushState({},"",t);const r=i.querySelector(".content");this.template=r.getAttribute("data-template"),this.navigation.onChange(this.template),this.content.setAttribute("data-template",this.template),this.content.innerHTML=r.innerHTML,this.canvas.onChangeEnd(this.template),this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.addLinkListeners()}else c.log("Error",error)}onResize(){this.page&&this.page.onResize&&this.page.onResize(),window.requestAnimationFrame((t=>{this.canvas&&this.canvas.onResize&&this.canvas.onResize()}))}onTouchDown(t){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(t)}onTouchMove(t){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(t)}onTouchUp(t){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(t)}onWheel(t){const e=a(t);this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(e),this.page&&this.page.onWheel&&this.page.onWheel(e)}update(){this.page&&this.page.update&&this.page.update(),this.canvas&&this.canvas.update&&this.canvas.update(this.page.scroll),this.frame=window.requestAnimationFrame(this.update.bind(this))}addLinkListeners(){const t=document.querySelectorAll("a");h(t,(t=>{t.onclick=e=>{e.preventDefault();const{href:s}=t;this.onChange(s)}}))}addEventListeners(){window.addEventListener("popstate",this.onPopState.bind(this)),window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchstart",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}}},"./app/pages/About/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>r});var i=s("./app/classes/Page.js");class r extends i.default{constructor(){super({id:"about",element:".about",elements:{wrapper:".about__wrapper",navigation:document.querySelector(".navigation"),title:".about__title"}})}}},"./app/pages/Collections/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>r});var i=s("./app/classes/Page.js");class r extends i.default{constructor(){super({id:"collections",element:".collections"})}}},"./app/pages/Detail/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var i=s("./app/classes/Page.js"),r=s("./app/classes/Button.js");class n extends i.default{constructor(){super({id:"detail",element:".detail",elements:{button:".detail__button"}})}create(){super.create(),this.link=new r.default({element:this.elements.button})}destroy(){super.destroy(),this.link.removerEventListener()}}},"./app/pages/Home/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var i=s("./app/classes/Button.js"),r=s("./app/classes/Page.js");class n extends r.default{constructor(){super({id:"home",element:".home",elements:{navigator:document.querySelector(".navigation"),link:".home__link"}})}create(){super.create(),this.link=new i.default({element:this.elements.link})}destroy(){super.destroy(),this.link.removeEventListeners()}}},"./app/utils/colors.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{COLOR_BRIGHT_GRAY:()=>r,COLOR_QUARTER_SPANISH_WHITE:()=>i});const i="#f9f1e7",r="#37384c"},"./app/utils/text.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{calculate:()=>n,split:()=>r});var i=s("./node_modules/lodash/each.js");function r({element:t,expression:e=" ",append:s=!0}){const r=function(t,e){const s=t.split("<br>");let r=[];return i(s,((t,s)=>{s>0&&r.push("<br>"),r=r.concat(t.split(e));let n=!1,o="";const a=[];i(r,(t=>{n||!t.includes("<a")&&!t.includes("<strong")||(o="",n=!0),n&&(o+=` ${t}`),n&&(t.includes("/a>")||t.includes("/strong>"))&&(a.push(o),o=""),n||""!==o||a.push(t),n&&(t.includes("/a>")||t.includes("/strong>"))&&(n=!1)})),r=a})),r}(t.innerHTML.toString().trim(),e);let n="";i(r,(t=>{if(t.indexOf("<br>")>-1){const e=t.split("<br>");i(e,((t,e)=>{n+=e>0?"<br>"+o(t):o(t)}))}else n+=o(t)})),t.innerHTML=n;const a=t.querySelectorAll("span");return s&&i(a,(t=>{const e=1===t.textContent.length,s=""!==t.innerHTML.trim(),i="&"!==t.textContent,r="-"!==t.textContent;e&&s&&i&&r&&(t.innerHTML=`${t.textContent}&nbsp;`)})),a}function n(t){if(!t.length)return;const e=[];let s=[],r=t[0].offsetTop;return i(t,((i,n)=>{i.offsetTop===r&&s.push(i),i.offsetTop!==r&&(e.push(s),s=[],s.push(i),r=i.offsetTop),n+1===t.length&&e.push(s)})),e}function o(t){return""===(t=t.trim())||" "===t?t:"<br>"===t?"<br>":`<span>${t}</span>`+(t.length>1?" ":"")}},"./node_modules/ogl/src/core/Camera.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Camera:()=>l});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/math/Mat4.js"),n=s("./node_modules/ogl/src/math/Vec3.js");const o=new r.Mat4,a=new n.Vec3,h=new n.Vec3;class l extends i.Transform{constructor(t,{near:e=.1,far:s=100,fov:i=45,aspect:o=1,left:a,right:h,bottom:l,top:u,zoom:d=1}={}){super(),Object.assign(this,{near:e,far:s,fov:i,aspect:o,left:a,right:h,bottom:l,top:u,zoom:d}),this.projectionMatrix=new r.Mat4,this.viewMatrix=new r.Mat4,this.projectionViewMatrix=new r.Mat4,this.worldPosition=new n.Vec3,this.type=a||h?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:t=this.near,far:e=this.far,fov:s=this.fov,aspect:i=this.aspect}={}){return Object.assign(this,{near:t,far:e,fov:s,aspect:i}),this.projectionMatrix.fromPerspective({fov:s*(Math.PI/180),aspect:i,near:t,far:e}),this.type="perspective",this}orthographic({near:t=this.near,far:e=this.far,left:s=this.left,right:i=this.right,bottom:r=this.bottom,top:n=this.top,zoom:o=this.zoom}={}){return Object.assign(this,{near:t,far:e,left:s,right:i,bottom:r,top:n,zoom:o}),s/=o,i/=o,r/=o,n/=o,this.projectionMatrix.fromOrthogonal({left:s,right:i,bottom:r,top:n,near:t,far:e}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(t){return super.lookAt(t,!0),this}project(t){return t.applyMatrix4(this.viewMatrix),t.applyMatrix4(this.projectionMatrix),this}unproject(t){return t.applyMatrix4(o.inverse(this.projectionMatrix)),t.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3]);const t=this.projectionViewMatrix;this.frustum[0].set(t[3]-t[0],t[7]-t[4],t[11]-t[8]).constant=t[15]-t[12],this.frustum[1].set(t[3]+t[0],t[7]+t[4],t[11]+t[8]).constant=t[15]+t[12],this.frustum[2].set(t[3]+t[1],t[7]+t[5],t[11]+t[9]).constant=t[15]+t[13],this.frustum[3].set(t[3]-t[1],t[7]-t[5],t[11]-t[9]).constant=t[15]-t[13],this.frustum[4].set(t[3]-t[2],t[7]-t[6],t[11]-t[10]).constant=t[15]-t[14],this.frustum[5].set(t[3]+t[2],t[7]+t[6],t[11]+t[10]).constant=t[15]+t[14];for(let t=0;t<6;t++){const e=1/this.frustum[t].distance();this.frustum[t].multiply(e),this.frustum[t].constant*=e}}frustumIntersectsMesh(t){if(!t.geometry.attributes.position)return!0;if(t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere(),!t.geometry.bounds)return!0;const e=a;e.copy(t.geometry.bounds.center),e.applyMatrix4(t.worldMatrix);const s=t.geometry.bounds.radius*t.worldMatrix.getMaxScaleOnAxis();return this.frustumIntersectsSphere(e,s)}frustumIntersectsSphere(t,e){const s=h;for(let i=0;i<6;i++){const r=this.frustum[i];if(s.copy(r).dot(t)+r.constant<-e)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Geometry:()=>l});var i=s("./node_modules/ogl/src/math/Vec3.js"),r=s("./node_modules/console-browserify/index.js");const n=new i.Vec3;let o=1,a=1,h=!1;class l{constructor(t,e={}){t.canvas||r.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=o++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=a++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return r.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:s})=>{if(!this.attributes[e])return void r.warn(`active attribute ${e} not being supplied`);const i=this.attributes[e];this.gl.bindBuffer(i.target,i.buffer),this.glState.boundBuffer=i.buffer;let n=1;35674===s&&(n=2),35675===s&&(n=3),35676===s&&(n=4);const o=i.size/n,a=1===n?0:n*n*n,h=1===n?0:n*n;for(let e=0;e<n;e++)this.gl.vertexAttribPointer(t+e,o,i.type,i.normalized,i.stride+a,i.offset+e*h),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,i.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const s=this.attributes[e];s.needsUpdate&&this.updateAttribute(s)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:h?void 0:(r.warn("No position buffer data found to compute bounds"),h=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,s=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||(this.bounds={min:new i.Vec3,max:new i.Vec3,center:new i.Vec3,scale:new i.Vec3,radius:1/0});const r=this.bounds.min,n=this.bounds.max,o=this.bounds.center,a=this.bounds.scale;r.set(1/0),n.set(-1/0);for(let t=0,i=e.length;t<i;t+=s){const s=e[t],i=e[t+1],o=e[t+2];r.x=Math.min(s,r.x),r.y=Math.min(i,r.y),r.z=Math.min(o,r.z),n.x=Math.max(s,n.x),n.y=Math.max(i,n.y),n.z=Math.max(o,n.z)}a.sub(n,r),o.add(r,n).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,s=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||this.computeBoundingBox(t);let i=0;for(let t=0,r=e.length;t<r;t+=s)n.fromArray(e,t),i=Math.max(i,this.bounds.center.squaredDistance(n));this.bounds.radius=Math.sqrt(i)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Mesh:()=>h});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/math/Mat3.js"),n=s("./node_modules/ogl/src/math/Mat4.js"),o=s("./node_modules/console-browserify/index.js");let a=0;class h extends i.Transform{constructor(t,{geometry:e,program:s,mode:i=t.TRIANGLES,frustumCulled:h=!0,renderOrder:l=0}={}){super(),t.canvas||o.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=a++,this.geometry=e,this.program=s,this.mode=i,this.frustumCulled=h,this.renderOrder=l,this.modelViewMatrix=new n.Mat4,this.normalMatrix=new r.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t}))),t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Program:()=>o});var i=s("./node_modules/console-browserify/index.js");let r=1;const n={};class o{constructor(t,{vertex:e,fragment:s,uniforms:n={},transparent:o=!1,cullFace:a=t.BACK,frontFace:l=t.CCW,depthTest:u=!0,depthWrite:d=!0,depthFunc:c=t.LESS}={}){t.canvas||i.error("gl not passed as fist argument to Program"),this.gl=t,this.uniforms=n,this.id=r++,e||i.warn("vertex shader not supplied"),s||i.warn("fragment shader not supplied"),this.transparent=o,this.cullFace=a,this.frontFace=l,this.depthTest=u,this.depthWrite=d,this.depthFunc=c,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const p=t.createShader(t.VERTEX_SHADER);t.shaderSource(p,e),t.compileShader(p),""!==t.getShaderInfoLog(p)&&i.warn(`${t.getShaderInfoLog(p)}\nVertex Shader\n${h(e)}`);const m=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(m,s),t.compileShader(m),""!==t.getShaderInfoLog(m)&&i.warn(`${t.getShaderInfoLog(m)}\nFragment Shader\n${h(s)}`),this.program=t.createProgram(),t.attachShader(this.program,p),t.attachShader(this.program,m),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return i.warn(t.getProgramInfoLog(this.program));t.deleteShader(p),t.deleteShader(m),this.uniformLocations=new Map;let f=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<f;e++){let s=t.getActiveUniform(this.program,e);this.uniformLocations.set(s,t.getUniformLocation(this.program,s.name));const i=s.name.match(/(\w+)/g);s.uniformName=i[0],3===i.length?(s.isStructArray=!0,s.structIndex=Number(i[1]),s.structProperty=i[2]):2===i.length&&isNaN(Number(i[1]))&&(s.isStruct=!0,s.structProperty=i[1])}this.attributeLocations=new Map;const _=[],g=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<g;e++){const s=t.getActiveAttrib(this.program,e),i=t.getAttribLocation(this.program,s.name);-1!==i&&(_[i]=s.name,this.attributeLocations.set(s,i))}this.attributeOrder=_.join("")}setBlendFunc(t,e,s,i){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=s,this.blendFunc.dstAlpha=i,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,s)=>{let i=s.uniformName,r=this.uniforms[i];if(s.isStruct&&(r=r[s.structProperty],i+=`.${s.structProperty}`),s.isStructArray&&(r=r[s.structIndex][s.structProperty],i+=`[${s.structIndex}].${s.structProperty}`),!r)return u(`Active uniform ${i} has not been supplied`);if(r&&void 0===r.value)return u(`${i} uniform is missing a value parameter`);if(r.value.texture)return e+=1,r.value.update(e),a(this.gl,s.type,t,e);if(r.value.length&&r.value[0].texture){const i=[];return r.value.forEach((t=>{e+=1,t.update(e),i.push(e)})),a(this.gl,s.type,t,i)}a(this.gl,s.type,t,r.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function a(t,e,s,i){i=i.length?function(t){const e=t.length,s=t[0].length;if(void 0===s)return t;const i=e*s;let r=n[i];r||(n[i]=r=new Float32Array(i));for(let i=0;i<e;i++)r.set(t[i],i*s);return r}(i):i;const r=t.renderer.state.uniformLocations.get(s);if(i.length)if(void 0===r||r.length!==i.length)t.renderer.state.uniformLocations.set(s,i.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let s=0,i=t.length;s<i;s++)if(t[s]!==e[s])return!1;return!0}(r,i))return;r.set?r.set(i):function(t,e){for(let s=0,i=t.length;s<i;s++)t[s]=e[s]}(r,i),t.renderer.state.uniformLocations.set(s,r)}else{if(r===i)return;t.renderer.state.uniformLocations.set(s,i)}switch(e){case 5126:return i.length?t.uniform1fv(s,i):t.uniform1f(s,i);case 35664:return t.uniform2fv(s,i);case 35665:return t.uniform3fv(s,i);case 35666:return t.uniform4fv(s,i);case 35670:case 5124:case 35678:case 35680:return i.length?t.uniform1iv(s,i):t.uniform1i(s,i);case 35671:case 35667:return t.uniform2iv(s,i);case 35672:case 35668:return t.uniform3iv(s,i);case 35673:case 35669:return t.uniform4iv(s,i);case 35674:return t.uniformMatrix2fv(s,!1,i);case 35675:return t.uniformMatrix3fv(s,!1,i);case 35676:return t.uniformMatrix4fv(s,!1,i)}}function h(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let l=0;function u(t){l>100||(i.warn(t),l++,l>100&&i.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Renderer:()=>a});var i=s("./node_modules/ogl/src/math/Vec3.js"),r=s("./node_modules/console-browserify/index.js");const n=new i.Vec3;let o=1;class a{constructor({canvas:t=document.createElement("canvas"),width:e=300,height:s=150,dpr:i=1,alpha:n=!1,depth:a=!0,stencil:h=!1,antialias:l=!1,premultipliedAlpha:u=!1,preserveDrawingBuffer:d=!1,powerPreference:c="default",autoClear:p=!0,webgl:m=2}={}){const f={alpha:n,depth:a,stencil:h,antialias:l,premultipliedAlpha:u,preserveDrawingBuffer:d,powerPreference:c};this.dpr=i,this.alpha=n,this.color=!0,this.depth=a,this.stencil=h,this.premultipliedAlpha=u,this.autoClear=p,this.id=o++,2===m&&(this.gl=t.getContext("webgl2",f)),this.isWebgl2=!!this.gl,this.gl||(this.gl=t.getContext("webgl",f)),this.gl||r.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(e,s),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(t,e){this.width=t,this.height=e,this.gl.canvas.width=t*this.dpr,this.gl.canvas.height=e*this.dpr,Object.assign(this.gl.canvas.style,{width:t+"px",height:e+"px"})}setViewport(t,e,s=0,i=0){this.state.viewport.width===t&&this.state.viewport.height===e||(this.state.viewport.width=t,this.state.viewport.height=e,this.state.viewport.x=s,this.state.viewport.y=i,this.gl.viewport(s,i,t,e))}setScissor(t,e,s=0,i=0){this.gl.scissor(s,i,t,e)}enable(t){!0!==this.state[t]&&(this.gl.enable(t),this.state[t]=!0)}disable(t){!1!==this.state[t]&&(this.gl.disable(t),this.state[t]=!1)}setBlendFunc(t,e,s,i){this.state.blendFunc.src===t&&this.state.blendFunc.dst===e&&this.state.blendFunc.srcAlpha===s&&this.state.blendFunc.dstAlpha===i||(this.state.blendFunc.src=t,this.state.blendFunc.dst=e,this.state.blendFunc.srcAlpha=s,this.state.blendFunc.dstAlpha=i,void 0!==s?this.gl.blendFuncSeparate(t,e,s,i):this.gl.blendFunc(t,e))}setBlendEquation(t,e){t=t||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===t&&this.state.blendEquation.modeAlpha===e||(this.state.blendEquation.modeRGB=t,this.state.blendEquation.modeAlpha=e,void 0!==e?this.gl.blendEquationSeparate(t,e):this.gl.blendEquation(t))}setCullFace(t){this.state.cullFace!==t&&(this.state.cullFace=t,this.gl.cullFace(t))}setFrontFace(t){this.state.frontFace!==t&&(this.state.frontFace=t,this.gl.frontFace(t))}setDepthMask(t){this.state.depthMask!==t&&(this.state.depthMask=t,this.gl.depthMask(t))}setDepthFunc(t){this.state.depthFunc!==t&&(this.state.depthFunc=t,this.gl.depthFunc(t))}activeTexture(t){this.state.activeTextureUnit!==t&&(this.state.activeTextureUnit=t,this.gl.activeTexture(this.gl.TEXTURE0+t))}bindFramebuffer({target:t=this.gl.FRAMEBUFFER,buffer:e=null}={}){this.state.framebuffer!==e&&(this.state.framebuffer=e,this.gl.bindFramebuffer(t,e))}getExtension(t,e,s){return e&&this.gl[e]?this.gl[e].bind(this.gl):(this.extensions[t]||(this.extensions[t]=this.gl.getExtension(t)),e?this.extensions[t]?this.extensions[t][s].bind(this.extensions[t]):null:this.extensions[t])}sortOpaque(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:t.zDepth!==e.zDepth?t.zDepth-e.zDepth:e.id-t.id}sortTransparent(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.zDepth!==e.zDepth?e.zDepth-t.zDepth:e.id-t.id}sortUI(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:e.id-t.id}getRenderList({scene:t,camera:e,frustumCull:s,sort:i}){let r=[];if(e&&s&&e.updateFrustum(),t.traverse((t=>{if(!t.visible)return!0;t.draw&&(s&&t.frustumCulled&&e&&!e.frustumIntersectsMesh(t)||r.push(t))})),i){const t=[],s=[],i=[];r.forEach((r=>{r.program.transparent?r.program.depthTest?s.push(r):i.push(r):t.push(r),r.zDepth=0,0===r.renderOrder&&r.program.depthTest&&e&&(r.worldMatrix.getTranslation(n),n.applyMatrix4(e.projectionViewMatrix),r.zDepth=n.z)})),t.sort(this.sortOpaque),s.sort(this.sortTransparent),i.sort(this.sortUI),r=t.concat(s,i)}return r}render({scene:t,camera:e,target:s=null,update:i=!0,sort:r=!0,frustumCull:n=!0,clear:o}){null===s?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(s),this.setViewport(s.width,s.height)),(o||this.autoClear&&!1!==o)&&(!this.depth||s&&!s.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),i&&t.updateMatrixWorld(),e&&e.updateMatrixWorld();this.getRenderList({scene:t,camera:e,frustumCull:n,sort:r}).forEach((t=>{t.draw({camera:e})}))}}},"./node_modules/ogl/src/core/Texture.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Texture:()=>o});const i=new Uint8Array(4);function r(t){return 0==(t&t-1)}let n=1;class o{constructor(t,{image:e,target:s=t.TEXTURE_2D,type:i=t.UNSIGNED_BYTE,format:r=t.RGBA,internalFormat:o=r,wrapS:a=t.CLAMP_TO_EDGE,wrapT:h=t.CLAMP_TO_EDGE,generateMipmaps:l=!0,minFilter:u=(l?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:d=t.LINEAR,premultiplyAlpha:c=!1,unpackAlignment:p=4,flipY:m=s==t.TEXTURE_2D,anisotropy:f=0,level:_=0,width:g,height:v=g}={}){this.gl=t,this.id=n++,this.image=e,this.target=s,this.type=i,this.format=r,this.internalFormat=o,this.minFilter=u,this.magFilter=d,this.wrapS=a,this.wrapT=h,this.generateMipmaps=l,this.premultiplyAlpha=c,this.unpackAlignment=p,this.flipY=m,this.anisotropy=Math.min(f,this.gl.renderer.parameters.maxAnisotropy),this.level=_,this.width=g,this.height=v,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||r(this.image.width)&&r(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,i);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,i);this.store.image=this.image}}}},"./node_modules/ogl/src/core/Transform.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Transform:()=>a});var i=s("./node_modules/ogl/src/math/Vec3.js"),r=s("./node_modules/ogl/src/math/Quat.js"),n=s("./node_modules/ogl/src/math/Mat4.js"),o=s("./node_modules/ogl/src/math/Euler.js");class a{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new n.Mat4,this.worldMatrix=new n.Mat4,this.matrixAutoUpdate=!0,this.position=new i.Vec3,this.quaternion=new r.Quat,this.scale=new i.Vec3(1),this.rotation=new o.Euler,this.up=new i.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(t,e=!0){this.parent&&t!==this.parent&&this.parent.removeChild(this,!1),this.parent=t,e&&t&&t.addChild(this,!1)}addChild(t,e=!0){~this.children.indexOf(t)||this.children.push(t),e&&t.setParent(this,!1)}removeChild(t,e=!0){~this.children.indexOf(t)&&this.children.splice(this.children.indexOf(t),1),e&&t.setParent(null,!1)}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||t)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,t=!0);for(let e=0,s=this.children.length;e<s;e++)this.children[e].updateMatrixWorld(t)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(t){if(!t(this))for(let e=0,s=this.children.length;e<s;e++)this.children[e].traverse(t)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(t,e=!1){e?this.matrix.lookAt(this.position,t,this.up):this.matrix.lookAt(t,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Plane:()=>r});var i=s("./node_modules/ogl/src/core/Geometry.js");class r extends i.Geometry{constructor(t,{width:e=1,height:s=1,widthSegments:i=1,heightSegments:n=1,attributes:o={}}={}){const a=i,h=n,l=(a+1)*(h+1),u=a*h*6,d=new Float32Array(3*l),c=new Float32Array(3*l),p=new Float32Array(2*l),m=u>65536?new Uint32Array(u):new Uint16Array(u);r.buildPlane(d,c,p,m,e,s,0,a,h),Object.assign(o,{position:{size:3,data:d},normal:{size:3,data:c},uv:{size:2,data:p},index:{data:m}}),super(t,o)}static buildPlane(t,e,s,i,r,n,o,a,h,l=0,u=1,d=2,c=1,p=-1,m=0,f=0){const _=m,g=r/a,v=n/h;for(let y=0;y<=h;y++){let x=y*v-n/2;for(let n=0;n<=a;n++,m++){let v=n*g-r/2;if(t[3*m+l]=v*c,t[3*m+u]=x*p,t[3*m+d]=o/2,e[3*m+l]=0,e[3*m+u]=0,e[3*m+d]=o>=0?1:-1,s[2*m]=n/a,s[2*m+1]=1-y/h,y===h||n===a)continue;let b=_+n+y*(a+1),w=_+n+(y+1)*(a+1),j=_+n+(y+1)*(a+1)+1,M=_+n+y*(a+1)+1;i[6*f]=b,i[6*f+1]=w,i[6*f+2]=M,i[6*f+3]=w,i[6*f+4]=j,i[6*f+5]=M,f++}}}}},"./node_modules/ogl/src/math/Euler.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Euler:()=>n});var i=s("./node_modules/ogl/src/math/functions/EulerFunc.js");const r=new(s("./node_modules/ogl/src/math/Mat4.js").Mat4);class n extends Array{constructor(t=0,e=t,s=t,i="YXZ"){return super(t,e,s),this.order=i,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set(t,e=t,s=t){return t.length?this.copy(t):(this[0]=t,this[1]=e,this[2]=s,this.onChange(),this)}copy(t){return this[0]=t[0],this[1]=t[1],this[2]=t[2],this.onChange(),this}reorder(t){return this.order=t,this.onChange(),this}fromRotationMatrix(t,e=this.order){return i.fromRotationMatrix(this,t,e),this}fromQuaternion(t,e=this.order){return r.fromQuaternion(t),this.fromRotationMatrix(r,e)}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Mat3:()=>r});var i=s("./node_modules/ogl/src/math/functions/Mat3Func.js");class r extends Array{constructor(t=1,e=0,s=0,i=0,r=1,n=0,o=0,a=0,h=1){return super(t,e,s,i,r,n,o,a,h),this}set(t,e,s,r,n,o,a,h,l){return t.length?this.copy(t):(i.set(this,t,e,s,r,n,o,a,h,l),this)}translate(t,e=this){return i.translate(this,e,t),this}rotate(t,e=this){return i.rotate(this,e,t),this}scale(t,e=this){return i.scale(this,e,t),this}multiply(t,e){return e?i.multiply(this,t,e):i.multiply(this,this,t),this}identity(){return i.identity(this),this}copy(t){return i.copy(this,t),this}fromMatrix4(t){return i.fromMat4(this,t),this}fromQuaternion(t){return i.fromQuat(this,t),this}fromBasis(t,e,s){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],s[0],s[1],s[2]),this}inverse(t=this){return i.invert(this,t),this}getNormalMatrix(t){return i.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/Mat4.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Mat4:()=>r});var i=s("./node_modules/ogl/src/math/functions/Mat4Func.js");class r extends Array{constructor(t=1,e=0,s=0,i=0,r=0,n=1,o=0,a=0,h=0,l=0,u=1,d=0,c=0,p=0,m=0,f=1){return super(t,e,s,i,r,n,o,a,h,l,u,d,c,p,m,f),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(t){this[12]=t}set y(t){this[13]=t}set z(t){this[14]=t}set w(t){this[15]=t}set(t,e,s,r,n,o,a,h,l,u,d,c,p,m,f,_){return t.length?this.copy(t):(i.set(this,t,e,s,r,n,o,a,h,l,u,d,c,p,m,f,_),this)}translate(t,e=this){return i.translate(this,e,t),this}rotate(t,e,s=this){return i.rotate(this,s,t,e),this}scale(t,e=this){return i.scale(this,e,"number"==typeof t?[t,t,t]:t),this}multiply(t,e){return e?i.multiply(this,t,e):i.multiply(this,this,t),this}identity(){return i.identity(this),this}copy(t){return i.copy(this,t),this}fromPerspective({fov:t,aspect:e,near:s,far:r}={}){return i.perspective(this,t,e,s,r),this}fromOrthogonal({left:t,right:e,bottom:s,top:r,near:n,far:o}){return i.ortho(this,t,e,s,r,n,o),this}fromQuaternion(t){return i.fromQuat(this,t),this}setPosition(t){return this.x=t[0],this.y=t[1],this.z=t[2],this}inverse(t=this){return i.invert(this,t),this}compose(t,e,s){return i.fromRotationTranslationScale(this,t,e,s),this}getRotation(t){return i.getRotation(t,this),this}getTranslation(t){return i.getTranslation(t,this),this}getScaling(t){return i.getScaling(t,this),this}getMaxScaleOnAxis(){return i.getMaxScaleOnAxis(this)}lookAt(t,e,s){return i.targetTo(this,t,e,s),this}determinant(){return i.determinant(this)}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this[4]=t[e+4],this[5]=t[e+5],this[6]=t[e+6],this[7]=t[e+7],this[8]=t[e+8],this[9]=t[e+9],this[10]=t[e+10],this[11]=t[e+11],this[12]=t[e+12],this[13]=t[e+13],this[14]=t[e+14],this[15]=t[e+15],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t[e+4]=this[4],t[e+5]=this[5],t[e+6]=this[6],t[e+7]=this[7],t[e+8]=this[8],t[e+9]=this[9],t[e+10]=this[10],t[e+11]=this[11],t[e+12]=this[12],t[e+13]=this[13],t[e+14]=this[14],t[e+15]=this[15],t}}},"./node_modules/ogl/src/math/Quat.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Quat:()=>r});var i=s("./node_modules/ogl/src/math/functions/QuatFunc.js");class r extends Array{constructor(t=0,e=0,s=0,i=1){return super(t,e,s,i),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set w(t){this[3]=t,this.onChange()}identity(){return i.identity(this),this.onChange(),this}set(t,e,s,r){return t.length?this.copy(t):(i.set(this,t,e,s,r),this.onChange(),this)}rotateX(t){return i.rotateX(this,this,t),this.onChange(),this}rotateY(t){return i.rotateY(this,this,t),this.onChange(),this}rotateZ(t){return i.rotateZ(this,this,t),this.onChange(),this}inverse(t=this){return i.invert(this,t),this.onChange(),this}conjugate(t=this){return i.conjugate(this,t),this.onChange(),this}copy(t){return i.copy(this,t),this.onChange(),this}normalize(t=this){return i.normalize(this,t),this.onChange(),this}multiply(t,e){return e?i.multiply(this,t,e):i.multiply(this,this,t),this.onChange(),this}dot(t){return i.dot(this,t)}fromMatrix3(t){return i.fromMat3(this,t),this.onChange(),this}fromEuler(t){return i.fromEuler(this,t,t.order),this}fromAxisAngle(t,e){return i.setAxisAngle(this,t,e),this}slerp(t,e){return i.slerp(this,this,t,e),this}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}},"./node_modules/ogl/src/math/Vec3.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Vec3:()=>r});var i=s("./node_modules/ogl/src/math/functions/Vec3Func.js");class r extends Array{constructor(t=0,e=t,s=t){return super(t,e,s),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,e=t,s=t){return t.length?this.copy(t):(i.set(this,t,e,s),this)}copy(t){return i.copy(this,t),this}add(t,e){return e?i.add(this,t,e):i.add(this,this,t),this}sub(t,e){return e?i.subtract(this,t,e):i.subtract(this,this,t),this}multiply(t){return t.length?i.multiply(this,this,t):i.scale(this,this,t),this}divide(t){return t.length?i.divide(this,this,t):i.scale(this,this,1/t),this}inverse(t=this){return i.inverse(this,t),this}len(){return i.length(this)}distance(t){return t?i.distance(this,t):i.length(this)}squaredLen(){return i.squaredLength(this)}squaredDistance(t){return t?i.squaredDistance(this,t):i.squaredLength(this)}negate(t=this){return i.negate(this,t),this}cross(t,e){return e?i.cross(this,t,e):i.cross(this,this,t),this}scale(t){return i.scale(this,this,t),this}normalize(){return i.normalize(this,this),this}dot(t){return i.dot(this,t)}equals(t){return i.exactEquals(this,t)}applyMatrix3(t){return i.transformMat3(this,this,t),this}applyMatrix4(t){return i.transformMat4(this,this,t),this}scaleRotateMatrix4(t){return i.scaleRotateMat4(this,this,t),this}applyQuaternion(t){return i.transformQuat(this,this,t),this}angle(t){return i.angle(this,t)}lerp(t,e){return i.lerp(this,this,t,e),this}clone(){return new r(this[0],this[1],this[2])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}transformDirection(t){const e=this[0],s=this[1],i=this[2];return this[0]=t[0]*e+t[4]*s+t[8]*i,this[1]=t[1]*e+t[5]*s+t[9]*i,this[2]=t[2]*e+t[6]*s+t[10]*i,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(t,e,s)=>{"use strict";function i(t,e,s="YXZ"){return"XYZ"===s?(t[1]=Math.asin(Math.min(Math.max(e[8],-1),1)),Math.abs(e[8])<.99999?(t[0]=Math.atan2(-e[9],e[10]),t[2]=Math.atan2(-e[4],e[0])):(t[0]=Math.atan2(e[6],e[5]),t[2]=0)):"YXZ"===s?(t[0]=Math.asin(-Math.min(Math.max(e[9],-1),1)),Math.abs(e[9])<.99999?(t[1]=Math.atan2(e[8],e[10]),t[2]=Math.atan2(e[1],e[5])):(t[1]=Math.atan2(-e[2],e[0]),t[2]=0)):"ZXY"===s?(t[0]=Math.asin(Math.min(Math.max(e[6],-1),1)),Math.abs(e[6])<.99999?(t[1]=Math.atan2(-e[2],e[10]),t[2]=Math.atan2(-e[4],e[5])):(t[1]=0,t[2]=Math.atan2(e[1],e[0]))):"ZYX"===s?(t[1]=Math.asin(-Math.min(Math.max(e[2],-1),1)),Math.abs(e[2])<.99999?(t[0]=Math.atan2(e[6],e[10]),t[2]=Math.atan2(e[1],e[0])):(t[0]=0,t[2]=Math.atan2(-e[4],e[5]))):"YZX"===s?(t[2]=Math.asin(Math.min(Math.max(e[1],-1),1)),Math.abs(e[1])<.99999?(t[0]=Math.atan2(-e[9],e[5]),t[1]=Math.atan2(-e[2],e[0])):(t[0]=0,t[1]=Math.atan2(e[8],e[10]))):"XZY"===s&&(t[2]=Math.asin(-Math.min(Math.max(e[4],-1),1)),Math.abs(e[4])<.99999?(t[0]=Math.atan2(e[6],e[5]),t[1]=Math.atan2(e[8],e[0])):(t[0]=Math.atan2(-e[9],e[10]),t[1]=0)),t}s.r(e),s.d(e,{fromRotationMatrix:()=>i})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{add:()=>g,copy:()=>n,determinant:()=>u,fromMat4:()=>i,fromQuat:()=>r,identity:()=>a,invert:()=>l,multiply:()=>d,multiplyScalar:()=>y,normalFromMat4:()=>f,projection:()=>_,rotate:()=>p,scale:()=>m,set:()=>o,subtract:()=>v,translate:()=>c,transpose:()=>h});function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function r(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],o=s+s,a=i+i,h=r+r,l=s*o,u=i*o,d=i*a,c=r*o,p=r*a,m=r*h,f=n*o,_=n*a,g=n*h;return t[0]=1-d-m,t[3]=u-g,t[6]=c+_,t[1]=u+g,t[4]=1-l-m,t[7]=p-f,t[2]=c-_,t[5]=p+f,t[8]=1-l-d,t}function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function o(t,e,s,i,r,n,o,a,h,l){return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t[4]=n,t[5]=o,t[6]=a,t[7]=h,t[8]=l,t}function a(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function h(t,e){if(t===e){let s=e[1],i=e[2],r=e[5];t[1]=e[3],t[2]=e[6],t[3]=s,t[5]=e[7],t[6]=i,t[7]=r}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function l(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],o=e[4],a=e[5],h=e[6],l=e[7],u=e[8],d=u*o-a*l,c=-u*n+a*h,p=l*n-o*h,m=s*d+i*c+r*p;return m?(m=1/m,t[0]=d*m,t[1]=(-u*i+r*l)*m,t[2]=(a*i-r*o)*m,t[3]=c*m,t[4]=(u*s-r*h)*m,t[5]=(-a*s+r*n)*m,t[6]=p*m,t[7]=(-l*s+i*h)*m,t[8]=(o*s-i*n)*m,t):null}function u(t){let e=t[0],s=t[1],i=t[2],r=t[3],n=t[4],o=t[5],a=t[6],h=t[7],l=t[8];return e*(l*n-o*h)+s*(-l*r+o*a)+i*(h*r-n*a)}function d(t,e,s){let i=e[0],r=e[1],n=e[2],o=e[3],a=e[4],h=e[5],l=e[6],u=e[7],d=e[8],c=s[0],p=s[1],m=s[2],f=s[3],_=s[4],g=s[5],v=s[6],y=s[7],x=s[8];return t[0]=c*i+p*o+m*l,t[1]=c*r+p*a+m*u,t[2]=c*n+p*h+m*d,t[3]=f*i+_*o+g*l,t[4]=f*r+_*a+g*u,t[5]=f*n+_*h+g*d,t[6]=v*i+y*o+x*l,t[7]=v*r+y*a+x*u,t[8]=v*n+y*h+x*d,t}function c(t,e,s){let i=e[0],r=e[1],n=e[2],o=e[3],a=e[4],h=e[5],l=e[6],u=e[7],d=e[8],c=s[0],p=s[1];return t[0]=i,t[1]=r,t[2]=n,t[3]=o,t[4]=a,t[5]=h,t[6]=c*i+p*o+l,t[7]=c*r+p*a+u,t[8]=c*n+p*h+d,t}function p(t,e,s){let i=e[0],r=e[1],n=e[2],o=e[3],a=e[4],h=e[5],l=e[6],u=e[7],d=e[8],c=Math.sin(s),p=Math.cos(s);return t[0]=p*i+c*o,t[1]=p*r+c*a,t[2]=p*n+c*h,t[3]=p*o-c*i,t[4]=p*a-c*r,t[5]=p*h-c*n,t[6]=l,t[7]=u,t[8]=d,t}function m(t,e,s){let i=s[0],r=s[1];return t[0]=i*e[0],t[1]=i*e[1],t[2]=i*e[2],t[3]=r*e[3],t[4]=r*e[4],t[5]=r*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function f(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],o=e[4],a=e[5],h=e[6],l=e[7],u=e[8],d=e[9],c=e[10],p=e[11],m=e[12],f=e[13],_=e[14],g=e[15],v=s*a-i*o,y=s*h-r*o,x=s*l-n*o,b=i*h-r*a,w=i*l-n*a,j=r*l-n*h,M=u*f-d*m,T=u*_-c*m,A=u*g-p*m,E=d*_-c*f,S=d*g-p*f,C=c*g-p*_,P=v*C-y*S+x*E+b*A-w*T+j*M;return P?(P=1/P,t[0]=(a*C-h*S+l*E)*P,t[1]=(h*A-o*C-l*T)*P,t[2]=(o*S-a*A+l*M)*P,t[3]=(r*S-i*C-n*E)*P,t[4]=(s*C-r*A+n*T)*P,t[5]=(i*A-s*S-n*M)*P,t[6]=(f*j-_*w+g*b)*P,t[7]=(_*x-m*j-g*y)*P,t[8]=(m*w-f*x+g*v)*P,t):null}function _(t,e,s){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/s,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function g(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t[4]=e[4]+s[4],t[5]=e[5]+s[5],t[6]=e[6]+s[6],t[7]=e[7]+s[7],t[8]=e[8]+s[8],t}function v(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t[3]=e[3]-s[3],t[4]=e[4]-s[4],t[5]=e[5]-s[5],t[6]=e[6]-s[6],t[7]=e[7]-s[7],t[8]=e[8]-s[8],t}function y(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*s,t}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{add:()=>w,copy:()=>i,determinant:()=>h,fromQuat:()=>v,fromRotationTranslationScale:()=>g,getMaxScaleOnAxis:()=>f,getRotation:()=>_,getScaling:()=>m,getTranslation:()=>p,identity:()=>n,invert:()=>a,multiply:()=>l,multiplyScalar:()=>M,ortho:()=>x,perspective:()=>y,rotate:()=>c,scale:()=>d,set:()=>r,subtract:()=>j,targetTo:()=>b,translate:()=>u,transpose:()=>o});function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function r(t,e,s,i,r,n,o,a,h,l,u,d,c,p,m,f,_){return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t[4]=n,t[5]=o,t[6]=a,t[7]=h,t[8]=l,t[9]=u,t[10]=d,t[11]=c,t[12]=p,t[13]=m,t[14]=f,t[15]=_,t}function n(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function o(t,e){if(t===e){let s=e[1],i=e[2],r=e[3],n=e[6],o=e[7],a=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=s,t[6]=e[9],t[7]=e[13],t[8]=i,t[9]=n,t[11]=e[14],t[12]=r,t[13]=o,t[14]=a}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function a(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],o=e[4],a=e[5],h=e[6],l=e[7],u=e[8],d=e[9],c=e[10],p=e[11],m=e[12],f=e[13],_=e[14],g=e[15],v=s*a-i*o,y=s*h-r*o,x=s*l-n*o,b=i*h-r*a,w=i*l-n*a,j=r*l-n*h,M=u*f-d*m,T=u*_-c*m,A=u*g-p*m,E=d*_-c*f,S=d*g-p*f,C=c*g-p*_,P=v*C-y*S+x*E+b*A-w*T+j*M;return P?(P=1/P,t[0]=(a*C-h*S+l*E)*P,t[1]=(r*S-i*C-n*E)*P,t[2]=(f*j-_*w+g*b)*P,t[3]=(c*w-d*j-p*b)*P,t[4]=(h*A-o*C-l*T)*P,t[5]=(s*C-r*A+n*T)*P,t[6]=(_*x-m*j-g*y)*P,t[7]=(u*j-c*x+p*y)*P,t[8]=(o*S-a*A+l*M)*P,t[9]=(i*A-s*S-n*M)*P,t[10]=(m*w-f*x+g*v)*P,t[11]=(d*x-u*w-p*v)*P,t[12]=(a*T-o*E-h*M)*P,t[13]=(s*E-i*T+r*M)*P,t[14]=(f*y-m*b-_*v)*P,t[15]=(u*b-d*y+c*v)*P,t):null}function h(t){let e=t[0],s=t[1],i=t[2],r=t[3],n=t[4],o=t[5],a=t[6],h=t[7],l=t[8],u=t[9],d=t[10],c=t[11],p=t[12],m=t[13],f=t[14],_=t[15];return(e*o-s*n)*(d*_-c*f)-(e*a-i*n)*(u*_-c*m)+(e*h-r*n)*(u*f-d*m)+(s*a-i*o)*(l*_-c*p)-(s*h-r*o)*(l*f-d*p)+(i*h-r*a)*(l*m-u*p)}function l(t,e,s){let i=e[0],r=e[1],n=e[2],o=e[3],a=e[4],h=e[5],l=e[6],u=e[7],d=e[8],c=e[9],p=e[10],m=e[11],f=e[12],_=e[13],g=e[14],v=e[15],y=s[0],x=s[1],b=s[2],w=s[3];return t[0]=y*i+x*a+b*d+w*f,t[1]=y*r+x*h+b*c+w*_,t[2]=y*n+x*l+b*p+w*g,t[3]=y*o+x*u+b*m+w*v,y=s[4],x=s[5],b=s[6],w=s[7],t[4]=y*i+x*a+b*d+w*f,t[5]=y*r+x*h+b*c+w*_,t[6]=y*n+x*l+b*p+w*g,t[7]=y*o+x*u+b*m+w*v,y=s[8],x=s[9],b=s[10],w=s[11],t[8]=y*i+x*a+b*d+w*f,t[9]=y*r+x*h+b*c+w*_,t[10]=y*n+x*l+b*p+w*g,t[11]=y*o+x*u+b*m+w*v,y=s[12],x=s[13],b=s[14],w=s[15],t[12]=y*i+x*a+b*d+w*f,t[13]=y*r+x*h+b*c+w*_,t[14]=y*n+x*l+b*p+w*g,t[15]=y*o+x*u+b*m+w*v,t}function u(t,e,s){let i,r,n,o,a,h,l,u,d,c,p,m,f=s[0],_=s[1],g=s[2];return e===t?(t[12]=e[0]*f+e[4]*_+e[8]*g+e[12],t[13]=e[1]*f+e[5]*_+e[9]*g+e[13],t[14]=e[2]*f+e[6]*_+e[10]*g+e[14],t[15]=e[3]*f+e[7]*_+e[11]*g+e[15]):(i=e[0],r=e[1],n=e[2],o=e[3],a=e[4],h=e[5],l=e[6],u=e[7],d=e[8],c=e[9],p=e[10],m=e[11],t[0]=i,t[1]=r,t[2]=n,t[3]=o,t[4]=a,t[5]=h,t[6]=l,t[7]=u,t[8]=d,t[9]=c,t[10]=p,t[11]=m,t[12]=i*f+a*_+d*g+e[12],t[13]=r*f+h*_+c*g+e[13],t[14]=n*f+l*_+p*g+e[14],t[15]=o*f+u*_+m*g+e[15]),t}function d(t,e,s){let i=s[0],r=s[1],n=s[2];return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function c(t,e,s,i){let r,n,o,a,h,l,u,d,c,p,m,f,_,g,v,y,x,b,w,j,M,T,A,E,S=i[0],C=i[1],P=i[2],z=Math.hypot(S,C,P);return Math.abs(z)<1e-6?null:(z=1/z,S*=z,C*=z,P*=z,r=Math.sin(s),n=Math.cos(s),o=1-n,a=e[0],h=e[1],l=e[2],u=e[3],d=e[4],c=e[5],p=e[6],m=e[7],f=e[8],_=e[9],g=e[10],v=e[11],y=S*S*o+n,x=C*S*o+P*r,b=P*S*o-C*r,w=S*C*o-P*r,j=C*C*o+n,M=P*C*o+S*r,T=S*P*o+C*r,A=C*P*o-S*r,E=P*P*o+n,t[0]=a*y+d*x+f*b,t[1]=h*y+c*x+_*b,t[2]=l*y+p*x+g*b,t[3]=u*y+m*x+v*b,t[4]=a*w+d*j+f*M,t[5]=h*w+c*j+_*M,t[6]=l*w+p*j+g*M,t[7]=u*w+m*j+v*M,t[8]=a*T+d*A+f*E,t[9]=h*T+c*A+_*E,t[10]=l*T+p*A+g*E,t[11]=u*T+m*A+v*E,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function p(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function m(t,e){let s=e[0],i=e[1],r=e[2],n=e[4],o=e[5],a=e[6],h=e[8],l=e[9],u=e[10];return t[0]=Math.hypot(s,i,r),t[1]=Math.hypot(n,o,a),t[2]=Math.hypot(h,l,u),t}function f(t){let e=t[0],s=t[1],i=t[2],r=t[4],n=t[5],o=t[6],a=t[8],h=t[9],l=t[10];const u=e*e+s*s+i*i,d=r*r+n*n+o*o,c=a*a+h*h+l*l;return Math.sqrt(Math.max(u,d,c))}const _=function(){const t=[0,0,0];return function(e,s){let i=t;m(i,s);let r=1/i[0],n=1/i[1],o=1/i[2],a=s[0]*r,h=s[1]*n,l=s[2]*o,u=s[4]*r,d=s[5]*n,c=s[6]*o,p=s[8]*r,f=s[9]*n,_=s[10]*o,g=a+d+_,v=0;return g>0?(v=2*Math.sqrt(g+1),e[3]=.25*v,e[0]=(c-f)/v,e[1]=(p-l)/v,e[2]=(h-u)/v):a>d&&a>_?(v=2*Math.sqrt(1+a-d-_),e[3]=(c-f)/v,e[0]=.25*v,e[1]=(h+u)/v,e[2]=(p+l)/v):d>_?(v=2*Math.sqrt(1+d-a-_),e[3]=(p-l)/v,e[0]=(h+u)/v,e[1]=.25*v,e[2]=(c+f)/v):(v=2*Math.sqrt(1+_-a-d),e[3]=(h-u)/v,e[0]=(p+l)/v,e[1]=(c+f)/v,e[2]=.25*v),e}}();function g(t,e,s,i){let r=e[0],n=e[1],o=e[2],a=e[3],h=r+r,l=n+n,u=o+o,d=r*h,c=r*l,p=r*u,m=n*l,f=n*u,_=o*u,g=a*h,v=a*l,y=a*u,x=i[0],b=i[1],w=i[2];return t[0]=(1-(m+_))*x,t[1]=(c+y)*x,t[2]=(p-v)*x,t[3]=0,t[4]=(c-y)*b,t[5]=(1-(d+_))*b,t[6]=(f+g)*b,t[7]=0,t[8]=(p+v)*w,t[9]=(f-g)*w,t[10]=(1-(d+m))*w,t[11]=0,t[12]=s[0],t[13]=s[1],t[14]=s[2],t[15]=1,t}function v(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],o=s+s,a=i+i,h=r+r,l=s*o,u=i*o,d=i*a,c=r*o,p=r*a,m=r*h,f=n*o,_=n*a,g=n*h;return t[0]=1-d-m,t[1]=u+g,t[2]=c-_,t[3]=0,t[4]=u-g,t[5]=1-l-m,t[6]=p+f,t[7]=0,t[8]=c+_,t[9]=p-f,t[10]=1-l-d,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function y(t,e,s,i,r){let n=1/Math.tan(e/2),o=1/(i-r);return t[0]=n/s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(r+i)*o,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*r*i*o,t[15]=0,t}function x(t,e,s,i,r,n,o){let a=1/(e-s),h=1/(i-r),l=1/(n-o);return t[0]=-2*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*h,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*l,t[11]=0,t[12]=(e+s)*a,t[13]=(r+i)*h,t[14]=(o+n)*l,t[15]=1,t}function b(t,e,s,i){let r=e[0],n=e[1],o=e[2],a=i[0],h=i[1],l=i[2],u=r-s[0],d=n-s[1],c=o-s[2],p=u*u+d*d+c*c;0===p?c=1:(p=1/Math.sqrt(p),u*=p,d*=p,c*=p);let m=h*c-l*d,f=l*u-a*c,_=a*d-h*u;return p=m*m+f*f+_*_,0===p&&(l?a+=1e-6:h?l+=1e-6:h+=1e-6,m=h*c-l*d,f=l*u-a*c,_=a*d-h*u,p=m*m+f*f+_*_),p=1/Math.sqrt(p),m*=p,f*=p,_*=p,t[0]=m,t[1]=f,t[2]=_,t[3]=0,t[4]=d*_-c*f,t[5]=c*m-u*_,t[6]=u*f-d*m,t[7]=0,t[8]=u,t[9]=d,t[10]=c,t[11]=0,t[12]=r,t[13]=n,t[14]=o,t[15]=1,t}function w(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t[4]=e[4]+s[4],t[5]=e[5]+s[5],t[6]=e[6]+s[6],t[7]=e[7]+s[7],t[8]=e[8]+s[8],t[9]=e[9]+s[9],t[10]=e[10]+s[10],t[11]=e[11]+s[11],t[12]=e[12]+s[12],t[13]=e[13]+s[13],t[14]=e[14]+s[14],t[15]=e[15]+s[15],t}function j(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t[3]=e[3]-s[3],t[4]=e[4]-s[4],t[5]=e[5]-s[5],t[6]=e[6]-s[6],t[7]=e[7]-s[7],t[8]=e[8]-s[8],t[9]=e[9]-s[9],t[10]=e[10]-s[10],t[11]=e[11]-s[11],t[12]=e[12]-s[12],t[13]=e[13]-s[13],t[14]=e[14]-s[14],t[15]=e[15]-s[15],t}function M(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*s,t[9]=e[9]*s,t[10]=e[10]*s,t[11]=e[11]*s,t[12]=e[12]*s,t[13]=e[13]*s,t[14]=e[14]*s,t[15]=e[15]*s,t}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{add:()=>g,conjugate:()=>c,copy:()=>f,dot:()=>y,fromEuler:()=>m,fromMat3:()=>p,identity:()=>r,invert:()=>d,length:()=>b,lerp:()=>x,multiply:()=>o,normalize:()=>w,rotateX:()=>a,rotateY:()=>h,rotateZ:()=>l,scale:()=>v,set:()=>_,setAxisAngle:()=>n,slerp:()=>u});var i=s("./node_modules/ogl/src/math/functions/Vec4Func.js");function r(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function n(t,e,s){s*=.5;let i=Math.sin(s);return t[0]=i*e[0],t[1]=i*e[1],t[2]=i*e[2],t[3]=Math.cos(s),t}function o(t,e,s){let i=e[0],r=e[1],n=e[2],o=e[3],a=s[0],h=s[1],l=s[2],u=s[3];return t[0]=i*u+o*a+r*l-n*h,t[1]=r*u+o*h+n*a-i*l,t[2]=n*u+o*l+i*h-r*a,t[3]=o*u-i*a-r*h-n*l,t}function a(t,e,s){s*=.5;let i=e[0],r=e[1],n=e[2],o=e[3],a=Math.sin(s),h=Math.cos(s);return t[0]=i*h+o*a,t[1]=r*h+n*a,t[2]=n*h-r*a,t[3]=o*h-i*a,t}function h(t,e,s){s*=.5;let i=e[0],r=e[1],n=e[2],o=e[3],a=Math.sin(s),h=Math.cos(s);return t[0]=i*h-n*a,t[1]=r*h+o*a,t[2]=n*h+i*a,t[3]=o*h-r*a,t}function l(t,e,s){s*=.5;let i=e[0],r=e[1],n=e[2],o=e[3],a=Math.sin(s),h=Math.cos(s);return t[0]=i*h+r*a,t[1]=r*h-i*a,t[2]=n*h+o*a,t[3]=o*h-n*a,t}function u(t,e,s,i){let r,n,o,a,h,l=e[0],u=e[1],d=e[2],c=e[3],p=s[0],m=s[1],f=s[2],_=s[3];return n=l*p+u*m+d*f+c*_,n<0&&(n=-n,p=-p,m=-m,f=-f,_=-_),1-n>1e-6?(r=Math.acos(n),o=Math.sin(r),a=Math.sin((1-i)*r)/o,h=Math.sin(i*r)/o):(a=1-i,h=i),t[0]=a*l+h*p,t[1]=a*u+h*m,t[2]=a*d+h*f,t[3]=a*c+h*_,t}function d(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],o=s*s+i*i+r*r+n*n,a=o?1/o:0;return t[0]=-s*a,t[1]=-i*a,t[2]=-r*a,t[3]=n*a,t}function c(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function p(t,e){let s,i=e[0]+e[4]+e[8];if(i>0)s=Math.sqrt(i+1),t[3]=.5*s,s=.5/s,t[0]=(e[5]-e[7])*s,t[1]=(e[6]-e[2])*s,t[2]=(e[1]-e[3])*s;else{let i=0;e[4]>e[0]&&(i=1),e[8]>e[3*i+i]&&(i=2);let r=(i+1)%3,n=(i+2)%3;s=Math.sqrt(e[3*i+i]-e[3*r+r]-e[3*n+n]+1),t[i]=.5*s,s=.5/s,t[3]=(e[3*r+n]-e[3*n+r])*s,t[r]=(e[3*r+i]+e[3*i+r])*s,t[n]=(e[3*n+i]+e[3*i+n])*s}return t}function m(t,e,s="YXZ"){let i=Math.sin(.5*e[0]),r=Math.cos(.5*e[0]),n=Math.sin(.5*e[1]),o=Math.cos(.5*e[1]),a=Math.sin(.5*e[2]),h=Math.cos(.5*e[2]);return"XYZ"===s?(t[0]=i*o*h+r*n*a,t[1]=r*n*h-i*o*a,t[2]=r*o*a+i*n*h,t[3]=r*o*h-i*n*a):"YXZ"===s?(t[0]=i*o*h+r*n*a,t[1]=r*n*h-i*o*a,t[2]=r*o*a-i*n*h,t[3]=r*o*h+i*n*a):"ZXY"===s?(t[0]=i*o*h-r*n*a,t[1]=r*n*h+i*o*a,t[2]=r*o*a+i*n*h,t[3]=r*o*h-i*n*a):"ZYX"===s?(t[0]=i*o*h-r*n*a,t[1]=r*n*h+i*o*a,t[2]=r*o*a-i*n*h,t[3]=r*o*h+i*n*a):"YZX"===s?(t[0]=i*o*h+r*n*a,t[1]=r*n*h+i*o*a,t[2]=r*o*a-i*n*h,t[3]=r*o*h-i*n*a):"XZY"===s&&(t[0]=i*o*h-r*n*a,t[1]=r*n*h-i*o*a,t[2]=r*o*a+i*n*h,t[3]=r*o*h+i*n*a),t}const f=i.copy,_=i.set,g=i.add,v=i.scale,y=i.dot,x=i.lerp,b=i.length,w=i.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{add:()=>o,angle:()=>M,copy:()=>r,cross:()=>v,distance:()=>d,divide:()=>l,dot:()=>g,exactEquals:()=>T,inverse:()=>f,length:()=>i,lerp:()=>y,multiply:()=>h,negate:()=>m,normalize:()=>_,scale:()=>u,scaleRotateMat4:()=>b,set:()=>n,squaredDistance:()=>c,squaredLength:()=>p,subtract:()=>a,transformMat3:()=>w,transformMat4:()=>x,transformQuat:()=>j});function i(t){let e=t[0],s=t[1],i=t[2];return Math.sqrt(e*e+s*s+i*i)}function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function n(t,e,s,i){return t[0]=e,t[1]=s,t[2]=i,t}function o(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t}function a(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t}function h(t,e,s){return t[0]=e[0]*s[0],t[1]=e[1]*s[1],t[2]=e[2]*s[2],t}function l(t,e,s){return t[0]=e[0]/s[0],t[1]=e[1]/s[1],t[2]=e[2]/s[2],t}function u(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}function d(t,e){let s=e[0]-t[0],i=e[1]-t[1],r=e[2]-t[2];return Math.sqrt(s*s+i*i+r*r)}function c(t,e){let s=e[0]-t[0],i=e[1]-t[1],r=e[2]-t[2];return s*s+i*i+r*r}function p(t){let e=t[0],s=t[1],i=t[2];return e*e+s*s+i*i}function m(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function f(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function _(t,e){let s=e[0],i=e[1],r=e[2],n=s*s+i*i+r*r;return n>0&&(n=1/Math.sqrt(n)),t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function g(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function v(t,e,s){let i=e[0],r=e[1],n=e[2],o=s[0],a=s[1],h=s[2];return t[0]=r*h-n*a,t[1]=n*o-i*h,t[2]=i*a-r*o,t}function y(t,e,s,i){let r=e[0],n=e[1],o=e[2];return t[0]=r+i*(s[0]-r),t[1]=n+i*(s[1]-n),t[2]=o+i*(s[2]-o),t}function x(t,e,s){let i=e[0],r=e[1],n=e[2],o=s[3]*i+s[7]*r+s[11]*n+s[15];return o=o||1,t[0]=(s[0]*i+s[4]*r+s[8]*n+s[12])/o,t[1]=(s[1]*i+s[5]*r+s[9]*n+s[13])/o,t[2]=(s[2]*i+s[6]*r+s[10]*n+s[14])/o,t}function b(t,e,s){let i=e[0],r=e[1],n=e[2],o=s[3]*i+s[7]*r+s[11]*n+s[15];return o=o||1,t[0]=(s[0]*i+s[4]*r+s[8]*n)/o,t[1]=(s[1]*i+s[5]*r+s[9]*n)/o,t[2]=(s[2]*i+s[6]*r+s[10]*n)/o,t}function w(t,e,s){let i=e[0],r=e[1],n=e[2];return t[0]=i*s[0]+r*s[3]+n*s[6],t[1]=i*s[1]+r*s[4]+n*s[7],t[2]=i*s[2]+r*s[5]+n*s[8],t}function j(t,e,s){let i=e[0],r=e[1],n=e[2],o=s[0],a=s[1],h=s[2],l=a*n-h*r,u=h*i-o*n,d=o*r-a*i,c=a*d-h*u,p=h*l-o*d,m=o*u-a*l,f=2*s[3];return l*=f,u*=f,d*=f,c*=2,p*=2,m*=2,t[0]=i+l+c,t[1]=r+u+p,t[2]=n+d+m,t}const M=function(){const t=[0,0,0],e=[0,0,0];return function(s,i){r(t,s),r(e,i),_(t,t),_(e,e);let n=g(t,e);return n>1?0:n<-1?Math.PI:Math.acos(n)}}();function T(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{add:()=>n,copy:()=>i,dot:()=>l,length:()=>a,lerp:()=>u,normalize:()=>h,scale:()=>o,set:()=>r});function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function r(t,e,s,i,r){return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t}function n(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t}function o(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t}function a(t){let e=t[0],s=t[1],i=t[2],r=t[3];return Math.sqrt(e*e+s*s+i*i+r*r)}function h(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],o=s*s+i*i+r*r+n*n;return o>0&&(o=1/Math.sqrt(o)),t[0]=s*o,t[1]=i*o,t[2]=r*o,t[3]=n*o,t}function l(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function u(t,e,s,i){let r=e[0],n=e[1],o=e[2],a=e[3];return t[0]=r+i*(s[0]-r),t[1]=n+i*(s[1]-n),t[2]=o+i*(s[2]-o),t[3]=a+i*(s[3]-a),t}}},(function(t){t.h=()=>"5ba7d2769fa8b36d800e",t.nmd=t=>(t.paths=[],t.children||(t.children=[]),t)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,