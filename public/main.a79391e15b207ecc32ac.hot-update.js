/*! For license information please see main.a79391e15b207ecc32ac.hot-update.js.LICENSE.txt */
self.webpackHotUpdateimmersive_website("main",{"./node_modules/array-union/index.js":(t,e,n)=>{"use strict";var r=n("./node_modules/array-uniq/index.js");t.exports=function(){return r([].concat.apply([],arguments))}},"./node_modules/array-uniq/index.js":(t,e,n)=>{"use strict";var r;"Set"in n.g?"function"==typeof Set.prototype.forEach&&(r=!1,new Set([!0]).forEach((function(t){r=t})),!0===r)?t.exports=function(t){var e=[];return new Set(t).forEach((function(t){e.push(t)})),e}:t.exports=function(t){var e=new Set;return t.filter((function(t){return!e.has(t)&&(e.add(t),!0)}))}:t.exports=function(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}},"./node_modules/balanced-match/index.js":t=>{"use strict";function e(t,e,i){t instanceof RegExp&&(t=n(t,i)),e instanceof RegExp&&(e=n(e,i));var o=r(t,e,i);return o&&{start:o[0],end:o[1],pre:i.slice(0,o[0]),body:i.slice(o[0]+t.length,o[1]),post:i.slice(o[1]+e.length)}}function n(t,e){var n=e.match(t);return n?n[0]:null}function r(t,e,n){var r,i,o,s,a,c=n.indexOf(t),u=n.indexOf(e,c+1),l=c;if(c>=0&&u>0){if(t===e)return[c,u];for(r=[],o=n.length;l>=0&&!a;)l==c?(r.push(l),c=n.indexOf(t,l+1)):1==r.length?a=[r.pop(),u]:((i=r.pop())<o&&(o=i,s=u),u=n.indexOf(e,l+1)),l=c<u&&c>=0?c:u;r.length&&(a=[o,s])}return a}t.exports=e,e.range=r},"./node_modules/brace-expansion/index.js":(t,e,n)=>{var r=n("./node_modules/concat-map/index.js"),i=n("./node_modules/balanced-match/index.js");t.exports=function(t){if(!t)return[];"{}"===t.substr(0,2)&&(t="\\{\\}"+t.substr(2));return g(function(t){return t.split("\\\\").join(o).split("\\{").join(s).split("\\}").join(a).split("\\,").join(c).split("\\.").join(u)}(t),!0).map(h)};var o="\0SLASH"+Math.random()+"\0",s="\0OPEN"+Math.random()+"\0",a="\0CLOSE"+Math.random()+"\0",c="\0COMMA"+Math.random()+"\0",u="\0PERIOD"+Math.random()+"\0";function l(t){return parseInt(t,10)==t?parseInt(t,10):t.charCodeAt(0)}function h(t){return t.split(o).join("\\").split(s).join("{").split(a).join("}").split(c).join(",").split(u).join(".")}function d(t){if(!t)return[""];var e=[],n=i("{","}",t);if(!n)return t.split(",");var r=n.pre,o=n.body,s=n.post,a=r.split(",");a[a.length-1]+="{"+o+"}";var c=d(s);return s.length&&(a[a.length-1]+=c.shift(),a.push.apply(a,c)),e.push.apply(e,a),e}function f(t){return"{"+t+"}"}function p(t){return/^-?0\d/.test(t)}function m(t,e){return t<=e}function y(t,e){return t>=e}function g(t,e){var n=[],o=i("{","}",t);if(!o||/\$$/.test(o.pre))return[t];var s,c=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(o.body),u=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(o.body),h=c||u,b=o.body.indexOf(",")>=0;if(!h&&!b)return o.post.match(/,.*\}/)?g(t=o.pre+"{"+o.body+a+o.post):[t];if(h)s=o.body.split(/\.\./);else if(1===(s=d(o.body)).length&&1===(s=g(s[0],!1).map(f)).length)return(_=o.post.length?g(o.post,!1):[""]).map((function(t){return o.pre+s[0]+t}));var v,w=o.pre,_=o.post.length?g(o.post,!1):[""];if(h){var j=l(s[0]),E=l(s[1]),x=Math.max(s[0].length,s[1].length),O=3==s.length?Math.abs(l(s[2])):1,k=m;E<j&&(O*=-1,k=y);var A=s.some(p);v=[];for(var S=j;k(S,E);S+=O){var P;if(u)"\\"===(P=String.fromCharCode(S))&&(P="");else if(P=String(S),A){var T=x-P.length;if(T>0){var N=new Array(T+1).join("0");P=S<0?"-"+N+P.slice(1):N+P}}v.push(P)}}else v=r(s,(function(t){return g(t,!1)}));for(var I=0;I<v.length;I++)for(var R=0;R<_.length;R++){var C=w+v[I]+_[R];(!e||h||C)&&n.push(C)}return n}},"./node_modules/clean-webpack-plugin/dist/clean-webpack-plugin.js":(t,e,n)=>{"use strict";var r=n("./node_modules/console-browserify/index.js"),i=n("./node_modules/process/browser.js");Object.defineProperty(e,"__esModule",{value:!0}),e.CleanWebpackPlugin=void 0;var o,s=n("./node_modules/del/index.js"),a=(o=n("./node_modules/path-browserify/index.js"))&&o.__esModule?o:{default:o};e.CleanWebpackPlugin=class{constructor(t={}){if(!1===function(t){if("[object Object]"!==Object.prototype.toString.call(t))return!1;const e=Object.getPrototypeOf(t);return null===e||e===Object.getPrototypeOf({})}(t))throw new Error("clean-webpack-plugin only accepts an options object. See:\n            https://github.com/johnagan/clean-webpack-plugin#options-and-defaults-optional");if(t.allowExternal)throw new Error("clean-webpack-plugin: `allowExternal` option no longer supported. Use `dangerouslyAllowCleanPatternsOutsideProject`");!0===t.dangerouslyAllowCleanPatternsOutsideProject&&!0!==t.dry&&!1!==t.dry&&r.warn("clean-webpack-plugin: dangerouslyAllowCleanPatternsOutsideProject requires dry: false to be explicitly set. Enabling dry mode"),this.dangerouslyAllowCleanPatternsOutsideProject=!0===t.dangerouslyAllowCleanPatternsOutsideProject||!1,this.dry=!0===t.dry||!1===t.dry?t.dry:!0===this.dangerouslyAllowCleanPatternsOutsideProject||!1,this.verbose=!0===this.dry||!0===t.verbose||!1,this.cleanStaleWebpackAssets=!0!==t.cleanStaleWebpackAssets&&!1!==t.cleanStaleWebpackAssets||t.cleanStaleWebpackAssets,this.protectWebpackAssets=!0!==t.protectWebpackAssets&&!1!==t.protectWebpackAssets||t.protectWebpackAssets,this.cleanAfterEveryBuildPatterns=Array.isArray(t.cleanAfterEveryBuildPatterns)?t.cleanAfterEveryBuildPatterns:[],this.cleanOnceBeforeBuildPatterns=Array.isArray(t.cleanOnceBeforeBuildPatterns)?t.cleanOnceBeforeBuildPatterns:["**/*"],this.currentAssets=[],this.initialClean=!1,this.outputPath="",this.apply=this.apply.bind(this),this.handleInitial=this.handleInitial.bind(this),this.handleDone=this.handleDone.bind(this),this.removeFiles=this.removeFiles.bind(this)}apply(t){if(!t.options.output||!t.options.output.path)return void r.warn("clean-webpack-plugin: options.output.path not defined. Plugin disabled...");this.outputPath=t.options.output.path;const e=t.hooks;0!==this.cleanOnceBeforeBuildPatterns.length&&e.emit.tap("clean-webpack-plugin",(t=>{this.handleInitial(t)})),e.done.tap("clean-webpack-plugin",(t=>{this.handleDone(t)}))}handleInitial(t){if(this.initialClean)return;t.getStats().hasErrors()||(this.initialClean=!0,this.removeFiles(this.cleanOnceBeforeBuildPatterns))}handleDone(t){if(t.hasErrors())return void(this.verbose&&r.warn("clean-webpack-plugin: pausing due to webpack errors"));const e=Object.keys(t.compilation.assets),n=this.currentAssets.filter((t=>!1===e.includes(t)));this.currentAssets=e.sort();const i=[];!0===this.cleanStaleWebpackAssets&&0!==n.length&&i.push(...n),0!==this.cleanAfterEveryBuildPatterns.length&&i.push(...this.cleanAfterEveryBuildPatterns),0!==i.length&&this.removeFiles(i)}removeFiles(t){try{const e=(0,s.sync)(t,{force:this.dangerouslyAllowCleanPatternsOutsideProject,cwd:this.outputPath,dryRun:this.dry,dot:!0,ignore:this.protectWebpackAssets?this.currentAssets:[]});this.verbose&&e.forEach((t=>{const e=a.default.relative(i.cwd(),t),n=this.dry?"dry":"removed";r.warn(`clean-webpack-plugin: ${n} ${e}`)}))}catch(t){if(/Cannot delete files\/folders outside the current working directory\./.test(t.message)){throw new Error("clean-webpack-plugin: Cannot delete files/folders outside the current working directory. Can be overridden with the `dangerouslyAllowCleanPatternsOutsideProject` option.")}throw t}}}},"./node_modules/concat-map/index.js":t=>{t.exports=function(t,n){for(var r=[],i=0;i<t.length;i++){var o=n(t[i],i);e(o)?r.push.apply(r,o):r.push(o)}return r};var e=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},"./node_modules/del/index.js":(t,e,n)=>{"use strict";const r=n("./node_modules/path-browserify/index.js"),i=n("./node_modules/del/node_modules/globby/index.js"),o=n("./node_modules/is-path-cwd/index.js"),s=n("./node_modules/is-path-in-cwd/index.js"),a=n("./node_modules/pify/index.js"),c=n("./node_modules/rimraf/rimraf.js"),u=n("./node_modules/p-map/index.js"),l=a(c);function h(t){if(o(t))throw new Error("Cannot delete the current working directory. Can be overridden with the `force` option.");if(!s(t))throw new Error("Cannot delete files/folders outside the current working directory. Can be overridden with the `force` option.")}const d=(t,e)=>{e=Object.assign({},e);const{force:n,dryRun:o}=e;delete e.force,delete e.dryRun;const s=t=>(n||h(t),t=r.resolve(e.cwd||"",t),o?t:l(t,{glob:!1}).then((()=>t)));return i(t,e).then((t=>u(t,s,e)))};t.exports=d,t.exports.default=d,t.exports.sync=(t,e)=>{e=Object.assign({},e);const{force:n,dryRun:o}=e;return delete e.force,delete e.dryRun,i.sync(t,e).map((t=>(n||h(t),t=r.resolve(e.cwd||"",t),o||c.sync(t,{glob:!1}),t)))}},"./node_modules/del/node_modules/globby/index.js":(t,e,n)=>{"use strict";var r=n("./node_modules/pinkie-promise/index.js"),i=n("./node_modules/array-union/index.js"),o=n("./node_modules/object-assign/index.js"),s=n("./node_modules/glob/glob.js"),a=n("./node_modules/del/node_modules/globby/node_modules/pify/index.js")(s,r).bind(s);function c(t){return"!"===t[0]}function u(t){return"string"==typeof t}function l(t,e){!function(t){if(!t.every(u))throw new TypeError("patterns must be a string or an array of strings")}(t=[].concat(t));var n=[];return e=o({cache:Object.create(null),statCache:Object.create(null),realpathCache:Object.create(null),symlinks:Object.create(null),ignore:[]},e),t.forEach((function(r,i){if(!c(r)){var s=t.slice(i).filter(c).map((function(t){return t.slice(1)}));n.push({pattern:r,opts:o({},e,{ignore:e.ignore.concat(s)})})}})),n}t.exports=function(t,e){var n;try{n=l(t,e)}catch(t){return r.reject(t)}return r.all(n.map((function(t){return a(t.pattern,t.opts)}))).then((function(t){return i.apply(null,t)}))},t.exports.sync=function(t,e){return l(t,e).reduce((function(t,e){return i(t,s.sync(e.pattern,e.opts))}),[])},t.exports.generateGlobTasks=l,t.exports.hasMagic=function(t,e){return[].concat(t).some((function(t){return s.hasMagic(t,e)}))}},"./node_modules/del/node_modules/globby/node_modules/pify/index.js":t=>{"use strict";var e=function(t,e,n){return function(){for(var r=this,i=new Array(arguments.length),o=0;o<arguments.length;o++)i[o]=arguments[o];return new e((function(e,o){i.push((function(t,r){if(t)o(t);else if(n.multiArgs){for(var i=new Array(arguments.length-1),s=1;s<arguments.length;s++)i[s-1]=arguments[s];e(i)}else e(r)})),t.apply(r,i)}))}},n=t.exports=function(t,n,r){"function"!=typeof n&&(r=n,n=Promise),(r=r||{}).exclude=r.exclude||[/.+Sync$/];var i="function"==typeof t?function(){return r.excludeMain?t.apply(this,arguments):e(t,n,r).apply(this,arguments)}:{};return Object.keys(t).reduce((function(i,o){var s=t[o];return i[o]="function"==typeof s&&function(t){var e=function(e){return"string"==typeof e?t===e:e.test(t)};return r.include?r.include.some(e):!r.exclude.some(e)}(o)?e(s,n,r):s,i}),i)};n.all=n},"./node_modules/fs.realpath/index.js":(t,e,n)=>{var r=n("./node_modules/process/browser.js");t.exports=h,h.realpath=h,h.sync=d,h.realpathSync=d,h.monkeypatch=function(){i.realpath=h,i.realpathSync=d},h.unmonkeypatch=function(){i.realpath=o,i.realpathSync=s};var i=n("?6882"),o=i.realpath,s=i.realpathSync,a=r.version,c=/^v[0-5]\./.test(a),u=n("./node_modules/fs.realpath/old.js");function l(t){return t&&"realpath"===t.syscall&&("ELOOP"===t.code||"ENOMEM"===t.code||"ENAMETOOLONG"===t.code)}function h(t,e,n){if(c)return o(t,e,n);"function"==typeof e&&(n=e,e=null),o(t,e,(function(r,i){l(r)?u.realpath(t,e,n):n(r,i)}))}function d(t,e){if(c)return s(t,e);try{return s(t,e)}catch(n){if(l(n))return u.realpathSync(t,e);throw n}}},"./node_modules/fs.realpath/old.js":(t,e,n)=>{var r=n("./node_modules/process/browser.js"),i=n("./node_modules/console-browserify/index.js"),o=n("./node_modules/path-browserify/index.js"),s="win32"===r.platform,a=n("?6882"),c=r.env.NODE_DEBUG&&/fs/.test(r.env.NODE_DEBUG);function u(t){return"function"==typeof t?t:function(){var t;if(c){var e=new Error;t=function(t){t&&(e.message=t.message,n(t=e))}}else t=n;return t;function n(t){if(t){if(r.throwDeprecation)throw t;if(!r.noDeprecation){var e="fs: missing callback "+(t.stack||t.message);r.traceDeprecation?i.trace(e):i.error(e)}}}}()}o.normalize;if(s)var l=/(.*?)(?:[\/\\]+|$)/g;else l=/(.*?)(?:[\/]+|$)/g;if(s)var h=/^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;else h=/^[\/]*/;e.realpathSync=function(t,e){if(t=o.resolve(t),e&&Object.prototype.hasOwnProperty.call(e,t))return e[t];var n,r,i,c,u=t,d={},f={};function p(){var e=h.exec(t);n=e[0].length,r=e[0],i=e[0],c="",s&&!f[i]&&(a.lstatSync(i),f[i]=!0)}for(p();n<t.length;){l.lastIndex=n;var m=l.exec(t);if(c=r,r+=m[0],i=c+m[1],n=l.lastIndex,!(f[i]||e&&e[i]===i)){var y;if(e&&Object.prototype.hasOwnProperty.call(e,i))y=e[i];else{var g=a.lstatSync(i);if(!g.isSymbolicLink()){f[i]=!0,e&&(e[i]=i);continue}var b=null;if(!s){var v=g.dev.toString(32)+":"+g.ino.toString(32);d.hasOwnProperty(v)&&(b=d[v])}null===b&&(a.statSync(i),b=a.readlinkSync(i)),y=o.resolve(c,b),e&&(e[i]=y),s||(d[v]=b)}t=o.resolve(y,t.slice(n)),p()}}return e&&(e[u]=t),t},e.realpath=function(t,e,n){if("function"!=typeof n&&(n=u(e),e=null),t=o.resolve(t),e&&Object.prototype.hasOwnProperty.call(e,t))return r.nextTick(n.bind(null,null,e[t]));var i,c,d,f,p=t,m={},y={};function g(){var e=h.exec(t);i=e[0].length,c=e[0],d=e[0],f="",s&&!y[d]?a.lstat(d,(function(t){if(t)return n(t);y[d]=!0,b()})):r.nextTick(b)}function b(){if(i>=t.length)return e&&(e[p]=t),n(null,t);l.lastIndex=i;var o=l.exec(t);return f=c,c+=o[0],d=f+o[1],i=l.lastIndex,y[d]||e&&e[d]===d?r.nextTick(b):e&&Object.prototype.hasOwnProperty.call(e,d)?_(e[d]):a.lstat(d,v)}function v(t,i){if(t)return n(t);if(!i.isSymbolicLink())return y[d]=!0,e&&(e[d]=d),r.nextTick(b);if(!s){var o=i.dev.toString(32)+":"+i.ino.toString(32);if(m.hasOwnProperty(o))return w(null,m[o],d)}a.stat(d,(function(t){if(t)return n(t);a.readlink(d,(function(t,e){s||(m[o]=e),w(t,e)}))}))}function w(t,r,i){if(t)return n(t);var s=o.resolve(f,r);e&&(e[i]=s),_(s)}function _(e){t=o.resolve(e,t.slice(i)),g()}g()}},"./node_modules/glob/common.js":(t,e,n)=>{var r=n("./node_modules/process/browser.js");function i(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.setopts=function(t,e,n){n||(n={});if(n.matchBase&&-1===e.indexOf("/")){if(n.noglobstar)throw new Error("base matching requires globstar");e="**/"+e}t.silent=!!n.silent,t.pattern=e,t.strict=!1!==n.strict,t.realpath=!!n.realpath,t.realpathCache=n.realpathCache||Object.create(null),t.follow=!!n.follow,t.dot=!!n.dot,t.mark=!!n.mark,t.nodir=!!n.nodir,t.nodir&&(t.mark=!0);t.sync=!!n.sync,t.nounique=!!n.nounique,t.nonull=!!n.nonull,t.nosort=!!n.nosort,t.nocase=!!n.nocase,t.stat=!!n.stat,t.noprocess=!!n.noprocess,t.absolute=!!n.absolute,t.fs=n.fs||o,t.maxLength=n.maxLength||1/0,t.cache=n.cache||Object.create(null),t.statCache=n.statCache||Object.create(null),t.symlinks=n.symlinks||Object.create(null),function(t,e){t.ignore=e.ignore||[],Array.isArray(t.ignore)||(t.ignore=[t.ignore]);t.ignore.length&&(t.ignore=t.ignore.map(h))}(t,n),t.changedCwd=!1;var a=r.cwd();i(n,"cwd")?(t.cwd=s.resolve(n.cwd),t.changedCwd=t.cwd!==a):t.cwd=a;t.root=n.root||s.resolve(t.cwd,"/"),t.root=s.resolve(t.root),"win32"===r.platform&&(t.root=t.root.replace(/\\/g,"/"));t.cwdAbs=c(t.cwd)?t.cwd:d(t,t.cwd),"win32"===r.platform&&(t.cwdAbs=t.cwdAbs.replace(/\\/g,"/"));t.nomount=!!n.nomount,n.nonegate=!0,n.nocomment=!0,n.allowWindowsEscape=!1,t.minimatch=new u(e,n),t.options=t.minimatch.options},e.ownProp=i,e.makeAbs=d,e.finish=function(t){for(var e=t.nounique,n=e?[]:Object.create(null),r=0,i=t.matches.length;r<i;r++){var o=t.matches[r];if(o&&0!==Object.keys(o).length){var s=Object.keys(o);e?n.push.apply(n,s):s.forEach((function(t){n[t]=!0}))}else if(t.nonull){var a=t.minimatch.globSet[r];e?n.push(a):n[a]=!0}}e||(n=Object.keys(n));t.nosort||(n=n.sort(l));if(t.mark){for(r=0;r<n.length;r++)n[r]=t._mark(n[r]);t.nodir&&(n=n.filter((function(e){var n=!/\/$/.test(e),r=t.cache[e]||t.cache[d(t,e)];return n&&r&&(n="DIR"!==r&&!Array.isArray(r)),n})))}t.ignore.length&&(n=n.filter((function(e){return!f(t,e)})));t.found=n},e.mark=function(t,e){var n=d(t,e),r=t.cache[n],i=e;if(r){var o="DIR"===r||Array.isArray(r),s="/"===e.slice(-1);if(o&&!s?i+="/":!o&&s&&(i=i.slice(0,-1)),i!==e){var a=d(t,i);t.statCache[a]=t.statCache[n],t.cache[a]=t.cache[n]}}return i},e.isIgnored=f,e.childrenIgnored=function(t,e){return!!t.ignore.length&&t.ignore.some((function(t){return!(!t.gmatcher||!t.gmatcher.match(e))}))};var o=n("?a40c"),s=n("./node_modules/path-browserify/index.js"),a=n("./node_modules/minimatch/minimatch.js"),c=n("./node_modules/path-is-absolute/index.js"),u=a.Minimatch;function l(t,e){return t.localeCompare(e,"en")}function h(t){var e=null;if("/**"===t.slice(-3)){var n=t.replace(/(\/\*\*)+$/,"");e=new u(n,{dot:!0})}return{matcher:new u(t,{dot:!0}),gmatcher:e}}function d(t,e){var n=e;return n="/"===e.charAt(0)?s.join(t.root,e):c(e)||""===e?e:t.changedCwd?s.resolve(t.cwd,e):s.resolve(e),"win32"===r.platform&&(n=n.replace(/\\/g,"/")),n}function f(t,e){return!!t.ignore.length&&t.ignore.some((function(t){return t.matcher.match(e)||!(!t.gmatcher||!t.gmatcher.match(e))}))}},"./node_modules/glob/glob.js":(t,e,n)=>{var r=n("./node_modules/process/browser.js"),i=n("./node_modules/console-browserify/index.js");t.exports=w;var o=n("./node_modules/fs.realpath/index.js"),s=n("./node_modules/minimatch/minimatch.js"),a=(s.Minimatch,n("./node_modules/inherits/inherits_browser.js")),c=n("./node_modules/events/events.js").EventEmitter,u=n("./node_modules/path-browserify/index.js"),l=n("./node_modules/assert/build/assert.js"),h=n("./node_modules/path-is-absolute/index.js"),d=n("./node_modules/glob/sync.js"),f=n("./node_modules/glob/common.js"),p=f.setopts,m=f.ownProp,y=n("./node_modules/inflight/inflight.js"),g=(n("./node_modules/util/util.js"),f.childrenIgnored),b=f.isIgnored,v=n("./node_modules/once/once.js");function w(t,e,n){if("function"==typeof e&&(n=e,e={}),e||(e={}),e.sync){if(n)throw new TypeError("callback provided to sync glob");return d(t,e)}return new j(t,e,n)}w.sync=d;var _=w.GlobSync=d.GlobSync;function j(t,e,n){if("function"==typeof e&&(n=e,e=null),e&&e.sync){if(n)throw new TypeError("callback provided to sync glob");return new _(t,e)}if(!(this instanceof j))return new j(t,e,n);p(this,t,e),this._didRealPath=!1;var r=this.minimatch.set.length;this.matches=new Array(r),"function"==typeof n&&(n=v(n),this.on("error",n),this.on("end",(function(t){n(null,t)})));var i=this;if(this._processing=0,this._emitQueue=[],this._processQueue=[],this.paused=!1,this.noprocess)return this;if(0===r)return s();for(var o=0;o<r;o++)this._process(this.minimatch.set[o],o,!1,s);function s(){--i._processing,i._processing<=0&&i._finish()}}w.glob=w,w.hasMagic=function(t,e){var n=function(t,e){if(null===e||"object"!=typeof e)return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t}({},e);n.noprocess=!0;var r=new j(t,n).minimatch.set;if(!t)return!1;if(r.length>1)return!0;for(var i=0;i<r[0].length;i++)if("string"!=typeof r[0][i])return!0;return!1},w.Glob=j,a(j,c),j.prototype._finish=function(){if(l(this instanceof j),!this.aborted){if(this.realpath&&!this._didRealpath)return this._realpath();f.finish(this),this.emit("end",this.found)}},j.prototype._realpath=function(){if(!this._didRealpath){this._didRealpath=!0;var t=this.matches.length;if(0===t)return this._finish();for(var e=this,n=0;n<this.matches.length;n++)this._realpathSet(n,r)}function r(){0==--t&&e._finish()}},j.prototype._realpathSet=function(t,e){var n=this.matches[t];if(!n)return e();var r=Object.keys(n),i=this,s=r.length;if(0===s)return e();var a=this.matches[t]=Object.create(null);r.forEach((function(n,r){n=i._makeAbs(n),o.realpath(n,i.realpathCache,(function(r,o){r?"stat"===r.syscall?a[n]=!0:i.emit("error",r):a[o]=!0,0==--s&&(i.matches[t]=a,e())}))}))},j.prototype._mark=function(t){return f.mark(this,t)},j.prototype._makeAbs=function(t){return f.makeAbs(this,t)},j.prototype.abort=function(){this.aborted=!0,this.emit("abort")},j.prototype.pause=function(){this.paused||(this.paused=!0,this.emit("pause"))},j.prototype.resume=function(){if(this.paused){if(this.emit("resume"),this.paused=!1,this._emitQueue.length){var t=this._emitQueue.slice(0);this._emitQueue.length=0;for(var e=0;e<t.length;e++){var n=t[e];this._emitMatch(n[0],n[1])}}if(this._processQueue.length){var r=this._processQueue.slice(0);this._processQueue.length=0;for(e=0;e<r.length;e++){var i=r[e];this._processing--,this._process(i[0],i[1],i[2],i[3])}}}},j.prototype._process=function(t,e,n,r){if(l(this instanceof j),l("function"==typeof r),!this.aborted)if(this._processing++,this.paused)this._processQueue.push([t,e,n,r]);else{for(var i,o=0;"string"==typeof t[o];)o++;switch(o){case t.length:return void this._processSimple(t.join("/"),e,r);case 0:i=null;break;default:i=t.slice(0,o).join("/")}var a,c=t.slice(o);null===i?a=".":h(i)||h(t.map((function(t){return"string"==typeof t?t:"[*]"})).join("/"))?(i&&h(i)||(i="/"+i),a=i):a=i;var u=this._makeAbs(a);if(g(this,a))return r();c[0]===s.GLOBSTAR?this._processGlobStar(i,a,u,c,e,n,r):this._processReaddir(i,a,u,c,e,n,r)}},j.prototype._processReaddir=function(t,e,n,r,i,o,s){var a=this;this._readdir(n,o,(function(c,u){return a._processReaddir2(t,e,n,r,i,o,u,s)}))},j.prototype._processReaddir2=function(t,e,n,r,i,o,s,a){if(!s)return a();for(var c=r[0],l=!!this.minimatch.negate,h=c._glob,d=this.dot||"."===h.charAt(0),f=[],p=0;p<s.length;p++){if("."!==(y=s[p]).charAt(0)||d)(l&&!t?!y.match(c):y.match(c))&&f.push(y)}var m=f.length;if(0===m)return a();if(1===r.length&&!this.mark&&!this.stat){this.matches[i]||(this.matches[i]=Object.create(null));for(p=0;p<m;p++){var y=f[p];t&&(y="/"!==t?t+"/"+y:t+y),"/"!==y.charAt(0)||this.nomount||(y=u.join(this.root,y)),this._emitMatch(i,y)}return a()}r.shift();for(p=0;p<m;p++){y=f[p];t&&(y="/"!==t?t+"/"+y:t+y),this._process([y].concat(r),i,o,a)}a()},j.prototype._emitMatch=function(t,e){if(!this.aborted&&!b(this,e))if(this.paused)this._emitQueue.push([t,e]);else{var n=h(e)?e:this._makeAbs(e);if(this.mark&&(e=this._mark(e)),this.absolute&&(e=n),!this.matches[t][e]){if(this.nodir){var r=this.cache[n];if("DIR"===r||Array.isArray(r))return}this.matches[t][e]=!0;var i=this.statCache[n];i&&this.emit("stat",e,i),this.emit("match",e)}}},j.prototype._readdirInGlobStar=function(t,e){if(!this.aborted){if(this.follow)return this._readdir(t,!1,e);var n=this,r=y("lstat\0"+t,(function(r,i){if(r&&"ENOENT"===r.code)return e();var o=i&&i.isSymbolicLink();n.symlinks[t]=o,o||!i||i.isDirectory()?n._readdir(t,!1,e):(n.cache[t]="FILE",e())}));r&&n.fs.lstat(t,r)}},j.prototype._readdir=function(t,e,n){if(!this.aborted&&(n=y("readdir\0"+t+"\0"+e,n))){if(e&&!m(this.symlinks,t))return this._readdirInGlobStar(t,n);if(m(this.cache,t)){var r=this.cache[t];if(!r||"FILE"===r)return n();if(Array.isArray(r))return n(null,r)}this.fs.readdir(t,function(t,e,n){return function(r,i){r?t._readdirError(e,r,n):t._readdirEntries(e,i,n)}}(this,t,n))}},j.prototype._readdirEntries=function(t,e,n){if(!this.aborted){if(!this.mark&&!this.stat)for(var r=0;r<e.length;r++){var i=e[r];i="/"===t?t+i:t+"/"+i,this.cache[i]=!0}return this.cache[t]=e,n(null,e)}},j.prototype._readdirError=function(t,e,n){if(!this.aborted){switch(e.code){case"ENOTSUP":case"ENOTDIR":var r=this._makeAbs(t);if(this.cache[r]="FILE",r===this.cwdAbs){var o=new Error(e.code+" invalid cwd "+this.cwd);o.path=this.cwd,o.code=e.code,this.emit("error",o),this.abort()}break;case"ENOENT":case"ELOOP":case"ENAMETOOLONG":case"UNKNOWN":this.cache[this._makeAbs(t)]=!1;break;default:this.cache[this._makeAbs(t)]=!1,this.strict&&(this.emit("error",e),this.abort()),this.silent||i.error("glob error",e)}return n()}},j.prototype._processGlobStar=function(t,e,n,r,i,o,s){var a=this;this._readdir(n,o,(function(c,u){a._processGlobStar2(t,e,n,r,i,o,u,s)}))},j.prototype._processGlobStar2=function(t,e,n,r,i,o,s,a){if(!s)return a();var c=r.slice(1),u=t?[t]:[],l=u.concat(c);this._process(l,i,!1,a);var h=this.symlinks[n],d=s.length;if(h&&o)return a();for(var f=0;f<d;f++){if("."!==s[f].charAt(0)||this.dot){var p=u.concat(s[f],c);this._process(p,i,!0,a);var m=u.concat(s[f],r);this._process(m,i,!0,a)}}a()},j.prototype._processSimple=function(t,e,n){var r=this;this._stat(t,(function(i,o){r._processSimple2(t,e,i,o,n)}))},j.prototype._processSimple2=function(t,e,n,i,o){if(this.matches[e]||(this.matches[e]=Object.create(null)),!i)return o();if(t&&h(t)&&!this.nomount){var s=/[\/\\]$/.test(t);"/"===t.charAt(0)?t=u.join(this.root,t):(t=u.resolve(this.root,t),s&&(t+="/"))}"win32"===r.platform&&(t=t.replace(/\\/g,"/")),this._emitMatch(e,t),o()},j.prototype._stat=function(t,e){var n=this._makeAbs(t),r="/"===t.slice(-1);if(t.length>this.maxLength)return e();if(!this.stat&&m(this.cache,n)){var i=this.cache[n];if(Array.isArray(i)&&(i="DIR"),!r||"DIR"===i)return e(null,i);if(r&&"FILE"===i)return e()}var o=this.statCache[n];if(void 0!==o){if(!1===o)return e(null,o);var s=o.isDirectory()?"DIR":"FILE";return r&&"FILE"===s?e():e(null,s,o)}var a=this,c=y("stat\0"+n,(function(r,i){if(i&&i.isSymbolicLink())return a.fs.stat(n,(function(r,o){r?a._stat2(t,n,null,i,e):a._stat2(t,n,r,o,e)}));a._stat2(t,n,r,i,e)}));c&&a.fs.lstat(n,c)},j.prototype._stat2=function(t,e,n,r,i){if(n&&("ENOENT"===n.code||"ENOTDIR"===n.code))return this.statCache[e]=!1,i();var o="/"===t.slice(-1);if(this.statCache[e]=r,"/"===e.slice(-1)&&r&&!r.isDirectory())return i(null,!1,r);var s=!0;return r&&(s=r.isDirectory()?"DIR":"FILE"),this.cache[e]=this.cache[e]||s,o&&"FILE"===s?i():i(null,s,r)}},"./node_modules/glob/sync.js":(t,e,n)=>{var r=n("./node_modules/console-browserify/index.js"),i=n("./node_modules/process/browser.js");t.exports=m,m.GlobSync=y;var o=n("./node_modules/fs.realpath/index.js"),s=n("./node_modules/minimatch/minimatch.js"),a=(s.Minimatch,n("./node_modules/glob/glob.js").Glob,n("./node_modules/util/util.js"),n("./node_modules/path-browserify/index.js")),c=n("./node_modules/assert/build/assert.js"),u=n("./node_modules/path-is-absolute/index.js"),l=n("./node_modules/glob/common.js"),h=l.setopts,d=l.ownProp,f=l.childrenIgnored,p=l.isIgnored;function m(t,e){if("function"==typeof e||3===arguments.length)throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");return new y(t,e).found}function y(t,e){if(!t)throw new Error("must provide pattern");if("function"==typeof e||3===arguments.length)throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");if(!(this instanceof y))return new y(t,e);if(h(this,t,e),this.noprocess)return this;var n=this.minimatch.set.length;this.matches=new Array(n);for(var r=0;r<n;r++)this._process(this.minimatch.set[r],r,!1);this._finish()}y.prototype._finish=function(){if(c.ok(this instanceof y),this.realpath){var t=this;this.matches.forEach((function(e,n){var r=t.matches[n]=Object.create(null);for(var i in e)try{i=t._makeAbs(i),r[o.realpathSync(i,t.realpathCache)]=!0}catch(e){if("stat"!==e.syscall)throw e;r[t._makeAbs(i)]=!0}}))}l.finish(this)},y.prototype._process=function(t,e,n){c.ok(this instanceof y);for(var r,i=0;"string"==typeof t[i];)i++;switch(i){case t.length:return void this._processSimple(t.join("/"),e);case 0:r=null;break;default:r=t.slice(0,i).join("/")}var o,a=t.slice(i);null===r?o=".":u(r)||u(t.map((function(t){return"string"==typeof t?t:"[*]"})).join("/"))?(r&&u(r)||(r="/"+r),o=r):o=r;var l=this._makeAbs(o);f(this,o)||(a[0]===s.GLOBSTAR?this._processGlobStar(r,o,l,a,e,n):this._processReaddir(r,o,l,a,e,n))},y.prototype._processReaddir=function(t,e,n,r,i,o){var s=this._readdir(n,o);if(s){for(var c=r[0],u=!!this.minimatch.negate,l=c._glob,h=this.dot||"."===l.charAt(0),d=[],f=0;f<s.length;f++){if("."!==(y=s[f]).charAt(0)||h)(u&&!t?!y.match(c):y.match(c))&&d.push(y)}var p=d.length;if(0!==p)if(1!==r.length||this.mark||this.stat){r.shift();for(f=0;f<p;f++){var m;y=d[f];m=t?[t,y]:[y],this._process(m.concat(r),i,o)}}else{this.matches[i]||(this.matches[i]=Object.create(null));for(var f=0;f<p;f++){var y=d[f];t&&(y="/"!==t.slice(-1)?t+"/"+y:t+y),"/"!==y.charAt(0)||this.nomount||(y=a.join(this.root,y)),this._emitMatch(i,y)}}}},y.prototype._emitMatch=function(t,e){if(!p(this,e)){var n=this._makeAbs(e);if(this.mark&&(e=this._mark(e)),this.absolute&&(e=n),!this.matches[t][e]){if(this.nodir){var r=this.cache[n];if("DIR"===r||Array.isArray(r))return}this.matches[t][e]=!0,this.stat&&this._stat(e)}}},y.prototype._readdirInGlobStar=function(t){if(this.follow)return this._readdir(t,!1);var e,n;try{n=this.fs.lstatSync(t)}catch(t){if("ENOENT"===t.code)return null}var r=n&&n.isSymbolicLink();return this.symlinks[t]=r,r||!n||n.isDirectory()?e=this._readdir(t,!1):this.cache[t]="FILE",e},y.prototype._readdir=function(t,e){if(e&&!d(this.symlinks,t))return this._readdirInGlobStar(t);if(d(this.cache,t)){var n=this.cache[t];if(!n||"FILE"===n)return null;if(Array.isArray(n))return n}try{return this._readdirEntries(t,this.fs.readdirSync(t))}catch(e){return this._readdirError(t,e),null}},y.prototype._readdirEntries=function(t,e){if(!this.mark&&!this.stat)for(var n=0;n<e.length;n++){var r=e[n];r="/"===t?t+r:t+"/"+r,this.cache[r]=!0}return this.cache[t]=e,e},y.prototype._readdirError=function(t,e){switch(e.code){case"ENOTSUP":case"ENOTDIR":var n=this._makeAbs(t);if(this.cache[n]="FILE",n===this.cwdAbs){var i=new Error(e.code+" invalid cwd "+this.cwd);throw i.path=this.cwd,i.code=e.code,i}break;case"ENOENT":case"ELOOP":case"ENAMETOOLONG":case"UNKNOWN":this.cache[this._makeAbs(t)]=!1;break;default:if(this.cache[this._makeAbs(t)]=!1,this.strict)throw e;this.silent||r.error("glob error",e)}},y.prototype._processGlobStar=function(t,e,n,r,i,o){var s=this._readdir(n,o);if(s){var a=r.slice(1),c=t?[t]:[],u=c.concat(a);this._process(u,i,!1);var l=s.length;if(!this.symlinks[n]||!o)for(var h=0;h<l;h++){if("."!==s[h].charAt(0)||this.dot){var d=c.concat(s[h],a);this._process(d,i,!0);var f=c.concat(s[h],r);this._process(f,i,!0)}}}},y.prototype._processSimple=function(t,e){var n=this._stat(t);if(this.matches[e]||(this.matches[e]=Object.create(null)),n){if(t&&u(t)&&!this.nomount){var r=/[\/\\]$/.test(t);"/"===t.charAt(0)?t=a.join(this.root,t):(t=a.resolve(this.root,t),r&&(t+="/"))}"win32"===i.platform&&(t=t.replace(/\\/g,"/")),this._emitMatch(e,t)}},y.prototype._stat=function(t){var e=this._makeAbs(t),n="/"===t.slice(-1);if(t.length>this.maxLength)return!1;if(!this.stat&&d(this.cache,e)){var r=this.cache[e];if(Array.isArray(r)&&(r="DIR"),!n||"DIR"===r)return r;if(n&&"FILE"===r)return!1}var i=this.statCache[e];if(!i){var o;try{o=this.fs.lstatSync(e)}catch(t){if(t&&("ENOENT"===t.code||"ENOTDIR"===t.code))return this.statCache[e]=!1,!1}if(o&&o.isSymbolicLink())try{i=this.fs.statSync(e)}catch(t){i=o}else i=o}this.statCache[e]=i;r=!0;return i&&(r=i.isDirectory()?"DIR":"FILE"),this.cache[e]=this.cache[e]||r,(!n||"FILE"!==r)&&r},y.prototype._mark=function(t){return l.mark(this,t)},y.prototype._makeAbs=function(t){return l.makeAbs(this,t)}},"./node_modules/inflight/inflight.js":(t,e,n)=>{var r=n("./node_modules/process/browser.js"),i=n("./node_modules/wrappy/wrappy.js"),o=Object.create(null),s=n("./node_modules/once/once.js");function a(t){for(var e=t.length,n=[],r=0;r<e;r++)n[r]=t[r];return n}t.exports=i((function(t,e){return o[t]?(o[t].push(e),null):(o[t]=[e],function(t){return s((function e(){var n=o[t],i=n.length,s=a(arguments);try{for(var c=0;c<i;c++)n[c].apply(null,s)}finally{n.length>i?(n.splice(0,i),r.nextTick((function(){e.apply(null,s)}))):delete o[t]}}))}(t))}))},"./node_modules/is-path-cwd/index.js":(t,e,n)=>{"use strict";var r=n("./node_modules/process/browser.js");const i=n("./node_modules/path-browserify/index.js");t.exports=t=>{let e=r.cwd();return t=i.resolve(t),"win32"===r.platform&&(e=e.toLowerCase(),t=t.toLowerCase()),t===e}},"./node_modules/is-path-in-cwd/index.js":(t,e,n)=>{"use strict";var r=n("./node_modules/process/browser.js");const i=n("./node_modules/is-path-inside/index.js");t.exports=t=>i(t,r.cwd())},"./node_modules/is-path-inside/index.js":(t,e,n)=>{"use strict";const r=n("./node_modules/path-browserify/index.js"),i=n("./node_modules/path-is-inside/lib/path-is-inside.js");t.exports=(t,e)=>(t=r.resolve(t))!==(e=r.resolve(e))&&i(t,e)},"./node_modules/minimatch/minimatch.js":(t,e,n)=>{var r=n("./node_modules/console-browserify/index.js");t.exports=f,f.Minimatch=p;var i=function(){try{return n("./node_modules/path-browserify/index.js")}catch(t){}}()||{sep:"/"};f.sep=i.sep;var o=f.GLOBSTAR=p.GLOBSTAR={},s=n("./node_modules/brace-expansion/index.js"),a={"!":{open:"(?:(?!(?:",close:"))[^/]*?)"},"?":{open:"(?:",close:")?"},"+":{open:"(?:",close:")+"},"*":{open:"(?:",close:")*"},"@":{open:"(?:",close:")"}},c="[^/]",u="[^/]*?",l="().*{}+?[]^$\\!".split("").reduce((function(t,e){return t[e]=!0,t}),{});var h=/\/+/;function d(t,e){e=e||{};var n={};return Object.keys(t).forEach((function(e){n[e]=t[e]})),Object.keys(e).forEach((function(t){n[t]=e[t]})),n}function f(t,e,n){return y(e),n||(n={}),!(!n.nocomment&&"#"===e.charAt(0))&&new p(e,n).match(t)}function p(t,e){if(!(this instanceof p))return new p(t,e);y(t),e||(e={}),t=t.trim(),e.allowWindowsEscape||"/"===i.sep||(t=t.split(i.sep).join("/")),this.options=e,this.set=[],this.pattern=t,this.regexp=null,this.negate=!1,this.comment=!1,this.empty=!1,this.partial=!!e.partial,this.make()}function m(t,e){return e||(e=this instanceof p?this.options:{}),t=void 0===t?this.pattern:t,y(t),e.nobrace||!/\{(?:(?!\{).)*\}/.test(t)?[t]:s(t)}f.filter=function(t,e){return e=e||{},function(n,r,i){return f(n,t,e)}},f.defaults=function(t){if(!t||"object"!=typeof t||!Object.keys(t).length)return f;var e=f,n=function(n,r,i){return e(n,r,d(t,i))};return(n.Minimatch=function(n,r){return new e.Minimatch(n,d(t,r))}).defaults=function(n){return e.defaults(d(t,n)).Minimatch},n.filter=function(n,r){return e.filter(n,d(t,r))},n.defaults=function(n){return e.defaults(d(t,n))},n.makeRe=function(n,r){return e.makeRe(n,d(t,r))},n.braceExpand=function(n,r){return e.braceExpand(n,d(t,r))},n.match=function(n,r,i){return e.match(n,r,d(t,i))},n},p.defaults=function(t){return f.defaults(t).Minimatch},p.prototype.debug=function(){},p.prototype.make=function(){var t=this.pattern,e=this.options;if(!e.nocomment&&"#"===t.charAt(0))return void(this.comment=!0);if(!t)return void(this.empty=!0);this.parseNegate();var n=this.globSet=this.braceExpand();e.debug&&(this.debug=function(){r.error.apply(r,arguments)});this.debug(this.pattern,n),n=this.globParts=n.map((function(t){return t.split(h)})),this.debug(this.pattern,n),n=n.map((function(t,e,n){return t.map(this.parse,this)}),this),this.debug(this.pattern,n),n=n.filter((function(t){return-1===t.indexOf(!1)})),this.debug(this.pattern,n),this.set=n},p.prototype.parseNegate=function(){var t=this.pattern,e=!1,n=this.options,r=0;if(n.nonegate)return;for(var i=0,o=t.length;i<o&&"!"===t.charAt(i);i++)e=!e,r++;r&&(this.pattern=t.substr(r));this.negate=e},f.braceExpand=function(t,e){return m(t,e)},p.prototype.braceExpand=m;var y=function(t){if("string"!=typeof t)throw new TypeError("invalid pattern");if(t.length>65536)throw new TypeError("pattern is too long")};p.prototype.parse=function(t,e){y(t);var n=this.options;if("**"===t){if(!n.noglobstar)return o;t="*"}if(""===t)return"";var r,i="",s=!!n.nocase,h=!1,d=[],f=[],p=!1,m=-1,b=-1,v="."===t.charAt(0)?"":n.dot?"(?!(?:^|\\/)\\.{1,2}(?:$|\\/))":"(?!\\.)",w=this;function _(){if(r){switch(r){case"*":i+=u,s=!0;break;case"?":i+=c,s=!0;break;default:i+="\\"+r}w.debug("clearStateChar %j %j",r,i),r=!1}}for(var j,E=0,x=t.length;E<x&&(j=t.charAt(E));E++)if(this.debug("%s\t%s %s %j",t,E,i,j),h&&l[j])i+="\\"+j,h=!1;else switch(j){case"/":return!1;case"\\":_(),h=!0;continue;case"?":case"*":case"+":case"@":case"!":if(this.debug("%s\t%s %s %j <-- stateChar",t,E,i,j),p){this.debug("  in class"),"!"===j&&E===b+1&&(j="^"),i+=j;continue}w.debug("call clearStateChar %j",r),_(),r=j,n.noext&&_();continue;case"(":if(p){i+="(";continue}if(!r){i+="\\(";continue}d.push({type:r,start:E-1,reStart:i.length,open:a[r].open,close:a[r].close}),i+="!"===r?"(?:(?!(?:":"(?:",this.debug("plType %j %j",r,i),r=!1;continue;case")":if(p||!d.length){i+="\\)";continue}_(),s=!0;var O=d.pop();i+=O.close,"!"===O.type&&f.push(O),O.reEnd=i.length;continue;case"|":if(p||!d.length||h){i+="\\|",h=!1;continue}_(),i+="|";continue;case"[":if(_(),p){i+="\\"+j;continue}p=!0,b=E,m=i.length,i+=j;continue;case"]":if(E===b+1||!p){i+="\\"+j,h=!1;continue}var k=t.substring(b+1,E);try{RegExp("["+k+"]")}catch(t){var A=this.parse(k,g);i=i.substr(0,m)+"\\["+A[0]+"\\]",s=s||A[1],p=!1;continue}s=!0,p=!1,i+=j;continue;default:_(),h?h=!1:!l[j]||"^"===j&&p||(i+="\\"),i+=j}p&&(k=t.substr(b+1),A=this.parse(k,g),i=i.substr(0,m)+"\\["+A[0],s=s||A[1]);for(O=d.pop();O;O=d.pop()){var S=i.slice(O.reStart+O.open.length);this.debug("setting tail",i,O),S=S.replace(/((?:\\{2}){0,64})(\\?)\|/g,(function(t,e,n){return n||(n="\\"),e+e+n+"|"})),this.debug("tail=%j\n   %s",S,S,O,i);var P="*"===O.type?u:"?"===O.type?c:"\\"+O.type;s=!0,i=i.slice(0,O.reStart)+P+"\\("+S}_(),h&&(i+="\\\\");var T=!1;switch(i.charAt(0)){case"[":case".":case"(":T=!0}for(var N=f.length-1;N>-1;N--){var I=f[N],R=i.slice(0,I.reStart),C=i.slice(I.reStart,I.reEnd-8),M=i.slice(I.reEnd-8,I.reEnd),L=i.slice(I.reEnd);M+=L;var D=R.split("(").length-1,G=L;for(E=0;E<D;E++)G=G.replace(/\)[+*?]?/,"");var B="";""===(L=G)&&e!==g&&(B="$"),i=R+C+L+B+M}""!==i&&s&&(i="(?=.)"+i);T&&(i=v+i);if(e===g)return[i,s];if(!s)return function(t){return t.replace(/\\(.)/g,"$1")}(t);var $=n.nocase?"i":"";try{var F=new RegExp("^"+i+"$",$)}catch(t){return new RegExp("$.")}return F._glob=t,F._src=i,F};var g={};f.makeRe=function(t,e){return new p(t,e||{}).makeRe()},p.prototype.makeRe=function(){if(this.regexp||!1===this.regexp)return this.regexp;var t=this.set;if(!t.length)return this.regexp=!1,this.regexp;var e=this.options,n=e.noglobstar?u:e.dot?"(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?":"(?:(?!(?:\\/|^)\\.).)*?",r=e.nocase?"i":"",i=t.map((function(t){return t.map((function(t){return t===o?n:"string"==typeof t?function(t){return t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}(t):t._src})).join("\\/")})).join("|");i="^(?:"+i+")$",this.negate&&(i="^(?!"+i+").*$");try{this.regexp=new RegExp(i,r)}catch(t){this.regexp=!1}return this.regexp},f.match=function(t,e,n){var r=new p(e,n=n||{});return t=t.filter((function(t){return r.match(t)})),r.options.nonull&&!t.length&&t.push(e),t},p.prototype.match=function(t,e){if(void 0===e&&(e=this.partial),this.debug("match",t,this.pattern),this.comment)return!1;if(this.empty)return""===t;if("/"===t&&e)return!0;var n=this.options;"/"!==i.sep&&(t=t.split(i.sep).join("/")),t=t.split(h),this.debug(this.pattern,"split",t);var r,o,s=this.set;for(this.debug(this.pattern,"set",s),o=t.length-1;o>=0&&!(r=t[o]);o--);for(o=0;o<s.length;o++){var a=s[o],c=t;if(n.matchBase&&1===a.length&&(c=[r]),this.matchOne(c,a,e))return!!n.flipNegate||!this.negate}return!n.flipNegate&&this.negate},p.prototype.matchOne=function(t,e,n){var r=this.options;this.debug("matchOne",{this:this,file:t,pattern:e}),this.debug("matchOne",t.length,e.length);for(var i=0,s=0,a=t.length,c=e.length;i<a&&s<c;i++,s++){this.debug("matchOne loop");var u,l=e[s],h=t[i];if(this.debug(e,l,h),!1===l)return!1;if(l===o){this.debug("GLOBSTAR",[e,l,h]);var d=i,f=s+1;if(f===c){for(this.debug("** at the end");i<a;i++)if("."===t[i]||".."===t[i]||!r.dot&&"."===t[i].charAt(0))return!1;return!0}for(;d<a;){var p=t[d];if(this.debug("\nglobstar while",t,d,e,f,p),this.matchOne(t.slice(d),e.slice(f),n))return this.debug("globstar found match!",d,a,p),!0;if("."===p||".."===p||!r.dot&&"."===p.charAt(0)){this.debug("dot detected!",t,d,e,f);break}this.debug("globstar swallow a segment, and continue"),d++}return!(!n||(this.debug("\n>>> no match, partial?",t,d,e,f),d!==a))}if("string"==typeof l?(u=h===l,this.debug("string match",l,h,u)):(u=h.match(l),this.debug("pattern match",l,h,u)),!u)return!1}if(i===a&&s===c)return!0;if(i===a)return n;if(s===c)return i===a-1&&""===t[i];throw new Error("wtf?")}},"./node_modules/object-assign/index.js":t=>{"use strict";var e=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function i(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(t){r[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,o){for(var s,a,c=i(t),u=1;u<arguments.length;u++){for(var l in s=Object(arguments[u]))n.call(s,l)&&(c[l]=s[l]);if(e){a=e(s);for(var h=0;h<a.length;h++)r.call(s,a[h])&&(c[a[h]]=s[a[h]])}}return c}},"./node_modules/once/once.js":(t,e,n)=>{var r=n("./node_modules/wrappy/wrappy.js");function i(t){var e=function(){return e.called?e.value:(e.called=!0,e.value=t.apply(this,arguments))};return e.called=!1,e}t.exports=r(i),i.proto=i((function(){Object.defineProperty(Function.prototype,"once",{value:function(){return i(this)},configurable:!0})}))},"./node_modules/p-map/index.js":t=>{"use strict";const e=(t,e,n)=>new Promise(((r,i)=>{if(n=Object.assign({concurrency:1/0},n),"function"!=typeof e)throw new TypeError("Mapper function is required");const{concurrency:o}=n;if(!("number"==typeof o&&o>=1))throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${o}\` (${typeof o})`);const s=[],a=t[Symbol.iterator]();let c=!1,u=!1,l=0,h=0;const d=()=>{if(c)return;const t=a.next(),n=h;if(h++,t.done)return u=!0,void(0===l&&r(s));l++,Promise.resolve(t.value).then((t=>e(t,n))).then((t=>{s[n]=t,l--,d()}),(t=>{c=!0,i(t)}))};for(let t=0;t<o&&(d(),!u);t++);}));t.exports=e,t.exports.default=e},"./node_modules/path-is-absolute/index.js":(t,e,n)=>{"use strict";var r=n("./node_modules/process/browser.js");function i(t){return"/"===t.charAt(0)}function o(t){var e=/^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/.exec(t),n=e[1]||"",r=Boolean(n&&":"!==n.charAt(1));return Boolean(e[2]||r)}t.exports="win32"===r.platform?o:i,t.exports.posix=i,t.exports.win32=o},"./node_modules/path-is-inside/lib/path-is-inside.js":(t,e,n)=>{"use strict";var r=n("./node_modules/process/browser.js"),i=n("./node_modules/path-browserify/index.js");function o(t){return t[t.length-1]===i.sep?t.slice(0,-1):t}t.exports=function(t,e){return t=o(t),e=o(e),"win32"===r.platform&&(t=t.toLowerCase(),e=e.toLowerCase()),0===t.lastIndexOf(e,0)&&(t[e.length]===i.sep||void 0===t[e.length])}},"./node_modules/pify/index.js":t=>{"use strict";const e=(t,e)=>function(...n){return new(0,e.promiseModule)(((r,i)=>{e.multiArgs?n.push(((...t)=>{e.errorFirst?t[0]?i(t):(t.shift(),r(t)):r(t)})):e.errorFirst?n.push(((t,e)=>{t?i(t):r(e)})):n.push(r),t.apply(this,n)}))};t.exports=(t,n)=>{n=Object.assign({exclude:[/.+(Sync|Stream)$/],errorFirst:!0,promiseModule:Promise},n);const r=typeof t;if(null===t||"object"!==r&&"function"!==r)throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${null===t?"null":r}\``);const i=t=>{const e=e=>"string"==typeof e?t===e:e.test(t);return n.include?n.include.some(e):!n.exclude.some(e)};let o;o="function"===r?function(...r){return n.excludeMain?t(...r):e(t,n).apply(this,r)}:Object.create(Object.getPrototypeOf(t));for(const r in t){const s=t[r];o[r]="function"==typeof s&&i(r)?e(s,n):s}return o}},"./node_modules/pinkie-promise/index.js":(t,e,n)=>{"use strict";t.exports="function"==typeof Promise?Promise:n("./node_modules/pinkie/index.js")},"./node_modules/pinkie/index.js":(t,e,n)=>{"use strict";var r,i="pending",o="settled",s="fulfilled",a="rejected",c=function(){},u=void 0!==n.g&&void 0!==n.g.process&&"function"==typeof n.g.process.emit,l="undefined"==typeof setImmediate?setTimeout:setImmediate,h=[];function d(){for(var t=0;t<h.length;t++)h[t][0](h[t][1]);h=[],r=!1}function f(t,e){h.push([t,e]),r||(r=!0,l(d,0))}function p(t){var e=t.owner,n=e._state,r=e._data,i=t[n],o=t.then;if("function"==typeof i){n=s;try{r=i(r)}catch(t){b(o,t)}}m(o,r)||(n===s&&y(o,r),n===a&&b(o,r))}function m(t,e){var n;try{if(t===e)throw new TypeError("A promises callback cannot return that same promise.");if(e&&("function"==typeof e||"object"==typeof e)){var r=e.then;if("function"==typeof r)return r.call(e,(function(r){n||(n=!0,e===r?g(t,r):y(t,r))}),(function(e){n||(n=!0,b(t,e))})),!0}}catch(e){return n||b(t,e),!0}return!1}function y(t,e){t!==e&&m(t,e)||g(t,e)}function g(t,e){t._state===i&&(t._state=o,t._data=e,f(w,t))}function b(t,e){t._state===i&&(t._state=o,t._data=e,f(_,t))}function v(t){t._then=t._then.forEach(p)}function w(t){t._state=s,v(t)}function _(t){t._state=a,v(t),!t._handled&&u&&n.g.process.emit("unhandledRejection",t._data,t)}function j(t){n.g.process.emit("rejectionHandled",t)}function E(t){if("function"!=typeof t)throw new TypeError("Promise resolver "+t+" is not a function");if(this instanceof E==!1)throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");this._then=[],function(t,e){function n(t){b(e,t)}try{t((function(t){y(e,t)}),n)}catch(t){n(t)}}(t,this)}E.prototype={constructor:E,_state:i,_then:null,_data:void 0,_handled:!1,then:function(t,e){var n={owner:this,then:new this.constructor(c),fulfilled:t,rejected:e};return!e&&!t||this._handled||(this._handled=!0,this._state===a&&u&&f(j,this)),this._state===s||this._state===a?f(p,n):this._then.push(n),n.then},catch:function(t){return this.then(null,t)}},E.all=function(t){if(!Array.isArray(t))throw new TypeError("You must pass an array to Promise.all().");return new E((function(e,n){var r=[],i=0;function o(t){return i++,function(n){r[t]=n,--i||e(r)}}for(var s,a=0;a<t.length;a++)(s=t[a])&&"function"==typeof s.then?s.then(o(a),n):r[a]=s;i||e(r)}))},E.race=function(t){if(!Array.isArray(t))throw new TypeError("You must pass an array to Promise.race().");return new E((function(e,n){for(var r,i=0;i<t.length;i++)(r=t[i])&&"function"==typeof r.then?r.then(e,n):e(r)}))},E.resolve=function(t){return t&&"object"==typeof t&&t.constructor===E?t:new E((function(e){e(t)}))},E.reject=function(t){return new E((function(e,n){n(t)}))},t.exports=E},"./node_modules/rimraf/rimraf.js":(t,e,n)=>{var r=n("./node_modules/process/browser.js");t.exports=f,f.sync=b;var i=n("./node_modules/assert/build/assert.js"),o=n("./node_modules/path-browserify/index.js"),s=n("?3e89"),a=void 0;try{a=n("./node_modules/glob/glob.js")}catch(t){}var c=parseInt("666",8),u={nosort:!0,silent:!0},l=0,h="win32"===r.platform;function d(t){if(["unlink","chmod","stat","lstat","rmdir","readdir"].forEach((function(e){t[e]=t[e]||s[e],t[e+="Sync"]=t[e]||s[e]})),t.maxBusyTries=t.maxBusyTries||3,t.emfileWait=t.emfileWait||1e3,!1===t.glob&&(t.disableGlob=!0),!0!==t.disableGlob&&void 0===a)throw Error("glob dependency not found, set `options.disableGlob = true` if intentional");t.disableGlob=t.disableGlob||!1,t.glob=t.glob||u}function f(t,e,n){"function"==typeof e&&(n=e,e={}),i(t,"rimraf: missing path"),i.equal(typeof t,"string","rimraf: path should be a string"),i.equal(typeof n,"function","rimraf: callback function required"),i(e,"rimraf: invalid options argument provided"),i.equal(typeof e,"object","rimraf: options should be object"),d(e);var r=0,o=null,s=0;if(e.disableGlob||!a.hasMagic(t))return c(null,[t]);function c(t,i){return t?n(t):0===(s=i.length)?n():void i.forEach((function(t){p(t,e,(function i(a){if(a){if(("EBUSY"===a.code||"ENOTEMPTY"===a.code||"EPERM"===a.code)&&r<e.maxBusyTries)return r++,setTimeout((function(){p(t,e,i)}),100*r);if("EMFILE"===a.code&&l<e.emfileWait)return setTimeout((function(){p(t,e,i)}),l++);"ENOENT"===a.code&&(a=null)}l=0,function(t){o=o||t,0==--s&&n(o)}(a)}))}))}e.lstat(t,(function(n,r){if(!n)return c(null,[t]);a(t,e.glob,c)}))}function p(t,e,n){i(t),i(e),i("function"==typeof n),e.lstat(t,(function(r,i){return r&&"ENOENT"===r.code?n(null):(r&&"EPERM"===r.code&&h&&m(t,e,r,n),i&&i.isDirectory()?g(t,e,r,n):void e.unlink(t,(function(r){if(r){if("ENOENT"===r.code)return n(null);if("EPERM"===r.code)return h?m(t,e,r,n):g(t,e,r,n);if("EISDIR"===r.code)return g(t,e,r,n)}return n(r)})))}))}function m(t,e,n,r){i(t),i(e),i("function"==typeof r),n&&i(n instanceof Error),e.chmod(t,c,(function(i){i?r("ENOENT"===i.code?null:n):e.stat(t,(function(i,o){i?r("ENOENT"===i.code?null:n):o.isDirectory()?g(t,e,n,r):e.unlink(t,r)}))}))}function y(t,e,n){i(t),i(e),n&&i(n instanceof Error);try{e.chmodSync(t,c)}catch(t){if("ENOENT"===t.code)return;throw n}try{var r=e.statSync(t)}catch(t){if("ENOENT"===t.code)return;throw n}r.isDirectory()?v(t,e,n):e.unlinkSync(t)}function g(t,e,n,r){i(t),i(e),n&&i(n instanceof Error),i("function"==typeof r),e.rmdir(t,(function(s){!s||"ENOTEMPTY"!==s.code&&"EEXIST"!==s.code&&"EPERM"!==s.code?s&&"ENOTDIR"===s.code?r(n):r(s):function(t,e,n){i(t),i(e),i("function"==typeof n),e.readdir(t,(function(r,i){if(r)return n(r);var s,a=i.length;if(0===a)return e.rmdir(t,n);i.forEach((function(r){f(o.join(t,r),e,(function(r){if(!s)return r?n(s=r):void(0==--a&&e.rmdir(t,n))}))}))}))}(t,e,r)}))}function b(t,e){var n;if(d(e=e||{}),i(t,"rimraf: missing path"),i.equal(typeof t,"string","rimraf: path should be a string"),i(e,"rimraf: missing options"),i.equal(typeof e,"object","rimraf: options should be object"),e.disableGlob||!a.hasMagic(t))n=[t];else try{e.lstatSync(t),n=[t]}catch(r){n=a.sync(t,e.glob)}if(n.length)for(var r=0;r<n.length;r++){t=n[r];try{var o=e.lstatSync(t)}catch(n){if("ENOENT"===n.code)return;"EPERM"===n.code&&h&&y(t,e,n)}try{o&&o.isDirectory()?v(t,e,null):e.unlinkSync(t)}catch(n){if("ENOENT"===n.code)return;if("EPERM"===n.code)return h?y(t,e,n):v(t,e,n);if("EISDIR"!==n.code)throw n;v(t,e,n)}}}function v(t,e,n){i(t),i(e),n&&i(n instanceof Error);try{e.rmdirSync(t)}catch(r){if("ENOENT"===r.code)return;if("ENOTDIR"===r.code)throw n;"ENOTEMPTY"!==r.code&&"EEXIST"!==r.code&&"EPERM"!==r.code||function(t,e){i(t),i(e),e.readdirSync(t).forEach((function(n){b(o.join(t,n),e)}));var n=h?100:1,r=0;for(;;){var s=!0;try{var a=e.rmdirSync(t,e);return s=!1,a}finally{if(++r<n&&s)continue}}}(t,e)}}},"./node_modules/wrappy/wrappy.js":t=>{t.exports=function t(e,n){if(e&&n)return t(e)(n);if("function"!=typeof e)throw new TypeError("need wrapper function");return Object.keys(e).forEach((function(t){r[t]=e[t]})),r;function r(){for(var t=new Array(arguments.length),n=0;n<t.length;n++)t[n]=arguments[n];var r=e.apply(this,t),i=t[t.length-1];return"function"==typeof r&&r!==i&&Object.keys(i).forEach((function(t){r[t]=i[t]})),r}}},"?6882":()=>{},"?a40c":()=>{},"?3e89":()=>{},"./app/index.js":(t,e,n)=>{"use strict";n.r(e);var r=n("./app/pages/About/index.js"),i=n("./app/pages/Collections/index.js"),o=n("./app/pages/Detail/index.js"),s=n("./app/pages/Home/index.js"),a=n("./node_modules/lodash/each.js"),c=(n("./node_modules/body-parser/index.js"),n("./app/components/Preloader.js")),u=(n("./node_modules/clean-webpack-plugin/dist/clean-webpack-plugin.js"),n("./node_modules/console-browserify/index.js"));new class{constructor(){this.createPreloader(),this.createContent(),this.createPages(),this.addEventListeners(),this.addLinkListeners(),this.update()}createPreloader(){this.preloader=new c.default,this.preloader.once("completed",this.onPreloaded.bind(this))}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new r.default,collections:new i.default,detail:new o.default,home:new s.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.preloader.destroy(),this.page.show()}async onChange(t){await this.page.hide();const e=await window.fetch(t);if(200===e.status){const t=await e.text(),n=document.createElement("div");n.innerHTML=t;const r=n.querySelector(".content");this.template=r.getAttribute("data-template"),this.content.setAttribute("data-template",this.template),this.content.innerHTML=r.innerHTML,this.page=this.pages[this.template],this.onResize(),this.page.create(),this.page.show(),this.addLinkListeners()}else u.log("Error",error)}onResize(){this.page&&this.page.onResize&&this.page.onResize()}update(){this.page&&this.page.update&&this.page.update(),this.frame=window.requestAnimationFrame(this.update.bind(this))}addLinkListeners(){const t=document.querySelectorAll("a");a(t,(t=>{t.onclick=e=>{e.preventDefault();const{href:n}=t;this.onChange(n)}}))}addEventListeners(){window.addEventListener("resize",this.onResize.bind(this)),u.log("resize")}}}},(function(t){t.h=()=>"e841482aaa24501247a5"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,