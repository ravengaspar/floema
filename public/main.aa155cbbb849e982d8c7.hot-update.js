/*! For license information please see main.aa155cbbb849e982d8c7.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateimmersive_website("main",{"./app/shaders/plane-fragment.glsl":(t,e,r)=>{r.r(e),r.d(e,{default:()=>i});const i="#define GLSLIFY 1\nvoid main() {\n    gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n}\n"},"./app/shaders/plane-vertex.glsl":(t,e,r)=>{r.r(e),r.d(e,{default:()=>i});const i="#define GLSLIFY 1\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvoid main() {\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"},"./app/components/Canvas/Media.js":(t,e,r)=>{r.r(e),r.d(e,{default:()=>l});var i=r("./node_modules/ogl/src/core/Texture.js"),s=r("./node_modules/ogl/src/core/Program.js"),a=r("./node_modules/ogl/src/core/Mesh.js"),n=r("./app/shaders/plane-fragment.glsl"),h=r("./app/shaders/plane-vertex.glsl");const l=class{constructor({element:t,gl:e,geomentry:r,scene:i}){this.element=t,this.geomentry=r,this.gl=e,this.scene=i}createTexture(){new i.Texture(this.gl);this.image=new Image,this.image.src=this.element.getAttribute("data-src"),this.image.onload=t=>this.texture.set}createProgram(){this.Program=new s.Program({fragment:n.default,vertex:h.default,uniforms:{}})}createMesh(){this.mesh=new a.Mesh(this.gl,{geomentry:this.geomentry,program:this.program}),this.mesh.setParent(this.scene)}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,r)=>{r.r(e),r.d(e,{Mesh:()=>l});var i=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/ogl/src/math/Mat3.js"),a=r("./node_modules/ogl/src/math/Mat4.js"),n=r("./node_modules/console-browserify/index.js");let h=0;class l extends i.Transform{constructor(t,{geometry:e,program:r,mode:i=t.TRIANGLES,frustumCulled:l=!0,renderOrder:o=0}={}){super(),t.canvas||n.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=h++,this.geometry=e,this.program=r,this.mode=i,this.frustumCulled=l,this.renderOrder=o,this.modelViewMatrix=new a.Mat4,this.normalMatrix=new s.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t}))),t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,r)=>{r.r(e),r.d(e,{Program:()=>n});var i=r("./node_modules/console-browserify/index.js");let s=1;const a={};class n{constructor(t,{vertex:e,fragment:r,uniforms:a={},transparent:n=!1,cullFace:h=t.BACK,frontFace:o=t.CCW,depthTest:g=!0,depthWrite:u=!0,depthFunc:m=t.LESS}={}){t.canvas||i.error("gl not passed as fist argument to Program"),this.gl=t,this.uniforms=a,this.id=s++,e||i.warn("vertex shader not supplied"),r||i.warn("fragment shader not supplied"),this.transparent=n,this.cullFace=h,this.frontFace=o,this.depthTest=g,this.depthWrite=u,this.depthFunc=m,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const c=t.createShader(t.VERTEX_SHADER);t.shaderSource(c,e),t.compileShader(c),""!==t.getShaderInfoLog(c)&&i.warn(`${t.getShaderInfoLog(c)}\nVertex Shader\n${l(e)}`);const d=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(d,r),t.compileShader(d),""!==t.getShaderInfoLog(d)&&i.warn(`${t.getShaderInfoLog(d)}\nFragment Shader\n${l(r)}`),this.program=t.createProgram(),t.attachShader(this.program,c),t.attachShader(this.program,d),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return i.warn(t.getProgramInfoLog(this.program));t.deleteShader(c),t.deleteShader(d),this.uniformLocations=new Map;let p=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<p;e++){let r=t.getActiveUniform(this.program,e);this.uniformLocations.set(r,t.getUniformLocation(this.program,r.name));const i=r.name.match(/(\w+)/g);r.uniformName=i[0],3===i.length?(r.isStructArray=!0,r.structIndex=Number(i[1]),r.structProperty=i[2]):2===i.length&&isNaN(Number(i[1]))&&(r.isStruct=!0,r.structProperty=i[1])}this.attributeLocations=new Map;const f=[],E=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<E;e++){const r=t.getActiveAttrib(this.program,e),i=t.getAttribLocation(this.program,r.name);-1!==i&&(f[i]=r.name,this.attributeLocations.set(r,i))}this.attributeOrder=f.join("")}setBlendFunc(t,e,r,i){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=r,this.blendFunc.dstAlpha=i,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,r)=>{let i=r.uniformName,s=this.uniforms[i];if(r.isStruct&&(s=s[r.structProperty],i+=`.${r.structProperty}`),r.isStructArray&&(s=s[r.structIndex][r.structProperty],i+=`[${r.structIndex}].${r.structProperty}`),!s)return g(`Active uniform ${i} has not been supplied`);if(s&&void 0===s.value)return g(`${i} uniform is missing a value parameter`);if(s.value.texture)return e+=1,s.value.update(e),h(this.gl,r.type,t,e);if(s.value.length&&s.value[0].texture){const i=[];return s.value.forEach((t=>{e+=1,t.update(e),i.push(e)})),h(this.gl,r.type,t,i)}h(this.gl,r.type,t,s.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function h(t,e,r,i){i=i.length?function(t){const e=t.length,r=t[0].length;if(void 0===r)return t;const i=e*r;let s=a[i];s||(a[i]=s=new Float32Array(i));for(let i=0;i<e;i++)s.set(t[i],i*r);return s}(i):i;const s=t.renderer.state.uniformLocations.get(r);if(i.length)if(void 0===s||s.length!==i.length)t.renderer.state.uniformLocations.set(r,i.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let r=0,i=t.length;r<i;r++)if(t[r]!==e[r])return!1;return!0}(s,i))return;s.set?s.set(i):function(t,e){for(let r=0,i=t.length;r<i;r++)t[r]=e[r]}(s,i),t.renderer.state.uniformLocations.set(r,s)}else{if(s===i)return;t.renderer.state.uniformLocations.set(r,i)}switch(e){case 5126:return i.length?t.uniform1fv(r,i):t.uniform1f(r,i);case 35664:return t.uniform2fv(r,i);case 35665:return t.uniform3fv(r,i);case 35666:return t.uniform4fv(r,i);case 35670:case 5124:case 35678:case 35680:return i.length?t.uniform1iv(r,i):t.uniform1i(r,i);case 35671:case 35667:return t.uniform2iv(r,i);case 35672:case 35668:return t.uniform3iv(r,i);case 35673:case 35669:return t.uniform4iv(r,i);case 35674:return t.uniformMatrix2fv(r,!1,i);case 35675:return t.uniformMatrix3fv(r,!1,i);case 35676:return t.uniformMatrix4fv(r,!1,i)}}function l(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let o=0;function g(t){o>100||(i.warn(t),o++,o>100&&i.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Texture.js":(t,e,r)=>{r.r(e),r.d(e,{Texture:()=>n});const i=new Uint8Array(4);function s(t){return 0==(t&t-1)}let a=1;class n{constructor(t,{image:e,target:r=t.TEXTURE_2D,type:i=t.UNSIGNED_BYTE,format:s=t.RGBA,internalFormat:n=s,wrapS:h=t.CLAMP_TO_EDGE,wrapT:l=t.CLAMP_TO_EDGE,generateMipmaps:o=!0,minFilter:g=(o?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:u=t.LINEAR,premultiplyAlpha:m=!1,unpackAlignment:c=4,flipY:d=r==t.TEXTURE_2D,anisotropy:p=0,level:f=0,width:E,height:A=E}={}){this.gl=t,this.id=a++,this.image=e,this.target=r,this.type=i,this.format=s,this.internalFormat=n,this.minFilter=g,this.magFilter=u,this.wrapS=h,this.wrapT=l,this.generateMipmaps=o,this.premultiplyAlpha=m,this.unpackAlignment=c,this.flipY=d,this.anisotropy=Math.min(p,this.gl.renderer.parameters.maxAnisotropy),this.level=f,this.width=E,this.height=A,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||s(this.image.width)&&s(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,i);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,i);this.store.image=this.image}}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,r)=>{r.r(e),r.d(e,{Mat3:()=>s});var i=r("./node_modules/ogl/src/math/functions/Mat3Func.js");class s extends Array{constructor(t=1,e=0,r=0,i=0,s=1,a=0,n=0,h=0,l=1){return super(t,e,r,i,s,a,n,h,l),this}set(t,e,r,s,a,n,h,l,o){return t.length?this.copy(t):(i.set(this,t,e,r,s,a,n,h,l,o),this)}translate(t,e=this){return i.translate(this,e,t),this}rotate(t,e=this){return i.rotate(this,e,t),this}scale(t,e=this){return i.scale(this,e,t),this}multiply(t,e){return e?i.multiply(this,t,e):i.multiply(this,this,t),this}identity(){return i.identity(this),this}copy(t){return i.copy(this,t),this}fromMatrix4(t){return i.fromMat4(this,t),this}fromQuaternion(t){return i.fromQuat(this,t),this}fromBasis(t,e,r){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],r[0],r[1],r[2]),this}inverse(t=this){return i.invert(this,t),this}getNormalMatrix(t){return i.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,r)=>{r.r(e),r.d(e,{add:()=>E,copy:()=>a,determinant:()=>g,fromMat4:()=>i,fromQuat:()=>s,identity:()=>h,invert:()=>o,multiply:()=>u,multiplyScalar:()=>M,normalFromMat4:()=>p,projection:()=>f,rotate:()=>c,scale:()=>d,set:()=>n,subtract:()=>A,translate:()=>m,transpose:()=>l});function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function s(t,e){let r=e[0],i=e[1],s=e[2],a=e[3],n=r+r,h=i+i,l=s+s,o=r*n,g=i*n,u=i*h,m=s*n,c=s*h,d=s*l,p=a*n,f=a*h,E=a*l;return t[0]=1-u-d,t[3]=g-E,t[6]=m+f,t[1]=g+E,t[4]=1-o-d,t[7]=c-p,t[2]=m-f,t[5]=c+p,t[8]=1-o-u,t}function a(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function n(t,e,r,i,s,a,n,h,l,o){return t[0]=e,t[1]=r,t[2]=i,t[3]=s,t[4]=a,t[5]=n,t[6]=h,t[7]=l,t[8]=o,t}function h(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function l(t,e){if(t===e){let r=e[1],i=e[2],s=e[5];t[1]=e[3],t[2]=e[6],t[3]=r,t[5]=e[7],t[6]=i,t[7]=s}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function o(t,e){let r=e[0],i=e[1],s=e[2],a=e[3],n=e[4],h=e[5],l=e[6],o=e[7],g=e[8],u=g*n-h*o,m=-g*a+h*l,c=o*a-n*l,d=r*u+i*m+s*c;return d?(d=1/d,t[0]=u*d,t[1]=(-g*i+s*o)*d,t[2]=(h*i-s*n)*d,t[3]=m*d,t[4]=(g*r-s*l)*d,t[5]=(-h*r+s*a)*d,t[6]=c*d,t[7]=(-o*r+i*l)*d,t[8]=(n*r-i*a)*d,t):null}function g(t){let e=t[0],r=t[1],i=t[2],s=t[3],a=t[4],n=t[5],h=t[6],l=t[7],o=t[8];return e*(o*a-n*l)+r*(-o*s+n*h)+i*(l*s-a*h)}function u(t,e,r){let i=e[0],s=e[1],a=e[2],n=e[3],h=e[4],l=e[5],o=e[6],g=e[7],u=e[8],m=r[0],c=r[1],d=r[2],p=r[3],f=r[4],E=r[5],A=r[6],M=r[7],x=r[8];return t[0]=m*i+c*n+d*o,t[1]=m*s+c*h+d*g,t[2]=m*a+c*l+d*u,t[3]=p*i+f*n+E*o,t[4]=p*s+f*h+E*g,t[5]=p*a+f*l+E*u,t[6]=A*i+M*n+x*o,t[7]=A*s+M*h+x*g,t[8]=A*a+M*l+x*u,t}function m(t,e,r){let i=e[0],s=e[1],a=e[2],n=e[3],h=e[4],l=e[5],o=e[6],g=e[7],u=e[8],m=r[0],c=r[1];return t[0]=i,t[1]=s,t[2]=a,t[3]=n,t[4]=h,t[5]=l,t[6]=m*i+c*n+o,t[7]=m*s+c*h+g,t[8]=m*a+c*l+u,t}function c(t,e,r){let i=e[0],s=e[1],a=e[2],n=e[3],h=e[4],l=e[5],o=e[6],g=e[7],u=e[8],m=Math.sin(r),c=Math.cos(r);return t[0]=c*i+m*n,t[1]=c*s+m*h,t[2]=c*a+m*l,t[3]=c*n-m*i,t[4]=c*h-m*s,t[5]=c*l-m*a,t[6]=o,t[7]=g,t[8]=u,t}function d(t,e,r){let i=r[0],s=r[1];return t[0]=i*e[0],t[1]=i*e[1],t[2]=i*e[2],t[3]=s*e[3],t[4]=s*e[4],t[5]=s*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function p(t,e){let r=e[0],i=e[1],s=e[2],a=e[3],n=e[4],h=e[5],l=e[6],o=e[7],g=e[8],u=e[9],m=e[10],c=e[11],d=e[12],p=e[13],f=e[14],E=e[15],A=r*h-i*n,M=r*l-s*n,x=r*o-a*n,T=i*l-s*h,_=i*o-a*h,F=s*o-a*l,S=g*p-u*d,v=g*f-m*d,w=g*E-c*d,P=u*f-m*p,y=u*E-c*p,b=m*E-c*f,R=A*b-M*y+x*P+T*w-_*v+F*S;return R?(R=1/R,t[0]=(h*b-l*y+o*P)*R,t[1]=(l*w-n*b-o*v)*R,t[2]=(n*y-h*w+o*S)*R,t[3]=(s*y-i*b-a*P)*R,t[4]=(r*b-s*w+a*v)*R,t[5]=(i*w-r*y-a*S)*R,t[6]=(p*F-f*_+E*T)*R,t[7]=(f*x-d*F-E*M)*R,t[8]=(d*_-p*x+E*A)*R,t):null}function f(t,e,r){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/r,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function E(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t}function A(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t}function M(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t}}},(function(t){t.h=()=>"40d9fe636839ed785a3e"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,