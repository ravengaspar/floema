/*! For license information please see main.8dc7610b415d7456c76c.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateimmersive_website("main",{"./app/components/Canvas/Media.js":(t,i,e)=>{e.r(i),e.d(i,{default:()=>l});var s=e("./node_modules/ogl/src/core/Texture.js"),h=e("./node_modules/ogl/src/core/Program.js"),a=e("./app/shaders/plane-fragment.glsl"),r=e("./app/shaders/plane-vertex.glsl");const l=class{constructor({element:t}){this.element=t}createTexture(){new s.Texture}createProgram(){this.Program=new h.Program({fragment:a.default,vertex:r.default,uniforms:{}})}createMesh(){}}},"./node_modules/ogl/src/core/Texture.js":(t,i,e)=>{e.r(i),e.d(i,{Texture:()=>r});const s=new Uint8Array(4);function h(t){return 0==(t&t-1)}let a=1;class r{constructor(t,{image:i,target:e=t.TEXTURE_2D,type:s=t.UNSIGNED_BYTE,format:h=t.RGBA,internalFormat:r=h,wrapS:l=t.CLAMP_TO_EDGE,wrapT:g=t.CLAMP_TO_EDGE,generateMipmaps:n=!0,minFilter:m=(n?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:p=t.LINEAR,premultiplyAlpha:o=!1,unpackAlignment:E=4,flipY:T=e==t.TEXTURE_2D,anisotropy:A=0,level:_=0,width:u,height:d=u}={}){this.gl=t,this.id=a++,this.image=i,this.target=e,this.type=s,this.format=h,this.internalFormat=r,this.minFilter=m,this.magFilter=p,this.wrapS=l,this.wrapT=g,this.generateMipmaps=n,this.premultiplyAlpha=o,this.unpackAlignment=E,this.flipY=T,this.anisotropy=Math.min(A,this.gl.renderer.parameters.maxAnisotropy),this.level=_,this.width=u,this.height=d,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const i=!(this.image===this.store.image&&!this.needsUpdate);if((i||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),i){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||h(this.image.width)&&h(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);this.store.image=this.image}}}}},(function(t){t.h=()=>"1c723ec4ae3c94674618"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,