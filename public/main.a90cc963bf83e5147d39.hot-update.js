/*! For license information please see main.a90cc963bf83e5147d39.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateimmersive_website("main",{"./app/components/Canvas/index.js":(r,e,t)=>{t.r(e),t.d(e,{default:()=>u});var i=t("./node_modules/ogl/src/core/Renderer.js"),n=t("./node_modules/ogl/src/core/Camera.js"),s=t("./node_modules/ogl/src/extras/Box.js"),o=t("./node_modules/ogl/src/core/Program.js"),a=t("./node_modules/ogl/src/core/Mesh.js"),l=t("./node_modules/ogl/src/core/Transform.js");class u{constructor(){this.createRenderer()}createRenderer(){this.renderer=new i.Renderer,this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new n.Camera(this.gl),this.camera.position.z=5}createCube(){this.geometry=new s.Box(this.gl),this.program=new o.Program(gl,{vertex:"\n        attribute vec3 position;\n\n        uniform mat4 modelViewMatrix;\n        uniform mat4 projectionMatrix;\n\n        void main() {\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n        }\n      ",fragment:"\n        void main() {\n            gl_FragColor = vec4(1.0);\n        }\n      "}),this.mesh=new a.Mesh}createScene(){this.scene=new l.Transform}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight})}}},"./node_modules/ogl/src/core/Mesh.js":(r,e,t)=>{t.r(e),t.d(e,{Mesh:()=>l});var i=t("./node_modules/ogl/src/core/Transform.js"),n=t("./node_modules/ogl/src/math/Mat3.js"),s=t("./node_modules/ogl/src/math/Mat4.js"),o=t("./node_modules/console-browserify/index.js");let a=0;class l extends i.Transform{constructor(r,{geometry:e,program:t,mode:i=r.TRIANGLES,frustumCulled:l=!0,renderOrder:u=0}={}){super(),r.canvas||o.error("gl not passed as first argument to Mesh"),this.gl=r,this.id=a++,this.geometry=e,this.program=t,this.mode=i,this.frustumCulled=l,this.renderOrder=u,this.modelViewMatrix=new s.Mat4,this.normalMatrix=new n.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(r){return this.beforeRenderCallbacks.push(r),this}onAfterRender(r){return this.afterRenderCallbacks.push(r),this}draw({camera:r}={}){this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:r}))),r&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=r.projectionMatrix,this.program.uniforms.cameraPosition.value=r.worldPosition,this.program.uniforms.viewMatrix.value=r.viewMatrix,this.modelViewMatrix.multiply(r.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:r})))}}},"./node_modules/ogl/src/math/Mat3.js":(r,e,t)=>{t.r(e),t.d(e,{Mat3:()=>n});var i=t("./node_modules/ogl/src/math/functions/Mat3Func.js");class n extends Array{constructor(r=1,e=0,t=0,i=0,n=1,s=0,o=0,a=0,l=1){return super(r,e,t,i,n,s,o,a,l),this}set(r,e,t,n,s,o,a,l,u){return r.length?this.copy(r):(i.set(this,r,e,t,n,s,o,a,l,u),this)}translate(r,e=this){return i.translate(this,e,r),this}rotate(r,e=this){return i.rotate(this,e,r),this}scale(r,e=this){return i.scale(this,e,r),this}multiply(r,e){return e?i.multiply(this,r,e):i.multiply(this,this,r),this}identity(){return i.identity(this),this}copy(r){return i.copy(this,r),this}fromMatrix4(r){return i.fromMat4(this,r),this}fromQuaternion(r){return i.fromQuat(this,r),this}fromBasis(r,e,t){return this.set(r[0],r[1],r[2],e[0],e[1],e[2],t[0],t[1],t[2]),this}inverse(r=this){return i.invert(this,r),this}getNormalMatrix(r){return i.normalFromMat4(this,r),this}}},"./node_modules/ogl/src/math/functions/Mat3Func.js":(r,e,t)=>{t.r(e),t.d(e,{add:()=>M,copy:()=>s,determinant:()=>m,fromMat4:()=>i,fromQuat:()=>n,identity:()=>a,invert:()=>u,multiply:()=>h,multiplyScalar:()=>w,normalFromMat4:()=>g,projection:()=>p,rotate:()=>d,scale:()=>f,set:()=>o,subtract:()=>x,translate:()=>c,transpose:()=>l});function i(r,e){return r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[4],r[4]=e[5],r[5]=e[6],r[6]=e[8],r[7]=e[9],r[8]=e[10],r}function n(r,e){let t=e[0],i=e[1],n=e[2],s=e[3],o=t+t,a=i+i,l=n+n,u=t*o,m=i*o,h=i*a,c=n*o,d=n*a,f=n*l,g=s*o,p=s*a,M=s*l;return r[0]=1-h-f,r[3]=m-M,r[6]=c+p,r[1]=m+M,r[4]=1-u-f,r[7]=d-g,r[2]=c-p,r[5]=d+g,r[8]=1-u-h,r}function s(r,e){return r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[3],r[4]=e[4],r[5]=e[5],r[6]=e[6],r[7]=e[7],r[8]=e[8],r}function o(r,e,t,i,n,s,o,a,l,u){return r[0]=e,r[1]=t,r[2]=i,r[3]=n,r[4]=s,r[5]=o,r[6]=a,r[7]=l,r[8]=u,r}function a(r){return r[0]=1,r[1]=0,r[2]=0,r[3]=0,r[4]=1,r[5]=0,r[6]=0,r[7]=0,r[8]=1,r}function l(r,e){if(r===e){let t=e[1],i=e[2],n=e[5];r[1]=e[3],r[2]=e[6],r[3]=t,r[5]=e[7],r[6]=i,r[7]=n}else r[0]=e[0],r[1]=e[3],r[2]=e[6],r[3]=e[1],r[4]=e[4],r[5]=e[7],r[6]=e[2],r[7]=e[5],r[8]=e[8];return r}function u(r,e){let t=e[0],i=e[1],n=e[2],s=e[3],o=e[4],a=e[5],l=e[6],u=e[7],m=e[8],h=m*o-a*u,c=-m*s+a*l,d=u*s-o*l,f=t*h+i*c+n*d;return f?(f=1/f,r[0]=h*f,r[1]=(-m*i+n*u)*f,r[2]=(a*i-n*o)*f,r[3]=c*f,r[4]=(m*t-n*l)*f,r[5]=(-a*t+n*s)*f,r[6]=d*f,r[7]=(-u*t+i*l)*f,r[8]=(o*t-i*s)*f,r):null}function m(r){let e=r[0],t=r[1],i=r[2],n=r[3],s=r[4],o=r[5],a=r[6],l=r[7],u=r[8];return e*(u*s-o*l)+t*(-u*n+o*a)+i*(l*n-s*a)}function h(r,e,t){let i=e[0],n=e[1],s=e[2],o=e[3],a=e[4],l=e[5],u=e[6],m=e[7],h=e[8],c=t[0],d=t[1],f=t[2],g=t[3],p=t[4],M=t[5],x=t[6],w=t[7],v=t[8];return r[0]=c*i+d*o+f*u,r[1]=c*n+d*a+f*m,r[2]=c*s+d*l+f*h,r[3]=g*i+p*o+M*u,r[4]=g*n+p*a+M*m,r[5]=g*s+p*l+M*h,r[6]=x*i+w*o+v*u,r[7]=x*n+w*a+v*m,r[8]=x*s+w*l+v*h,r}function c(r,e,t){let i=e[0],n=e[1],s=e[2],o=e[3],a=e[4],l=e[5],u=e[6],m=e[7],h=e[8],c=t[0],d=t[1];return r[0]=i,r[1]=n,r[2]=s,r[3]=o,r[4]=a,r[5]=l,r[6]=c*i+d*o+u,r[7]=c*n+d*a+m,r[8]=c*s+d*l+h,r}function d(r,e,t){let i=e[0],n=e[1],s=e[2],o=e[3],a=e[4],l=e[5],u=e[6],m=e[7],h=e[8],c=Math.sin(t),d=Math.cos(t);return r[0]=d*i+c*o,r[1]=d*n+c*a,r[2]=d*s+c*l,r[3]=d*o-c*i,r[4]=d*a-c*n,r[5]=d*l-c*s,r[6]=u,r[7]=m,r[8]=h,r}function f(r,e,t){let i=t[0],n=t[1];return r[0]=i*e[0],r[1]=i*e[1],r[2]=i*e[2],r[3]=n*e[3],r[4]=n*e[4],r[5]=n*e[5],r[6]=e[6],r[7]=e[7],r[8]=e[8],r}function g(r,e){let t=e[0],i=e[1],n=e[2],s=e[3],o=e[4],a=e[5],l=e[6],u=e[7],m=e[8],h=e[9],c=e[10],d=e[11],f=e[12],g=e[13],p=e[14],M=e[15],x=t*a-i*o,w=t*l-n*o,v=t*u-s*o,j=i*l-n*a,y=i*u-s*a,b=n*u-s*l,_=m*g-h*f,C=m*p-c*f,R=m*M-d*f,V=h*p-c*g,k=h*M-d*g,F=c*M-d*p,P=x*F-w*k+v*V+j*R-y*C+b*_;return P?(P=1/P,r[0]=(a*F-l*k+u*V)*P,r[1]=(l*R-o*F-u*C)*P,r[2]=(o*k-a*R+u*_)*P,r[3]=(n*k-i*F-s*V)*P,r[4]=(t*F-n*R+s*C)*P,r[5]=(i*R-t*k-s*_)*P,r[6]=(g*b-p*y+M*j)*P,r[7]=(p*v-f*b-M*w)*P,r[8]=(f*y-g*v+M*x)*P,r):null}function p(r,e,t){return r[0]=2/e,r[1]=0,r[2]=0,r[3]=0,r[4]=-2/t,r[5]=0,r[6]=-1,r[7]=1,r[8]=1,r}function M(r,e,t){return r[0]=e[0]+t[0],r[1]=e[1]+t[1],r[2]=e[2]+t[2],r[3]=e[3]+t[3],r[4]=e[4]+t[4],r[5]=e[5]+t[5],r[6]=e[6]+t[6],r[7]=e[7]+t[7],r[8]=e[8]+t[8],r}function x(r,e,t){return r[0]=e[0]-t[0],r[1]=e[1]-t[1],r[2]=e[2]-t[2],r[3]=e[3]-t[3],r[4]=e[4]-t[4],r[5]=e[5]-t[5],r[6]=e[6]-t[6],r[7]=e[7]-t[7],r[8]=e[8]-t[8],r}function w(r,e,t){return r[0]=e[0]*t,r[1]=e[1]*t,r[2]=e[2]*t,r[3]=e[3]*t,r[4]=e[4]*t,r[5]=e[5]*t,r[6]=e[6]*t,r[7]=e[7]*t,r[8]=e[8]*t,r}}},(function(r){r.h=()=>"d02658e9f77941d90a8f"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,