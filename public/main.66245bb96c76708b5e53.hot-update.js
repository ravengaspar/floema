/*! For license information please see main.66245bb96c76708b5e53.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateimmersive_website("main",{"./app/components/Canvas/Media.js":(e,t,r)=>{r.r(t),r.d(t,{default:()=>n});var s=r("./node_modules/ogl/src/core/Program.js");r("./app/shaders/plane-fragment.glsl"),r("./app/shaders/plane-vertex.glsl");const n=class{constructor({element:e}){this.element=e}createTexture(){}createProgram(){this.Program=new s.Program}createMesh(){}}},"./node_modules/ogl/src/core/Program.js":(e,t,r)=>{r.r(t),r.d(t,{Program:()=>a});var s=r("./node_modules/console-browserify/index.js");let n=1;const i={};class a{constructor(e,{vertex:t,fragment:r,uniforms:i={},transparent:a=!1,cullFace:o=e.BACK,frontFace:l=e.CCW,depthTest:c=!0,depthWrite:u=!0,depthFunc:g=e.LESS}={}){e.canvas||s.error("gl not passed as fist argument to Program"),this.gl=e,this.uniforms=i,this.id=n++,t||s.warn("vertex shader not supplied"),r||s.warn("fragment shader not supplied"),this.transparent=a,this.cullFace=o,this.frontFace=l,this.depthTest=c,this.depthWrite=u,this.depthFunc=g,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const d=e.createShader(e.VERTEX_SHADER);e.shaderSource(d,t),e.compileShader(d),""!==e.getShaderInfoLog(d)&&s.warn(`${e.getShaderInfoLog(d)}\nVertex Shader\n${h(t)}`);const m=e.createShader(e.FRAGMENT_SHADER);if(e.shaderSource(m,r),e.compileShader(m),""!==e.getShaderInfoLog(m)&&s.warn(`${e.getShaderInfoLog(m)}\nFragment Shader\n${h(r)}`),this.program=e.createProgram(),e.attachShader(this.program,d),e.attachShader(this.program,m),e.linkProgram(this.program),!e.getProgramParameter(this.program,e.LINK_STATUS))return s.warn(e.getProgramInfoLog(this.program));e.deleteShader(d),e.deleteShader(m),this.uniformLocations=new Map;let f=e.getProgramParameter(this.program,e.ACTIVE_UNIFORMS);for(let t=0;t<f;t++){let r=e.getActiveUniform(this.program,t);this.uniformLocations.set(r,e.getUniformLocation(this.program,r.name));const s=r.name.match(/(\w+)/g);r.uniformName=s[0],3===s.length?(r.isStructArray=!0,r.structIndex=Number(s[1]),r.structProperty=s[2]):2===s.length&&isNaN(Number(s[1]))&&(r.isStruct=!0,r.structProperty=s[1])}this.attributeLocations=new Map;const p=[],F=e.getProgramParameter(this.program,e.ACTIVE_ATTRIBUTES);for(let t=0;t<F;t++){const r=e.getActiveAttrib(this.program,t),s=e.getAttribLocation(this.program,r.name);-1!==s&&(p[s]=r.name,this.attributeLocations.set(r,s))}this.attributeOrder=p.join("")}setBlendFunc(e,t,r,s){this.blendFunc.src=e,this.blendFunc.dst=t,this.blendFunc.srcAlpha=r,this.blendFunc.dstAlpha=s,e&&(this.transparent=!0)}setBlendEquation(e,t){this.blendEquation.modeRGB=e,this.blendEquation.modeAlpha=t}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:e=!1}={}){let t=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((e,r)=>{let s=r.uniformName,n=this.uniforms[s];if(r.isStruct&&(n=n[r.structProperty],s+=`.${r.structProperty}`),r.isStructArray&&(n=n[r.structIndex][r.structProperty],s+=`[${r.structIndex}].${r.structProperty}`),!n)return c(`Active uniform ${s} has not been supplied`);if(n&&void 0===n.value)return c(`${s} uniform is missing a value parameter`);if(n.value.texture)return t+=1,n.value.update(t),o(this.gl,r.type,e,t);if(n.value.length&&n.value[0].texture){const s=[];return n.value.forEach((e=>{t+=1,e.update(t),s.push(t)})),o(this.gl,r.type,e,s)}o(this.gl,r.type,e,n.value)})),this.applyState(),e&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function o(e,t,r,s){s=s.length?function(e){const t=e.length,r=e[0].length;if(void 0===r)return e;const s=t*r;let n=i[s];n||(i[s]=n=new Float32Array(s));for(let s=0;s<t;s++)n.set(e[s],s*r);return n}(s):s;const n=e.renderer.state.uniformLocations.get(r);if(s.length)if(void 0===n||n.length!==s.length)e.renderer.state.uniformLocations.set(r,s.slice(0));else{if(function(e,t){if(e.length!==t.length)return!1;for(let r=0,s=e.length;r<s;r++)if(e[r]!==t[r])return!1;return!0}(n,s))return;n.set?n.set(s):function(e,t){for(let r=0,s=e.length;r<s;r++)e[r]=t[r]}(n,s),e.renderer.state.uniformLocations.set(r,n)}else{if(n===s)return;e.renderer.state.uniformLocations.set(r,s)}switch(t){case 5126:return s.length?e.uniform1fv(r,s):e.uniform1f(r,s);case 35664:return e.uniform2fv(r,s);case 35665:return e.uniform3fv(r,s);case 35666:return e.uniform4fv(r,s);case 35670:case 5124:case 35678:case 35680:return s.length?e.uniform1iv(r,s):e.uniform1i(r,s);case 35671:case 35667:return e.uniform2iv(r,s);case 35672:case 35668:return e.uniform3iv(r,s);case 35673:case 35669:return e.uniform4iv(r,s);case 35674:return e.uniformMatrix2fv(r,!1,s);case 35675:return e.uniformMatrix3fv(r,!1,s);case 35676:return e.uniformMatrix4fv(r,!1,s)}}function h(e){let t=e.split("\n");for(let e=0;e<t.length;e++)t[e]=e+1+": "+t[e];return t.join("\n")}let l=0;function c(e){l>100||(s.warn(e),l++,l>100&&s.warn("More than 100 program warnings - stopping logs."))}}},(function(e){e.h=()=>"5031c614812ee96904ef"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,