/*! For license information please see main.7ec5aba747e0f68d9102.hot-update.js.LICENSE.txt */
self.webpackHotUpdatefloema("main",{"./node_modules/@nodelib/fs.scandir/out/adapters/fs.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createFileSystemAdapter=t.FILE_SYSTEM_ADAPTER=void 0;const n=r("?3b09");t.FILE_SYSTEM_ADAPTER={lstat:n.lstat,stat:n.stat,lstatSync:n.lstatSync,statSync:n.statSync,readdir:n.readdir,readdirSync:n.readdirSync},t.createFileSystemAdapter=function(e){return void 0===e?t.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},t.FILE_SYSTEM_ADAPTER),e)}},"./node_modules/@nodelib/fs.scandir/out/constants.js":(e,t,r)=>{"use strict";var n=r("./node_modules/process/browser.js");Object.defineProperty(t,"__esModule",{value:!0}),t.IS_SUPPORT_READDIR_WITH_FILE_TYPES=void 0;const i=n.versions.node.split(".");if(void 0===i[0]||void 0===i[1])throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${n.versions.node}`);const o=Number.parseInt(i[0],10),s=Number.parseInt(i[1],10),a=o>10,u=10===o&&s>=10;t.IS_SUPPORT_READDIR_WITH_FILE_TYPES=a||u},"./node_modules/@nodelib/fs.scandir/out/index.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Settings=t.scandirSync=t.scandir=void 0;const n=r("./node_modules/@nodelib/fs.scandir/out/providers/async.js"),i=r("./node_modules/@nodelib/fs.scandir/out/providers/sync.js"),o=r("./node_modules/@nodelib/fs.scandir/out/settings.js");function s(e={}){return e instanceof o.default?e:new o.default(e)}t.Settings=o.default,t.scandir=function(e,t,r){"function"!=typeof t?n.read(e,s(t),r):n.read(e,s(),t)},t.scandirSync=function(e,t){const r=s(t);return i.read(e,r)}},"./node_modules/@nodelib/fs.scandir/out/providers/async.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.readdir=t.readdirWithFileTypes=t.read=void 0;const n=r("./node_modules/@nodelib/fs.stat/out/index.js"),i=r("./node_modules/run-parallel/index.js"),o=r("./node_modules/@nodelib/fs.scandir/out/constants.js"),s=r("./node_modules/@nodelib/fs.scandir/out/utils/index.js"),a=r("./node_modules/@nodelib/fs.scandir/out/providers/common.js");function u(e,t,r){t.fs.readdir(e,{withFileTypes:!0},((n,o)=>{if(null!==n)return void d(r,n);const u=o.map((r=>({dirent:r,name:r.name,path:a.joinPathSegments(e,r.name,t.pathSegmentSeparator)})));if(!t.followSymbolicLinks)return void c(r,u);const l=u.map((e=>function(e,t){return r=>{e.dirent.isSymbolicLink()?t.fs.stat(e.path,((n,i)=>{if(null!==n)return t.throwErrorOnBrokenSymbolicLink?void r(n):void r(null,e);e.dirent=s.fs.createDirentFromStats(e.name,i),r(null,e)})):r(null,e)}}(e,t)));i(l,((e,t)=>{null===e?c(r,t):d(r,e)}))}))}function l(e,t,r){t.fs.readdir(e,((o,u)=>{if(null!==o)return void d(r,o);const l=u.map((r=>{const i=a.joinPathSegments(e,r,t.pathSegmentSeparator);return e=>{n.stat(i,t.fsStatSettings,((n,o)=>{if(null!==n)return void e(n);const a={name:r,path:i,dirent:s.fs.createDirentFromStats(r,o)};t.stats&&(a.stats=o),e(null,a)}))}}));i(l,((e,t)=>{null===e?c(r,t):d(r,e)}))}))}function d(e,t){e(t)}function c(e,t){e(null,t)}t.read=function(e,t,r){t.stats||!o.IS_SUPPORT_READDIR_WITH_FILE_TYPES?l(e,t,r):u(e,t,r)},t.readdirWithFileTypes=u,t.readdir=l},"./node_modules/@nodelib/fs.scandir/out/providers/common.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.joinPathSegments=void 0,t.joinPathSegments=function(e,t,r){return e.endsWith(r)?e+t:e+r+t}},"./node_modules/@nodelib/fs.scandir/out/providers/sync.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.readdir=t.readdirWithFileTypes=t.read=void 0;const n=r("./node_modules/@nodelib/fs.stat/out/index.js"),i=r("./node_modules/@nodelib/fs.scandir/out/constants.js"),o=r("./node_modules/@nodelib/fs.scandir/out/utils/index.js"),s=r("./node_modules/@nodelib/fs.scandir/out/providers/common.js");function a(e,t){return t.fs.readdirSync(e,{withFileTypes:!0}).map((r=>{const n={dirent:r,name:r.name,path:s.joinPathSegments(e,r.name,t.pathSegmentSeparator)};if(n.dirent.isSymbolicLink()&&t.followSymbolicLinks)try{const e=t.fs.statSync(n.path);n.dirent=o.fs.createDirentFromStats(n.name,e)}catch(e){if(t.throwErrorOnBrokenSymbolicLink)throw e}return n}))}function u(e,t){return t.fs.readdirSync(e).map((r=>{const i=s.joinPathSegments(e,r,t.pathSegmentSeparator),a=n.statSync(i,t.fsStatSettings),u={name:r,path:i,dirent:o.fs.createDirentFromStats(r,a)};return t.stats&&(u.stats=a),u}))}t.read=function(e,t){return!t.stats&&i.IS_SUPPORT_READDIR_WITH_FILE_TYPES?a(e,t):u(e,t)},t.readdirWithFileTypes=a,t.readdir=u},"./node_modules/@nodelib/fs.scandir/out/settings.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/path-browserify/index.js"),i=r("./node_modules/@nodelib/fs.stat/out/index.js"),o=r("./node_modules/@nodelib/fs.scandir/out/adapters/fs.js");t.default=class{constructor(e={}){this._options=e,this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!1),this.fs=o.createFileSystemAdapter(this._options.fs),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,n.sep),this.stats=this._getValue(this._options.stats,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0),this.fsStatSettings=new i.Settings({followSymbolicLink:this.followSymbolicLinks,fs:this.fs,throwErrorOnBrokenSymbolicLink:this.throwErrorOnBrokenSymbolicLink})}_getValue(e,t){return null!=e?e:t}}},"./node_modules/@nodelib/fs.scandir/out/utils/fs.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createDirentFromStats=void 0;class r{constructor(e,t){this.name=e,this.isBlockDevice=t.isBlockDevice.bind(t),this.isCharacterDevice=t.isCharacterDevice.bind(t),this.isDirectory=t.isDirectory.bind(t),this.isFIFO=t.isFIFO.bind(t),this.isFile=t.isFile.bind(t),this.isSocket=t.isSocket.bind(t),this.isSymbolicLink=t.isSymbolicLink.bind(t)}}t.createDirentFromStats=function(e,t){return new r(e,t)}},"./node_modules/@nodelib/fs.scandir/out/utils/index.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fs=void 0;const n=r("./node_modules/@nodelib/fs.scandir/out/utils/fs.js");t.fs=n},"./node_modules/@nodelib/fs.stat/out/adapters/fs.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createFileSystemAdapter=t.FILE_SYSTEM_ADAPTER=void 0;const n=r("?dc05");t.FILE_SYSTEM_ADAPTER={lstat:n.lstat,stat:n.stat,lstatSync:n.lstatSync,statSync:n.statSync},t.createFileSystemAdapter=function(e){return void 0===e?t.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},t.FILE_SYSTEM_ADAPTER),e)}},"./node_modules/@nodelib/fs.stat/out/index.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.statSync=t.stat=t.Settings=void 0;const n=r("./node_modules/@nodelib/fs.stat/out/providers/async.js"),i=r("./node_modules/@nodelib/fs.stat/out/providers/sync.js"),o=r("./node_modules/@nodelib/fs.stat/out/settings.js");function s(e={}){return e instanceof o.default?e:new o.default(e)}t.Settings=o.default,t.stat=function(e,t,r){"function"!=typeof t?n.read(e,s(t),r):n.read(e,s(),t)},t.statSync=function(e,t){const r=s(t);return i.read(e,r)}},"./node_modules/@nodelib/fs.stat/out/providers/async.js":(e,t)=>{"use strict";function r(e,t){e(t)}function n(e,t){e(null,t)}Object.defineProperty(t,"__esModule",{value:!0}),t.read=void 0,t.read=function(e,t,i){t.fs.lstat(e,((o,s)=>{null===o?s.isSymbolicLink()&&t.followSymbolicLink?t.fs.stat(e,((e,o)=>{if(null!==e)return t.throwErrorOnBrokenSymbolicLink?void r(i,e):void n(i,s);t.markSymbolicLink&&(o.isSymbolicLink=()=>!0),n(i,o)})):n(i,s):r(i,o)}))}},"./node_modules/@nodelib/fs.stat/out/providers/sync.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.read=void 0,t.read=function(e,t){const r=t.fs.lstatSync(e);if(!r.isSymbolicLink()||!t.followSymbolicLink)return r;try{const r=t.fs.statSync(e);return t.markSymbolicLink&&(r.isSymbolicLink=()=>!0),r}catch(e){if(!t.throwErrorOnBrokenSymbolicLink)return r;throw e}}},"./node_modules/@nodelib/fs.stat/out/settings.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/@nodelib/fs.stat/out/adapters/fs.js");t.default=class{constructor(e={}){this._options=e,this.followSymbolicLink=this._getValue(this._options.followSymbolicLink,!0),this.fs=n.createFileSystemAdapter(this._options.fs),this.markSymbolicLink=this._getValue(this._options.markSymbolicLink,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0)}_getValue(e,t){return null!=e?e:t}}},"./node_modules/@nodelib/fs.walk/out/index.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Settings=t.walkStream=t.walkSync=t.walk=void 0;const n=r("./node_modules/@nodelib/fs.walk/out/providers/async.js"),i=r("./node_modules/@nodelib/fs.walk/out/providers/stream.js"),o=r("./node_modules/@nodelib/fs.walk/out/providers/sync.js"),s=r("./node_modules/@nodelib/fs.walk/out/settings.js");function a(e={}){return e instanceof s.default?e:new s.default(e)}t.Settings=s.default,t.walk=function(e,t,r){"function"!=typeof t?new n.default(e,a(t)).read(r):new n.default(e,a()).read(t)},t.walkSync=function(e,t){const r=a(t);return new o.default(e,r).read()},t.walkStream=function(e,t){const r=a(t);return new i.default(e,r).read()}},"./node_modules/@nodelib/fs.walk/out/providers/async.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/@nodelib/fs.walk/out/readers/async.js");t.default=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new n.default(this._root,this._settings),this._storage=[]}read(e){this._reader.onError((t=>{!function(e,t){e(t)}(e,t)})),this._reader.onEntry((e=>{this._storage.push(e)})),this._reader.onEnd((()=>{!function(e,t){e(null,t)}(e,this._storage)})),this._reader.read()}}},"./node_modules/@nodelib/fs.walk/out/providers/stream.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/stream-browserify/index.js"),i=r("./node_modules/@nodelib/fs.walk/out/readers/async.js");t.default=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new i.default(this._root,this._settings),this._stream=new n.Readable({objectMode:!0,read:()=>{},destroy:()=>{this._reader.isDestroyed||this._reader.destroy()}})}read(){return this._reader.onError((e=>{this._stream.emit("error",e)})),this._reader.onEntry((e=>{this._stream.push(e)})),this._reader.onEnd((()=>{this._stream.push(null)})),this._reader.read(),this._stream}}},"./node_modules/@nodelib/fs.walk/out/providers/sync.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/@nodelib/fs.walk/out/readers/sync.js");t.default=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new n.default(this._root,this._settings)}read(){return this._reader.read()}}},"./node_modules/@nodelib/fs.walk/out/readers/async.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/events/events.js"),i=r("./node_modules/@nodelib/fs.scandir/out/index.js"),o=r("./node_modules/fastq/queue.js"),s=r("./node_modules/@nodelib/fs.walk/out/readers/common.js"),a=r("./node_modules/@nodelib/fs.walk/out/readers/reader.js");class u extends a.default{constructor(e,t){super(e,t),this._settings=t,this._scandir=i.scandir,this._emitter=new n.EventEmitter,this._queue=o(this._worker.bind(this),this._settings.concurrency),this._isFatalError=!1,this._isDestroyed=!1,this._queue.drain=()=>{this._isFatalError||this._emitter.emit("end")}}read(){return this._isFatalError=!1,this._isDestroyed=!1,setImmediate((()=>{this._pushToQueue(this._root,this._settings.basePath)})),this._emitter}get isDestroyed(){return this._isDestroyed}destroy(){if(this._isDestroyed)throw new Error("The reader is already destroyed");this._isDestroyed=!0,this._queue.killAndDrain()}onEntry(e){this._emitter.on("entry",e)}onError(e){this._emitter.once("error",e)}onEnd(e){this._emitter.once("end",e)}_pushToQueue(e,t){const r={directory:e,base:t};this._queue.push(r,(e=>{null!==e&&this._handleError(e)}))}_worker(e,t){this._scandir(e.directory,this._settings.fsScandirSettings,((r,n)=>{if(null===r){for(const t of n)this._handleEntry(t,e.base);t(null,void 0)}else t(r,void 0)}))}_handleError(e){!this._isDestroyed&&s.isFatalError(this._settings,e)&&(this._isFatalError=!0,this._isDestroyed=!0,this._emitter.emit("error",e))}_handleEntry(e,t){if(this._isDestroyed||this._isFatalError)return;const r=e.path;void 0!==t&&(e.path=s.joinPathSegments(t,e.name,this._settings.pathSegmentSeparator)),s.isAppliedFilter(this._settings.entryFilter,e)&&this._emitEntry(e),e.dirent.isDirectory()&&s.isAppliedFilter(this._settings.deepFilter,e)&&this._pushToQueue(r,void 0===t?void 0:e.path)}_emitEntry(e){this._emitter.emit("entry",e)}}t.default=u},"./node_modules/@nodelib/fs.walk/out/readers/common.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.joinPathSegments=t.replacePathSegmentSeparator=t.isAppliedFilter=t.isFatalError=void 0,t.isFatalError=function(e,t){return null===e.errorFilter||!e.errorFilter(t)},t.isAppliedFilter=function(e,t){return null===e||e(t)},t.replacePathSegmentSeparator=function(e,t){return e.split(/[/\\]/).join(t)},t.joinPathSegments=function(e,t,r){return""===e?t:e.endsWith(r)?e+t:e+r+t}},"./node_modules/@nodelib/fs.walk/out/readers/reader.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/@nodelib/fs.walk/out/readers/common.js");t.default=class{constructor(e,t){this._root=e,this._settings=t,this._root=n.replacePathSegmentSeparator(e,t.pathSegmentSeparator)}}},"./node_modules/@nodelib/fs.walk/out/readers/sync.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/@nodelib/fs.scandir/out/index.js"),i=r("./node_modules/@nodelib/fs.walk/out/readers/common.js"),o=r("./node_modules/@nodelib/fs.walk/out/readers/reader.js");class s extends o.default{constructor(){super(...arguments),this._scandir=n.scandirSync,this._storage=[],this._queue=new Set}read(){return this._pushToQueue(this._root,this._settings.basePath),this._handleQueue(),this._storage}_pushToQueue(e,t){this._queue.add({directory:e,base:t})}_handleQueue(){for(const e of this._queue.values())this._handleDirectory(e.directory,e.base)}_handleDirectory(e,t){try{const r=this._scandir(e,this._settings.fsScandirSettings);for(const e of r)this._handleEntry(e,t)}catch(e){this._handleError(e)}}_handleError(e){if(i.isFatalError(this._settings,e))throw e}_handleEntry(e,t){const r=e.path;void 0!==t&&(e.path=i.joinPathSegments(t,e.name,this._settings.pathSegmentSeparator)),i.isAppliedFilter(this._settings.entryFilter,e)&&this._pushToStorage(e),e.dirent.isDirectory()&&i.isAppliedFilter(this._settings.deepFilter,e)&&this._pushToQueue(r,void 0===t?void 0:e.path)}_pushToStorage(e){this._storage.push(e)}}t.default=s},"./node_modules/@nodelib/fs.walk/out/settings.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/path-browserify/index.js"),i=r("./node_modules/@nodelib/fs.scandir/out/index.js");t.default=class{constructor(e={}){this._options=e,this.basePath=this._getValue(this._options.basePath,void 0),this.concurrency=this._getValue(this._options.concurrency,Number.POSITIVE_INFINITY),this.deepFilter=this._getValue(this._options.deepFilter,null),this.entryFilter=this._getValue(this._options.entryFilter,null),this.errorFilter=this._getValue(this._options.errorFilter,null),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,n.sep),this.fsScandirSettings=new i.Settings({followSymbolicLinks:this._options.followSymbolicLinks,fs:this._options.fs,pathSegmentSeparator:this._options.pathSegmentSeparator,stats:this._options.stats,throwErrorOnBrokenSymbolicLink:this._options.throwErrorOnBrokenSymbolicLink})}_getValue(e,t){return null!=e?e:t}}},"./node_modules/base64-js/index.js":(e,t)=>{"use strict";t.byteLength=function(e){var t=u(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,o=u(e),s=o[0],a=o[1],l=new i(function(e,t,r){return 3*(t+r)/4-r}(0,s,a)),d=0,c=a>0?s-4:s;for(r=0;r<c;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],l[d++]=t>>16&255,l[d++]=t>>8&255,l[d++]=255&t;2===a&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,l[d++]=255&t);1===a&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,l[d++]=t>>8&255,l[d++]=255&t);return l},t.fromByteArray=function(e){for(var t,n=e.length,i=n%3,o=[],s=16383,a=0,u=n-i;a<u;a+=s)o.push(l(e,a,a+s>u?u:a+s));1===i?(t=e[n-1],o.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],o.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return o.join("")};for(var r=[],n=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,a=o.length;s<a;++s)r[s]=o[s],n[o.charCodeAt(s)]=s;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function l(e,t,n){for(var i,o,s=[],a=t;a<n;a+=3)i=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},"./node_modules/braces/index.js":(e,t,r)=>{"use strict";const n=r("./node_modules/braces/lib/stringify.js"),i=r("./node_modules/braces/lib/compile.js"),o=r("./node_modules/braces/lib/expand.js"),s=r("./node_modules/braces/lib/parse.js"),a=(e,t={})=>{let r=[];if(Array.isArray(e))for(let n of e){let e=a.create(n,t);Array.isArray(e)?r.push(...e):r.push(e)}else r=[].concat(a.create(e,t));return t&&!0===t.expand&&!0===t.nodupes&&(r=[...new Set(r)]),r};a.parse=(e,t={})=>s(e,t),a.stringify=(e,t={})=>n("string"==typeof e?a.parse(e,t):e,t),a.compile=(e,t={})=>("string"==typeof e&&(e=a.parse(e,t)),i(e,t)),a.expand=(e,t={})=>{"string"==typeof e&&(e=a.parse(e,t));let r=o(e,t);return!0===t.noempty&&(r=r.filter(Boolean)),!0===t.nodupes&&(r=[...new Set(r)]),r},a.create=(e,t={})=>""===e||e.length<3?[e]:!0!==t.expand?a.compile(e,t):a.expand(e,t),e.exports=a},"./node_modules/braces/lib/compile.js":(e,t,r)=>{"use strict";const n=r("./node_modules/fill-range/index.js"),i=r("./node_modules/braces/lib/utils.js");e.exports=(e,t={})=>{let r=(e,o={})=>{let s=i.isInvalidBrace(o),a=!0===e.invalid&&!0===t.escapeInvalid,u=!0===s||!0===a,l=!0===t.escapeInvalid?"\\":"",d="";if(!0===e.isOpen)return l+e.value;if(!0===e.isClose)return l+e.value;if("open"===e.type)return u?l+e.value:"(";if("close"===e.type)return u?l+e.value:")";if("comma"===e.type)return"comma"===e.prev.type?"":u?e.value:"|";if(e.value)return e.value;if(e.nodes&&e.ranges>0){let r=i.reduce(e.nodes),o=n(...r,{...t,wrap:!1,toRegex:!0});if(0!==o.length)return r.length>1&&o.length>1?`(${o})`:o}if(e.nodes)for(let t of e.nodes)d+=r(t,e);return d};return r(e)}},"./node_modules/braces/lib/constants.js":e=>{"use strict";e.exports={MAX_LENGTH:65536,CHAR_0:"0",CHAR_9:"9",CHAR_UPPERCASE_A:"A",CHAR_LOWERCASE_A:"a",CHAR_UPPERCASE_Z:"Z",CHAR_LOWERCASE_Z:"z",CHAR_LEFT_PARENTHESES:"(",CHAR_RIGHT_PARENTHESES:")",CHAR_ASTERISK:"*",CHAR_AMPERSAND:"&",CHAR_AT:"@",CHAR_BACKSLASH:"\\",CHAR_BACKTICK:"`",CHAR_CARRIAGE_RETURN:"\r",CHAR_CIRCUMFLEX_ACCENT:"^",CHAR_COLON:":",CHAR_COMMA:",",CHAR_DOLLAR:"$",CHAR_DOT:".",CHAR_DOUBLE_QUOTE:'"',CHAR_EQUAL:"=",CHAR_EXCLAMATION_MARK:"!",CHAR_FORM_FEED:"\f",CHAR_FORWARD_SLASH:"/",CHAR_HASH:"#",CHAR_HYPHEN_MINUS:"-",CHAR_LEFT_ANGLE_BRACKET:"<",CHAR_LEFT_CURLY_BRACE:"{",CHAR_LEFT_SQUARE_BRACKET:"[",CHAR_LINE_FEED:"\n",CHAR_NO_BREAK_SPACE:" ",CHAR_PERCENT:"%",CHAR_PLUS:"+",CHAR_QUESTION_MARK:"?",CHAR_RIGHT_ANGLE_BRACKET:">",CHAR_RIGHT_CURLY_BRACE:"}",CHAR_RIGHT_SQUARE_BRACKET:"]",CHAR_SEMICOLON:";",CHAR_SINGLE_QUOTE:"'",CHAR_SPACE:" ",CHAR_TAB:"\t",CHAR_UNDERSCORE:"_",CHAR_VERTICAL_LINE:"|",CHAR_ZERO_WIDTH_NOBREAK_SPACE:"\ufeff"}},"./node_modules/braces/lib/expand.js":(e,t,r)=>{"use strict";const n=r("./node_modules/fill-range/index.js"),i=r("./node_modules/braces/lib/stringify.js"),o=r("./node_modules/braces/lib/utils.js"),s=(e="",t="",r=!1)=>{let n=[];if(e=[].concat(e),!(t=[].concat(t)).length)return e;if(!e.length)return r?o.flatten(t).map((e=>`{${e}}`)):t;for(let i of e)if(Array.isArray(i))for(let e of i)n.push(s(e,t,r));else for(let e of t)!0===r&&"string"==typeof e&&(e=`{${e}}`),n.push(Array.isArray(e)?s(i,e,r):i+e);return o.flatten(n)};e.exports=(e,t={})=>{let r=void 0===t.rangeLimit?1e3:t.rangeLimit,a=(e,u={})=>{e.queue=[];let l=u,d=u.queue;for(;"brace"!==l.type&&"root"!==l.type&&l.parent;)l=l.parent,d=l.queue;if(e.invalid||e.dollar)return void d.push(s(d.pop(),i(e,t)));if("brace"===e.type&&!0!==e.invalid&&2===e.nodes.length)return void d.push(s(d.pop(),["{}"]));if(e.nodes&&e.ranges>0){let a=o.reduce(e.nodes);if(o.exceedsLimit(...a,t.step,r))throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");let u=n(...a,t);return 0===u.length&&(u=i(e,t)),d.push(s(d.pop(),u)),void(e.nodes=[])}let c=o.encloseBrace(e),f=e.queue,p=e;for(;"brace"!==p.type&&"root"!==p.type&&p.parent;)p=p.parent,f=p.queue;for(let t=0;t<e.nodes.length;t++){let r=e.nodes[t];"comma"!==r.type||"brace"!==e.type?"close"!==r.type?r.value&&"open"!==r.type?f.push(s(f.pop(),r.value)):r.nodes&&a(r,e):d.push(s(d.pop(),f,c)):(1===t&&f.push(""),f.push(""))}return f};return o.flatten(a(e))}},"./node_modules/braces/lib/parse.js":(e,t,r)=>{"use strict";const n=r("./node_modules/braces/lib/stringify.js"),{MAX_LENGTH:i,CHAR_BACKSLASH:o,CHAR_BACKTICK:s,CHAR_COMMA:a,CHAR_DOT:u,CHAR_LEFT_PARENTHESES:l,CHAR_RIGHT_PARENTHESES:d,CHAR_LEFT_CURLY_BRACE:c,CHAR_RIGHT_CURLY_BRACE:f,CHAR_LEFT_SQUARE_BRACKET:p,CHAR_RIGHT_SQUARE_BRACKET:h,CHAR_DOUBLE_QUOTE:m,CHAR_SINGLE_QUOTE:g,CHAR_NO_BREAK_SPACE:_,CHAR_ZERO_WIDTH_NOBREAK_SPACE:b}=r("./node_modules/braces/lib/constants.js");e.exports=(e,t={})=>{if("string"!=typeof e)throw new TypeError("Expected a string");let r=t||{},y="number"==typeof r.maxLength?Math.min(i,r.maxLength):i;if(e.length>y)throw new SyntaxError(`Input length (${e.length}), exceeds max characters (${y})`);let w,v={type:"root",input:e,nodes:[]},E=[v],S=v,x=v,R=0,A=e.length,j=0,O=0;const T=()=>e[j++],k=e=>{if("text"===e.type&&"dot"===x.type&&(x.type="text"),!x||"text"!==x.type||"text"!==e.type)return S.nodes.push(e),e.parent=S,e.prev=x,x=e,e;x.value+=e.value};for(k({type:"bos"});j<A;)if(S=E[E.length-1],w=T(),w!==b&&w!==_)if(w!==o)if(w!==h)if(w!==p)if(w!==l)if(w!==d)if(w!==m&&w!==g&&w!==s)if(w!==c)if(w!==f)if(w===a&&O>0){if(S.ranges>0){S.ranges=0;let e=S.nodes.shift();S.nodes=[e,{type:"text",value:n(S)}]}k({type:"comma",value:w}),S.commas++}else if(w===u&&O>0&&0===S.commas){let e=S.nodes;if(0===O||0===e.length){k({type:"text",value:w});continue}if("dot"===x.type){if(S.range=[],x.value+=w,x.type="range",3!==S.nodes.length&&5!==S.nodes.length){S.invalid=!0,S.ranges=0,x.type="text";continue}S.ranges++,S.args=[];continue}if("range"===x.type){e.pop();let t=e[e.length-1];t.value+=x.value+w,x=t,S.ranges--;continue}k({type:"dot",value:w})}else k({type:"text",value:w});else{if("brace"!==S.type){k({type:"text",value:w});continue}let e="close";S=E.pop(),S.close=!0,k({type:e,value:w}),O--,S=E[E.length-1]}else{O++;let e=x.value&&"$"===x.value.slice(-1)||!0===S.dollar;S=k({type:"brace",open:!0,close:!1,dollar:e,depth:O,commas:0,ranges:0,nodes:[]}),E.push(S),k({type:"open",value:w})}else{let e,r=w;for(!0!==t.keepQuotes&&(w="");j<A&&(e=T());)if(e!==o){if(e===r){!0===t.keepQuotes&&(w+=e);break}w+=e}else w+=e+T();k({type:"text",value:w})}else{if("paren"!==S.type){k({type:"text",value:w});continue}S=E.pop(),k({type:"text",value:w}),S=E[E.length-1]}else S=k({type:"paren",nodes:[]}),E.push(S),k({type:"text",value:w});else{R++;let e;for(;j<A&&(e=T());)if(w+=e,e!==p)if(e!==o){if(e===h&&(R--,0===R))break}else w+=T();else R++;k({type:"text",value:w})}else k({type:"text",value:"\\"+w});else k({type:"text",value:(t.keepEscaping?w:"")+T()});do{if(S=E.pop(),"root"!==S.type){S.nodes.forEach((e=>{e.nodes||("open"===e.type&&(e.isOpen=!0),"close"===e.type&&(e.isClose=!0),e.nodes||(e.type="text"),e.invalid=!0)}));let e=E[E.length-1],t=e.nodes.indexOf(S);e.nodes.splice(t,1,...S.nodes)}}while(E.length>0);return k({type:"eos"}),v}},"./node_modules/braces/lib/stringify.js":(e,t,r)=>{"use strict";const n=r("./node_modules/braces/lib/utils.js");e.exports=(e,t={})=>{let r=(e,i={})=>{let o=t.escapeInvalid&&n.isInvalidBrace(i),s=!0===e.invalid&&!0===t.escapeInvalid,a="";if(e.value)return(o||s)&&n.isOpenOrClose(e)?"\\"+e.value:e.value;if(e.value)return e.value;if(e.nodes)for(let t of e.nodes)a+=r(t);return a};return r(e)}},"./node_modules/braces/lib/utils.js":(e,t)=>{"use strict";t.isInteger=e=>"number"==typeof e?Number.isInteger(e):"string"==typeof e&&""!==e.trim()&&Number.isInteger(Number(e)),t.find=(e,t)=>e.nodes.find((e=>e.type===t)),t.exceedsLimit=(e,r,n=1,i)=>!1!==i&&(!(!t.isInteger(e)||!t.isInteger(r))&&(Number(r)-Number(e))/Number(n)>=i),t.escapeNode=(e,t=0,r)=>{let n=e.nodes[t];n&&(r&&n.type===r||"open"===n.type||"close"===n.type)&&!0!==n.escaped&&(n.value="\\"+n.value,n.escaped=!0)},t.encloseBrace=e=>"brace"===e.type&&(e.commas>>0+e.ranges>>0==0&&(e.invalid=!0,!0)),t.isInvalidBrace=e=>"brace"===e.type&&(!(!0!==e.invalid&&!e.dollar)||(e.commas>>0+e.ranges>>0==0||!0!==e.open||!0!==e.close)&&(e.invalid=!0,!0)),t.isOpenOrClose=e=>"open"===e.type||"close"===e.type||(!0===e.open||!0===e.close),t.reduce=e=>e.reduce(((e,t)=>("text"===t.type&&e.push(t.value),"range"===t.type&&(t.type="text"),e)),[]),t.flatten=(...e)=>{const t=[],r=e=>{for(let n=0;n<e.length;n++){let i=e[n];Array.isArray(i)?r(i,t):void 0!==i&&t.push(i)}return t};return r(e),t}},"./node_modules/buffer/index.js":(e,t,r)=>{"use strict";var n=r("./node_modules/console-browserify/index.js"),i=r("./node_modules/base64-js/index.js"),o=r("./node_modules/ieee754/index.js"),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=l,t.SlowBuffer=function(e){+e!=e&&(e=0);return l.alloc(+e)},t.INSPECT_MAX_BYTES=50;var a=2147483647;function u(e){if(e>a)throw new RangeError('The value "'+e+'" is invalid for option "size"');var t=new Uint8Array(e);return Object.setPrototypeOf(t,l.prototype),t}function l(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return f(e)}return d(e,t,r)}function d(e,t,r){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!l.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var r=0|g(e,t),n=u(r),i=n.write(e,t);i!==r&&(n=n.slice(0,i));return n}(e,t);if(ArrayBuffer.isView(e))return function(e){if($(e,Uint8Array)){var t=new Uint8Array(e);return h(t.buffer,t.byteOffset,t.byteLength)}return p(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if($(e,ArrayBuffer)||e&&$(e.buffer,ArrayBuffer))return h(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&($(e,SharedArrayBuffer)||e&&$(e.buffer,SharedArrayBuffer)))return h(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');var n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return l.from(n,t,r);var i=function(e){if(l.isBuffer(e)){var t=0|m(e.length),r=u(t);return 0===r.length||e.copy(r,0,0,t),r}if(void 0!==e.length)return"number"!=typeof e.length||G(e.length)?u(0):p(e);if("Buffer"===e.type&&Array.isArray(e.data))return p(e.data)}(e);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return l.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function f(e){return c(e),u(e<0?0:0|m(e))}function p(e){for(var t=e.length<0?0:0|m(e.length),r=u(t),n=0;n<t;n+=1)r[n]=255&e[n];return r}function h(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');var n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,l.prototype),n}function m(e){if(e>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|e}function g(e,t){if(l.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||$(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);var r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;for(var i=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return U(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return F(e).length;default:if(i)return n?-1:U(e).length;t=(""+t).toLowerCase(),i=!0}}function _(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return C(this,t,r);case"utf8":case"utf-8":return j(this,t,r);case"ascii":return T(this,t,r);case"latin1":case"binary":return k(this,t,r);case"base64":return A(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return L(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function b(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function y(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),G(r=+r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=l.from(t,n)),l.isBuffer(t))return 0===t.length?-1:w(e,t,r,n,i);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):w(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function w(e,t,r,n,i){var o,s=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;s=2,a/=2,u/=2,r/=2}function l(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){var d=-1;for(o=r;o<a;o++)if(l(e,o)===l(t,-1===d?0:o-d)){if(-1===d&&(d=o),o-d+1===u)return d*s}else-1!==d&&(o-=o-d),d=-1}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){for(var c=!0,f=0;f<u;f++)if(l(e,o+f)!==l(t,f)){c=!1;break}if(c)return o}return-1}function v(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=t.length;n>o/2&&(n=o/2);for(var s=0;s<n;++s){var a=parseInt(t.substr(2*s,2),16);if(G(a))return s;e[r+s]=a}return s}function E(e,t,r,n){return H(U(t,e.length-r),e,r,n)}function S(e,t,r,n){return H(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function x(e,t,r,n){return H(F(t),e,r,n)}function R(e,t,r,n){return H(function(e,t){for(var r,n,i,o=[],s=0;s<e.length&&!((t-=2)<0);++s)n=(r=e.charCodeAt(s))>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function A(e,t,r){return 0===t&&r===e.length?i.fromByteArray(e):i.fromByteArray(e.slice(t,r))}function j(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var o,s,a,u,l=e[i],d=null,c=l>239?4:l>223?3:l>191?2:1;if(i+c<=r)switch(c){case 1:l<128&&(d=l);break;case 2:128==(192&(o=e[i+1]))&&(u=(31&l)<<6|63&o)>127&&(d=u);break;case 3:o=e[i+1],s=e[i+2],128==(192&o)&&128==(192&s)&&(u=(15&l)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(d=u);break;case 4:o=e[i+1],s=e[i+2],a=e[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&l)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(d=u)}null===d?(d=65533,c=1):d>65535&&(d-=65536,n.push(d>>>10&1023|55296),d=56320|1023&d),n.push(d),i+=c}return function(e){var t=e.length;if(t<=O)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=O));return r}(n)}t.kMaxLength=a,l.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),l.TYPED_ARRAY_SUPPORT||void 0===n||"function"!=typeof n.error||n.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(l.prototype,"parent",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.buffer}}),Object.defineProperty(l.prototype,"offset",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.byteOffset}}),l.poolSize=8192,l.from=function(e,t,r){return d(e,t,r)},Object.setPrototypeOf(l.prototype,Uint8Array.prototype),Object.setPrototypeOf(l,Uint8Array),l.alloc=function(e,t,r){return function(e,t,r){return c(e),e<=0?u(e):void 0!==t?"string"==typeof r?u(e).fill(t,r):u(e).fill(t):u(e)}(e,t,r)},l.allocUnsafe=function(e){return f(e)},l.allocUnsafeSlow=function(e){return f(e)},l.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==l.prototype},l.compare=function(e,t){if($(e,Uint8Array)&&(e=l.from(e,e.offset,e.byteLength)),$(t,Uint8Array)&&(t=l.from(t,t.offset,t.byteLength)),!l.isBuffer(e)||!l.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;for(var r=e.length,n=t.length,i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},l.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return l.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=l.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var o=e[r];if($(o,Uint8Array))i+o.length>n.length?l.from(o).copy(n,i):Uint8Array.prototype.set.call(n,o,i);else{if(!l.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,i)}i+=o.length}return n},l.byteLength=g,l.prototype._isBuffer=!0,l.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)b(this,t,t+1);return this},l.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},l.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},l.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?j(this,0,e):_.apply(this,arguments)},l.prototype.toLocaleString=l.prototype.toString,l.prototype.equals=function(e){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===l.compare(this,e)},l.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},s&&(l.prototype[s]=l.prototype.inspect),l.prototype.compare=function(e,t,r,n,i){if($(e,Uint8Array)&&(e=l.from(e,e.offset,e.byteLength)),!l.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(t>>>=0),a=Math.min(o,s),u=this.slice(n,i),d=e.slice(t,r),c=0;c<a;++c)if(u[c]!==d[c]){o=u[c],s=d[c];break}return o<s?-1:s<o?1:0},l.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},l.prototype.indexOf=function(e,t,r){return y(this,e,t,r,!0)},l.prototype.lastIndexOf=function(e,t,r){return y(this,e,t,r,!1)},l.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return v(this,e,t,r);case"utf8":case"utf-8":return E(this,e,t,r);case"ascii":case"latin1":case"binary":return S(this,e,t,r);case"base64":return x(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var O=4096;function T(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function k(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function C(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=t;o<r;++o)i+=z[e[o]];return i}function L(e,t,r){for(var n=e.slice(t,r),i="",o=0;o<n.length-1;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function P(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function I(e,t,r,n,i,o){if(!l.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function N(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function B(e,t,r,n,i){return t=+t,r>>>=0,i||N(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function M(e,t,r,n,i){return t=+t,r>>>=0,i||N(e,0,r,8),o.write(e,t,r,n,52,8),r+8}l.prototype.slice=function(e,t){var r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);var n=this.subarray(e,t);return Object.setPrototypeOf(n,l.prototype),n},l.prototype.readUintLE=l.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||P(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n},l.prototype.readUintBE=l.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||P(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},l.prototype.readUint8=l.prototype.readUInt8=function(e,t){return e>>>=0,t||P(e,1,this.length),this[e]},l.prototype.readUint16LE=l.prototype.readUInt16LE=function(e,t){return e>>>=0,t||P(e,2,this.length),this[e]|this[e+1]<<8},l.prototype.readUint16BE=l.prototype.readUInt16BE=function(e,t){return e>>>=0,t||P(e,2,this.length),this[e]<<8|this[e+1]},l.prototype.readUint32LE=l.prototype.readUInt32LE=function(e,t){return e>>>=0,t||P(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},l.prototype.readUint32BE=l.prototype.readUInt32BE=function(e,t){return e>>>=0,t||P(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},l.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||P(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},l.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||P(e,t,this.length);for(var n=t,i=1,o=this[e+--n];n>0&&(i*=256);)o+=this[e+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},l.prototype.readInt8=function(e,t){return e>>>=0,t||P(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},l.prototype.readInt16LE=function(e,t){e>>>=0,t||P(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},l.prototype.readInt16BE=function(e,t){e>>>=0,t||P(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},l.prototype.readInt32LE=function(e,t){return e>>>=0,t||P(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},l.prototype.readInt32BE=function(e,t){return e>>>=0,t||P(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},l.prototype.readFloatLE=function(e,t){return e>>>=0,t||P(e,4,this.length),o.read(this,e,!0,23,4)},l.prototype.readFloatBE=function(e,t){return e>>>=0,t||P(e,4,this.length),o.read(this,e,!1,23,4)},l.prototype.readDoubleLE=function(e,t){return e>>>=0,t||P(e,8,this.length),o.read(this,e,!0,52,8)},l.prototype.readDoubleBE=function(e,t){return e>>>=0,t||P(e,8,this.length),o.read(this,e,!1,52,8)},l.prototype.writeUintLE=l.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t>>>=0,r>>>=0,n)||I(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},l.prototype.writeUintBE=l.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t>>>=0,r>>>=0,n)||I(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},l.prototype.writeUint8=l.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,1,255,0),this[t]=255&e,t+1},l.prototype.writeUint16LE=l.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},l.prototype.writeUint16BE=l.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},l.prototype.writeUint32LE=l.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},l.prototype.writeUint32BE=l.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},l.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var i=Math.pow(2,8*r-1);I(this,e,t,r,i-1,-i)}var o=0,s=1,a=0;for(this[t]=255&e;++o<r&&(s*=256);)e<0&&0===a&&0!==this[t+o-1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+r},l.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var i=Math.pow(2,8*r-1);I(this,e,t,r,i-1,-i)}var o=r-1,s=1,a=0;for(this[t+o]=255&e;--o>=0&&(s*=256);)e<0&&0===a&&0!==this[t+o+1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+r},l.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},l.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},l.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},l.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},l.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},l.prototype.writeFloatLE=function(e,t,r){return B(this,e,t,!0,r)},l.prototype.writeFloatBE=function(e,t,r){return B(this,e,t,!1,r)},l.prototype.writeDoubleLE=function(e,t,r){return M(this,e,t,!0,r)},l.prototype.writeDoubleBE=function(e,t,r){return M(this,e,t,!1,r)},l.prototype.copy=function(e,t,r,n){if(!l.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),i},l.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!l.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){var i=e.charCodeAt(0);("utf8"===n&&i<128||"latin1"===n)&&(e=i)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else{var s=l.isBuffer(e)?e:l.from(e,n),a=s.length;if(0===a)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(o=0;o<r-t;++o)this[o+t]=s[o%a]}return this};var D=/[^+/0-9A-Za-z-_]/g;function U(e,t){var r;t=t||1/0;for(var n=e.length,i=null,o=[],s=0;s<n;++s){if((r=e.charCodeAt(s))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function F(e){return i.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(D,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function H(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}function $(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function G(e){return e!=e}var z=function(){for(var e="0123456789abcdef",t=new Array(256),r=0;r<16;++r)for(var n=16*r,i=0;i<16;++i)t[n+i]=e[r]+e[i];return t}()},"./node_modules/dir-glob/index.js":(e,t,r)=>{"use strict";var n=r("./node_modules/process/browser.js");const i=r("./node_modules/path-browserify/index.js"),o=r("./node_modules/path-type/index.js"),s=e=>e.length>1?`{${e.join(",")}}`:e[0],a=(e,t)=>{const r="!"===e[0]?e.slice(1):e;return i.isAbsolute(r)?r:i.join(t,r)},u=(e,t)=>{if(t.files&&!Array.isArray(t.files))throw new TypeError(`Expected \`files\` to be of type \`Array\` but received type \`${typeof t.files}\``);if(t.extensions&&!Array.isArray(t.extensions))throw new TypeError(`Expected \`extensions\` to be of type \`Array\` but received type \`${typeof t.extensions}\``);return t.files&&t.extensions?t.files.map((r=>{return i.posix.join(e,(n=r,o=t.extensions,i.extname(n)?`**/${n}`:`**/${n}.${s(o)}`));var n,o})):t.files?t.files.map((t=>i.posix.join(e,`**/${t}`))):t.extensions?[i.posix.join(e,`**/*.${s(t.extensions)}`)]:[i.posix.join(e,"**")]};e.exports=async(e,t)=>{if("string"!=typeof(t={cwd:n.cwd(),...t}).cwd)throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof t.cwd}\``);const r=await Promise.all([].concat(e).map((async e=>await o.isDirectory(a(e,t.cwd))?u(e,t):e)));return[].concat.apply([],r)},e.exports.sync=(e,t)=>{if("string"!=typeof(t={cwd:n.cwd(),...t}).cwd)throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof t.cwd}\``);const r=[].concat(e).map((e=>o.isDirectorySync(a(e,t.cwd))?u(e,t):e));return[].concat.apply([],r)}},"./node_modules/fast-glob/node_modules/glob-parent/index.js":(e,t,r)=>{"use strict";var n=r("./node_modules/is-glob/index.js"),i=r("./node_modules/path-browserify/index.js").posix.dirname,o="win32"===r("./node_modules/os-browserify/browser.js").platform(),s=/\\/g,a=/[\{\[].*[\}\]]$/,u=/(^|[^\\])([\{\[]|\([^\)]+$)/,l=/\\([\!\*\?\|\[\]\(\)\{\}])/g;e.exports=function(e,t){Object.assign({flipBackslashes:!0},t).flipBackslashes&&o&&e.indexOf("/")<0&&(e=e.replace(s,"/")),a.test(e)&&(e+="/"),e+="a";do{e=i(e)}while(n(e)||u.test(e));return e.replace(l,"$1")}},"./node_modules/fast-glob/out/index.js":(e,t,r)=>{"use strict";const n=r("./node_modules/fast-glob/out/managers/tasks.js"),i=r("./node_modules/fast-glob/out/managers/patterns.js"),o=r("./node_modules/fast-glob/out/providers/async.js"),s=r("./node_modules/fast-glob/out/providers/stream.js"),a=r("./node_modules/fast-glob/out/providers/sync.js"),u=r("./node_modules/fast-glob/out/settings.js"),l=r("./node_modules/fast-glob/out/utils/index.js");async function d(e,t){f(e);const r=c(e,o.default,t),n=await Promise.all(r);return l.array.flatten(n)}function c(e,t,r){const o=i.transform([].concat(e)),s=new u.default(r),a=n.generate(o,s),l=new t(s);return a.map(l.read,l)}function f(e){if(![].concat(e).every((e=>l.string.isString(e)&&!l.string.isEmpty(e))))throw new TypeError("Patterns must be a string (non empty) or an array of strings")}!function(e){e.sync=function(e,t){f(e);const r=c(e,a.default,t);return l.array.flatten(r)},e.stream=function(e,t){f(e);const r=c(e,s.default,t);return l.stream.merge(r)},e.generateTasks=function(e,t){f(e);const r=i.transform([].concat(e)),o=new u.default(t);return n.generate(r,o)},e.isDynamicPattern=function(e,t){f(e);const r=new u.default(t);return l.pattern.isDynamicPattern(e,r)},e.escapePath=function(e){return f(e),l.path.escape(e)}}(d||(d={})),e.exports=d},"./node_modules/fast-glob/out/managers/patterns.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeDuplicateSlashes=t.transform=void 0;const r=/(?!^)\/{2,}/g;function n(e){return e.replace(r,"/")}t.transform=function(e){return e.map((e=>n(e)))},t.removeDuplicateSlashes=n},"./node_modules/fast-glob/out/managers/tasks.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertPatternGroupToTask=t.convertPatternGroupsToTasks=t.groupPatternsByBaseDirectory=t.getNegativePatternsAsPositive=t.getPositivePatterns=t.convertPatternsToTasks=t.generate=void 0;const n=r("./node_modules/fast-glob/out/utils/index.js");function i(e,t,r){const i=[],o=n.pattern.getPatternsOutsideCurrentDirectory(e),s=n.pattern.getPatternsInsideCurrentDirectory(e),d=a(o),c=a(s);return i.push(...u(d,t,r)),"."in c?i.push(l(".",s,t,r)):i.push(...u(c,t,r)),i}function o(e){return n.pattern.getPositivePatterns(e)}function s(e,t){return n.pattern.getNegativePatterns(e).concat(t).map(n.pattern.convertToPositivePattern)}function a(e){return e.reduce(((e,t)=>{const r=n.pattern.getBaseDirectory(t);return r in e?e[r].push(t):e[r]=[t],e}),{})}function u(e,t,r){return Object.keys(e).map((n=>l(n,e[n],t,r)))}function l(e,t,r,i){return{dynamic:i,positive:t,negative:r,base:e,patterns:[].concat(t,r.map(n.pattern.convertToNegativePattern))}}t.generate=function(e,t){const r=o(e),a=s(e,t.ignore),u=r.filter((e=>n.pattern.isStaticPattern(e,t))),l=r.filter((e=>n.pattern.isDynamicPattern(e,t))),d=i(u,a,!1),c=i(l,a,!0);return d.concat(c)},t.convertPatternsToTasks=i,t.getPositivePatterns=o,t.getNegativePatternsAsPositive=s,t.groupPatternsByBaseDirectory=a,t.convertPatternGroupsToTasks=u,t.convertPatternGroupToTask=l},"./node_modules/fast-glob/out/providers/async.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/fast-glob/out/readers/stream.js"),i=r("./node_modules/fast-glob/out/providers/provider.js");class o extends i.default{constructor(){super(...arguments),this._reader=new n.default(this._settings)}read(e){const t=this._getRootDirectory(e),r=this._getReaderOptions(e),n=[];return new Promise(((i,o)=>{const s=this.api(t,e,r);s.once("error",o),s.on("data",(e=>n.push(r.transform(e)))),s.once("end",(()=>i(n)))}))}api(e,t,r){return t.dynamic?this._reader.dynamic(e,r):this._reader.static(t.patterns,r)}}t.default=o},"./node_modules/fast-glob/out/providers/filters/deep.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/fast-glob/out/utils/index.js"),i=r("./node_modules/fast-glob/out/providers/matchers/partial.js");t.default=class{constructor(e,t){this._settings=e,this._micromatchOptions=t}getFilter(e,t,r){const n=this._getMatcher(t),i=this._getNegativePatternsRe(r);return t=>this._filter(e,t,n,i)}_getMatcher(e){return new i.default(e,this._settings,this._micromatchOptions)}_getNegativePatternsRe(e){const t=e.filter(n.pattern.isAffectDepthOfReadingPattern);return n.pattern.convertPatternsToRe(t,this._micromatchOptions)}_filter(e,t,r,i){if(this._isSkippedByDeep(e,t.path))return!1;if(this._isSkippedSymbolicLink(t))return!1;const o=n.path.removeLeadingDotSegment(t.path);return!this._isSkippedByPositivePatterns(o,r)&&this._isSkippedByNegativePatterns(o,i)}_isSkippedByDeep(e,t){return this._settings.deep!==1/0&&this._getEntryLevel(e,t)>=this._settings.deep}_getEntryLevel(e,t){const r=t.split("/").length;if(""===e)return r;return r-e.split("/").length}_isSkippedSymbolicLink(e){return!this._settings.followSymbolicLinks&&e.dirent.isSymbolicLink()}_isSkippedByPositivePatterns(e,t){return!this._settings.baseNameMatch&&!t.match(e)}_isSkippedByNegativePatterns(e,t){return!n.pattern.matchAny(e,t)}}},"./node_modules/fast-glob/out/providers/filters/entry.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/fast-glob/out/utils/index.js");t.default=class{constructor(e,t){this._settings=e,this._micromatchOptions=t,this.index=new Map}getFilter(e,t){const r=n.pattern.convertPatternsToRe(e,this._micromatchOptions),i=n.pattern.convertPatternsToRe(t,this._micromatchOptions);return e=>this._filter(e,r,i)}_filter(e,t,r){if(this._settings.unique&&this._isDuplicateEntry(e))return!1;if(this._onlyFileFilter(e)||this._onlyDirectoryFilter(e))return!1;if(this._isSkippedByAbsoluteNegativePatterns(e.path,r))return!1;const n=this._settings.baseNameMatch?e.name:e.path,i=this._isMatchToPatterns(n,t)&&!this._isMatchToPatterns(e.path,r);return this._settings.unique&&i&&this._createIndexRecord(e),i}_isDuplicateEntry(e){return this.index.has(e.path)}_createIndexRecord(e){this.index.set(e.path,void 0)}_onlyFileFilter(e){return this._settings.onlyFiles&&!e.dirent.isFile()}_onlyDirectoryFilter(e){return this._settings.onlyDirectories&&!e.dirent.isDirectory()}_isSkippedByAbsoluteNegativePatterns(e,t){if(!this._settings.absolute)return!1;const r=n.path.makeAbsolute(this._settings.cwd,e);return n.pattern.matchAny(r,t)}_isMatchToPatterns(e,t){const r=n.path.removeLeadingDotSegment(e);return n.pattern.matchAny(r,t)||n.pattern.matchAny(r+"/",t)}}},"./node_modules/fast-glob/out/providers/filters/error.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/fast-glob/out/utils/index.js");t.default=class{constructor(e){this._settings=e}getFilter(){return e=>this._isNonFatalError(e)}_isNonFatalError(e){return n.errno.isEnoentCodeError(e)||this._settings.suppressErrors}}},"./node_modules/fast-glob/out/providers/matchers/matcher.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/fast-glob/out/utils/index.js");t.default=class{constructor(e,t,r){this._patterns=e,this._settings=t,this._micromatchOptions=r,this._storage=[],this._fillStorage()}_fillStorage(){const e=n.pattern.expandPatternsWithBraceExpansion(this._patterns);for(const t of e){const e=this._getPatternSegments(t),r=this._splitSegmentsIntoSections(e);this._storage.push({complete:r.length<=1,pattern:t,segments:e,sections:r})}}_getPatternSegments(e){return n.pattern.getPatternParts(e,this._micromatchOptions).map((e=>n.pattern.isDynamicPattern(e,this._settings)?{dynamic:!0,pattern:e,patternRe:n.pattern.makeRe(e,this._micromatchOptions)}:{dynamic:!1,pattern:e}))}_splitSegmentsIntoSections(e){return n.array.splitWhen(e,(e=>e.dynamic&&n.pattern.hasGlobStar(e.pattern)))}}},"./node_modules/fast-glob/out/providers/matchers/partial.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/fast-glob/out/providers/matchers/matcher.js");class i extends n.default{match(e){const t=e.split("/"),r=t.length,n=this._storage.filter((e=>!e.complete||e.segments.length>r));for(const e of n){const n=e.sections[0];if(!e.complete&&r>n.length)return!0;if(t.every(((t,r)=>{const n=e.segments[r];return!(!n.dynamic||!n.patternRe.test(t))||!n.dynamic&&n.pattern===t})))return!0}return!1}}t.default=i},"./node_modules/fast-glob/out/providers/provider.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/path-browserify/index.js"),i=r("./node_modules/fast-glob/out/providers/filters/deep.js"),o=r("./node_modules/fast-glob/out/providers/filters/entry.js"),s=r("./node_modules/fast-glob/out/providers/filters/error.js"),a=r("./node_modules/fast-glob/out/providers/transformers/entry.js");t.default=class{constructor(e){this._settings=e,this.errorFilter=new s.default(this._settings),this.entryFilter=new o.default(this._settings,this._getMicromatchOptions()),this.deepFilter=new i.default(this._settings,this._getMicromatchOptions()),this.entryTransformer=new a.default(this._settings)}_getRootDirectory(e){return n.resolve(this._settings.cwd,e.base)}_getReaderOptions(e){const t="."===e.base?"":e.base;return{basePath:t,pathSegmentSeparator:"/",concurrency:this._settings.concurrency,deepFilter:this.deepFilter.getFilter(t,e.positive,e.negative),entryFilter:this.entryFilter.getFilter(e.positive,e.negative),errorFilter:this.errorFilter.getFilter(),followSymbolicLinks:this._settings.followSymbolicLinks,fs:this._settings.fs,stats:this._settings.stats,throwErrorOnBrokenSymbolicLink:this._settings.throwErrorOnBrokenSymbolicLink,transform:this.entryTransformer.getTransformer()}}_getMicromatchOptions(){return{dot:this._settings.dot,matchBase:this._settings.baseNameMatch,nobrace:!this._settings.braceExpansion,nocase:!this._settings.caseSensitiveMatch,noext:!this._settings.extglob,noglobstar:!this._settings.globstar,posix:!0,strictSlashes:!1}}}},"./node_modules/fast-glob/out/providers/stream.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/stream-browserify/index.js"),i=r("./node_modules/fast-glob/out/readers/stream.js"),o=r("./node_modules/fast-glob/out/providers/provider.js");class s extends o.default{constructor(){super(...arguments),this._reader=new i.default(this._settings)}read(e){const t=this._getRootDirectory(e),r=this._getReaderOptions(e),i=this.api(t,e,r),o=new n.Readable({objectMode:!0,read:()=>{}});return i.once("error",(e=>o.emit("error",e))).on("data",(e=>o.emit("data",r.transform(e)))).once("end",(()=>o.emit("end"))),o.once("close",(()=>i.destroy())),o}api(e,t,r){return t.dynamic?this._reader.dynamic(e,r):this._reader.static(t.patterns,r)}}t.default=s},"./node_modules/fast-glob/out/providers/sync.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/fast-glob/out/readers/sync.js"),i=r("./node_modules/fast-glob/out/providers/provider.js");class o extends i.default{constructor(){super(...arguments),this._reader=new n.default(this._settings)}read(e){const t=this._getRootDirectory(e),r=this._getReaderOptions(e);return this.api(t,e,r).map(r.transform)}api(e,t,r){return t.dynamic?this._reader.dynamic(e,r):this._reader.static(t.patterns,r)}}t.default=o},"./node_modules/fast-glob/out/providers/transformers/entry.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/fast-glob/out/utils/index.js");t.default=class{constructor(e){this._settings=e}getTransformer(){return e=>this._transform(e)}_transform(e){let t=e.path;return this._settings.absolute&&(t=n.path.makeAbsolute(this._settings.cwd,t),t=n.path.unixify(t)),this._settings.markDirectories&&e.dirent.isDirectory()&&(t+="/"),this._settings.objectMode?Object.assign(Object.assign({},e),{path:t}):t}}},"./node_modules/fast-glob/out/readers/reader.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/path-browserify/index.js"),i=r("./node_modules/@nodelib/fs.stat/out/index.js"),o=r("./node_modules/fast-glob/out/utils/index.js");t.default=class{constructor(e){this._settings=e,this._fsStatSettings=new i.Settings({followSymbolicLink:this._settings.followSymbolicLinks,fs:this._settings.fs,throwErrorOnBrokenSymbolicLink:this._settings.followSymbolicLinks})}_getFullEntryPath(e){return n.resolve(this._settings.cwd,e)}_makeEntry(e,t){const r={name:t,path:t,dirent:o.fs.createDirentFromStats(t,e)};return this._settings.stats&&(r.stats=e),r}_isFatalError(e){return!o.errno.isEnoentCodeError(e)&&!this._settings.suppressErrors}}},"./node_modules/fast-glob/out/readers/stream.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/stream-browserify/index.js"),i=r("./node_modules/@nodelib/fs.stat/out/index.js"),o=r("./node_modules/@nodelib/fs.walk/out/index.js"),s=r("./node_modules/fast-glob/out/readers/reader.js");class a extends s.default{constructor(){super(...arguments),this._walkStream=o.walkStream,this._stat=i.stat}dynamic(e,t){return this._walkStream(e,t)}static(e,t){const r=e.map(this._getFullEntryPath,this),i=new n.PassThrough({objectMode:!0});i._write=(n,o,s)=>this._getEntry(r[n],e[n],t).then((e=>{null!==e&&t.entryFilter(e)&&i.push(e),n===r.length-1&&i.end(),s()})).catch(s);for(let e=0;e<r.length;e++)i.write(e);return i}_getEntry(e,t,r){return this._getStat(e).then((e=>this._makeEntry(e,t))).catch((e=>{if(r.errorFilter(e))return null;throw e}))}_getStat(e){return new Promise(((t,r)=>{this._stat(e,this._fsStatSettings,((e,n)=>null===e?t(n):r(e)))}))}}t.default=a},"./node_modules/fast-glob/out/readers/sync.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("./node_modules/@nodelib/fs.stat/out/index.js"),i=r("./node_modules/@nodelib/fs.walk/out/index.js"),o=r("./node_modules/fast-glob/out/readers/reader.js");class s extends o.default{constructor(){super(...arguments),this._walkSync=i.walkSync,this._statSync=n.statSync}dynamic(e,t){return this._walkSync(e,t)}static(e,t){const r=[];for(const n of e){const e=this._getFullEntryPath(n),i=this._getEntry(e,n,t);null!==i&&t.entryFilter(i)&&r.push(i)}return r}_getEntry(e,t,r){try{const r=this._getStat(e);return this._makeEntry(r,t)}catch(e){if(r.errorFilter(e))return null;throw e}}_getStat(e){return this._statSync(e,this._fsStatSettings)}}t.default=s},"./node_modules/fast-glob/out/settings.js":(e,t,r)=>{"use strict";var n=r("./node_modules/process/browser.js");Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_FILE_SYSTEM_ADAPTER=void 0;const i=r("?28e7"),o=r("./node_modules/os-browserify/browser.js"),s=Math.max(o.cpus().length,1);t.DEFAULT_FILE_SYSTEM_ADAPTER={lstat:i.lstat,lstatSync:i.lstatSync,stat:i.stat,statSync:i.statSync,readdir:i.readdir,readdirSync:i.readdirSync};t.default=class{constructor(e={}){this._options=e,this.absolute=this._getValue(this._options.absolute,!1),this.baseNameMatch=this._getValue(this._options.baseNameMatch,!1),this.braceExpansion=this._getValue(this._options.braceExpansion,!0),this.caseSensitiveMatch=this._getValue(this._options.caseSensitiveMatch,!0),this.concurrency=this._getValue(this._options.concurrency,s),this.cwd=this._getValue(this._options.cwd,n.cwd()),this.deep=this._getValue(this._options.deep,1/0),this.dot=this._getValue(this._options.dot,!1),this.extglob=this._getValue(this._options.extglob,!0),this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!0),this.fs=this._getFileSystemMethods(this._options.fs),this.globstar=this._getValue(this._options.globstar,!0),this.ignore=this._getValue(this._options.ignore,[]),this.markDirectories=this._getValue(this._options.markDirectories,!1),this.objectMode=this._getValue(this._options.objectMode,!1),this.onlyDirectories=this._getValue(this._options.onlyDirectories,!1),this.onlyFiles=this._getValue(this._options.onlyFiles,!0),this.stats=this._getValue(this._options.stats,!1),this.suppressErrors=this._getValue(this._options.suppressErrors,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!1),this.unique=this._getValue(this._options.unique,!0),this.onlyDirectories&&(this.onlyFiles=!1),this.stats&&(this.objectMode=!0)}_getValue(e,t){return void 0===e?t:e}_getFileSystemMethods(e={}){return Object.assign(Object.assign({},t.DEFAULT_FILE_SYSTEM_ADAPTER),e)}}},"./node_modules/fast-glob/out/utils/array.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.splitWhen=t.flatten=void 0,t.flatten=function(e){return e.reduce(((e,t)=>[].concat(e,t)),[])},t.splitWhen=function(e,t){const r=[[]];let n=0;for(const i of e)t(i)?(n++,r[n]=[]):r[n].push(i);return r}},"./node_modules/fast-glob/out/utils/errno.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isEnoentCodeError=void 0,t.isEnoentCodeError=function(e){return"ENOENT"===e.code}},"./node_modules/fast-glob/out/utils/fs.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createDirentFromStats=void 0;class r{constructor(e,t){this.name=e,this.isBlockDevice=t.isBlockDevice.bind(t),this.isCharacterDevice=t.isCharacterDevice.bind(t),this.isDirectory=t.isDirectory.bind(t),this.isFIFO=t.isFIFO.bind(t),this.isFile=t.isFile.bind(t),this.isSocket=t.isSocket.bind(t),this.isSymbolicLink=t.isSymbolicLink.bind(t)}}t.createDirentFromStats=function(e,t){return new r(e,t)}},"./node_modules/fast-glob/out/utils/index.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.string=t.stream=t.pattern=t.path=t.fs=t.errno=t.array=void 0;const n=r("./node_modules/fast-glob/out/utils/array.js");t.array=n;const i=r("./node_modules/fast-glob/out/utils/errno.js");t.errno=i;const o=r("./node_modules/fast-glob/out/utils/fs.js");t.fs=o;const s=r("./node_modules/fast-glob/out/utils/path.js");t.path=s;const a=r("./node_modules/fast-glob/out/utils/pattern.js");t.pattern=a;const u=r("./node_modules/fast-glob/out/utils/stream.js");t.stream=u;const l=r("./node_modules/fast-glob/out/utils/string.js");t.string=l},"./node_modules/fast-glob/out/utils/path.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeLeadingDotSegment=t.escape=t.makeAbsolute=t.unixify=void 0;const n=r("./node_modules/path-browserify/index.js"),i=/(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;t.unixify=function(e){return e.replace(/\\/g,"/")},t.makeAbsolute=function(e,t){return n.resolve(e,t)},t.escape=function(e){return e.replace(i,"\\$2")},t.removeLeadingDotSegment=function(e){if("."===e.charAt(0)){const t=e.charAt(1);if("/"===t||"\\"===t)return e.slice(2)}return e}},"./node_modules/fast-glob/out/utils/pattern.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.matchAny=t.convertPatternsToRe=t.makeRe=t.getPatternParts=t.expandBraceExpansion=t.expandPatternsWithBraceExpansion=t.isAffectDepthOfReadingPattern=t.endsWithSlashGlobStar=t.hasGlobStar=t.getBaseDirectory=t.isPatternRelatedToParentDirectory=t.getPatternsOutsideCurrentDirectory=t.getPatternsInsideCurrentDirectory=t.getPositivePatterns=t.getNegativePatterns=t.isPositivePattern=t.isNegativePattern=t.convertToNegativePattern=t.convertToPositivePattern=t.isDynamicPattern=t.isStaticPattern=void 0;const n=r("./node_modules/path-browserify/index.js"),i=r("./node_modules/fast-glob/node_modules/glob-parent/index.js"),o=r("./node_modules/micromatch/index.js"),s=/[*?]|^!/,a=/\[[^[]*]/,u=/(?:^|[^!*+?@])\([^(]*\|[^|]*\)/,l=/[!*+?@]\([^(]*\)/,d=/,|\.\./;function c(e,t={}){return!f(e,t)}function f(e,t={}){return""!==e&&(!(!1!==t.caseSensitiveMatch&&!e.includes("\\"))||(!!(s.test(e)||a.test(e)||u.test(e))||(!(!1===t.extglob||!l.test(e))||!(!1===t.braceExpansion||!function(e){const t=e.indexOf("{");if(-1===t)return!1;const r=e.indexOf("}",t+1);if(-1===r)return!1;const n=e.slice(t,r);return d.test(n)}(e)))))}function p(e){return e.startsWith("!")&&"("!==e[1]}function h(e){return!p(e)}function m(e){return e.startsWith("..")||e.startsWith("./..")}function g(e){return e.endsWith("/**")}function _(e){return o.braces(e,{expand:!0,nodupes:!0})}function b(e,t){return o.makeRe(e,t)}t.isStaticPattern=c,t.isDynamicPattern=f,t.convertToPositivePattern=function(e){return p(e)?e.slice(1):e},t.convertToNegativePattern=function(e){return"!"+e},t.isNegativePattern=p,t.isPositivePattern=h,t.getNegativePatterns=function(e){return e.filter(p)},t.getPositivePatterns=function(e){return e.filter(h)},t.getPatternsInsideCurrentDirectory=function(e){return e.filter((e=>!m(e)))},t.getPatternsOutsideCurrentDirectory=function(e){return e.filter(m)},t.isPatternRelatedToParentDirectory=m,t.getBaseDirectory=function(e){return i(e,{flipBackslashes:!1})},t.hasGlobStar=function(e){return e.includes("**")},t.endsWithSlashGlobStar=g,t.isAffectDepthOfReadingPattern=function(e){const t=n.basename(e);return g(e)||c(t)},t.expandPatternsWithBraceExpansion=function(e){return e.reduce(((e,t)=>e.concat(_(t))),[])},t.expandBraceExpansion=_,t.getPatternParts=function(e,t){let{parts:r}=o.scan(e,Object.assign(Object.assign({},t),{parts:!0}));return 0===r.length&&(r=[e]),r[0].startsWith("/")&&(r[0]=r[0].slice(1),r.unshift("")),r},t.makeRe=b,t.convertPatternsToRe=function(e,t){return e.map((e=>b(e,t)))},t.matchAny=function(e,t){return t.some((t=>t.test(e)))}},"./node_modules/fast-glob/out/utils/stream.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.merge=void 0;const n=r("./node_modules/merge2/index.js");function i(e){e.forEach((e=>e.emit("close")))}t.merge=function(e){const t=n(e);return e.forEach((e=>{e.once("error",(e=>t.emit("error",e)))})),t.once("close",(()=>i(e))),t.once("end",(()=>i(e))),t}},"./node_modules/fast-glob/out/utils/string.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isEmpty=t.isString=void 0,t.isString=function(e){return"string"==typeof e},t.isEmpty=function(e){return""===e}},"./node_modules/fastq/queue.js":(e,t,r)=>{"use strict";var n=r("./node_modules/reusify/reusify.js");function i(e,t,r){if("function"==typeof e&&(r=t,t=e,e=null),r<1)throw new Error("fastqueue concurrency must be greater than 1");var i=n(s),a=null,u=null,l=0,d=null,c={push:function(r,n){var s=i.get();s.context=e,s.release=f,s.value=r,s.callback=n||o,s.errorHandler=d,l===c.concurrency||c.paused?u?(u.next=s,u=s):(a=s,u=s,c.saturated()):(l++,t.call(e,s.value,s.worked))},drain:o,saturated:o,pause:function(){c.paused=!0},paused:!1,concurrency:r,running:function(){return l},resume:function(){if(!c.paused)return;c.paused=!1;for(var e=0;e<c.concurrency;e++)l++,f()},idle:function(){return 0===l&&0===c.length()},length:function(){var e=a,t=0;for(;e;)e=e.next,t++;return t},getQueue:function(){var e=a,t=[];for(;e;)t.push(e.value),e=e.next;return t},unshift:function(r,n){var s=i.get();s.context=e,s.release=f,s.value=r,s.callback=n||o,l===c.concurrency||c.paused?a?(s.next=a,a=s):(a=s,u=s,c.saturated()):(l++,t.call(e,s.value,s.worked))},empty:o,kill:function(){a=null,u=null,c.drain=o},killAndDrain:function(){a=null,u=null,c.drain(),c.drain=o},error:function(e){d=e}};return c;function f(r){r&&i.release(r);var n=a;n?c.paused?l--:(u===a&&(u=null),a=n.next,n.next=null,t.call(e,n.value,n.worked),null===u&&c.empty()):0==--l&&c.drain()}}function o(){}function s(){this.value=null,this.callback=o,this.next=null,this.release=o,this.context=null,this.errorHandler=null;var e=this;this.worked=function(t,r){var n=e.callback,i=e.errorHandler,s=e.value;e.value=null,e.callback=o,e.errorHandler&&i(t,s),n.call(e.context,t,r),e.release(e)}}e.exports=i,e.exports.promise=function(e,t,r){"function"==typeof e&&(r=t,t=e,e=null);var n=i(e,(function(e,r){t.call(this,e).then((function(e){r(null,e)}),r)}),r),s=n.push,a=n.unshift;return n.push=function(e){var t=new Promise((function(t,r){s(e,(function(e,n){e?r(e):t(n)}))}));return t.catch(o),t},n.unshift=function(e){var t=new Promise((function(t,r){a(e,(function(e,n){e?r(e):t(n)}))}));return t.catch(o),t},n.drained=function(){var e=n.drain;return new Promise((function(t){n.drain=function(){e(),t()}}))},n}},"./node_modules/file-type/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var Buffer=__webpack_require__("./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js").Buffer;const Token=__webpack_require__("./node_modules/token-types/lib/index.js"),strtok3=__webpack_require__("./node_modules/strtok3/lib/core.js"),{stringToBytes,tarHeaderChecksumMatches,uint32SyncSafeToken}=__webpack_require__("./node_modules/file-type/util.js"),supported=__webpack_require__("./node_modules/file-type/supported.js"),minimumBytes=4100;async function fromStream(e){const t=await strtok3.fromStream(e);try{return await fromTokenizer(t)}finally{await t.close()}}async function fromBuffer(e){if(!(e instanceof Uint8Array||e instanceof ArrayBuffer||Buffer.isBuffer(e)))throw new TypeError(`Expected the \`input\` argument to be of type \`Uint8Array\` or \`Buffer\` or \`ArrayBuffer\`, got \`${typeof e}\``);const t=e instanceof Buffer?e:Buffer.from(e);if(!(t&&t.length>1))return;return fromTokenizer(strtok3.fromBuffer(t))}function _check(e,t,r){r={offset:0,...r};for(const[n,i]of t.entries())if(r.mask){if(i!==(r.mask[n]&e[n+r.offset]))return!1}else if(i!==e[n+r.offset])return!1;return!0}async function fromTokenizer(e){try{return _fromTokenizer(e)}catch(e){if(!(e instanceof strtok3.EndOfStreamError))throw e}}async function _fromTokenizer(e){let t=Buffer.alloc(minimumBytes);const r=(e,r)=>_check(t,e,r),n=(e,t)=>r(stringToBytes(e),t);if(e.fileInfo.size||(e.fileInfo.size=Number.MAX_SAFE_INTEGER),await e.peekBuffer(t,{length:12,mayBeLess:!0}),r([66,77]))return{ext:"bmp",mime:"image/bmp"};if(r([11,119]))return{ext:"ac3",mime:"audio/vnd.dolby.dd-raw"};if(r([120,1]))return{ext:"dmg",mime:"application/x-apple-diskimage"};if(r([77,90]))return{ext:"exe",mime:"application/x-msdownload"};if(r([37,33]))return await e.peekBuffer(t,{length:24,mayBeLess:!0}),n("PS-Adobe-",{offset:2})&&n(" EPSF-",{offset:14})?{ext:"eps",mime:"application/eps"}:{ext:"ps",mime:"application/postscript"};if(r([31,160])||r([31,157]))return{ext:"Z",mime:"application/x-compress"};if(r([255,216,255]))return{ext:"jpg",mime:"image/jpeg"};if(r([73,73,188]))return{ext:"jxr",mime:"image/vnd.ms-photo"};if(r([31,139,8]))return{ext:"gz",mime:"application/gzip"};if(r([66,90,104]))return{ext:"bz2",mime:"application/x-bzip2"};if(n("ID3")){await e.ignore(6);const i=await e.readToken(uint32SyncSafeToken);return e.position+i>e.fileInfo.size?{ext:"mp3",mime:"audio/mpeg"}:(await e.ignore(i),fromTokenizer(e))}if(n("MP+"))return{ext:"mpc",mime:"audio/x-musepack"};if((67===t[0]||70===t[0])&&r([87,83],{offset:1}))return{ext:"swf",mime:"application/x-shockwave-flash"};if(r([71,73,70]))return{ext:"gif",mime:"image/gif"};if(n("FLIF"))return{ext:"flif",mime:"image/flif"};if(n("8BPS"))return{ext:"psd",mime:"image/vnd.adobe.photoshop"};if(n("WEBP",{offset:8}))return{ext:"webp",mime:"image/webp"};if(n("MPCK"))return{ext:"mpc",mime:"audio/x-musepack"};if(n("FORM"))return{ext:"aif",mime:"audio/aiff"};if(n("icns",{offset:0}))return{ext:"icns",mime:"image/icns"};if(r([80,75,3,4])){try{for(;e.position+30<e.fileInfo.size;){await e.readBuffer(t,{length:30});const o={compressedSize:t.readUInt32LE(18),uncompressedSize:t.readUInt32LE(22),filenameLength:t.readUInt16LE(26),extraFieldLength:t.readUInt16LE(28)};if(o.filename=await e.readToken(new Token.StringType(o.filenameLength,"utf-8")),await e.ignore(o.extraFieldLength),"META-INF/mozilla.rsa"===o.filename)return{ext:"xpi",mime:"application/x-xpinstall"};if(o.filename.endsWith(".rels")||o.filename.endsWith(".xml")){switch(o.filename.split("/")[0]){case"_rels":default:break;case"word":return{ext:"docx",mime:"application/vnd.openxmlformats-officedocument.wordprocessingml.document"};case"ppt":return{ext:"pptx",mime:"application/vnd.openxmlformats-officedocument.presentationml.presentation"};case"xl":return{ext:"xlsx",mime:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}}}if(o.filename.startsWith("xl/"))return{ext:"xlsx",mime:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"};if(o.filename.startsWith("3D/")&&o.filename.endsWith(".model"))return{ext:"3mf",mime:"model/3mf"};if("mimetype"===o.filename&&o.compressedSize===o.uncompressedSize){switch(await e.readToken(new Token.StringType(o.compressedSize,"utf-8"))){case"application/epub+zip":return{ext:"epub",mime:"application/epub+zip"};case"application/vnd.oasis.opendocument.text":return{ext:"odt",mime:"application/vnd.oasis.opendocument.text"};case"application/vnd.oasis.opendocument.spreadsheet":return{ext:"ods",mime:"application/vnd.oasis.opendocument.spreadsheet"};case"application/vnd.oasis.opendocument.presentation":return{ext:"odp",mime:"application/vnd.oasis.opendocument.presentation"}}}if(0===o.compressedSize){let s=-1;for(;s<0&&e.position<e.fileInfo.size;)await e.peekBuffer(t,{mayBeLess:!0}),s=t.indexOf("504B0304",0,"hex"),await e.ignore(s>=0?s:t.length)}else await e.ignore(o.compressedSize)}}catch(a){if(!(a instanceof strtok3.EndOfStreamError))throw a}return{ext:"zip",mime:"application/zip"}}if(n("OggS")){await e.ignore(28);const u=Buffer.alloc(8);return await e.readBuffer(u),_check(u,[79,112,117,115,72,101,97,100])?{ext:"opus",mime:"audio/opus"}:_check(u,[128,116,104,101,111,114,97])?{ext:"ogv",mime:"video/ogg"}:_check(u,[1,118,105,100,101,111,0])?{ext:"ogm",mime:"video/ogg"}:_check(u,[127,70,76,65,67])?{ext:"oga",mime:"audio/ogg"}:_check(u,[83,112,101,101,120,32,32])?{ext:"spx",mime:"audio/ogg"}:_check(u,[1,118,111,114,98,105,115])?{ext:"ogg",mime:"audio/ogg"}:{ext:"ogx",mime:"application/ogg"}}if(r([80,75])&&(3===t[2]||5===t[2]||7===t[2])&&(4===t[3]||6===t[3]||8===t[3]))return{ext:"zip",mime:"application/zip"};if(n("ftyp",{offset:4})&&0!=(96&t[8])){const l=t.toString("binary",8,12).replace("\0"," ").trim();switch(l){case"avif":return{ext:"avif",mime:"image/avif"};case"mif1":return{ext:"heic",mime:"image/heif"};case"msf1":return{ext:"heic",mime:"image/heif-sequence"};case"heic":case"heix":return{ext:"heic",mime:"image/heic"};case"hevc":case"hevx":return{ext:"heic",mime:"image/heic-sequence"};case"qt":return{ext:"mov",mime:"video/quicktime"};case"M4V":case"M4VH":case"M4VP":return{ext:"m4v",mime:"video/x-m4v"};case"M4P":return{ext:"m4p",mime:"video/mp4"};case"M4B":return{ext:"m4b",mime:"audio/mp4"};case"M4A":return{ext:"m4a",mime:"audio/x-m4a"};case"F4V":return{ext:"f4v",mime:"video/mp4"};case"F4P":return{ext:"f4p",mime:"video/mp4"};case"F4A":return{ext:"f4a",mime:"audio/mp4"};case"F4B":return{ext:"f4b",mime:"audio/mp4"};case"crx":return{ext:"cr3",mime:"image/x-canon-cr3"};default:return l.startsWith("3g")?l.startsWith("3g2")?{ext:"3g2",mime:"video/3gpp2"}:{ext:"3gp",mime:"video/3gpp"}:{ext:"mp4",mime:"video/mp4"}}}if(n("MThd"))return{ext:"mid",mime:"audio/midi"};if(n("wOFF")&&(r([0,1,0,0],{offset:4})||n("OTTO",{offset:4})))return{ext:"woff",mime:"font/woff"};if(n("wOF2")&&(r([0,1,0,0],{offset:4})||n("OTTO",{offset:4})))return{ext:"woff2",mime:"font/woff2"};if(r([212,195,178,161])||r([161,178,195,212]))return{ext:"pcap",mime:"application/vnd.tcpdump.pcap"};if(n("DSD "))return{ext:"dsf",mime:"audio/x-dsf"};if(n("LZIP"))return{ext:"lz",mime:"application/x-lzip"};if(n("fLaC"))return{ext:"flac",mime:"audio/x-flac"};if(r([66,80,71,251]))return{ext:"bpg",mime:"image/bpg"};if(n("wvpk"))return{ext:"wv",mime:"audio/wavpack"};if(n("%PDF")){await e.ignore(1350);const d=10485760,c=Buffer.alloc(Math.min(d,e.fileInfo.size));return await e.readBuffer(c,{mayBeLess:!0}),c.includes(Buffer.from("AIPrivateData"))?{ext:"ai",mime:"application/postscript"}:{ext:"pdf",mime:"application/pdf"}}if(r([0,97,115,109]))return{ext:"wasm",mime:"application/wasm"};if(r([73,73,42,0]))return n("CR",{offset:8})?{ext:"cr2",mime:"image/x-canon-cr2"}:r([28,0,254,0],{offset:8})||r([31,0,11,0],{offset:8})?{ext:"nef",mime:"image/x-nikon-nef"}:r([8,0,0,0],{offset:4})&&(r([45,0,254,0],{offset:8})||r([39,0,254,0],{offset:8}))?{ext:"dng",mime:"image/x-adobe-dng"}:(t=Buffer.alloc(24),await e.peekBuffer(t),(r([16,251,134,1],{offset:4})||r([8,0,0,0],{offset:4}))&&r([0,254,0,4,0,1,0,0,0,1,0,0,0,3,1],{offset:9})?{ext:"arw",mime:"image/x-sony-arw"}:{ext:"tif",mime:"image/tiff"});if(r([77,77,0,42]))return{ext:"tif",mime:"image/tiff"};if(n("MAC "))return{ext:"ape",mime:"audio/ape"};if(r([26,69,223,163])){async function f(){const t=await e.peekNumber(Token.UINT8);let r=128,n=0;for(;0==(t&r)&&0!==r;)++n,r>>=1;const i=Buffer.alloc(n+1);return await e.readBuffer(i),i}async function p(){const e=await f(),t=await f();t[0]^=128>>t.length-1;const r=Math.min(6,t.length);return{id:e.readUIntBE(0,e.length),len:t.readUIntBE(t.length-r,r)}}async function h(t,r){for(;r>0;){const t=await p();if(17026===t.id)return e.readToken(new Token.StringType(t.len,"utf-8"));await e.ignore(t.len),--r}}const m=await p();switch(await h(0,m.len)){case"webm":return{ext:"webm",mime:"video/webm"};case"matroska":return{ext:"mkv",mime:"video/x-matroska"};default:return}}if(r([82,73,70,70])){if(r([65,86,73],{offset:8}))return{ext:"avi",mime:"video/vnd.avi"};if(r([87,65,86,69],{offset:8}))return{ext:"wav",mime:"audio/vnd.wave"};if(r([81,76,67,77],{offset:8}))return{ext:"qcp",mime:"audio/qcelp"}}if(n("SQLi"))return{ext:"sqlite",mime:"application/x-sqlite3"};if(r([78,69,83,26]))return{ext:"nes",mime:"application/x-nintendo-nes-rom"};if(n("Cr24"))return{ext:"crx",mime:"application/x-google-chrome-extension"};if(n("MSCF")||n("ISc("))return{ext:"cab",mime:"application/vnd.ms-cab-compressed"};if(r([237,171,238,219]))return{ext:"rpm",mime:"application/x-rpm"};if(r([197,208,211,198]))return{ext:"eps",mime:"application/eps"};if(r([40,181,47,253]))return{ext:"zst",mime:"application/zstd"};if(r([79,84,84,79,0]))return{ext:"otf",mime:"font/otf"};if(n("#!AMR"))return{ext:"amr",mime:"audio/amr"};if(n("{\\rtf"))return{ext:"rtf",mime:"application/rtf"};if(r([70,76,86,1]))return{ext:"flv",mime:"video/x-flv"};if(n("IMPM"))return{ext:"it",mime:"audio/x-it"};if(n("-lh0-",{offset:2})||n("-lh1-",{offset:2})||n("-lh2-",{offset:2})||n("-lh3-",{offset:2})||n("-lh4-",{offset:2})||n("-lh5-",{offset:2})||n("-lh6-",{offset:2})||n("-lh7-",{offset:2})||n("-lzs-",{offset:2})||n("-lz4-",{offset:2})||n("-lz5-",{offset:2})||n("-lhd-",{offset:2}))return{ext:"lzh",mime:"application/x-lzh-compressed"};if(r([0,0,1,186])){if(r([33],{offset:4,mask:[241]}))return{ext:"mpg",mime:"video/MP1S"};if(r([68],{offset:4,mask:[196]}))return{ext:"mpg",mime:"video/MP2P"}}if(n("ITSF"))return{ext:"chm",mime:"application/vnd.ms-htmlhelp"};if(r([253,55,122,88,90,0]))return{ext:"xz",mime:"application/x-xz"};if(n("<?xml "))return{ext:"xml",mime:"application/xml"};if(r([55,122,188,175,39,28]))return{ext:"7z",mime:"application/x-7z-compressed"};if(r([82,97,114,33,26,7])&&(0===t[6]||1===t[6]))return{ext:"rar",mime:"application/x-rar-compressed"};if(n("solid "))return{ext:"stl",mime:"model/stl"};if(n("BLENDER"))return{ext:"blend",mime:"application/x-blender"};if(n("!<arch>")){await e.ignore(8);return"debian-binary"===await e.readToken(new Token.StringType(13,"ascii"))?{ext:"deb",mime:"application/x-deb"}:{ext:"ar",mime:"application/x-unix-archive"}}if(r([137,80,78,71,13,10,26,10])){async function g(){return{length:await e.readToken(Token.INT32_BE),type:await e.readToken(new Token.StringType(4,"binary"))}}await e.ignore(8);do{const _=await g();if(_.length<0)return;switch(_.type){case"IDAT":return{ext:"png",mime:"image/png"};case"acTL":return{ext:"apng",mime:"image/apng"};default:await e.ignore(_.length+4)}}while(e.position+8<e.fileInfo.size);return{ext:"png",mime:"image/png"}}if(r([65,82,82,79,87,49,0,0]))return{ext:"arrow",mime:"application/x-apache-arrow"};if(r([103,108,84,70,2,0,0,0]))return{ext:"glb",mime:"model/gltf-binary"};if(r([102,114,101,101],{offset:4})||r([109,100,97,116],{offset:4})||r([109,111,111,118],{offset:4})||r([119,105,100,101],{offset:4}))return{ext:"mov",mime:"video/quicktime"};if(r([73,73,82,79,8,0,0,0,24]))return{ext:"orf",mime:"image/x-olympus-orf"};if(n("gimp xcf "))return{ext:"xcf",mime:"image/x-xcf"};if(r([73,73,85,0,24,0,0,0,136,231,116,216]))return{ext:"rw2",mime:"image/x-panasonic-rw2"};if(r([48,38,178,117,142,102,207,17,166,217])){async function b(){const t=Buffer.alloc(16);return await e.readBuffer(t),{id:t,size:Number(await e.readToken(Token.UINT64_LE))}}for(await e.ignore(30);e.position+24<e.fileInfo.size;){const y=await b();let w=y.size-24;if(_check(y.id,[145,7,220,183,183,169,207,17,142,230,0,192,12,32,83,101])){const v=Buffer.alloc(16);if(w-=await e.readBuffer(v),_check(v,[64,158,105,248,77,91,207,17,168,253,0,128,95,92,68,43]))return{ext:"asf",mime:"audio/x-ms-asf"};if(_check(v,[192,239,25,188,77,91,207,17,168,253,0,128,95,92,68,43]))return{ext:"asf",mime:"video/x-ms-asf"};break}await e.ignore(w)}return{ext:"asf",mime:"application/vnd.ms-asf"}}if(r([171,75,84,88,32,49,49,187,13,10,26,10]))return{ext:"ktx",mime:"image/ktx"};if((r([126,16,4])||r([126,24,4]))&&r([48,77,73,69],{offset:4}))return{ext:"mie",mime:"application/x-mie"};if(r([39,10,0,0,0,0,0,0,0,0,0,0],{offset:2}))return{ext:"shp",mime:"application/x-esri-shape"};if(r([0,0,0,12,106,80,32,32,13,10,135,10])){await e.ignore(20);switch(await e.readToken(new Token.StringType(4,"ascii"))){case"jp2 ":return{ext:"jp2",mime:"image/jp2"};case"jpx ":return{ext:"jpx",mime:"image/jpx"};case"jpm ":return{ext:"jpm",mime:"image/jpm"};case"mjp2":return{ext:"mj2",mime:"image/mj2"};default:return}}if(r([255,10])||r([0,0,0,12,74,88,76,32,13,10,135,10]))return{ext:"jxl",mime:"image/jxl"};if(r([0,0,1,186])||r([0,0,1,179]))return{ext:"mpg",mime:"video/mpeg"};if(r([0,1,0,0,0]))return{ext:"ttf",mime:"font/ttf"};if(r([0,0,1,0]))return{ext:"ico",mime:"image/x-icon"};if(r([0,0,2,0]))return{ext:"cur",mime:"image/x-icon"};if(r([208,207,17,224,161,177,26,225]))return{ext:"cfb",mime:"application/x-cfb"};if(await e.peekBuffer(t,{length:Math.min(256,e.fileInfo.size),mayBeLess:!0}),n("BEGIN:")){if(n("VCARD",{offset:6}))return{ext:"vcf",mime:"text/vcard"};if(n("VCALENDAR",{offset:6}))return{ext:"ics",mime:"text/calendar"}}if(n("FUJIFILMCCD-RAW"))return{ext:"raf",mime:"image/x-fujifilm-raf"};if(n("Extended Module:"))return{ext:"xm",mime:"audio/x-xm"};if(n("Creative Voice File"))return{ext:"voc",mime:"audio/x-voc"};if(r([4,0,0,0])&&t.length>=16){const E=t.readUInt32LE(12);if(E>12&&t.length>=E+16)try{const S=t.slice(16,E+16).toString();if(JSON.parse(S).files)return{ext:"asar",mime:"application/x-asar"}}catch(x){}}if(r([6,14,43,52,2,5,1,1,13,1,2,1,1,2]))return{ext:"mxf",mime:"application/mxf"};if(n("SCRM",{offset:44}))return{ext:"s3m",mime:"audio/x-s3m"};if(r([71],{offset:4})&&(r([71],{offset:192})||r([71],{offset:196})))return{ext:"mts",mime:"video/mp2t"};if(r([66,79,79,75,77,79,66,73],{offset:60}))return{ext:"mobi",mime:"application/x-mobipocket-ebook"};if(r([68,73,67,77],{offset:128}))return{ext:"dcm",mime:"application/dicom"};if(r([76,0,0,0,1,20,2,0,0,0,0,0,192,0,0,0,0,0,0,70]))return{ext:"lnk",mime:"application/x.ms.shortcut"};if(r([98,111,111,107,0,0,0,0,109,97,114,107,0,0,0,0]))return{ext:"alias",mime:"application/x.apple.alias"};if(r([76,80],{offset:34})&&(r([0,0,1],{offset:8})||r([1,0,2],{offset:8})||r([2,0,2],{offset:8})))return{ext:"eot",mime:"application/vnd.ms-fontobject"};if(r([6,6,237,245,216,29,70,229,189,49,239,231,254,116,183,29]))return{ext:"indd",mime:"application/x-indesign"};if(await e.peekBuffer(t,{length:Math.min(512,e.fileInfo.size),mayBeLess:!0}),tarHeaderChecksumMatches(t))return{ext:"tar",mime:"application/x-tar"};if(r([255,254,255,14,83,0,107,0,101,0,116,0,99,0,104,0,85,0,112,0,32,0,77,0,111,0,100,0,101,0,108,0]))return{ext:"skp",mime:"application/vnd.sketchup.skp"};if(n("-----BEGIN PGP MESSAGE-----"))return{ext:"pgp",mime:"application/pgp-encrypted"};if(t.length>=2&&r([255,224],{offset:0,mask:[255,224]})){if(r([16],{offset:1,mask:[22]}))return r([8],{offset:1,mask:[8]}),{ext:"aac",mime:"audio/aac"};if(r([2],{offset:1,mask:[6]}))return{ext:"mp3",mime:"audio/mpeg"};if(r([4],{offset:1,mask:[6]}))return{ext:"mp2",mime:"audio/mpeg"};if(r([6],{offset:1,mask:[6]}))return{ext:"mp1",mime:"audio/mpeg"}}}const stream=readableStream=>new Promise(((resolve,reject)=>{const stream=eval("require")("stream");readableStream.on("error",reject),readableStream.once("readable",(async()=>{const e=new stream.PassThrough;let t;t=stream.pipeline?stream.pipeline(readableStream,e,(()=>{})):readableStream.pipe(e);const r=readableStream.read(minimumBytes)||readableStream.read()||Buffer.alloc(0);try{const t=await fromBuffer(r);e.fileType=t}catch(e){reject(e)}resolve(t)}))})),fileType={fromStream,fromTokenizer,fromBuffer,stream};Object.defineProperty(fileType,"extensions",{get:()=>new Set(supported.extensions)}),Object.defineProperty(fileType,"mimeTypes",{get:()=>new Set(supported.mimeTypes)}),module.exports=fileType},"./node_modules/file-type/index.js":(e,t,r)=>{"use strict";const n=r("./node_modules/strtok3/lib/index.js"),i=r("./node_modules/file-type/core.js");const o={fromFile:async function(e){const t=await n.fromFile(e);try{return await i.fromTokenizer(t)}finally{await t.close()}}};Object.assign(o,i),Object.defineProperty(o,"extensions",{get:()=>i.extensions}),Object.defineProperty(o,"mimeTypes",{get:()=>i.mimeTypes}),e.exports=o},"./node_modules/file-type/supported.js":e=>{"use strict";e.exports={extensions:["jpg","png","apng","gif","webp","flif","xcf","cr2","cr3","orf","arw","dng","nef","rw2","raf","tif","bmp","icns","jxr","psd","indd","zip","tar","rar","gz","bz2","7z","dmg","mp4","mid","mkv","webm","mov","avi","mpg","mp2","mp3","m4a","oga","ogg","ogv","opus","flac","wav","spx","amr","pdf","epub","exe","swf","rtf","wasm","woff","woff2","eot","ttf","otf","ico","flv","ps","xz","sqlite","nes","crx","xpi","cab","deb","ar","rpm","Z","lz","cfb","mxf","mts","blend","bpg","docx","pptx","xlsx","3gp","3g2","jp2","jpm","jpx","mj2","aif","qcp","odt","ods","odp","xml","mobi","heic","cur","ktx","ape","wv","dcm","ics","glb","pcap","dsf","lnk","alias","voc","ac3","m4v","m4p","m4b","f4v","f4p","f4b","f4a","mie","asf","ogm","ogx","mpc","arrow","shp","aac","mp1","it","s3m","xm","ai","skp","avif","eps","lzh","pgp","asar","stl","chm","3mf","zst","jxl","vcf"],mimeTypes:["image/jpeg","image/png","image/gif","image/webp","image/flif","image/x-xcf","image/x-canon-cr2","image/x-canon-cr3","image/tiff","image/bmp","image/vnd.ms-photo","image/vnd.adobe.photoshop","application/x-indesign","application/epub+zip","application/x-xpinstall","application/vnd.oasis.opendocument.text","application/vnd.oasis.opendocument.spreadsheet","application/vnd.oasis.opendocument.presentation","application/vnd.openxmlformats-officedocument.wordprocessingml.document","application/vnd.openxmlformats-officedocument.presentationml.presentation","application/vnd.openxmlformats-officedocument.spreadsheetml.sheet","application/zip","application/x-tar","application/x-rar-compressed","application/gzip","application/x-bzip2","application/x-7z-compressed","application/x-apple-diskimage","application/x-apache-arrow","video/mp4","audio/midi","video/x-matroska","video/webm","video/quicktime","video/vnd.avi","audio/vnd.wave","audio/qcelp","audio/x-ms-asf","video/x-ms-asf","application/vnd.ms-asf","video/mpeg","video/3gpp","audio/mpeg","audio/mp4","audio/opus","video/ogg","audio/ogg","application/ogg","audio/x-flac","audio/ape","audio/wavpack","audio/amr","application/pdf","application/x-msdownload","application/x-shockwave-flash","application/rtf","application/wasm","font/woff","font/woff2","application/vnd.ms-fontobject","font/ttf","font/otf","image/x-icon","video/x-flv","application/postscript","application/eps","application/x-xz","application/x-sqlite3","application/x-nintendo-nes-rom","application/x-google-chrome-extension","application/vnd.ms-cab-compressed","application/x-deb","application/x-unix-archive","application/x-rpm","application/x-compress","application/x-lzip","application/x-cfb","application/x-mie","application/mxf","video/mp2t","application/x-blender","image/bpg","image/jp2","image/jpx","image/jpm","image/mj2","audio/aiff","application/xml","application/x-mobipocket-ebook","image/heif","image/heif-sequence","image/heic","image/heic-sequence","image/icns","image/ktx","application/dicom","audio/x-musepack","text/calendar","text/vcard","model/gltf-binary","application/vnd.tcpdump.pcap","audio/x-dsf","application/x.ms.shortcut","application/x.apple.alias","audio/x-voc","audio/vnd.dolby.dd-raw","audio/x-m4a","image/apng","image/x-olympus-orf","image/x-sony-arw","image/x-adobe-dng","image/x-nikon-nef","image/x-panasonic-rw2","image/x-fujifilm-raf","video/x-m4v","video/3gpp2","application/x-esri-shape","audio/aac","audio/x-it","audio/x-s3m","audio/x-xm","video/MP1S","video/MP2P","application/vnd.sketchup.skp","image/avif","application/x-lzh-compressed","application/pgp-encrypted","application/x-asar","model/stl","application/vnd.ms-htmlhelp","model/3mf","image/jxl","application/zstd"]}},"./node_modules/file-type/util.js":(e,t)=>{"use strict";t.stringToBytes=e=>[...e].map((e=>e.charCodeAt(0))),t.tarHeaderChecksumMatches=(e,t=0)=>{const r=parseInt(e.toString("utf8",148,154).replace(/\0.*$/,"").trim(),8);if(isNaN(r))return!1;let n=256;for(let r=t;r<t+148;r++)n+=e[r];for(let r=t+156;r<t+512;r++)n+=e[r];return r===n},t.uint32SyncSafeToken={get:(e,t)=>127&e[t+3]|e[t+2]<<7|e[t+1]<<14|e[t]<<21,len:4}},"./node_modules/fill-range/index.js":(e,t,r)=>{"use strict";const n=r("./node_modules/util/util.js"),i=r("./node_modules/to-regex-range/index.js"),o=e=>null!==e&&"object"==typeof e&&!Array.isArray(e),s=e=>"number"==typeof e||"string"==typeof e&&""!==e,a=e=>Number.isInteger(+e),u=e=>{let t=`${e}`,r=-1;if("-"===t[0]&&(t=t.slice(1)),"0"===t)return!1;for(;"0"===t[++r];);return r>0},l=(e,t,r)=>{if(t>0){let r="-"===e[0]?"-":"";r&&(e=e.slice(1)),e=r+e.padStart(r?t-1:t,"0")}return!1===r?String(e):e},d=(e,t)=>{let r="-"===e[0]?"-":"";for(r&&(e=e.slice(1),t--);e.length<t;)e="0"+e;return r?"-"+e:e},c=(e,t,r,n)=>{if(r)return i(e,t,{wrap:!1,...n});let o=String.fromCharCode(e);return e===t?o:`[${o}-${String.fromCharCode(t)}]`},f=(e,t,r)=>{if(Array.isArray(e)){let t=!0===r.wrap,n=r.capture?"":"?:";return t?`(${n}${e.join("|")})`:e.join("|")}return i(e,t,r)},p=(...e)=>new RangeError("Invalid range arguments: "+n.inspect(...e)),h=(e,t,r)=>{if(!0===r.strictRanges)throw p([e,t]);return[]},m=(e,t,r=1,n={})=>{let i=Number(e),o=Number(t);if(!Number.isInteger(i)||!Number.isInteger(o)){if(!0===n.strictRanges)throw p([e,t]);return[]}0===i&&(i=0),0===o&&(o=0);let s=i>o,a=String(e),h=String(t),m=String(r);r=Math.max(Math.abs(r),1);let g=u(a)||u(h)||u(m),_=g?Math.max(a.length,h.length,m.length):0,b=!1===g&&!1===((e,t,r)=>"string"==typeof e||"string"==typeof t||!0===r.stringify)(e,t,n),y=n.transform||(e=>t=>!0===e?Number(t):String(t))(b);if(n.toRegex&&1===r)return c(d(e,_),d(t,_),!0,n);let w={negatives:[],positives:[]},v=[],E=0;for(;s?i>=o:i<=o;)!0===n.toRegex&&r>1?w[(S=i)<0?"negatives":"positives"].push(Math.abs(S)):v.push(l(y(i,E),_,b)),i=s?i-r:i+r,E++;var S;return!0===n.toRegex?r>1?((e,t)=>{e.negatives.sort(((e,t)=>e<t?-1:e>t?1:0)),e.positives.sort(((e,t)=>e<t?-1:e>t?1:0));let r,n=t.capture?"":"?:",i="",o="";return e.positives.length&&(i=e.positives.join("|")),e.negatives.length&&(o=`-(${n}${e.negatives.join("|")})`),r=i&&o?`${i}|${o}`:i||o,t.wrap?`(${n}${r})`:r})(w,n):f(v,null,{wrap:!1,...n}):v},g=(e,t,r,n={})=>{if(null==t&&s(e))return[e];if(!s(e)||!s(t))return h(e,t,n);if("function"==typeof r)return g(e,t,1,{transform:r});if(o(r))return g(e,t,0,r);let i={...n};return!0===i.capture&&(i.wrap=!0),r=r||i.step||1,a(r)?a(e)&&a(t)?m(e,t,r,i):((e,t,r=1,n={})=>{if(!a(e)&&e.length>1||!a(t)&&t.length>1)return h(e,t,n);let i=n.transform||(e=>String.fromCharCode(e)),o=`${e}`.charCodeAt(0),s=`${t}`.charCodeAt(0),u=o>s,l=Math.min(o,s),d=Math.max(o,s);if(n.toRegex&&1===r)return c(l,d,!1,n);let p=[],m=0;for(;u?o>=s:o<=s;)p.push(i(o,m)),o=u?o-r:o+r,m++;return!0===n.toRegex?f(p,null,{wrap:!1,options:n}):p})(e,t,Math.max(Math.abs(r),1),i):null==r||o(r)?g(e,t,1,r):((e,t)=>{if(!0===t.strictRanges)throw new TypeError(`Expected step "${e}" to be a number`);return[]})(r,i)};e.exports=g},"./node_modules/graceful-fs/clone.js":e=>{"use strict";e.exports=function(e){if(null===e||"object"!=typeof e)return e;if(e instanceof Object)var r={__proto__:t(e)};else r=Object.create(null);return Object.getOwnPropertyNames(e).forEach((function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(e,t))})),r};var t=Object.getPrototypeOf||function(e){return e.__proto__}},"./node_modules/graceful-fs/graceful-fs.js":(e,t,r)=>{var n,i,o=r("./node_modules/process/browser.js"),s=r("./node_modules/console-browserify/index.js"),a=r("?cbdb"),u=r("./node_modules/graceful-fs/polyfills.js"),l=r("./node_modules/graceful-fs/legacy-streams.js"),d=r("./node_modules/graceful-fs/clone.js"),c=r("./node_modules/util/util.js");function f(e,t){Object.defineProperty(e,n,{get:function(){return t}})}"function"==typeof Symbol&&"function"==typeof Symbol.for?(n=Symbol.for("graceful-fs.queue"),i=Symbol.for("graceful-fs.previous")):(n="___graceful-fs.queue",i="___graceful-fs.previous");var p,h=function(){};if(c.debuglog?h=c.debuglog("gfs4"):/\bgfs4\b/i.test(o.env.NODE_DEBUG||"")&&(h=function(){var e=c.format.apply(c,arguments);e="GFS4: "+e.split(/\n/).join("\nGFS4: "),s.error(e)}),!a[n]){var m=r.g[n]||[];f(a,m),a.close=function(e){function t(t,r){return e.call(a,t,(function(e){e||b(),"function"==typeof r&&r.apply(this,arguments)}))}return Object.defineProperty(t,i,{value:e}),t}(a.close),a.closeSync=function(e){function t(t){e.apply(a,arguments),b()}return Object.defineProperty(t,i,{value:e}),t}(a.closeSync),/\bgfs4\b/i.test(o.env.NODE_DEBUG||"")&&o.on("exit",(function(){h(a[n]),r("./node_modules/assert/build/assert.js").equal(a[n].length,0)}))}function g(e){u(e),e.gracefulify=g,e.createReadStream=function(t,r){return new e.ReadStream(t,r)},e.createWriteStream=function(t,r){return new e.WriteStream(t,r)};var t=e.readFile;e.readFile=function(e,r,n){"function"==typeof r&&(n=r,r=null);return function e(r,n,i,o){return t(r,n,(function(t){!t||"EMFILE"!==t.code&&"ENFILE"!==t.code?"function"==typeof i&&i.apply(this,arguments):_([e,[r,n,i],t,o||Date.now(),Date.now()])}))}(e,r,n)};var r=e.writeFile;e.writeFile=function(e,t,n,i){"function"==typeof n&&(i=n,n=null);return function e(t,n,i,o,s){return r(t,n,i,(function(r){!r||"EMFILE"!==r.code&&"ENFILE"!==r.code?"function"==typeof o&&o.apply(this,arguments):_([e,[t,n,i,o],r,s||Date.now(),Date.now()])}))}(e,t,n,i)};var n=e.appendFile;n&&(e.appendFile=function(e,t,r,i){"function"==typeof r&&(i=r,r=null);return function e(t,r,i,o,s){return n(t,r,i,(function(n){!n||"EMFILE"!==n.code&&"ENFILE"!==n.code?"function"==typeof o&&o.apply(this,arguments):_([e,[t,r,i,o],n,s||Date.now(),Date.now()])}))}(e,t,r,i)});var i=e.copyFile;i&&(e.copyFile=function(e,t,r,n){"function"==typeof r&&(n=r,r=0);return function e(t,r,n,o,s){return i(t,r,n,(function(i){!i||"EMFILE"!==i.code&&"ENFILE"!==i.code?"function"==typeof o&&o.apply(this,arguments):_([e,[t,r,n,o],i,s||Date.now(),Date.now()])}))}(e,t,r,n)});var s=e.readdir;e.readdir=function(e,t,r){"function"==typeof t&&(r=t,t=null);var n=a.test(o.version)?function(e,t,r,n){return s(e,i(e,t,r,n))}:function(e,t,r,n){return s(e,t,i(e,t,r,n))};return n(e,t,r);function i(e,t,r,i){return function(o,s){!o||"EMFILE"!==o.code&&"ENFILE"!==o.code?(s&&s.sort&&s.sort(),"function"==typeof r&&r.call(this,o,s)):_([n,[e,t,r],o,i||Date.now(),Date.now()])}}};var a=/^v[0-5]\./;if("v0.8"===o.version.substr(0,4)){var d=l(e);m=d.ReadStream,b=d.WriteStream}var c=e.ReadStream;c&&(m.prototype=Object.create(c.prototype),m.prototype.open=function(){var e=this;w(e.path,e.flags,e.mode,(function(t,r){t?(e.autoClose&&e.destroy(),e.emit("error",t)):(e.fd=r,e.emit("open",r),e.read())}))});var f=e.WriteStream;f&&(b.prototype=Object.create(f.prototype),b.prototype.open=function(){var e=this;w(e.path,e.flags,e.mode,(function(t,r){t?(e.destroy(),e.emit("error",t)):(e.fd=r,e.emit("open",r))}))}),Object.defineProperty(e,"ReadStream",{get:function(){return m},set:function(e){m=e},enumerable:!0,configurable:!0}),Object.defineProperty(e,"WriteStream",{get:function(){return b},set:function(e){b=e},enumerable:!0,configurable:!0});var p=m;Object.defineProperty(e,"FileReadStream",{get:function(){return p},set:function(e){p=e},enumerable:!0,configurable:!0});var h=b;function m(e,t){return this instanceof m?(c.apply(this,arguments),this):m.apply(Object.create(m.prototype),arguments)}function b(e,t){return this instanceof b?(f.apply(this,arguments),this):b.apply(Object.create(b.prototype),arguments)}Object.defineProperty(e,"FileWriteStream",{get:function(){return h},set:function(e){h=e},enumerable:!0,configurable:!0});var y=e.open;function w(e,t,r,n){return"function"==typeof r&&(n=r,r=null),function e(t,r,n,i,o){return y(t,r,n,(function(s,a){!s||"EMFILE"!==s.code&&"ENFILE"!==s.code?"function"==typeof i&&i.apply(this,arguments):_([e,[t,r,n,i],s,o||Date.now(),Date.now()])}))}(e,t,r,n)}return e.open=w,e}function _(e){h("ENQUEUE",e[0].name,e[1]),a[n].push(e),y()}function b(){for(var e=Date.now(),t=0;t<a[n].length;++t)a[n][t].length>2&&(a[n][t][3]=e,a[n][t][4]=e);y()}function y(){if(clearTimeout(p),p=void 0,0!==a[n].length){var e=a[n].shift(),t=e[0],r=e[1],i=e[2],o=e[3],s=e[4];if(void 0===o)h("RETRY",t.name,r),t.apply(null,r);else if(Date.now()-o>=6e4){h("TIMEOUT",t.name,r);var u=r.pop();"function"==typeof u&&u.call(null,i)}else{var l=Date.now()-s,d=Math.max(s-o,1);l>=Math.min(1.2*d,100)?(h("RETRY",t.name,r),t.apply(null,r.concat([o]))):a[n].push(e)}void 0===p&&(p=setTimeout(y,0))}}r.g[n]||f(r.g,a[n]),e.exports=g(d(a)),o.env.TEST_GRACEFUL_FS_GLOBAL_PATCH&&!a.__patched&&(e.exports=g(a),a.__patched=!0)},"./node_modules/graceful-fs/legacy-streams.js":(e,t,r)=>{var n=r("./node_modules/process/browser.js"),i=r("./node_modules/stream-browserify/index.js").Stream;e.exports=function(e){return{ReadStream:function t(r,o){if(!(this instanceof t))return new t(r,o);i.call(this);var s=this;this.path=r,this.fd=null,this.readable=!0,this.paused=!1,this.flags="r",this.mode=438,this.bufferSize=65536,o=o||{};for(var a=Object.keys(o),u=0,l=a.length;u<l;u++){var d=a[u];this[d]=o[d]}this.encoding&&this.setEncoding(this.encoding);if(void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(void 0===this.end)this.end=1/0;else if("number"!=typeof this.end)throw TypeError("end must be a Number");if(this.start>this.end)throw new Error("start must be <= end");this.pos=this.start}if(null!==this.fd)return void n.nextTick((function(){s._read()}));e.open(this.path,this.flags,this.mode,(function(e,t){if(e)return s.emit("error",e),void(s.readable=!1);s.fd=t,s.emit("open",t),s._read()}))},WriteStream:function t(r,n){if(!(this instanceof t))return new t(r,n);i.call(this),this.path=r,this.fd=null,this.writable=!0,this.flags="w",this.encoding="binary",this.mode=438,this.bytesWritten=0,n=n||{};for(var o=Object.keys(n),s=0,a=o.length;s<a;s++){var u=o[s];this[u]=n[u]}if(void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(this.start<0)throw new Error("start must be >= zero");this.pos=this.start}this.busy=!1,this._queue=[],null===this.fd&&(this._open=e.open,this._queue.push([this._open,this.path,this.flags,this.mode,void 0]),this.flush())}}}},"./node_modules/graceful-fs/polyfills.js":(e,t,r)=>{var n=r("./node_modules/process/browser.js"),i=r("./node_modules/constants-browserify/constants.json"),o=n.cwd,s=null,a=n.env.GRACEFUL_FS_PLATFORM||n.platform;n.cwd=function(){return s||(s=o.call(n)),s};try{n.cwd()}catch(e){}if("function"==typeof n.chdir){var u=n.chdir;n.chdir=function(e){s=null,u.call(n,e)},Object.setPrototypeOf&&Object.setPrototypeOf(n.chdir,u)}e.exports=function(e){i.hasOwnProperty("O_SYMLINK")&&n.version.match(/^v0\.6\.[0-2]|^v0\.5\./)&&function(e){e.lchmod=function(t,r,n){e.open(t,i.O_WRONLY|i.O_SYMLINK,r,(function(t,i){t?n&&n(t):e.fchmod(i,r,(function(t){e.close(i,(function(e){n&&n(t||e)}))}))}))},e.lchmodSync=function(t,r){var n,o=e.openSync(t,i.O_WRONLY|i.O_SYMLINK,r),s=!0;try{n=e.fchmodSync(o,r),s=!1}finally{if(s)try{e.closeSync(o)}catch(e){}else e.closeSync(o)}return n}}(e);e.lutimes||function(e){i.hasOwnProperty("O_SYMLINK")&&e.futimes?(e.lutimes=function(t,r,n,o){e.open(t,i.O_SYMLINK,(function(t,i){t?o&&o(t):e.futimes(i,r,n,(function(t){e.close(i,(function(e){o&&o(t||e)}))}))}))},e.lutimesSync=function(t,r,n){var o,s=e.openSync(t,i.O_SYMLINK),a=!0;try{o=e.futimesSync(s,r,n),a=!1}finally{if(a)try{e.closeSync(s)}catch(e){}else e.closeSync(s)}return o}):e.futimes&&(e.lutimes=function(e,t,r,i){i&&n.nextTick(i)},e.lutimesSync=function(){})}(e);e.chown=o(e.chown),e.fchown=o(e.fchown),e.lchown=o(e.lchown),e.chmod=t(e.chmod),e.fchmod=t(e.fchmod),e.lchmod=t(e.lchmod),e.chownSync=s(e.chownSync),e.fchownSync=s(e.fchownSync),e.lchownSync=s(e.lchownSync),e.chmodSync=r(e.chmodSync),e.fchmodSync=r(e.fchmodSync),e.lchmodSync=r(e.lchmodSync),e.stat=u(e.stat),e.fstat=u(e.fstat),e.lstat=u(e.lstat),e.statSync=l(e.statSync),e.fstatSync=l(e.fstatSync),e.lstatSync=l(e.lstatSync),e.chmod&&!e.lchmod&&(e.lchmod=function(e,t,r){r&&n.nextTick(r)},e.lchmodSync=function(){});e.chown&&!e.lchown&&(e.lchown=function(e,t,r,i){i&&n.nextTick(i)},e.lchownSync=function(){});"win32"===a&&(e.rename="function"!=typeof e.rename?e.rename:function(t){function r(r,n,i){var o=Date.now(),s=0;t(r,n,(function a(u){if(u&&("EACCES"===u.code||"EPERM"===u.code)&&Date.now()-o<6e4)return setTimeout((function(){e.stat(n,(function(e,o){e&&"ENOENT"===e.code?t(r,n,a):i(u)}))}),s),void(s<100&&(s+=10));i&&i(u)}))}return Object.setPrototypeOf&&Object.setPrototypeOf(r,t),r}(e.rename));function t(t){return t?function(r,n,i){return t.call(e,r,n,(function(e){d(e)&&(e=null),i&&i.apply(this,arguments)}))}:t}function r(t){return t?function(r,n){try{return t.call(e,r,n)}catch(e){if(!d(e))throw e}}:t}function o(t){return t?function(r,n,i,o){return t.call(e,r,n,i,(function(e){d(e)&&(e=null),o&&o.apply(this,arguments)}))}:t}function s(t){return t?function(r,n,i){try{return t.call(e,r,n,i)}catch(e){if(!d(e))throw e}}:t}function u(t){return t?function(r,n,i){function o(e,t){t&&(t.uid<0&&(t.uid+=4294967296),t.gid<0&&(t.gid+=4294967296)),i&&i.apply(this,arguments)}return"function"==typeof n&&(i=n,n=null),n?t.call(e,r,n,o):t.call(e,r,o)}:t}function l(t){return t?function(r,n){var i=n?t.call(e,r,n):t.call(e,r);return i&&(i.uid<0&&(i.uid+=4294967296),i.gid<0&&(i.gid+=4294967296)),i}:t}function d(e){return!e||("ENOSYS"===e.code||!(n.getuid&&0===n.getuid()||"EINVAL"!==e.code&&"EPERM"!==e.code))}e.read="function"!=typeof e.read?e.read:function(t){function r(r,n,i,o,s,a){var u;if(a&&"function"==typeof a){var l=0;u=function(d,c,f){if(d&&"EAGAIN"===d.code&&l<10)return l++,t.call(e,r,n,i,o,s,u);a.apply(this,arguments)}}return t.call(e,r,n,i,o,s,u)}return Object.setPrototypeOf&&Object.setPrototypeOf(r,t),r}(e.read),e.readSync="function"!=typeof e.readSync?e.readSync:(c=e.readSync,function(t,r,n,i,o){for(var s=0;;)try{return c.call(e,t,r,n,i,o)}catch(e){if("EAGAIN"===e.code&&s<10){s++;continue}throw e}});var c}},"./node_modules/ieee754/index.js":(e,t)=>{t.read=function(e,t,r,n,i){var o,s,a=8*i-n-1,u=(1<<a)-1,l=u>>1,d=-7,c=r?i-1:0,f=r?-1:1,p=e[t+c];for(c+=f,o=p&(1<<-d)-1,p>>=-d,d+=a;d>0;o=256*o+e[t+c],c+=f,d-=8);for(s=o&(1<<-d)-1,o>>=-d,d+=n;d>0;s=256*s+e[t+c],c+=f,d-=8);if(0===o)o=1-l;else{if(o===u)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,n),o-=l}return(p?-1:1)*s*Math.pow(2,o-n)},t.write=function(e,t,r,n,i,o){var s,a,u,l=8*o-i-1,d=(1<<l)-1,c=d>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:o-1,h=n?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=d):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+c>=1?f/u:f*Math.pow(2,1-c))*u>=2&&(s++,u/=2),s+c>=d?(a=0,s=d):s+c>=1?(a=(t*u-1)*Math.pow(2,i),s+=c):(a=t*Math.pow(2,c-1)*Math.pow(2,i),s=0));i>=8;e[r+p]=255&a,p+=h,a/=256,i-=8);for(s=s<<i|a,l+=i;l>0;e[r+p]=255&s,p+=h,s/=256,l-=8);e[r+p-h]|=128*m}},"./node_modules/ignore/index.js":(e,t,r)=>{var n=r("./node_modules/process/browser.js");function i(e){return Array.isArray(e)?e:[e]}const o=/^\s+$/,s=/^\\!/,a=/^\\#/,u=/\r?\n/g,l=/^\.*\/|^\.+$/,d="undefined"!=typeof Symbol?Symbol.for("node-ignore"):"node-ignore",c=/([0-z])-([0-z])/g,f=()=>!1,p=[[/\\?\s+$/,e=>0===e.indexOf("\\")?" ":""],[/\\\s/g,()=>" "],[/[\\$.|*+(){^]/g,e=>`\\${e}`],[/(?!\\)\?/g,()=>"[^/]"],[/^\//,()=>"^"],[/\//g,()=>"\\/"],[/^\^*\\\*\\\*\\\//,()=>"^(?:.*\\/)?"],[/^(?=[^^])/,function(){return/\/(?!$)/.test(this)?"^":"(?:^|\\/)"}],[/\\\/\\\*\\\*(?=\\\/|$)/g,(e,t,r)=>t+6<r.length?"(?:\\/[^\\/]+)*":"\\/.+"],[/(^|[^\\]+)\\\*(?=.+)/g,(e,t)=>`${t}[^\\/]*`],[/\\\\\\(?=[$.|*+(){^])/g,()=>"\\"],[/\\\\/g,()=>"\\"],[/(\\)?\[([^\]/]*?)(\\*)($|\])/g,(e,t,r,n,i)=>"\\"===t?`\\[${r}${(e=>{const{length:t}=e;return e.slice(0,t-t%2)})(n)}${i}`:"]"===i&&n.length%2==0?`[${(e=>e.replace(c,((e,t,r)=>t.charCodeAt(0)<=r.charCodeAt(0)?e:"")))(r)}${n}]`:"[]"],[/(?:[^*])$/,e=>/\/$/.test(e)?`${e}$`:`${e}(?=$|\\/$)`],[/(\^|\\\/)?\\\*$/,(e,t)=>`${t?`${t}[^/]+`:"[^/]*"}(?=$|\\/$)`]],h=Object.create(null),m=e=>"string"==typeof e;class g{constructor(e,t,r,n){this.origin=e,this.pattern=t,this.negative=r,this.regex=n}}const _=(e,t)=>{const r=e;let n=!1;0===e.indexOf("!")&&(n=!0,e=e.substr(1));const i=((e,t)=>{let r=h[e];return r||(r=p.reduce(((t,r)=>t.replace(r[0],r[1].bind(e))),e),h[e]=r),t?new RegExp(r,"i"):new RegExp(r)})(e=e.replace(s,"!").replace(a,"#"),t);return new g(r,e,n,i)},b=(e,t)=>{throw new t(e)},y=(e,t,r)=>{if(!m(e))return r(`path must be a string, but got \`${t}\``,TypeError);if(!e)return r("path must not be empty",TypeError);if(y.isNotRelative(e)){return r(`path should be a ${"`path.relative()`d"} string, but got "${t}"`,RangeError)}return!0},w=e=>l.test(e);y.isNotRelative=w,y.convert=e=>e;class v{constructor({ignorecase:e=!0,ignoreCase:t=e,allowRelativePaths:r=!1}={}){var n,i,o;n=this,i=d,o=!0,Object.defineProperty(n,i,{value:o}),this._rules=[],this._ignoreCase=t,this._allowRelativePaths=r,this._initCache()}_initCache(){this._ignoreCache=Object.create(null),this._testCache=Object.create(null)}_addPattern(e){if(e&&e[d])return this._rules=this._rules.concat(e._rules),void(this._added=!0);if((e=>e&&m(e)&&!o.test(e)&&0!==e.indexOf("#"))(e)){const t=_(e,this._ignoreCase);this._added=!0,this._rules.push(t)}}add(e){return this._added=!1,i(m(e)?(e=>e.split(u))(e):e).forEach(this._addPattern,this),this._added&&this._initCache(),this}addPattern(e){return this.add(e)}_testOne(e,t){let r=!1,n=!1;return this._rules.forEach((i=>{const{negative:o}=i;if(n===o&&r!==n||o&&!r&&!n&&!t)return;i.regex.test(e)&&(r=!o,n=o)})),{ignored:r,unignored:n}}_test(e,t,r,n){const i=e&&y.convert(e);return y(i,e,this._allowRelativePaths?f:b),this._t(i,t,r,n)}_t(e,t,r,n){if(e in t)return t[e];if(n||(n=e.split("/")),n.pop(),!n.length)return t[e]=this._testOne(e,r);const i=this._t(n.join("/")+"/",t,r,n);return t[e]=i.ignored?i:this._testOne(e,r)}ignores(e){return this._test(e,this._ignoreCache,!1).ignored}createFilter(){return e=>!this.ignores(e)}filter(e){return i(e).filter(this.createFilter())}test(e){return this._test(e,this._testCache,!0)}}const E=e=>new v(e);if(E.isPathValid=e=>y(e&&y.convert(e),e,f),E.default=E,e.exports=E,void 0!==n&&(n.env&&n.env.IGNORE_TEST_WIN32||"win32"===n.platform)){const e=e=>/^\\\\\?\\/.test(e)||/["<>|\u0000-\u001F]+/u.test(e)?e:e.replace(/\\/g,"/");y.convert=e;const t=/^[a-z]:\//i;y.isNotRelative=e=>t.test(e)||w(e)}},"./node_modules/imagemin/node_modules/slash/index.js":e=>{"use strict";e.exports=e=>{const t=/^\\\\\?\\/.test(e),r=/[^\u0000-\u0080]+/.test(e);return t||r?e:e.replace(/\\/g,"/")}},"./node_modules/is-extglob/index.js":e=>{e.exports=function(e){if("string"!=typeof e||""===e)return!1;for(var t;t=/(\\).|([@?!+*]\(.*\))/g.exec(e);){if(t[2])return!0;e=e.slice(t.index+t[0].length)}return!1}},"./node_modules/is-glob/index.js":(e,t,r)=>{var n=r("./node_modules/is-extglob/index.js"),i={"{":"}","(":")","[":"]"},o=function(e){if("!"===e[0])return!0;for(var t=0,r=-2,n=-2,o=-2,s=-2,a=-2;t<e.length;){if("*"===e[t])return!0;if("?"===e[t+1]&&/[\].+)]/.test(e[t]))return!0;if(-1!==n&&"["===e[t]&&"]"!==e[t+1]&&(n<t&&(n=e.indexOf("]",t)),n>t)){if(-1===a||a>n)return!0;if(-1===(a=e.indexOf("\\",t))||a>n)return!0}if(-1!==o&&"{"===e[t]&&"}"!==e[t+1]&&(o=e.indexOf("}",t))>t&&(-1===(a=e.indexOf("\\",t))||a>o))return!0;if(-1!==s&&"("===e[t]&&"?"===e[t+1]&&/[:!=]/.test(e[t+2])&&")"!==e[t+3]&&(s=e.indexOf(")",t))>t&&(-1===(a=e.indexOf("\\",t))||a>s))return!0;if(-1!==r&&"("===e[t]&&"|"!==e[t+1]&&(r<t&&(r=e.indexOf("|",t)),-1!==r&&")"!==e[r+1]&&(s=e.indexOf(")",r))>r&&(-1===(a=e.indexOf("\\",r))||a>s)))return!0;if("\\"===e[t]){var u=e[t+1];t+=2;var l=i[u];if(l){var d=e.indexOf(l,t);-1!==d&&(t=d+1)}if("!"===e[t])return!0}else t++}return!1},s=function(e){if("!"===e[0])return!0;for(var t=0;t<e.length;){if(/[*?{}()[\]]/.test(e[t]))return!0;if("\\"===e[t]){var r=e[t+1];t+=2;var n=i[r];if(n){var o=e.indexOf(n,t);-1!==o&&(t=o+1)}if("!"===e[t])return!0}else t++}return!1};e.exports=function(e,t){if("string"!=typeof e||""===e)return!1;if(n(e))return!0;var r=o;return t&&!1===t.strict&&(r=s),r(e)}},"./node_modules/is-number/index.js":e=>{"use strict";e.exports=function(e){return"number"==typeof e?e-e==0:"string"==typeof e&&""!==e.trim()&&(Number.isFinite?Number.isFinite(+e):isFinite(+e))}},"./node_modules/junk/index.js":(e,t)=>{"use strict";t.re=()=>{throw new Error("`junk.re` was renamed to `junk.regex`")},t.regex=new RegExp(["^npm-debug\\.log$","^\\..*\\.swp$","^\\.DS_Store$","^\\.AppleDouble$","^\\.LSOverride$","^Icon\\r$","^\\._.*","^\\.Spotlight-V100(?:$|\\/)","\\.Trashes","^__MACOSX$","~$","^Thumbs\\.db$","^ehthumbs\\.db$","^Desktop\\.ini$","@eaDir$"].join("|")),t.is=e=>t.regex.test(e),t.not=e=>!t.is(e),t.default=e.exports},"./node_modules/merge2/index.js":(e,t,r)=>{"use strict";var n=r("./node_modules/process/browser.js");const i=r("./node_modules/stream-browserify/index.js").PassThrough,o=Array.prototype.slice;function s(e,t){if(Array.isArray(e))for(let r=0,n=e.length;r<n;r++)e[r]=s(e[r],t);else{if(!e._readableState&&e.pipe&&(e=e.pipe(i(t))),!e._readableState||!e.pause||!e.pipe)throw new Error("Only readable stream can be merged.");e.pause()}return e}e.exports=function(){const e=[],t=o.call(arguments);let r=!1,a=t[t.length-1];a&&!Array.isArray(a)&&null==a.pipe?t.pop():a={};const u=!1!==a.end,l=!0===a.pipeError;null==a.objectMode&&(a.objectMode=!0);null==a.highWaterMark&&(a.highWaterMark=65536);const d=i(a);function c(){for(let t=0,r=arguments.length;t<r;t++)e.push(s(arguments[t],a));return f(),this}function f(){if(r)return;r=!0;let t=e.shift();if(!t)return void n.nextTick(p);Array.isArray(t)||(t=[t]);let i=t.length+1;function o(){--i>0||(r=!1,f())}function s(e){function t(){e.removeListener("merge2UnpipeEnd",t),e.removeListener("end",t),l&&e.removeListener("error",r),o()}function r(e){d.emit("error",e)}if(e._readableState.endEmitted)return o();e.on("merge2UnpipeEnd",t),e.on("end",t),l&&e.on("error",r),e.pipe(d,{end:!1}),e.resume()}for(let e=0;e<t.length;e++)s(t[e]);o()}function p(){r=!1,d.emit("queueDrain"),u&&d.end()}d.setMaxListeners(0),d.add=c,d.on("unpipe",(function(e){e.emit("merge2UnpipeEnd")})),t.length&&c.apply(null,t);return d}},"./node_modules/micromatch/index.js":(e,t,r)=>{"use strict";const n=r("./node_modules/util/util.js"),i=r("./node_modules/braces/index.js"),o=r("./node_modules/picomatch/index.js"),s=r("./node_modules/picomatch/lib/utils.js"),a=e=>""===e||"./"===e,u=(e,t,r)=>{t=[].concat(t),e=[].concat(e);let n=new Set,i=new Set,s=new Set,a=0,u=e=>{s.add(e.output),r&&r.onResult&&r.onResult(e)};for(let s=0;s<t.length;s++){let l=o(String(t[s]),{...r,onResult:u},!0),d=l.state.negated||l.state.negatedExtglob;d&&a++;for(let t of e){let e=l(t,!0);(d?!e.isMatch:e.isMatch)&&(d?n.add(e.output):(n.delete(e.output),i.add(e.output)))}}let l=(a===t.length?[...s]:[...i]).filter((e=>!n.has(e)));if(r&&0===l.length){if(!0===r.failglob)throw new Error(`No matches found for "${t.join(", ")}"`);if(!0===r.nonull||!0===r.nullglob)return r.unescape?t.map((e=>e.replace(/\\/g,""))):t}return l};u.match=u,u.matcher=(e,t)=>o(e,t),u.any=u.isMatch=(e,t,r)=>o(t,r)(e),u.not=(e,t,r={})=>{t=[].concat(t).map(String);let n=new Set,i=[],o=new Set(u(e,t,{...r,onResult:e=>{r.onResult&&r.onResult(e),i.push(e.output)}}));for(let e of i)o.has(e)||n.add(e);return[...n]},u.contains=(e,t,r)=>{if("string"!=typeof e)throw new TypeError(`Expected a string: "${n.inspect(e)}"`);if(Array.isArray(t))return t.some((t=>u.contains(e,t,r)));if("string"==typeof t){if(a(e)||a(t))return!1;if(e.includes(t)||e.startsWith("./")&&e.slice(2).includes(t))return!0}return u.isMatch(e,t,{...r,contains:!0})},u.matchKeys=(e,t,r)=>{if(!s.isObject(e))throw new TypeError("Expected the first argument to be an object");let n=u(Object.keys(e),t,r),i={};for(let t of n)i[t]=e[t];return i},u.some=(e,t,r)=>{let n=[].concat(e);for(let e of[].concat(t)){let t=o(String(e),r);if(n.some((e=>t(e))))return!0}return!1},u.every=(e,t,r)=>{let n=[].concat(e);for(let e of[].concat(t)){let t=o(String(e),r);if(!n.every((e=>t(e))))return!1}return!0},u.all=(e,t,r)=>{if("string"!=typeof e)throw new TypeError(`Expected a string: "${n.inspect(e)}"`);return[].concat(t).every((t=>o(t,r)(e)))},u.capture=(e,t,r)=>{let n=s.isWindows(r),i=o.makeRe(String(e),{...r,capture:!0}).exec(n?s.toPosixSlashes(t):t);if(i)return i.slice(1).map((e=>void 0===e?"":e))},u.makeRe=(...e)=>o.makeRe(...e),u.scan=(...e)=>o.scan(...e),u.parse=(e,t)=>{let r=[];for(let n of[].concat(e||[]))for(let e of i(String(n),t))r.push(o.parse(e,t));return r},u.braces=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");return t&&!0===t.nobrace||!/\{.*\}/.test(e)?[e]:i(e,t)},u.braceExpand=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");return u.braces(e,{...t,expand:!0})},e.exports=u},"./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js":(e,t,r)=>{"use strict";var n=r("./node_modules/console-browserify/index.js");const i=r("./node_modules/base64-js/index.js"),o=r("./node_modules/ieee754/index.js"),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=l,t.SlowBuffer=function(e){+e!=e&&(e=0);return l.alloc(+e)},t.INSPECT_MAX_BYTES=50;const a=2147483647;function u(e){if(e>a)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,l.prototype),t}function l(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return f(e)}return d(e,t,r)}function d(e,t,r){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!l.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|g(e,t);let n=u(r);const i=n.write(e,t);i!==r&&(n=n.slice(0,i));return n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(X(e,Uint8Array)){const t=new Uint8Array(e);return h(t.buffer,t.byteOffset,t.byteLength)}return p(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(X(e,ArrayBuffer)||e&&X(e.buffer,ArrayBuffer))return h(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(X(e,SharedArrayBuffer)||e&&X(e.buffer,SharedArrayBuffer)))return h(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return l.from(n,t,r);const i=function(e){if(l.isBuffer(e)){const t=0|m(e.length),r=u(t);return 0===r.length||e.copy(r,0,0,t),r}if(void 0!==e.length)return"number"!=typeof e.length||Q(e.length)?u(0):p(e);if("Buffer"===e.type&&Array.isArray(e.data))return p(e.data)}(e);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return l.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function f(e){return c(e),u(e<0?0:0|m(e))}function p(e){const t=e.length<0?0:0|m(e.length),r=u(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function h(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,l.prototype),n}function m(e){if(e>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|e}function g(e,t){if(l.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||X(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let i=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return K(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return Y(e).length;default:if(i)return n?-1:K(e).length;t=(""+t).toLowerCase(),i=!0}}function _(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return C(this,t,r);case"utf8":case"utf-8":return j(this,t,r);case"ascii":return T(this,t,r);case"latin1":case"binary":return k(this,t,r);case"base64":return A(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return L(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function b(e,t,r){const n=e[t];e[t]=e[r],e[r]=n}function y(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),Q(r=+r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=l.from(t,n)),l.isBuffer(t))return 0===t.length?-1:w(e,t,r,n,i);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):w(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function w(e,t,r,n,i){let o,s=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;s=2,a/=2,u/=2,r/=2}function l(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){let n=-1;for(o=r;o<a;o++)if(l(e,o)===l(t,-1===n?0:o-n)){if(-1===n&&(n=o),o-n+1===u)return n*s}else-1!==n&&(o-=o-n),n=-1}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){let r=!0;for(let n=0;n<u;n++)if(l(e,o+n)!==l(t,n)){r=!1;break}if(r)return o}return-1}function v(e,t,r,n){r=Number(r)||0;const i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;const o=t.length;let s;for(n>o/2&&(n=o/2),s=0;s<n;++s){const n=parseInt(t.substr(2*s,2),16);if(Q(n))return s;e[r+s]=n}return s}function E(e,t,r,n){return V(K(t,e.length-r),e,r,n)}function S(e,t,r,n){return V(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function x(e,t,r,n){return V(Y(t),e,r,n)}function R(e,t,r,n){return V(function(e,t){let r,n,i;const o=[];for(let s=0;s<e.length&&!((t-=2)<0);++s)r=e.charCodeAt(s),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function A(e,t,r){return 0===t&&r===e.length?i.fromByteArray(e):i.fromByteArray(e.slice(t,r))}function j(e,t,r){r=Math.min(e.length,r);const n=[];let i=t;for(;i<r;){const t=e[i];let o=null,s=t>239?4:t>223?3:t>191?2:1;if(i+s<=r){let r,n,a,u;switch(s){case 1:t<128&&(o=t);break;case 2:r=e[i+1],128==(192&r)&&(u=(31&t)<<6|63&r,u>127&&(o=u));break;case 3:r=e[i+1],n=e[i+2],128==(192&r)&&128==(192&n)&&(u=(15&t)<<12|(63&r)<<6|63&n,u>2047&&(u<55296||u>57343)&&(o=u));break;case 4:r=e[i+1],n=e[i+2],a=e[i+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(u=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&a,u>65535&&u<1114112&&(o=u))}}null===o?(o=65533,s=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),i+=s}return function(e){const t=e.length;if(t<=O)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=O));return r}(n)}t.kMaxLength=a,l.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),l.TYPED_ARRAY_SUPPORT||void 0===n||"function"!=typeof n.error||n.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(l.prototype,"parent",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.buffer}}),Object.defineProperty(l.prototype,"offset",{enumerable:!0,get:function(){if(l.isBuffer(this))return this.byteOffset}}),l.poolSize=8192,l.from=function(e,t,r){return d(e,t,r)},Object.setPrototypeOf(l.prototype,Uint8Array.prototype),Object.setPrototypeOf(l,Uint8Array),l.alloc=function(e,t,r){return function(e,t,r){return c(e),e<=0?u(e):void 0!==t?"string"==typeof r?u(e).fill(t,r):u(e).fill(t):u(e)}(e,t,r)},l.allocUnsafe=function(e){return f(e)},l.allocUnsafeSlow=function(e){return f(e)},l.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==l.prototype},l.compare=function(e,t){if(X(e,Uint8Array)&&(e=l.from(e,e.offset,e.byteLength)),X(t,Uint8Array)&&(t=l.from(t,t.offset,t.byteLength)),!l.isBuffer(e)||!l.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},l.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return l.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const n=l.allocUnsafe(t);let i=0;for(r=0;r<e.length;++r){let t=e[r];if(X(t,Uint8Array))i+t.length>n.length?(l.isBuffer(t)||(t=l.from(t)),t.copy(n,i)):Uint8Array.prototype.set.call(n,t,i);else{if(!l.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(n,i)}i+=t.length}return n},l.byteLength=g,l.prototype._isBuffer=!0,l.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)b(this,t,t+1);return this},l.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},l.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},l.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?j(this,0,e):_.apply(this,arguments)},l.prototype.toLocaleString=l.prototype.toString,l.prototype.equals=function(e){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===l.compare(this,e)},l.prototype.inspect=function(){let e="";const r=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},s&&(l.prototype[s]=l.prototype.inspect),l.prototype.compare=function(e,t,r,n,i){if(X(e,Uint8Array)&&(e=l.from(e,e.offset,e.byteLength)),!l.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;let o=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(t>>>=0);const a=Math.min(o,s),u=this.slice(n,i),d=e.slice(t,r);for(let e=0;e<a;++e)if(u[e]!==d[e]){o=u[e],s=d[e];break}return o<s?-1:s<o?1:0},l.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},l.prototype.indexOf=function(e,t,r){return y(this,e,t,r,!0)},l.prototype.lastIndexOf=function(e,t,r){return y(this,e,t,r,!1)},l.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let o=!1;for(;;)switch(n){case"hex":return v(this,e,t,r);case"utf8":case"utf-8":return E(this,e,t,r);case"ascii":case"latin1":case"binary":return S(this,e,t,r);case"base64":return x(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const O=4096;function T(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function k(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function C(e,t,r){const n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let i="";for(let n=t;n<r;++n)i+=Z[e[n]];return i}function L(e,t,r){const n=e.slice(t,r);let i="";for(let e=0;e<n.length-1;e+=2)i+=String.fromCharCode(n[e]+256*n[e+1]);return i}function P(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function I(e,t,r,n,i,o){if(!l.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function N(e,t,r,n,i){G(t,n,i,e,r,7);let o=Number(t&BigInt(4294967295));e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,r}function B(e,t,r,n,i){G(t,n,i,e,r,7);let o=Number(t&BigInt(4294967295));e[r+7]=o,o>>=8,e[r+6]=o,o>>=8,e[r+5]=o,o>>=8,e[r+4]=o;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=s,s>>=8,e[r+2]=s,s>>=8,e[r+1]=s,s>>=8,e[r]=s,r+8}function M(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function D(e,t,r,n,i){return t=+t,r>>>=0,i||M(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function U(e,t,r,n,i){return t=+t,r>>>=0,i||M(e,0,r,8),o.write(e,t,r,n,52,8),r+8}l.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,l.prototype),n},l.prototype.readUintLE=l.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||P(e,t,this.length);let n=this[e],i=1,o=0;for(;++o<t&&(i*=256);)n+=this[e+o]*i;return n},l.prototype.readUintBE=l.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||P(e,t,this.length);let n=this[e+--t],i=1;for(;t>0&&(i*=256);)n+=this[e+--t]*i;return n},l.prototype.readUint8=l.prototype.readUInt8=function(e,t){return e>>>=0,t||P(e,1,this.length),this[e]},l.prototype.readUint16LE=l.prototype.readUInt16LE=function(e,t){return e>>>=0,t||P(e,2,this.length),this[e]|this[e+1]<<8},l.prototype.readUint16BE=l.prototype.readUInt16BE=function(e,t){return e>>>=0,t||P(e,2,this.length),this[e]<<8|this[e+1]},l.prototype.readUint32LE=l.prototype.readUInt32LE=function(e,t){return e>>>=0,t||P(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},l.prototype.readUint32BE=l.prototype.readUInt32BE=function(e,t){return e>>>=0,t||P(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},l.prototype.readBigUInt64LE=J((function(e){z(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||W(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,i=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(n)+(BigInt(i)<<BigInt(32))})),l.prototype.readBigUInt64BE=J((function(e){z(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||W(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],i=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(i)})),l.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||P(e,t,this.length);let n=this[e],i=1,o=0;for(;++o<t&&(i*=256);)n+=this[e+o]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*t)),n},l.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||P(e,t,this.length);let n=t,i=1,o=this[e+--n];for(;n>0&&(i*=256);)o+=this[e+--n]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*t)),o},l.prototype.readInt8=function(e,t){return e>>>=0,t||P(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},l.prototype.readInt16LE=function(e,t){e>>>=0,t||P(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},l.prototype.readInt16BE=function(e,t){e>>>=0,t||P(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},l.prototype.readInt32LE=function(e,t){return e>>>=0,t||P(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},l.prototype.readInt32BE=function(e,t){return e>>>=0,t||P(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},l.prototype.readBigInt64LE=J((function(e){z(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||W(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),l.prototype.readBigInt64BE=J((function(e){z(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||W(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),l.prototype.readFloatLE=function(e,t){return e>>>=0,t||P(e,4,this.length),o.read(this,e,!0,23,4)},l.prototype.readFloatBE=function(e,t){return e>>>=0,t||P(e,4,this.length),o.read(this,e,!1,23,4)},l.prototype.readDoubleLE=function(e,t){return e>>>=0,t||P(e,8,this.length),o.read(this,e,!0,52,8)},l.prototype.readDoubleBE=function(e,t){return e>>>=0,t||P(e,8,this.length),o.read(this,e,!1,52,8)},l.prototype.writeUintLE=l.prototype.writeUIntLE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){I(this,e,t,r,Math.pow(2,8*r)-1,0)}let i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},l.prototype.writeUintBE=l.prototype.writeUIntBE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){I(this,e,t,r,Math.pow(2,8*r)-1,0)}let i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},l.prototype.writeUint8=l.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,1,255,0),this[t]=255&e,t+1},l.prototype.writeUint16LE=l.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},l.prototype.writeUint16BE=l.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},l.prototype.writeUint32LE=l.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},l.prototype.writeUint32BE=l.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},l.prototype.writeBigUInt64LE=J((function(e,t=0){return N(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),l.prototype.writeBigUInt64BE=J((function(e,t=0){return B(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),l.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);I(this,e,t,r,n-1,-n)}let i=0,o=1,s=0;for(this[t]=255&e;++i<r&&(o*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/o>>0)-s&255;return t+r},l.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);I(this,e,t,r,n-1,-n)}let i=r-1,o=1,s=0;for(this[t+i]=255&e;--i>=0&&(o*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/o>>0)-s&255;return t+r},l.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},l.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},l.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},l.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},l.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||I(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},l.prototype.writeBigInt64LE=J((function(e,t=0){return N(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),l.prototype.writeBigInt64BE=J((function(e,t=0){return B(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),l.prototype.writeFloatLE=function(e,t,r){return D(this,e,t,!0,r)},l.prototype.writeFloatBE=function(e,t,r){return D(this,e,t,!1,r)},l.prototype.writeDoubleLE=function(e,t,r){return U(this,e,t,!0,r)},l.prototype.writeDoubleBE=function(e,t,r){return U(this,e,t,!1,r)},l.prototype.copy=function(e,t,r,n){if(!l.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);const i=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),i},l.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!l.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){const t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{const o=l.isBuffer(e)?e:l.from(e,n),s=o.length;if(0===s)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<r-t;++i)this[i+t]=o[i%s]}return this};const F={};function H(e,t,r){F[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function $(e){let t="",r=e.length;const n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function G(e,t,r,n,i,o){if(e>r||e<t){const n="bigint"==typeof t?"n":"";let i;throw i=o>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(o+1)}${n}`:`>= -(2${n} ** ${8*(o+1)-1}${n}) and < 2 ** ${8*(o+1)-1}${n}`:`>= ${t}${n} and <= ${r}${n}`,new F.ERR_OUT_OF_RANGE("value",i,e)}!function(e,t,r){z(t,"offset"),void 0!==e[t]&&void 0!==e[t+r]||W(t,e.length-(r+1))}(n,i,o)}function z(e,t){if("number"!=typeof e)throw new F.ERR_INVALID_ARG_TYPE(t,"number",e)}function W(e,t,r){if(Math.floor(e)!==e)throw z(e,r),new F.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new F.ERR_BUFFER_OUT_OF_BOUNDS;throw new F.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}H("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),H("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),H("ERR_OUT_OF_RANGE",(function(e,t,r){let n=`The value of "${e}" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>2**32?i=$(String(r)):"bigint"==typeof r&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=$(i)),i+="n"),n+=` It must be ${t}. Received ${i}`,n}),RangeError);const q=/[^+/0-9A-Za-z-_]/g;function K(e,t){let r;t=t||1/0;const n=e.length;let i=null;const o=[];for(let s=0;s<n;++s){if(r=e.charCodeAt(s),r>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function Y(e){return i.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(q,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function V(e,t,r,n){let i;for(i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}function X(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Q(e){return e!=e}const Z=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let i=0;i<16;++i)t[n+i]=e[r]+e[i]}return t}();function J(e){return"undefined"==typeof BigInt?ee:e}function ee(){throw new Error("BigInt not supported")}},"./node_modules/os-browserify/browser.js":(e,t)=>{t.endianness=function(){return"LE"},t.hostname=function(){return"undefined"!=typeof location?location.hostname:""},t.loadavg=function(){return[]},t.uptime=function(){return 0},t.freemem=function(){return Number.MAX_VALUE},t.totalmem=function(){return Number.MAX_VALUE},t.cpus=function(){return[]},t.type=function(){return"Browser"},t.release=function(){return"undefined"!=typeof navigator?navigator.appVersion:""},t.networkInterfaces=t.getNetworkInterfaces=function(){return{}},t.arch=function(){return"javascript"},t.platform=function(){return"browser"},t.tmpdir=t.tmpDir=function(){return"/tmp"},t.EOL="\n",t.homedir=function(){return"/"}},"./node_modules/path-browserify/index.js":(e,t,r)=>{"use strict";var n=r("./node_modules/process/browser.js");function i(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}function o(e,t){for(var r,n="",i=0,o=-1,s=0,a=0;a<=e.length;++a){if(a<e.length)r=e.charCodeAt(a);else{if(47===r)break;r=47}if(47===r){if(o===a-1||1===s);else if(o!==a-1&&2===s){if(n.length<2||2!==i||46!==n.charCodeAt(n.length-1)||46!==n.charCodeAt(n.length-2))if(n.length>2){var u=n.lastIndexOf("/");if(u!==n.length-1){-1===u?(n="",i=0):i=(n=n.slice(0,u)).length-1-n.lastIndexOf("/"),o=a,s=0;continue}}else if(2===n.length||1===n.length){n="",i=0,o=a,s=0;continue}t&&(n.length>0?n+="/..":n="..",i=2)}else n.length>0?n+="/"+e.slice(o+1,a):n=e.slice(o+1,a),i=a-o-1;o=a,s=0}else 46===r&&-1!==s?++s:s=-1}return n}var s={resolve:function(){for(var e,t="",r=!1,s=arguments.length-1;s>=-1&&!r;s--){var a;s>=0?a=arguments[s]:(void 0===e&&(e=n.cwd()),a=e),i(a),0!==a.length&&(t=a+"/"+t,r=47===a.charCodeAt(0))}return t=o(t,!r),r?t.length>0?"/"+t:"/":t.length>0?t:"."},normalize:function(e){if(i(e),0===e.length)return".";var t=47===e.charCodeAt(0),r=47===e.charCodeAt(e.length-1);return 0!==(e=o(e,!t)).length||t||(e="."),e.length>0&&r&&(e+="/"),t?"/"+e:e},isAbsolute:function(e){return i(e),e.length>0&&47===e.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var e,t=0;t<arguments.length;++t){var r=arguments[t];i(r),r.length>0&&(void 0===e?e=r:e+="/"+r)}return void 0===e?".":s.normalize(e)},relative:function(e,t){if(i(e),i(t),e===t)return"";if((e=s.resolve(e))===(t=s.resolve(t)))return"";for(var r=1;r<e.length&&47===e.charCodeAt(r);++r);for(var n=e.length,o=n-r,a=1;a<t.length&&47===t.charCodeAt(a);++a);for(var u=t.length-a,l=o<u?o:u,d=-1,c=0;c<=l;++c){if(c===l){if(u>l){if(47===t.charCodeAt(a+c))return t.slice(a+c+1);if(0===c)return t.slice(a+c)}else o>l&&(47===e.charCodeAt(r+c)?d=c:0===c&&(d=0));break}var f=e.charCodeAt(r+c);if(f!==t.charCodeAt(a+c))break;47===f&&(d=c)}var p="";for(c=r+d+1;c<=n;++c)c!==n&&47!==e.charCodeAt(c)||(0===p.length?p+="..":p+="/..");return p.length>0?p+t.slice(a+d):(a+=d,47===t.charCodeAt(a)&&++a,t.slice(a))},_makeLong:function(e){return e},dirname:function(e){if(i(e),0===e.length)return".";for(var t=e.charCodeAt(0),r=47===t,n=-1,o=!0,s=e.length-1;s>=1;--s)if(47===(t=e.charCodeAt(s))){if(!o){n=s;break}}else o=!1;return-1===n?r?"/":".":r&&1===n?"//":e.slice(0,n)},basename:function(e,t){if(void 0!==t&&"string"!=typeof t)throw new TypeError('"ext" argument must be a string');i(e);var r,n=0,o=-1,s=!0;if(void 0!==t&&t.length>0&&t.length<=e.length){if(t.length===e.length&&t===e)return"";var a=t.length-1,u=-1;for(r=e.length-1;r>=0;--r){var l=e.charCodeAt(r);if(47===l){if(!s){n=r+1;break}}else-1===u&&(s=!1,u=r+1),a>=0&&(l===t.charCodeAt(a)?-1==--a&&(o=r):(a=-1,o=u))}return n===o?o=u:-1===o&&(o=e.length),e.slice(n,o)}for(r=e.length-1;r>=0;--r)if(47===e.charCodeAt(r)){if(!s){n=r+1;break}}else-1===o&&(s=!1,o=r+1);return-1===o?"":e.slice(n,o)},extname:function(e){i(e);for(var t=-1,r=0,n=-1,o=!0,s=0,a=e.length-1;a>=0;--a){var u=e.charCodeAt(a);if(47!==u)-1===n&&(o=!1,n=a+1),46===u?-1===t?t=a:1!==s&&(s=1):-1!==t&&(s=-1);else if(!o){r=a+1;break}}return-1===t||-1===n||0===s||1===s&&t===n-1&&t===r+1?"":e.slice(t,n)},format:function(e){if(null===e||"object"!=typeof e)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof e);return function(e,t){var r=t.dir||t.root,n=t.base||(t.name||"")+(t.ext||"");return r?r===t.root?r+n:r+e+n:n}("/",e)},parse:function(e){i(e);var t={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return t;var r,n=e.charCodeAt(0),o=47===n;o?(t.root="/",r=1):r=0;for(var s=-1,a=0,u=-1,l=!0,d=e.length-1,c=0;d>=r;--d)if(47!==(n=e.charCodeAt(d)))-1===u&&(l=!1,u=d+1),46===n?-1===s?s=d:1!==c&&(c=1):-1!==s&&(c=-1);else if(!l){a=d+1;break}return-1===s||-1===u||0===c||1===c&&s===u-1&&s===a+1?-1!==u&&(t.base=t.name=0===a&&o?e.slice(1,u):e.slice(a,u)):(0===a&&o?(t.name=e.slice(1,s),t.base=e.slice(1,u)):(t.name=e.slice(a,s),t.base=e.slice(a,u)),t.ext=e.slice(s,u)),a>0?t.dir=e.slice(0,a-1):o&&(t.dir="/"),t},sep:"/",delimiter:":",win32:null,posix:null};s.posix=s,e.exports=s},"./node_modules/path-type/index.js":(e,t,r)=>{"use strict";const{promisify:n}=r("./node_modules/util/util.js"),i=r("?54c0");async function o(e,t,r){if("string"!=typeof r)throw new TypeError("Expected a string, got "+typeof r);try{return(await n(i[e])(r))[t]()}catch(e){if("ENOENT"===e.code)return!1;throw e}}function s(e,t,r){if("string"!=typeof r)throw new TypeError("Expected a string, got "+typeof r);try{return i[e](r)[t]()}catch(e){if("ENOENT"===e.code)return!1;throw e}}t.isFile=o.bind(null,"stat","isFile"),t.isDirectory=o.bind(null,"stat","isDirectory"),t.isSymlink=o.bind(null,"lstat","isSymbolicLink"),t.isFileSync=s.bind(null,"statSync","isFile"),t.isDirectorySync=s.bind(null,"statSync","isDirectory"),t.isSymlinkSync=s.bind(null,"lstatSync","isSymbolicLink")},"./node_modules/peek-readable/lib/Deferred.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Deferred=void 0;t.Deferred=class{constructor(){this.resolve=()=>null,this.reject=()=>null,this.promise=new Promise(((e,t)=>{this.reject=t,this.resolve=e}))}}},"./node_modules/peek-readable/lib/EndOfFileStream.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EndOfStreamError=t.defaultMessages=void 0,t.defaultMessages="End-Of-Stream";class r extends Error{constructor(){super(t.defaultMessages)}}t.EndOfStreamError=r},"./node_modules/peek-readable/lib/StreamReader.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StreamReader=t.EndOfStreamError=void 0;const n=r("./node_modules/peek-readable/lib/EndOfFileStream.js"),i=r("./node_modules/peek-readable/lib/Deferred.js");var o=r("./node_modules/peek-readable/lib/EndOfFileStream.js");Object.defineProperty(t,"EndOfStreamError",{enumerable:!0,get:function(){return o.EndOfStreamError}});t.StreamReader=class{constructor(e){if(this.s=e,this.deferred=null,this.endOfStream=!1,this.peekQueue=[],!e.read||!e.once)throw new Error("Expected an instance of stream.Readable");this.s.once("end",(()=>this.reject(new n.EndOfStreamError))),this.s.once("error",(e=>this.reject(e))),this.s.once("close",(()=>this.reject(new Error("Stream closed"))))}async peek(e,t,r){const n=await this.read(e,t,r);return this.peekQueue.push(e.subarray(t,t+n)),n}async read(e,t,r){if(0===r)return 0;if(0===this.peekQueue.length&&this.endOfStream)throw new n.EndOfStreamError;let i=r,o=0;for(;this.peekQueue.length>0&&i>0;){const r=this.peekQueue.pop();if(!r)throw new Error("peekData should be defined");const n=Math.min(r.length,i);e.set(r.subarray(0,n),t+o),o+=n,i-=n,n<r.length&&this.peekQueue.push(r.subarray(n))}for(;i>0&&!this.endOfStream;){const r=Math.min(i,1048576),n=await this.readFromStream(e,t+o,r);if(o+=n,n<r)break;i-=n}return o}async readFromStream(e,t,r){const n=this.s.read(r);if(n)return e.set(n,t),n.length;{const n={buffer:e,offset:t,length:r,deferred:new i.Deferred};return this.deferred=n.deferred,this.s.once("readable",(()=>{this.readDeferred(n)})),n.deferred.promise}}readDeferred(e){const t=this.s.read(e.length);t?(e.buffer.set(t,e.offset),e.deferred.resolve(t.length),this.deferred=null):this.s.once("readable",(()=>{this.readDeferred(e)}))}reject(e){this.endOfStream=!0,this.deferred&&(this.deferred.reject(e),this.deferred=null)}}},"./node_modules/peek-readable/lib/index.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StreamReader=t.EndOfStreamError=void 0;var n=r("./node_modules/peek-readable/lib/EndOfFileStream.js");Object.defineProperty(t,"EndOfStreamError",{enumerable:!0,get:function(){return n.EndOfStreamError}});var i=r("./node_modules/peek-readable/lib/StreamReader.js");Object.defineProperty(t,"StreamReader",{enumerable:!0,get:function(){return i.StreamReader}})},"./node_modules/picomatch/index.js":(e,t,r)=>{"use strict";e.exports=r("./node_modules/picomatch/lib/picomatch.js")},"./node_modules/picomatch/lib/constants.js":(e,t,r)=>{"use strict";const n=r("./node_modules/path-browserify/index.js"),i="[^\\\\/]",o="\\.",s="\\/",a="[^/]",u="(?:\\/|$)",l="(?:^|\\/)",d="\\.{1,2}(?:\\/|$)",c={DOT_LITERAL:o,PLUS_LITERAL:"\\+",QMARK_LITERAL:"\\?",SLASH_LITERAL:s,ONE_CHAR:"(?=.)",QMARK:a,END_ANCHOR:u,DOTS_SLASH:d,NO_DOT:"(?!\\.)",NO_DOTS:`(?!(?:^|\\/)${d})`,NO_DOT_SLASH:"(?!\\.{0,1}(?:\\/|$))",NO_DOTS_SLASH:`(?!${d})`,QMARK_NO_DOT:"[^.\\/]",STAR:"[^/]*?",START_ANCHOR:l},f={...c,SLASH_LITERAL:"[\\\\/]",QMARK:i,STAR:"[^\\\\/]*?",DOTS_SLASH:"\\.{1,2}(?:[\\\\/]|$)",NO_DOT:"(?!\\.)",NO_DOTS:"(?!(?:^|[\\\\/])\\.{1,2}(?:[\\\\/]|$))",NO_DOT_SLASH:"(?!\\.{0,1}(?:[\\\\/]|$))",NO_DOTS_SLASH:"(?!\\.{1,2}(?:[\\\\/]|$))",QMARK_NO_DOT:"[^.\\\\/]",START_ANCHOR:"(?:^|[\\\\/])",END_ANCHOR:"(?:[\\\\/]|$)"};e.exports={MAX_LENGTH:65536,POSIX_REGEX_SOURCE:{alnum:"a-zA-Z0-9",alpha:"a-zA-Z",ascii:"\\x00-\\x7F",blank:" \\t",cntrl:"\\x00-\\x1F\\x7F",digit:"0-9",graph:"\\x21-\\x7E",lower:"a-z",print:"\\x20-\\x7E ",punct:"\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",space:" \\t\\r\\n\\v\\f",upper:"A-Z",word:"A-Za-z0-9_",xdigit:"A-Fa-f0-9"},REGEX_BACKSLASH:/\\(?![*+?^${}(|)[\]])/g,REGEX_NON_SPECIAL_CHARS:/^[^@![\].,$*+?^{}()|\\/]+/,REGEX_SPECIAL_CHARS:/[-*+?.^${}(|)[\]]/,REGEX_SPECIAL_CHARS_BACKREF:/(\\?)((\W)(\3*))/g,REGEX_SPECIAL_CHARS_GLOBAL:/([-*+?.^${}(|)[\]])/g,REGEX_REMOVE_BACKSLASH:/(?:\[.*?[^\\]\]|\\(?=.))/g,REPLACEMENTS:{"***":"*","**/**":"**","**/**/**":"**"},CHAR_0:48,CHAR_9:57,CHAR_UPPERCASE_A:65,CHAR_LOWERCASE_A:97,CHAR_UPPERCASE_Z:90,CHAR_LOWERCASE_Z:122,CHAR_LEFT_PARENTHESES:40,CHAR_RIGHT_PARENTHESES:41,CHAR_ASTERISK:42,CHAR_AMPERSAND:38,CHAR_AT:64,CHAR_BACKWARD_SLASH:92,CHAR_CARRIAGE_RETURN:13,CHAR_CIRCUMFLEX_ACCENT:94,CHAR_COLON:58,CHAR_COMMA:44,CHAR_DOT:46,CHAR_DOUBLE_QUOTE:34,CHAR_EQUAL:61,CHAR_EXCLAMATION_MARK:33,CHAR_FORM_FEED:12,CHAR_FORWARD_SLASH:47,CHAR_GRAVE_ACCENT:96,CHAR_HASH:35,CHAR_HYPHEN_MINUS:45,CHAR_LEFT_ANGLE_BRACKET:60,CHAR_LEFT_CURLY_BRACE:123,CHAR_LEFT_SQUARE_BRACKET:91,CHAR_LINE_FEED:10,CHAR_NO_BREAK_SPACE:160,CHAR_PERCENT:37,CHAR_PLUS:43,CHAR_QUESTION_MARK:63,CHAR_RIGHT_ANGLE_BRACKET:62,CHAR_RIGHT_CURLY_BRACE:125,CHAR_RIGHT_SQUARE_BRACKET:93,CHAR_SEMICOLON:59,CHAR_SINGLE_QUOTE:39,CHAR_SPACE:32,CHAR_TAB:9,CHAR_UNDERSCORE:95,CHAR_VERTICAL_LINE:124,CHAR_ZERO_WIDTH_NOBREAK_SPACE:65279,SEP:n.sep,extglobChars:e=>({"!":{type:"negate",open:"(?:(?!(?:",close:`))${e.STAR})`},"?":{type:"qmark",open:"(?:",close:")?"},"+":{type:"plus",open:"(?:",close:")+"},"*":{type:"star",open:"(?:",close:")*"},"@":{type:"at",open:"(?:",close:")"}}),globChars:e=>!0===e?f:c}},"./node_modules/picomatch/lib/parse.js":(e,t,r)=>{"use strict";const n=r("./node_modules/picomatch/lib/constants.js"),i=r("./node_modules/picomatch/lib/utils.js"),{MAX_LENGTH:o,POSIX_REGEX_SOURCE:s,REGEX_NON_SPECIAL_CHARS:a,REGEX_SPECIAL_CHARS_BACKREF:u,REPLACEMENTS:l}=n,d=(e,t)=>{if("function"==typeof t.expandRange)return t.expandRange(...e,t);e.sort();const r=`[${e.join("-")}]`;try{new RegExp(r)}catch(t){return e.map((e=>i.escapeRegex(e))).join("..")}return r},c=(e,t)=>`Missing ${e}: "${t}" - use "\\\\${t}" to match literal characters`,f=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");e=l[e]||e;const r={...t},p="number"==typeof r.maxLength?Math.min(o,r.maxLength):o;let h=e.length;if(h>p)throw new SyntaxError(`Input length: ${h}, exceeds maximum allowed length: ${p}`);const m={type:"bos",value:"",output:r.prepend||""},g=[m],_=r.capture?"":"?:",b=i.isWindows(t),y=n.globChars(b),w=n.extglobChars(y),{DOT_LITERAL:v,PLUS_LITERAL:E,SLASH_LITERAL:S,ONE_CHAR:x,DOTS_SLASH:R,NO_DOT:A,NO_DOT_SLASH:j,NO_DOTS_SLASH:O,QMARK:T,QMARK_NO_DOT:k,STAR:C,START_ANCHOR:L}=y,P=e=>`(${_}(?:(?!${L}${e.dot?R:v}).)*?)`,I=r.dot?"":A,N=r.dot?T:k;let B=!0===r.bash?P(r):C;r.capture&&(B=`(${B})`),"boolean"==typeof r.noext&&(r.noextglob=r.noext);const M={input:e,index:-1,start:0,dot:!0===r.dot,consumed:"",output:"",prefix:"",backtrack:!1,negated:!1,brackets:0,braces:0,parens:0,quotes:0,globstar:!1,tokens:g};e=i.removePrefix(e,M),h=e.length;const D=[],U=[],F=[];let H,$=m;const G=()=>M.index===h-1,z=M.peek=(t=1)=>e[M.index+t],W=M.advance=()=>e[++M.index]||"",q=()=>e.slice(M.index+1),K=(e="",t=0)=>{M.consumed+=e,M.index+=t},Y=e=>{M.output+=null!=e.output?e.output:e.value,K(e.value)},V=()=>{let e=1;for(;"!"===z()&&("("!==z(2)||"?"===z(3));)W(),M.start++,e++;return e%2!=0&&(M.negated=!0,M.start++,!0)},X=e=>{M[e]++,F.push(e)},Q=e=>{M[e]--,F.pop()},Z=e=>{if("globstar"===$.type){const t=M.braces>0&&("comma"===e.type||"brace"===e.type),r=!0===e.extglob||D.length&&("pipe"===e.type||"paren"===e.type);"slash"===e.type||"paren"===e.type||t||r||(M.output=M.output.slice(0,-$.output.length),$.type="star",$.value="*",$.output=B,M.output+=$.output)}if(D.length&&"paren"!==e.type&&(D[D.length-1].inner+=e.value),(e.value||e.output)&&Y(e),$&&"text"===$.type&&"text"===e.type)return $.value+=e.value,void($.output=($.output||"")+e.value);e.prev=$,g.push(e),$=e},J=(e,t)=>{const n={...w[t],conditions:1,inner:""};n.prev=$,n.parens=M.parens,n.output=M.output;const i=(r.capture?"(":"")+n.open;X("parens"),Z({type:e,value:t,output:M.output?"":x}),Z({type:"paren",extglob:!0,value:W(),output:i}),D.push(n)},ee=e=>{let n,i=e.close+(r.capture?")":"");if("negate"===e.type){let o=B;if(e.inner&&e.inner.length>1&&e.inner.includes("/")&&(o=P(r)),(o!==B||G()||/^\)+$/.test(q()))&&(i=e.close=`)$))${o}`),e.inner.includes("*")&&(n=q())&&/^\.[^\\/.]+$/.test(n)){const r=f(n,{...t,fastpaths:!1}).output;i=e.close=`)${r})${o})`}"bos"===e.prev.type&&(M.negatedExtglob=!0)}Z({type:"paren",extglob:!0,value:H,output:i}),Q("parens")};if(!1!==r.fastpaths&&!/(^[*!]|[/()[\]{}"])/.test(e)){let n=!1,o=e.replace(u,((e,t,r,i,o,s)=>"\\"===i?(n=!0,e):"?"===i?t?t+i+(o?T.repeat(o.length):""):0===s?N+(o?T.repeat(o.length):""):T.repeat(r.length):"."===i?v.repeat(r.length):"*"===i?t?t+i+(o?B:""):B:t?e:`\\${e}`));return!0===n&&(o=!0===r.unescape?o.replace(/\\/g,""):o.replace(/\\+/g,(e=>e.length%2==0?"\\\\":e?"\\":""))),o===e&&!0===r.contains?(M.output=e,M):(M.output=i.wrapOutput(o,M,t),M)}for(;!G();){if(H=W(),"\0"===H)continue;if("\\"===H){const e=z();if("/"===e&&!0!==r.bash)continue;if("."===e||";"===e)continue;if(!e){H+="\\",Z({type:"text",value:H});continue}const t=/^\\+/.exec(q());let n=0;if(t&&t[0].length>2&&(n=t[0].length,M.index+=n,n%2!=0&&(H+="\\")),!0===r.unescape?H=W():H+=W(),0===M.brackets){Z({type:"text",value:H});continue}}if(M.brackets>0&&("]"!==H||"["===$.value||"[^"===$.value)){if(!1!==r.posix&&":"===H){const e=$.value.slice(1);if(e.includes("[")&&($.posix=!0,e.includes(":"))){const e=$.value.lastIndexOf("["),t=$.value.slice(0,e),r=$.value.slice(e+2),n=s[r];if(n){$.value=t+n,M.backtrack=!0,W(),m.output||1!==g.indexOf($)||(m.output=x);continue}}}("["===H&&":"!==z()||"-"===H&&"]"===z())&&(H=`\\${H}`),"]"!==H||"["!==$.value&&"[^"!==$.value||(H=`\\${H}`),!0===r.posix&&"!"===H&&"["===$.value&&(H="^"),$.value+=H,Y({value:H});continue}if(1===M.quotes&&'"'!==H){H=i.escapeRegex(H),$.value+=H,Y({value:H});continue}if('"'===H){M.quotes=1===M.quotes?0:1,!0===r.keepQuotes&&Z({type:"text",value:H});continue}if("("===H){X("parens"),Z({type:"paren",value:H});continue}if(")"===H){if(0===M.parens&&!0===r.strictBrackets)throw new SyntaxError(c("opening","("));const e=D[D.length-1];if(e&&M.parens===e.parens+1){ee(D.pop());continue}Z({type:"paren",value:H,output:M.parens?")":"\\)"}),Q("parens");continue}if("["===H){if(!0!==r.nobracket&&q().includes("]"))X("brackets");else{if(!0!==r.nobracket&&!0===r.strictBrackets)throw new SyntaxError(c("closing","]"));H=`\\${H}`}Z({type:"bracket",value:H});continue}if("]"===H){if(!0===r.nobracket||$&&"bracket"===$.type&&1===$.value.length){Z({type:"text",value:H,output:`\\${H}`});continue}if(0===M.brackets){if(!0===r.strictBrackets)throw new SyntaxError(c("opening","["));Z({type:"text",value:H,output:`\\${H}`});continue}Q("brackets");const e=$.value.slice(1);if(!0===$.posix||"^"!==e[0]||e.includes("/")||(H=`/${H}`),$.value+=H,Y({value:H}),!1===r.literalBrackets||i.hasRegexChars(e))continue;const t=i.escapeRegex($.value);if(M.output=M.output.slice(0,-$.value.length),!0===r.literalBrackets){M.output+=t,$.value=t;continue}$.value=`(${_}${t}|${$.value})`,M.output+=$.value;continue}if("{"===H&&!0!==r.nobrace){X("braces");const e={type:"brace",value:H,output:"(",outputIndex:M.output.length,tokensIndex:M.tokens.length};U.push(e),Z(e);continue}if("}"===H){const e=U[U.length-1];if(!0===r.nobrace||!e){Z({type:"text",value:H,output:H});continue}let t=")";if(!0===e.dots){const e=g.slice(),n=[];for(let t=e.length-1;t>=0&&(g.pop(),"brace"!==e[t].type);t--)"dots"!==e[t].type&&n.unshift(e[t].value);t=d(n,r),M.backtrack=!0}if(!0!==e.comma&&!0!==e.dots){const r=M.output.slice(0,e.outputIndex),n=M.tokens.slice(e.tokensIndex);e.value=e.output="\\{",H=t="\\}",M.output=r;for(const e of n)M.output+=e.output||e.value}Z({type:"brace",value:H,output:t}),Q("braces"),U.pop();continue}if("|"===H){D.length>0&&D[D.length-1].conditions++,Z({type:"text",value:H});continue}if(","===H){let e=H;const t=U[U.length-1];t&&"braces"===F[F.length-1]&&(t.comma=!0,e="|"),Z({type:"comma",value:H,output:e});continue}if("/"===H){if("dot"===$.type&&M.index===M.start+1){M.start=M.index+1,M.consumed="",M.output="",g.pop(),$=m;continue}Z({type:"slash",value:H,output:S});continue}if("."===H){if(M.braces>0&&"dot"===$.type){"."===$.value&&($.output=v);const e=U[U.length-1];$.type="dots",$.output+=H,$.value+=H,e.dots=!0;continue}if(M.braces+M.parens===0&&"bos"!==$.type&&"slash"!==$.type){Z({type:"text",value:H,output:v});continue}Z({type:"dot",value:H,output:v});continue}if("?"===H){if(!($&&"("===$.value)&&!0!==r.noextglob&&"("===z()&&"?"!==z(2)){J("qmark",H);continue}if($&&"paren"===$.type){const e=z();let t=H;if("<"===e&&!i.supportsLookbehinds())throw new Error("Node.js v10 or higher is required for regex lookbehinds");("("===$.value&&!/[!=<:]/.test(e)||"<"===e&&!/<([!=]|\w+>)/.test(q()))&&(t=`\\${H}`),Z({type:"text",value:H,output:t});continue}if(!0!==r.dot&&("slash"===$.type||"bos"===$.type)){Z({type:"qmark",value:H,output:k});continue}Z({type:"qmark",value:H,output:T});continue}if("!"===H){if(!0!==r.noextglob&&"("===z()&&("?"!==z(2)||!/[!=<:]/.test(z(3)))){J("negate",H);continue}if(!0!==r.nonegate&&0===M.index){V();continue}}if("+"===H){if(!0!==r.noextglob&&"("===z()&&"?"!==z(2)){J("plus",H);continue}if($&&"("===$.value||!1===r.regex){Z({type:"plus",value:H,output:E});continue}if($&&("bracket"===$.type||"paren"===$.type||"brace"===$.type)||M.parens>0){Z({type:"plus",value:H});continue}Z({type:"plus",value:E});continue}if("@"===H){if(!0!==r.noextglob&&"("===z()&&"?"!==z(2)){Z({type:"at",extglob:!0,value:H,output:""});continue}Z({type:"text",value:H});continue}if("*"!==H){"$"!==H&&"^"!==H||(H=`\\${H}`);const e=a.exec(q());e&&(H+=e[0],M.index+=e[0].length),Z({type:"text",value:H});continue}if($&&("globstar"===$.type||!0===$.star)){$.type="star",$.star=!0,$.value+=H,$.output=B,M.backtrack=!0,M.globstar=!0,K(H);continue}let t=q();if(!0!==r.noextglob&&/^\([^?]/.test(t)){J("star",H);continue}if("star"===$.type){if(!0===r.noglobstar){K(H);continue}const n=$.prev,i=n.prev,o="slash"===n.type||"bos"===n.type,s=i&&("star"===i.type||"globstar"===i.type);if(!0===r.bash&&(!o||t[0]&&"/"!==t[0])){Z({type:"star",value:H,output:""});continue}const a=M.braces>0&&("comma"===n.type||"brace"===n.type),u=D.length&&("pipe"===n.type||"paren"===n.type);if(!o&&"paren"!==n.type&&!a&&!u){Z({type:"star",value:H,output:""});continue}for(;"/**"===t.slice(0,3);){const r=e[M.index+4];if(r&&"/"!==r)break;t=t.slice(3),K("/**",3)}if("bos"===n.type&&G()){$.type="globstar",$.value+=H,$.output=P(r),M.output=$.output,M.globstar=!0,K(H);continue}if("slash"===n.type&&"bos"!==n.prev.type&&!s&&G()){M.output=M.output.slice(0,-(n.output+$.output).length),n.output=`(?:${n.output}`,$.type="globstar",$.output=P(r)+(r.strictSlashes?")":"|$)"),$.value+=H,M.globstar=!0,M.output+=n.output+$.output,K(H);continue}if("slash"===n.type&&"bos"!==n.prev.type&&"/"===t[0]){const e=void 0!==t[1]?"|$":"";M.output=M.output.slice(0,-(n.output+$.output).length),n.output=`(?:${n.output}`,$.type="globstar",$.output=`${P(r)}${S}|${S}${e})`,$.value+=H,M.output+=n.output+$.output,M.globstar=!0,K(H+W()),Z({type:"slash",value:"/",output:""});continue}if("bos"===n.type&&"/"===t[0]){$.type="globstar",$.value+=H,$.output=`(?:^|${S}|${P(r)}${S})`,M.output=$.output,M.globstar=!0,K(H+W()),Z({type:"slash",value:"/",output:""});continue}M.output=M.output.slice(0,-$.output.length),$.type="globstar",$.output=P(r),$.value+=H,M.output+=$.output,M.globstar=!0,K(H);continue}const n={type:"star",value:H,output:B};!0!==r.bash?!$||"bracket"!==$.type&&"paren"!==$.type||!0!==r.regex?(M.index!==M.start&&"slash"!==$.type&&"dot"!==$.type||("dot"===$.type?(M.output+=j,$.output+=j):!0===r.dot?(M.output+=O,$.output+=O):(M.output+=I,$.output+=I),"*"!==z()&&(M.output+=x,$.output+=x)),Z(n)):(n.output=H,Z(n)):(n.output=".*?","bos"!==$.type&&"slash"!==$.type||(n.output=I+n.output),Z(n))}for(;M.brackets>0;){if(!0===r.strictBrackets)throw new SyntaxError(c("closing","]"));M.output=i.escapeLast(M.output,"["),Q("brackets")}for(;M.parens>0;){if(!0===r.strictBrackets)throw new SyntaxError(c("closing",")"));M.output=i.escapeLast(M.output,"("),Q("parens")}for(;M.braces>0;){if(!0===r.strictBrackets)throw new SyntaxError(c("closing","}"));M.output=i.escapeLast(M.output,"{"),Q("braces")}if(!0===r.strictSlashes||"star"!==$.type&&"bracket"!==$.type||Z({type:"maybe_slash",value:"",output:`${S}?`}),!0===M.backtrack){M.output="";for(const e of M.tokens)M.output+=null!=e.output?e.output:e.value,e.suffix&&(M.output+=e.suffix)}return M};f.fastpaths=(e,t)=>{const r={...t},s="number"==typeof r.maxLength?Math.min(o,r.maxLength):o,a=e.length;if(a>s)throw new SyntaxError(`Input length: ${a}, exceeds maximum allowed length: ${s}`);e=l[e]||e;const u=i.isWindows(t),{DOT_LITERAL:d,SLASH_LITERAL:c,ONE_CHAR:f,DOTS_SLASH:p,NO_DOT:h,NO_DOTS:m,NO_DOTS_SLASH:g,STAR:_,START_ANCHOR:b}=n.globChars(u),y=r.dot?m:h,w=r.dot?g:h,v=r.capture?"":"?:";let E=!0===r.bash?".*?":_;r.capture&&(E=`(${E})`);const S=e=>!0===e.noglobstar?E:`(${v}(?:(?!${b}${e.dot?p:d}).)*?)`,x=e=>{switch(e){case"*":return`${y}${f}${E}`;case".*":return`${d}${f}${E}`;case"*.*":return`${y}${E}${d}${f}${E}`;case"*/*":return`${y}${E}${c}${f}${w}${E}`;case"**":return y+S(r);case"**/*":return`(?:${y}${S(r)}${c})?${w}${f}${E}`;case"**/*.*":return`(?:${y}${S(r)}${c})?${w}${E}${d}${f}${E}`;case"**/.*":return`(?:${y}${S(r)}${c})?${d}${f}${E}`;default:{const t=/^(.*?)\.(\w+)$/.exec(e);if(!t)return;const r=x(t[1]);if(!r)return;return r+d+t[2]}}},R=i.removePrefix(e,{negated:!1,prefix:""});let A=x(R);return A&&!0!==r.strictSlashes&&(A+=`${c}?`),A},e.exports=f},"./node_modules/picomatch/lib/picomatch.js":(e,t,r)=>{"use strict";const n=r("./node_modules/path-browserify/index.js"),i=r("./node_modules/picomatch/lib/scan.js"),o=r("./node_modules/picomatch/lib/parse.js"),s=r("./node_modules/picomatch/lib/utils.js"),a=r("./node_modules/picomatch/lib/constants.js"),u=(e,t,r=!1)=>{if(Array.isArray(e)){const n=e.map((e=>u(e,t,r))),i=e=>{for(const t of n){const r=t(e);if(r)return r}return!1};return i}const n=(i=e)&&"object"==typeof i&&!Array.isArray(i)&&e.tokens&&e.input;var i;if(""===e||"string"!=typeof e&&!n)throw new TypeError("Expected pattern to be a non-empty string");const o=t||{},a=s.isWindows(t),l=n?u.compileRe(e,t):u.makeRe(e,t,!1,!0),d=l.state;delete l.state;let c=()=>!1;if(o.ignore){const e={...t,ignore:null,onMatch:null,onResult:null};c=u(o.ignore,e,r)}const f=(r,n=!1)=>{const{isMatch:i,match:s,output:f}=u.test(r,l,t,{glob:e,posix:a}),p={glob:e,state:d,regex:l,posix:a,input:r,output:f,match:s,isMatch:i};return"function"==typeof o.onResult&&o.onResult(p),!1===i?(p.isMatch=!1,!!n&&p):c(r)?("function"==typeof o.onIgnore&&o.onIgnore(p),p.isMatch=!1,!!n&&p):("function"==typeof o.onMatch&&o.onMatch(p),!n||p)};return r&&(f.state=d),f};u.test=(e,t,r,{glob:n,posix:i}={})=>{if("string"!=typeof e)throw new TypeError("Expected input to be a string");if(""===e)return{isMatch:!1,output:""};const o=r||{},a=o.format||(i?s.toPosixSlashes:null);let l=e===n,d=l&&a?a(e):e;return!1===l&&(d=a?a(e):e,l=d===n),!1!==l&&!0!==o.capture||(l=!0===o.matchBase||!0===o.basename?u.matchBase(e,t,r,i):t.exec(d)),{isMatch:Boolean(l),match:l,output:d}},u.matchBase=(e,t,r,i=s.isWindows(r))=>(t instanceof RegExp?t:u.makeRe(t,r)).test(n.basename(e)),u.isMatch=(e,t,r)=>u(t,r)(e),u.parse=(e,t)=>Array.isArray(e)?e.map((e=>u.parse(e,t))):o(e,{...t,fastpaths:!1}),u.scan=(e,t)=>i(e,t),u.compileRe=(e,t,r=!1,n=!1)=>{if(!0===r)return e.output;const i=t||{},o=i.contains?"":"^",s=i.contains?"":"$";let a=`${o}(?:${e.output})${s}`;e&&!0===e.negated&&(a=`^(?!${a}).*$`);const l=u.toRegex(a,t);return!0===n&&(l.state=e),l},u.makeRe=(e,t={},r=!1,n=!1)=>{if(!e||"string"!=typeof e)throw new TypeError("Expected a non-empty string");let i={negated:!1,fastpaths:!0};return!1===t.fastpaths||"."!==e[0]&&"*"!==e[0]||(i.output=o.fastpaths(e,t)),i.output||(i=o(e,t)),u.compileRe(i,t,r,n)},u.toRegex=(e,t)=>{try{const r=t||{};return new RegExp(e,r.flags||(r.nocase?"i":""))}catch(e){if(t&&!0===t.debug)throw e;return/$^/}},u.constants=a,e.exports=u},"./node_modules/picomatch/lib/scan.js":(e,t,r)=>{"use strict";const n=r("./node_modules/picomatch/lib/utils.js"),{CHAR_ASTERISK:i,CHAR_AT:o,CHAR_BACKWARD_SLASH:s,CHAR_COMMA:a,CHAR_DOT:u,CHAR_EXCLAMATION_MARK:l,CHAR_FORWARD_SLASH:d,CHAR_LEFT_CURLY_BRACE:c,CHAR_LEFT_PARENTHESES:f,CHAR_LEFT_SQUARE_BRACKET:p,CHAR_PLUS:h,CHAR_QUESTION_MARK:m,CHAR_RIGHT_CURLY_BRACE:g,CHAR_RIGHT_PARENTHESES:_,CHAR_RIGHT_SQUARE_BRACKET:b}=r("./node_modules/picomatch/lib/constants.js"),y=e=>e===d||e===s,w=e=>{!0!==e.isPrefix&&(e.depth=e.isGlobstar?1/0:1)};e.exports=(e,t)=>{const r=t||{},v=e.length-1,E=!0===r.parts||!0===r.scanToEnd,S=[],x=[],R=[];let A,j,O=e,T=-1,k=0,C=0,L=!1,P=!1,I=!1,N=!1,B=!1,M=!1,D=!1,U=!1,F=!1,H=!1,$=0,G={value:"",depth:0,isGlob:!1};const z=()=>T>=v,W=()=>(A=j,O.charCodeAt(++T));for(;T<v;){let e;if(j=W(),j!==s){if(!0===M||j===c){for($++;!0!==z()&&(j=W());)if(j!==s)if(j!==c){if(!0!==M&&j===u&&(j=W())===u){if(L=G.isBrace=!0,I=G.isGlob=!0,H=!0,!0===E)continue;break}if(!0!==M&&j===a){if(L=G.isBrace=!0,I=G.isGlob=!0,H=!0,!0===E)continue;break}if(j===g&&($--,0===$)){M=!1,L=G.isBrace=!0,H=!0;break}}else $++;else D=G.backslashes=!0,W();if(!0===E)continue;break}if(j!==d){if(!0!==r.noext){if(!0===(j===h||j===o||j===i||j===m||j===l)&&O.charCodeAt(T+1)===f){if(I=G.isGlob=!0,N=G.isExtglob=!0,H=!0,j===l&&T===k&&(F=!0),!0===E){for(;!0!==z()&&(j=W());)if(j!==s){if(j===_){I=G.isGlob=!0,H=!0;break}}else D=G.backslashes=!0,j=W();continue}break}}if(j===i){if(A===i&&(B=G.isGlobstar=!0),I=G.isGlob=!0,H=!0,!0===E)continue;break}if(j===m){if(I=G.isGlob=!0,H=!0,!0===E)continue;break}if(j===p){for(;!0!==z()&&(e=W());)if(e!==s){if(e===b){P=G.isBracket=!0,I=G.isGlob=!0,H=!0;break}}else D=G.backslashes=!0,W();if(!0===E)continue;break}if(!0===r.nonegate||j!==l||T!==k){if(!0!==r.noparen&&j===f){if(I=G.isGlob=!0,!0===E){for(;!0!==z()&&(j=W());)if(j!==f){if(j===_){H=!0;break}}else D=G.backslashes=!0,j=W();continue}break}if(!0===I){if(H=!0,!0===E)continue;break}}else U=G.negated=!0,k++}else{if(S.push(T),x.push(G),G={value:"",depth:0,isGlob:!1},!0===H)continue;if(A===u&&T===k+1){k+=2;continue}C=T+1}}else D=G.backslashes=!0,j=W(),j===c&&(M=!0)}!0===r.noext&&(N=!1,I=!1);let q=O,K="",Y="";k>0&&(K=O.slice(0,k),O=O.slice(k),C-=k),q&&!0===I&&C>0?(q=O.slice(0,C),Y=O.slice(C)):!0===I?(q="",Y=O):q=O,q&&""!==q&&"/"!==q&&q!==O&&y(q.charCodeAt(q.length-1))&&(q=q.slice(0,-1)),!0===r.unescape&&(Y&&(Y=n.removeBackslashes(Y)),q&&!0===D&&(q=n.removeBackslashes(q)));const V={prefix:K,input:e,start:k,base:q,glob:Y,isBrace:L,isBracket:P,isGlob:I,isExtglob:N,isGlobstar:B,negated:U,negatedExtglob:F};if(!0===r.tokens&&(V.maxDepth=0,y(j)||x.push(G),V.tokens=x),!0===r.parts||!0===r.tokens){let t;for(let n=0;n<S.length;n++){const i=t?t+1:k,o=S[n],s=e.slice(i,o);r.tokens&&(0===n&&0!==k?(x[n].isPrefix=!0,x[n].value=K):x[n].value=s,w(x[n]),V.maxDepth+=x[n].depth),0===n&&""===s||R.push(s),t=o}if(t&&t+1<e.length){const n=e.slice(t+1);R.push(n),r.tokens&&(x[x.length-1].value=n,w(x[x.length-1]),V.maxDepth+=x[x.length-1].depth)}V.slashes=S,V.parts=R}return V}},"./node_modules/picomatch/lib/utils.js":(e,t,r)=>{"use strict";var n=r("./node_modules/process/browser.js");const i=r("./node_modules/path-browserify/index.js"),o="win32"===n.platform,{REGEX_BACKSLASH:s,REGEX_REMOVE_BACKSLASH:a,REGEX_SPECIAL_CHARS:u,REGEX_SPECIAL_CHARS_GLOBAL:l}=r("./node_modules/picomatch/lib/constants.js");t.isObject=e=>null!==e&&"object"==typeof e&&!Array.isArray(e),t.hasRegexChars=e=>u.test(e),t.isRegexChar=e=>1===e.length&&t.hasRegexChars(e),t.escapeRegex=e=>e.replace(l,"\\$1"),t.toPosixSlashes=e=>e.replace(s,"/"),t.removeBackslashes=e=>e.replace(a,(e=>"\\"===e?"":e)),t.supportsLookbehinds=()=>{const e=n.version.slice(1).split(".").map(Number);return 3===e.length&&e[0]>=9||8===e[0]&&e[1]>=10},t.isWindows=e=>e&&"boolean"==typeof e.windows?e.windows:!0===o||"\\"===i.sep,t.escapeLast=(e,r,n)=>{const i=e.lastIndexOf(r,n);return-1===i?e:"\\"===e[i-1]?t.escapeLast(e,r,i-1):`${e.slice(0,i)}\\${e.slice(i)}`},t.removePrefix=(e,t={})=>{let r=e;return r.startsWith("./")&&(r=r.slice(2),t.prefix="./"),r},t.wrapOutput=(e,t={},r={})=>{let n=`${r.contains?"":"^"}(?:${e})${r.contains?"":"$"}`;return!0===t.negated&&(n=`(?:^(?!${n}).*$)`),n}},"./node_modules/queue-microtask/index.js":(e,t,r)=>{let n;e.exports="function"==typeof queueMicrotask?queueMicrotask.bind("undefined"!=typeof window?window:r.g):e=>(n||(n=Promise.resolve())).then(e).catch((e=>setTimeout((()=>{throw e}),0)))},"./node_modules/readable-stream/errors-browser.js":e=>{"use strict";var t={};function r(e,r,n){n||(n=Error);var i=function(e){var t,n;function i(t,n,i){return e.call(this,function(e,t,n){return"string"==typeof r?r:r(e,t,n)}(t,n,i))||this}return n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,i}(n);i.prototype.name=n.name,i.prototype.code=e,t[e]=i}function n(e,t){if(Array.isArray(e)){var r=e.length;return e=e.map((function(e){return String(e)})),r>2?"one of ".concat(t," ").concat(e.slice(0,r-1).join(", "),", or ")+e[r-1]:2===r?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}return"of ".concat(t," ").concat(String(e))}r("ERR_INVALID_OPT_VALUE",(function(e,t){return'The value "'+t+'" is invalid for option "'+e+'"'}),TypeError),r("ERR_INVALID_ARG_TYPE",(function(e,t,r){var i,o,s,a;if("string"==typeof t&&(o="not ",t.substr(!s||s<0?0:+s,o.length)===o)?(i="must not be",t=t.replace(/^not /,"")):i="must be",function(e,t,r){return(void 0===r||r>e.length)&&(r=e.length),e.substring(r-t.length,r)===t}(e," argument"))a="The ".concat(e," ").concat(i," ").concat(n(t,"type"));else{var u=function(e,t,r){return"number"!=typeof r&&(r=0),!(r+t.length>e.length)&&-1!==e.indexOf(t,r)}(e,".")?"property":"argument";a='The "'.concat(e,'" ').concat(u," ").concat(i," ").concat(n(t,"type"))}return a+=". Received type ".concat(typeof r)}),TypeError),r("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),r("ERR_METHOD_NOT_IMPLEMENTED",(function(e){return"The "+e+" method is not implemented"})),r("ERR_STREAM_PREMATURE_CLOSE","Premature close"),r("ERR_STREAM_DESTROYED",(function(e){return"Cannot call "+e+" after a stream was destroyed"})),r("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),r("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),r("ERR_STREAM_WRITE_AFTER_END","write after end"),r("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),r("ERR_UNKNOWN_ENCODING",(function(e){return"Unknown encoding: "+e}),TypeError),r("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),e.exports.codes=t},"./node_modules/readable-stream/lib/_stream_duplex.js":(e,t,r)=>{"use strict";var n=r("./node_modules/process/browser.js"),i=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=d;var o=r("./node_modules/readable-stream/lib/_stream_readable.js"),s=r("./node_modules/readable-stream/lib/_stream_writable.js");r("./node_modules/inherits/inherits_browser.js")(d,o);for(var a=i(s.prototype),u=0;u<a.length;u++){var l=a[u];d.prototype[l]||(d.prototype[l]=s.prototype[l])}function d(e){if(!(this instanceof d))return new d(e);o.call(this,e),s.call(this,e),this.allowHalfOpen=!0,e&&(!1===e.readable&&(this.readable=!1),!1===e.writable&&(this.writable=!1),!1===e.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",c)))}function c(){this._writableState.ended||n.nextTick(f,this)}function f(e){e.end()}Object.defineProperty(d.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(d.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(d.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(d.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}})},"./node_modules/readable-stream/lib/_stream_passthrough.js":(e,t,r)=>{"use strict";e.exports=i;var n=r("./node_modules/readable-stream/lib/_stream_transform.js");function i(e){if(!(this instanceof i))return new i(e);n.call(this,e)}r("./node_modules/inherits/inherits_browser.js")(i,n),i.prototype._transform=function(e,t,r){r(null,e)}},"./node_modules/readable-stream/lib/_stream_readable.js":(e,t,r)=>{"use strict";var n,i=r("./node_modules/process/browser.js");e.exports=R,R.ReadableState=x;r("./node_modules/events/events.js").EventEmitter;var o=function(e,t){return e.listeners(t).length},s=r("./node_modules/readable-stream/lib/internal/streams/stream-browser.js"),a=r("./node_modules/buffer/index.js").Buffer,u=r.g.Uint8Array||function(){};var l,d=r("?d17e");l=d&&d.debuglog?d.debuglog("stream"):function(){};var c,f,p,h=r("./node_modules/readable-stream/lib/internal/streams/buffer_list.js"),m=r("./node_modules/readable-stream/lib/internal/streams/destroy.js"),g=r("./node_modules/readable-stream/lib/internal/streams/state.js").getHighWaterMark,_=r("./node_modules/readable-stream/errors-browser.js").codes,b=_.ERR_INVALID_ARG_TYPE,y=_.ERR_STREAM_PUSH_AFTER_EOF,w=_.ERR_METHOD_NOT_IMPLEMENTED,v=_.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;r("./node_modules/inherits/inherits_browser.js")(R,s);var E=m.errorOrDestroy,S=["error","close","destroy","pause","resume"];function x(e,t,i){n=n||r("./node_modules/readable-stream/lib/_stream_duplex.js"),e=e||{},"boolean"!=typeof i&&(i=t instanceof n),this.objectMode=!!e.objectMode,i&&(this.objectMode=this.objectMode||!!e.readableObjectMode),this.highWaterMark=g(this,e,"readableHighWaterMark",i),this.buffer=new h,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(c||(c=r("./node_modules/string_decoder/lib/string_decoder.js").StringDecoder),this.decoder=new c(e.encoding),this.encoding=e.encoding)}function R(e){if(n=n||r("./node_modules/readable-stream/lib/_stream_duplex.js"),!(this instanceof R))return new R(e);var t=this instanceof n;this._readableState=new x(e,this,t),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),s.call(this)}function A(e,t,r,n,i){l("readableAddChunk",t);var o,s=e._readableState;if(null===t)s.reading=!1,function(e,t){if(l("onEofChunk"),t.ended)return;if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,t.sync?k(e):(t.needReadable=!1,t.emittedReadable||(t.emittedReadable=!0,C(e)))}(e,s);else if(i||(o=function(e,t){var r;n=t,a.isBuffer(n)||n instanceof u||"string"==typeof t||void 0===t||e.objectMode||(r=new b("chunk",["string","Buffer","Uint8Array"],t));var n;return r}(s,t)),o)E(e,o);else if(s.objectMode||t&&t.length>0)if("string"==typeof t||s.objectMode||Object.getPrototypeOf(t)===a.prototype||(t=function(e){return a.from(e)}(t)),n)s.endEmitted?E(e,new v):j(e,s,t,!0);else if(s.ended)E(e,new y);else{if(s.destroyed)return!1;s.reading=!1,s.decoder&&!r?(t=s.decoder.write(t),s.objectMode||0!==t.length?j(e,s,t,!1):L(e,s)):j(e,s,t,!1)}else n||(s.reading=!1,L(e,s));return!s.ended&&(s.length<s.highWaterMark||0===s.length)}function j(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(t.awaitDrain=0,e.emit("data",r)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&k(e)),L(e,t)}Object.defineProperty(R.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),R.prototype.destroy=m.destroy,R.prototype._undestroy=m.undestroy,R.prototype._destroy=function(e,t){t(e)},R.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=a.from(e,t),t=""),r=!0),A(this,e,t,!1,r)},R.prototype.unshift=function(e){return A(this,e,null,!0,!1)},R.prototype.isPaused=function(){return!1===this._readableState.flowing},R.prototype.setEncoding=function(e){c||(c=r("./node_modules/string_decoder/lib/string_decoder.js").StringDecoder);var t=new c(e);this._readableState.decoder=t,this._readableState.encoding=this._readableState.decoder.encoding;for(var n=this._readableState.buffer.head,i="";null!==n;)i+=t.write(n.data),n=n.next;return this._readableState.buffer.clear(),""!==i&&this._readableState.buffer.push(i),this._readableState.length=i.length,this};var O=1073741824;function T(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=O?e=O:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function k(e){var t=e._readableState;l("emitReadable",t.needReadable,t.emittedReadable),t.needReadable=!1,t.emittedReadable||(l("emitReadable",t.flowing),t.emittedReadable=!0,i.nextTick(C,e))}function C(e){var t=e._readableState;l("emitReadable_",t.destroyed,t.length,t.ended),t.destroyed||!t.length&&!t.ended||(e.emit("readable"),t.emittedReadable=!1),t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark,M(e)}function L(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(P,e,t))}function P(e,t){for(;!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&0===t.length);){var r=t.length;if(l("maybeReadMore read 0"),e.read(0),r===t.length)break}t.readingMore=!1}function I(e){var t=e._readableState;t.readableListening=e.listenerCount("readable")>0,t.resumeScheduled&&!t.paused?t.flowing=!0:e.listenerCount("data")>0&&e.resume()}function N(e){l("readable nexttick read 0"),e.read(0)}function B(e,t){l("resume",t.reading),t.reading||e.read(0),t.resumeScheduled=!1,e.emit("resume"),M(e),t.flowing&&!t.reading&&e.read(0)}function M(e){var t=e._readableState;for(l("flow",t.flowing);t.flowing&&null!==e.read(););}function D(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.first():t.buffer.concat(t.length),t.buffer.clear()):r=t.buffer.consume(e,t.decoder),r);var r}function U(e){var t=e._readableState;l("endReadable",t.endEmitted),t.endEmitted||(t.ended=!0,i.nextTick(F,t,e))}function F(e,t){if(l("endReadableNT",e.endEmitted,e.length),!e.endEmitted&&0===e.length&&(e.endEmitted=!0,t.readable=!1,t.emit("end"),e.autoDestroy)){var r=t._writableState;(!r||r.autoDestroy&&r.finished)&&t.destroy()}}function H(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}R.prototype.read=function(e){l("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&((0!==t.highWaterMark?t.length>=t.highWaterMark:t.length>0)||t.ended))return l("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?U(this):k(this),null;if(0===(e=T(e,t))&&t.ended)return 0===t.length&&U(this),null;var n,i=t.needReadable;return l("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&l("length less than watermark",i=!0),t.ended||t.reading?l("reading or ended",i=!1):i&&(l("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=T(r,t))),null===(n=e>0?D(e,t):null)?(t.needReadable=t.length<=t.highWaterMark,e=0):(t.length-=e,t.awaitDrain=0),0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&U(this)),null!==n&&this.emit("data",n),n},R.prototype._read=function(e){E(this,new w("_read()"))},R.prototype.pipe=function(e,t){var r=this,n=this._readableState;switch(n.pipesCount){case 0:n.pipes=e;break;case 1:n.pipes=[n.pipes,e];break;default:n.pipes.push(e)}n.pipesCount+=1,l("pipe count=%d opts=%j",n.pipesCount,t);var s=(!t||!1!==t.end)&&e!==i.stdout&&e!==i.stderr?u:g;function a(t,i){l("onunpipe"),t===r&&i&&!1===i.hasUnpiped&&(i.hasUnpiped=!0,l("cleanup"),e.removeListener("close",h),e.removeListener("finish",m),e.removeListener("drain",d),e.removeListener("error",p),e.removeListener("unpipe",a),r.removeListener("end",u),r.removeListener("end",g),r.removeListener("data",f),c=!0,!n.awaitDrain||e._writableState&&!e._writableState.needDrain||d())}function u(){l("onend"),e.end()}n.endEmitted?i.nextTick(s):r.once("end",s),e.on("unpipe",a);var d=function(e){return function(){var t=e._readableState;l("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&o(e,"data")&&(t.flowing=!0,M(e))}}(r);e.on("drain",d);var c=!1;function f(t){l("ondata");var i=e.write(t);l("dest.write",i),!1===i&&((1===n.pipesCount&&n.pipes===e||n.pipesCount>1&&-1!==H(n.pipes,e))&&!c&&(l("false write response, pause",n.awaitDrain),n.awaitDrain++),r.pause())}function p(t){l("onerror",t),g(),e.removeListener("error",p),0===o(e,"error")&&E(e,t)}function h(){e.removeListener("finish",m),g()}function m(){l("onfinish"),e.removeListener("close",h),g()}function g(){l("unpipe"),r.unpipe(e)}return r.on("data",f),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?Array.isArray(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}(e,"error",p),e.once("close",h),e.once("finish",m),e.emit("pipe",r),n.flowing||(l("pipe resume"),r.resume()),e},R.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r)),this;if(!e){var n=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,{hasUnpiped:!1});return this}var s=H(t.pipes,e);return-1===s||(t.pipes.splice(s,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r)),this},R.prototype.on=function(e,t){var r=s.prototype.on.call(this,e,t),n=this._readableState;return"data"===e?(n.readableListening=this.listenerCount("readable")>0,!1!==n.flowing&&this.resume()):"readable"===e&&(n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.flowing=!1,n.emittedReadable=!1,l("on readable",n.length,n.reading),n.length?k(this):n.reading||i.nextTick(N,this))),r},R.prototype.addListener=R.prototype.on,R.prototype.removeListener=function(e,t){var r=s.prototype.removeListener.call(this,e,t);return"readable"===e&&i.nextTick(I,this),r},R.prototype.removeAllListeners=function(e){var t=s.prototype.removeAllListeners.apply(this,arguments);return"readable"!==e&&void 0!==e||i.nextTick(I,this),t},R.prototype.resume=function(){var e=this._readableState;return e.flowing||(l("resume"),e.flowing=!e.readableListening,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(B,e,t))}(this,e)),e.paused=!1,this},R.prototype.pause=function(){return l("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(l("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},R.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var i in e.on("end",(function(){if(l("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(i){(l("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i)||(r.objectMode||i&&i.length)&&(t.push(i)||(n=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var o=0;o<S.length;o++)e.on(S[o],this.emit.bind(this,S[o]));return this._read=function(t){l("wrapped _read",t),n&&(n=!1,e.resume())},this},"function"==typeof Symbol&&(R.prototype[Symbol.asyncIterator]=function(){return void 0===f&&(f=r("./node_modules/readable-stream/lib/internal/streams/async_iterator.js")),f(this)}),Object.defineProperty(R.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(R.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(R.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(e){this._readableState&&(this._readableState.flowing=e)}}),R._fromList=D,Object.defineProperty(R.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(R.from=function(e,t){return void 0===p&&(p=r("./node_modules/readable-stream/lib/internal/streams/from-browser.js")),p(R,e,t)})},"./node_modules/readable-stream/lib/_stream_transform.js":(e,t,r)=>{"use strict";e.exports=d;var n=r("./node_modules/readable-stream/errors-browser.js").codes,i=n.ERR_METHOD_NOT_IMPLEMENTED,o=n.ERR_MULTIPLE_CALLBACK,s=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,a=n.ERR_TRANSFORM_WITH_LENGTH_0,u=r("./node_modules/readable-stream/lib/_stream_duplex.js");function l(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(null===n)return this.emit("error",new o);r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function d(e){if(!(this instanceof d))return new d(e);u.call(this,e),this._transformState={afterTransform:l.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",c)}function c(){var e=this;"function"!=typeof this._flush||this._readableState.destroyed?f(this,null,null):this._flush((function(t,r){f(e,t,r)}))}function f(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new a;if(e._transformState.transforming)throw new s;return e.push(null)}r("./node_modules/inherits/inherits_browser.js")(d,u),d.prototype.push=function(e,t){return this._transformState.needTransform=!1,u.prototype.push.call(this,e,t)},d.prototype._transform=function(e,t,r){r(new i("_transform()"))},d.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},d.prototype._read=function(e){var t=this._transformState;null===t.writechunk||t.transforming?t.needTransform=!0:(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform))},d.prototype._destroy=function(e,t){u.prototype._destroy.call(this,e,(function(e){t(e)}))}},"./node_modules/readable-stream/lib/_stream_writable.js":(e,t,r)=>{"use strict";var n,i=r("./node_modules/process/browser.js");function o(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;e.entry=null;for(;n;){var i=n.callback;t.pendingcb--,i(r),n=n.next}t.corkedRequestsFree.next=e}(t,e)}}e.exports=R,R.WritableState=x;var s={deprecate:r("./node_modules/util-deprecate/browser.js")},a=r("./node_modules/readable-stream/lib/internal/streams/stream-browser.js"),u=r("./node_modules/buffer/index.js").Buffer,l=r.g.Uint8Array||function(){};var d,c=r("./node_modules/readable-stream/lib/internal/streams/destroy.js"),f=r("./node_modules/readable-stream/lib/internal/streams/state.js").getHighWaterMark,p=r("./node_modules/readable-stream/errors-browser.js").codes,h=p.ERR_INVALID_ARG_TYPE,m=p.ERR_METHOD_NOT_IMPLEMENTED,g=p.ERR_MULTIPLE_CALLBACK,_=p.ERR_STREAM_CANNOT_PIPE,b=p.ERR_STREAM_DESTROYED,y=p.ERR_STREAM_NULL_VALUES,w=p.ERR_STREAM_WRITE_AFTER_END,v=p.ERR_UNKNOWN_ENCODING,E=c.errorOrDestroy;function S(){}function x(e,t,s){n=n||r("./node_modules/readable-stream/lib/_stream_duplex.js"),e=e||{},"boolean"!=typeof s&&(s=t instanceof n),this.objectMode=!!e.objectMode,s&&(this.objectMode=this.objectMode||!!e.writableObjectMode),this.highWaterMark=f(this,e,"writableHighWaterMark",s),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var a=!1===e.decodeStrings;this.decodeStrings=!a,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,o=r.writecb;if("function"!=typeof o)throw new g;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,o){--t.pendingcb,r?(i.nextTick(o,n),i.nextTick(C,e,t),e._writableState.errorEmitted=!0,E(e,n)):(o(n),e._writableState.errorEmitted=!0,E(e,n),C(e,t))}(e,r,n,t,o);else{var s=T(r)||e.destroyed;s||r.corked||r.bufferProcessing||!r.bufferedRequest||O(e,r),n?i.nextTick(j,e,r,s,o):j(e,r,s,o)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function R(e){var t=this instanceof(n=n||r("./node_modules/readable-stream/lib/_stream_duplex.js"));if(!t&&!d.call(R,this))return new R(e);this._writableState=new x(e,this,t),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),a.call(this)}function A(e,t,r,n,i,o,s){t.writelen=n,t.writecb=s,t.writing=!0,t.sync=!0,t.destroyed?t.onwrite(new b("write")):r?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function j(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),C(e,t)}function O(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),s=t.corkedRequestsFree;s.entry=r;for(var a=0,u=!0;r;)i[a]=r,r.isBuf||(u=!1),r=r.next,a+=1;i.allBuffers=u,A(e,t,!0,t.length,i,"",s.finish),t.pendingcb++,t.lastBufferedRequest=null,s.next?(t.corkedRequestsFree=s.next,s.next=null):t.corkedRequestsFree=new o(t),t.bufferedRequestCount=0}else{for(;r;){var l=r.chunk,d=r.encoding,c=r.callback;if(A(e,t,!1,t.objectMode?1:l.length,l,d,c),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function T(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function k(e,t){e._final((function(r){t.pendingcb--,r&&E(e,r),t.prefinished=!0,e.emit("prefinish"),C(e,t)}))}function C(e,t){var r=T(t);if(r&&(function(e,t){t.prefinished||t.finalCalled||("function"!=typeof e._final||t.destroyed?(t.prefinished=!0,e.emit("prefinish")):(t.pendingcb++,t.finalCalled=!0,i.nextTick(k,e,t)))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"),t.autoDestroy))){var n=e._readableState;(!n||n.autoDestroy&&n.endEmitted)&&e.destroy()}return r}r("./node_modules/inherits/inherits_browser.js")(R,a),x.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(x.prototype,"buffer",{get:s.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(d=Function.prototype[Symbol.hasInstance],Object.defineProperty(R,Symbol.hasInstance,{value:function(e){return!!d.call(this,e)||this===R&&(e&&e._writableState instanceof x)}})):d=function(e){return e instanceof this},R.prototype.pipe=function(){E(this,new _)},R.prototype.write=function(e,t,r){var n,o=this._writableState,s=!1,a=!o.objectMode&&(n=e,u.isBuffer(n)||n instanceof l);return a&&!u.isBuffer(e)&&(e=function(e){return u.from(e)}(e)),"function"==typeof t&&(r=t,t=null),a?t="buffer":t||(t=o.defaultEncoding),"function"!=typeof r&&(r=S),o.ending?function(e,t){var r=new w;E(e,r),i.nextTick(t,r)}(this,r):(a||function(e,t,r,n){var o;return null===r?o=new y:"string"==typeof r||t.objectMode||(o=new h("chunk",["string","Buffer"],r)),!o||(E(e,o),i.nextTick(n,o),!1)}(this,o,e,r))&&(o.pendingcb++,s=function(e,t,r,n,i,o){if(!r){var s=function(e,t,r){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=u.from(t,r));return t}(t,n,i);n!==s&&(r=!0,i="buffer",n=s)}var a=t.objectMode?1:n.length;t.length+=a;var l=t.length<t.highWaterMark;l||(t.needDrain=!0);if(t.writing||t.corked){var d=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},d?d.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else A(e,t,!1,a,n,i,o);return l}(this,o,a,e,t,r)),s},R.prototype.cork=function(){this._writableState.corked++},R.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.bufferProcessing||!e.bufferedRequest||O(this,e))},R.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new v(e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(R.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(R.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),R.prototype._write=function(e,t,r){r(new m("_write()"))},R.prototype._writev=null,R.prototype.end=function(e,t,r){var n=this._writableState;return"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||function(e,t,r){t.ending=!0,C(e,t),r&&(t.finished?i.nextTick(r):e.once("finish",r));t.ended=!0,e.writable=!1}(this,n,r),this},Object.defineProperty(R.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(R.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),R.prototype.destroy=c.destroy,R.prototype._undestroy=c.undestroy,R.prototype._destroy=function(e,t){t(e)}},"./node_modules/readable-stream/lib/internal/streams/async_iterator.js":(e,t,r)=>{"use strict";var n,i=r("./node_modules/process/browser.js");function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var s=r("./node_modules/readable-stream/lib/internal/streams/end-of-stream.js"),a=Symbol("lastResolve"),u=Symbol("lastReject"),l=Symbol("error"),d=Symbol("ended"),c=Symbol("lastPromise"),f=Symbol("handlePromise"),p=Symbol("stream");function h(e,t){return{value:e,done:t}}function m(e){var t=e[a];if(null!==t){var r=e[p].read();null!==r&&(e[c]=null,e[a]=null,e[u]=null,t(h(r,!1)))}}function g(e){i.nextTick(m,e)}var _=Object.getPrototypeOf((function(){})),b=Object.setPrototypeOf((o(n={get stream(){return this[p]},next:function(){var e=this,t=this[l];if(null!==t)return Promise.reject(t);if(this[d])return Promise.resolve(h(void 0,!0));if(this[p].destroyed)return new Promise((function(t,r){i.nextTick((function(){e[l]?r(e[l]):t(h(void 0,!0))}))}));var r,n=this[c];if(n)r=new Promise(function(e,t){return function(r,n){e.then((function(){t[d]?r(h(void 0,!0)):t[f](r,n)}),n)}}(n,this));else{var o=this[p].read();if(null!==o)return Promise.resolve(h(o,!1));r=new Promise(this[f])}return this[c]=r,r}},Symbol.asyncIterator,(function(){return this})),o(n,"return",(function(){var e=this;return new Promise((function(t,r){e[p].destroy(null,(function(e){e?r(e):t(h(void 0,!0))}))}))})),n),_);e.exports=function(e){var t,r=Object.create(b,(o(t={},p,{value:e,writable:!0}),o(t,a,{value:null,writable:!0}),o(t,u,{value:null,writable:!0}),o(t,l,{value:null,writable:!0}),o(t,d,{value:e._readableState.endEmitted,writable:!0}),o(t,f,{value:function(e,t){var n=r[p].read();n?(r[c]=null,r[a]=null,r[u]=null,e(h(n,!1))):(r[a]=e,r[u]=t)},writable:!0}),t));return r[c]=null,s(e,(function(e){if(e&&"ERR_STREAM_PREMATURE_CLOSE"!==e.code){var t=r[u];return null!==t&&(r[c]=null,r[a]=null,r[u]=null,t(e)),void(r[l]=e)}var n=r[a];null!==n&&(r[c]=null,r[a]=null,r[u]=null,n(h(void 0,!0))),r[d]=!0})),e.on("readable",g.bind(null,r)),r}},"./node_modules/readable-stream/lib/internal/streams/buffer_list.js":(e,t,r)=>{"use strict";function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=r("./node_modules/buffer/index.js").Buffer,a=r("?ed1b").inspect,u=a&&a.custom||"inspect";e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}var t,r,l;return t=e,r=[{key:"push",value:function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length}},{key:"unshift",value:function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length}},{key:"shift",value:function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r}},{key:"concat",value:function(e){if(0===this.length)return s.alloc(0);for(var t,r,n,i=s.allocUnsafe(e>>>0),o=this.head,a=0;o;)t=o.data,r=i,n=a,s.prototype.copy.call(t,r,n),a+=o.data.length,o=o.next;return i}},{key:"consume",value:function(e,t){var r;return e<this.head.data.length?(r=this.head.data.slice(0,e),this.head.data=this.head.data.slice(e)):r=e===this.head.data.length?this.shift():t?this._getString(e):this._getBuffer(e),r}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(e){var t=this.head,r=1,n=t.data;for(e-=n.length;t=t.next;){var i=t.data,o=e>i.length?i.length:e;if(o===i.length?n+=i:n+=i.slice(0,e),0==(e-=o)){o===i.length?(++r,t.next?this.head=t.next:this.head=this.tail=null):(this.head=t,t.data=i.slice(o));break}++r}return this.length-=r,n}},{key:"_getBuffer",value:function(e){var t=s.allocUnsafe(e),r=this.head,n=1;for(r.data.copy(t),e-=r.data.length;r=r.next;){var i=r.data,o=e>i.length?i.length:e;if(i.copy(t,t.length-e,0,o),0==(e-=o)){o===i.length?(++n,r.next?this.head=r.next:this.head=this.tail=null):(this.head=r,r.data=i.slice(o));break}++n}return this.length-=n,t}},{key:u,value:function(e,t){return a(this,function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({},t,{depth:0,customInspect:!1}))}}],r&&o(t.prototype,r),l&&o(t,l),e}()},"./node_modules/readable-stream/lib/internal/streams/destroy.js":(e,t,r)=>{"use strict";var n=r("./node_modules/process/browser.js");function i(e,t){s(e,t),o(e)}function o(e){e._writableState&&!e._writableState.emitClose||e._readableState&&!e._readableState.emitClose||e.emit("close")}function s(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var r=this,a=this._readableState&&this._readableState.destroyed,u=this._writableState&&this._writableState.destroyed;return a||u?(t?t(e):e&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,n.nextTick(s,this,e)):n.nextTick(s,this,e)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!t&&e?r._writableState?r._writableState.errorEmitted?n.nextTick(o,r):(r._writableState.errorEmitted=!0,n.nextTick(i,r,e)):n.nextTick(i,r,e):t?(n.nextTick(o,r),t(e)):n.nextTick(o,r)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(e,t){var r=e._readableState,n=e._writableState;r&&r.autoDestroy||n&&n.autoDestroy?e.destroy(t):e.emit("error",t)}}},"./node_modules/readable-stream/lib/internal/streams/end-of-stream.js":(e,t,r)=>{"use strict";var n=r("./node_modules/readable-stream/errors-browser.js").codes.ERR_STREAM_PREMATURE_CLOSE;function i(){}e.exports=function e(t,r,o){if("function"==typeof r)return e(t,null,r);r||(r={}),o=function(e){var t=!1;return function(){if(!t){t=!0;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];e.apply(this,n)}}}(o||i);var s=r.readable||!1!==r.readable&&t.readable,a=r.writable||!1!==r.writable&&t.writable,u=function(){t.writable||d()},l=t._writableState&&t._writableState.finished,d=function(){a=!1,l=!0,s||o.call(t)},c=t._readableState&&t._readableState.endEmitted,f=function(){s=!1,c=!0,a||o.call(t)},p=function(e){o.call(t,e)},h=function(){var e;return s&&!c?(t._readableState&&t._readableState.ended||(e=new n),o.call(t,e)):a&&!l?(t._writableState&&t._writableState.ended||(e=new n),o.call(t,e)):void 0},m=function(){t.req.on("finish",d)};return!function(e){return e.setHeader&&"function"==typeof e.abort}(t)?a&&!t._writableState&&(t.on("end",u),t.on("close",u)):(t.on("complete",d),t.on("abort",h),t.req?m():t.on("request",m)),t.on("end",f),t.on("finish",d),!1!==r.error&&t.on("error",p),t.on("close",h),function(){t.removeListener("complete",d),t.removeListener("abort",h),t.removeListener("request",m),t.req&&t.req.removeListener("finish",d),t.removeListener("end",u),t.removeListener("close",u),t.removeListener("finish",d),t.removeListener("end",f),t.removeListener("error",p),t.removeListener("close",h)}}},"./node_modules/readable-stream/lib/internal/streams/from-browser.js":e=>{e.exports=function(){throw new Error("Readable.from is not available in the browser")}},"./node_modules/readable-stream/lib/internal/streams/pipeline.js":(e,t,r)=>{"use strict";var n;var i=r("./node_modules/readable-stream/errors-browser.js").codes,o=i.ERR_MISSING_ARGS,s=i.ERR_STREAM_DESTROYED;function a(e){if(e)throw e}function u(e,t,i,o){o=function(e){var t=!1;return function(){t||(t=!0,e.apply(void 0,arguments))}}(o);var a=!1;e.on("close",(function(){a=!0})),void 0===n&&(n=r("./node_modules/readable-stream/lib/internal/streams/end-of-stream.js")),n(e,{readable:t,writable:i},(function(e){if(e)return o(e);a=!0,o()}));var u=!1;return function(t){if(!a&&!u)return u=!0,function(e){return e.setHeader&&"function"==typeof e.abort}(e)?e.abort():"function"==typeof e.destroy?e.destroy():void o(t||new s("pipe"))}}function l(e){e()}function d(e,t){return e.pipe(t)}function c(e){return e.length?"function"!=typeof e[e.length-1]?a:e.pop():a}e.exports=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n,i=c(t);if(Array.isArray(t[0])&&(t=t[0]),t.length<2)throw new o("streams");var s=t.map((function(e,r){var o=r<t.length-1;return u(e,o,r>0,(function(e){n||(n=e),e&&s.forEach(l),o||(s.forEach(l),i(n))}))}));return t.reduce(d)}},"./node_modules/readable-stream/lib/internal/streams/state.js":(e,t,r)=>{"use strict";var n=r("./node_modules/readable-stream/errors-browser.js").codes.ERR_INVALID_OPT_VALUE;e.exports={getHighWaterMark:function(e,t,r,i){var o=function(e,t,r){return null!=e.highWaterMark?e.highWaterMark:t?e[r]:null}(t,i,r);if(null!=o){if(!isFinite(o)||Math.floor(o)!==o||o<0)throw new n(i?r:"highWaterMark",o);return Math.floor(o)}return e.objectMode?16:16384}}},"./node_modules/readable-stream/lib/internal/streams/stream-browser.js":(e,t,r)=>{e.exports=r("./node_modules/events/events.js").EventEmitter},"./node_modules/replace-ext/index.js":(e,t,r)=>{"use strict";var n=r("./node_modules/path-browserify/index.js");e.exports=function(e,t){if("string"!=typeof e)return e;if(0===e.length)return e;var r,i=n.basename(e,n.extname(e))+t,o=n.join(n.dirname(e),i);return(r=e.slice(0,2))==="."+n.sep||"./"===r?"."+n.sep+o:o}},"./node_modules/reusify/reusify.js":e=>{"use strict";e.exports=function(e){var t=new e,r=t;return{get:function(){var n=t;return n.next?t=n.next:(t=new e,r=t),n.next=null,n},release:function(e){r.next=e,r=e}}}},"./node_modules/run-parallel/index.js":(e,t,r)=>{e.exports=function(e,t){let r,i,o,s=!0;Array.isArray(e)?(r=[],i=e.length):(o=Object.keys(e),r={},i=o.length);function a(e){function i(){t&&t(e,r),t=null}s?n(i):i()}function u(e,t,n){r[e]=n,(0==--i||t)&&a(t)}i?o?o.forEach((function(t){e[t]((function(e,r){u(t,e,r)}))})):e.forEach((function(e,t){e((function(e,r){u(t,e,r)}))})):a(null);s=!1};const n=r("./node_modules/queue-microtask/index.js")},"./node_modules/stream-browserify/index.js":(e,t,r)=>{e.exports=i;var n=r("./node_modules/events/events.js").EventEmitter;function i(){n.call(this)}r("./node_modules/inherits/inherits_browser.js")(i,n),i.Readable=r("./node_modules/readable-stream/lib/_stream_readable.js"),i.Writable=r("./node_modules/readable-stream/lib/_stream_writable.js"),i.Duplex=r("./node_modules/readable-stream/lib/_stream_duplex.js"),i.Transform=r("./node_modules/readable-stream/lib/_stream_transform.js"),i.PassThrough=r("./node_modules/readable-stream/lib/_stream_passthrough.js"),i.finished=r("./node_modules/readable-stream/lib/internal/streams/end-of-stream.js"),i.pipeline=r("./node_modules/readable-stream/lib/internal/streams/pipeline.js"),i.Stream=i,i.prototype.pipe=function(e,t){var r=this;function i(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",i),e.on("drain",o),e._isStdio||t&&!1===t.end||(r.on("end",a),r.on("close",u));var s=!1;function a(){s||(s=!0,e.end())}function u(){s||(s=!0,"function"==typeof e.destroy&&e.destroy())}function l(e){if(d(),0===n.listenerCount(this,"error"))throw e}function d(){r.removeListener("data",i),e.removeListener("drain",o),r.removeListener("end",a),r.removeListener("close",u),r.removeListener("error",l),e.removeListener("error",l),r.removeListener("end",d),r.removeListener("close",d),e.removeListener("close",d)}return r.on("error",l),e.on("error",l),r.on("end",d),r.on("close",d),e.on("close",d),e.emit("pipe",r),e}},"./node_modules/string_decoder/lib/string_decoder.js":(e,t,r)=>{"use strict";var n=r("./node_modules/string_decoder/node_modules/safe-buffer/index.js").Buffer,i=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=u,this.end=l,t=4;break;case"utf8":this.fillLast=a,t=4;break;case"base64":this.text=d,this.end=c,t=3;break;default:return this.write=f,void(this.end=p)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function s(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function a(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function u(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function l(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function d(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function c(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function f(e){return e.toString(this.encoding)}function p(e){return e&&e.length?this.write(e):""}t.StringDecoder=o,o.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},o.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},o.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var i=s(t[n]);if(i>=0)return i>0&&(e.lastNeed=i-1),i;if(--n<r||-2===i)return 0;if((i=s(t[n]))>=0)return i>0&&(e.lastNeed=i-2),i;if(--n<r||-2===i)return 0;if((i=s(t[n]))>=0)return i>0&&(2===i?i=0:e.lastNeed=i-3),i;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},o.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},"./node_modules/string_decoder/node_modules/safe-buffer/index.js":(e,t,r)=>{var n=r("./node_modules/buffer/index.js"),i=n.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function s(e,t,r){return i(e,t,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(o(n,t),t.Buffer=s),s.prototype=Object.create(i.prototype),o(i,s),s.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,r)},s.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=i(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},s.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},s.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},"./node_modules/strtok3/lib/AbstractTokenizer.js":(e,t,r)=>{"use strict";var n=r("./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.AbstractTokenizer=void 0;const i=r("./node_modules/peek-readable/lib/index.js");t.AbstractTokenizer=class{constructor(e){this.position=0,this.numBuffer=new Uint8Array(8),this.fileInfo=e||{}}async readToken(e,t=this.position){const r=n.alloc(e.len);if(await this.readBuffer(r,{position:t})<e.len)throw new i.EndOfStreamError;return e.get(r,0)}async peekToken(e,t=this.position){const r=n.alloc(e.len);if(await this.peekBuffer(r,{position:t})<e.len)throw new i.EndOfStreamError;return e.get(r,0)}async readNumber(e){if(await this.readBuffer(this.numBuffer,{length:e.len})<e.len)throw new i.EndOfStreamError;return e.get(this.numBuffer,0)}async peekNumber(e){if(await this.peekBuffer(this.numBuffer,{length:e.len})<e.len)throw new i.EndOfStreamError;return e.get(this.numBuffer,0)}async ignore(e){if(void 0!==this.fileInfo.size){const t=this.fileInfo.size-this.position;if(e>t)return this.position+=t,t}return this.position+=e,e}async close(){}normalizeOptions(e,t){if(t&&void 0!==t.position&&t.position<this.position)throw new Error("`options.position` must be equal or greater than `tokenizer.position`");return t?{mayBeLess:!0===t.mayBeLess,offset:t.offset?t.offset:0,length:t.length?t.length:e.length-(t.offset?t.offset:0),position:t.position?t.position:this.position}:{mayBeLess:!1,offset:0,length:e.length,position:this.position}}}},"./node_modules/strtok3/lib/BufferTokenizer.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BufferTokenizer=void 0;const n=r("./node_modules/peek-readable/lib/index.js"),i=r("./node_modules/strtok3/lib/AbstractTokenizer.js");class o extends i.AbstractTokenizer{constructor(e,t){super(t),this.uint8Array=e,this.fileInfo.size=this.fileInfo.size?this.fileInfo.size:e.length}async readBuffer(e,t){if(t&&t.position){if(t.position<this.position)throw new Error("`options.position` must be equal or greater than `tokenizer.position`");this.position=t.position}const r=await this.peekBuffer(e,t);return this.position+=r,r}async peekBuffer(e,t){const r=this.normalizeOptions(e,t),i=Math.min(this.uint8Array.length-r.position,r.length);if(!r.mayBeLess&&i<r.length)throw new n.EndOfStreamError;return e.set(this.uint8Array.subarray(r.position,r.position+i),r.offset),i}async close(){}}t.BufferTokenizer=o},"./node_modules/strtok3/lib/FileTokenizer.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromFile=t.FileTokenizer=void 0;const n=r("./node_modules/strtok3/lib/AbstractTokenizer.js"),i=r("./node_modules/peek-readable/lib/index.js"),o=r("./node_modules/strtok3/lib/FsPromise.js");class s extends n.AbstractTokenizer{constructor(e,t){super(t),this.fd=e}async readBuffer(e,t){const r=this.normalizeOptions(e,t);this.position=r.position;const n=await o.read(this.fd,e,r.offset,r.length,r.position);if(this.position+=n.bytesRead,n.bytesRead<r.length&&(!t||!t.mayBeLess))throw new i.EndOfStreamError;return n.bytesRead}async peekBuffer(e,t){const r=this.normalizeOptions(e,t),n=await o.read(this.fd,e,r.offset,r.length,r.position);if(!r.mayBeLess&&n.bytesRead<r.length)throw new i.EndOfStreamError;return n.bytesRead}async close(){return o.close(this.fd)}}t.FileTokenizer=s,t.fromFile=async function(e){const t=await o.stat(e);if(!t.isFile)throw new Error(`File not a file: ${e}`);const r=await o.open(e,"r");return new s(r,{path:e,size:t.size})}},"./node_modules/strtok3/lib/FsPromise.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.readFile=t.writeFileSync=t.writeFile=t.read=t.open=t.close=t.stat=t.createReadStream=t.pathExists=void 0;const n=r("?15b5");t.pathExists=n.existsSync,t.createReadStream=n.createReadStream,t.stat=async function(e){return new Promise(((t,r)=>{n.stat(e,((e,n)=>{e?r(e):t(n)}))}))},t.close=async function(e){return new Promise(((t,r)=>{n.close(e,(e=>{e?r(e):t()}))}))},t.open=async function(e,t){return new Promise(((r,i)=>{n.open(e,t,((e,t)=>{e?i(e):r(t)}))}))},t.read=async function(e,t,r,i,o){return new Promise(((s,a)=>{n.read(e,t,r,i,o,((e,t,r)=>{e?a(e):s({bytesRead:t,buffer:r})}))}))},t.writeFile=async function(e,t){return new Promise(((r,i)=>{n.writeFile(e,t,(e=>{e?i(e):r()}))}))},t.writeFileSync=function(e,t){n.writeFileSync(e,t)},t.readFile=async function(e){return new Promise(((t,r)=>{n.readFile(e,((e,n)=>{e?r(e):t(n)}))}))}},"./node_modules/strtok3/lib/ReadStreamTokenizer.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ReadStreamTokenizer=void 0;const n=r("./node_modules/strtok3/lib/AbstractTokenizer.js"),i=r("./node_modules/peek-readable/lib/index.js");class o extends n.AbstractTokenizer{constructor(e,t){super(t),this.streamReader=new i.StreamReader(e)}async getFileInfo(){return this.fileInfo}async readBuffer(e,t){const r=this.normalizeOptions(e,t),n=r.position-this.position;if(n>0)return await this.ignore(n),this.readBuffer(e,t);if(n<0)throw new Error("`options.position` must be equal or greater than `tokenizer.position`");if(0===r.length)return 0;const o=await this.streamReader.read(e,r.offset,r.length);if(this.position+=o,(!t||!t.mayBeLess)&&o<r.length)throw new i.EndOfStreamError;return o}async peekBuffer(e,t){const r=this.normalizeOptions(e,t);let n=0;if(r.position){const t=r.position-this.position;if(t>0){const i=new Uint8Array(r.length+t);return n=await this.peekBuffer(i,{mayBeLess:r.mayBeLess}),e.set(i.subarray(t),r.offset),n-t}if(t<0)throw new Error("Cannot peek from a negative offset in a stream")}if(r.length>0){try{n=await this.streamReader.peek(e,r.offset,r.length)}catch(e){if(t&&t.mayBeLess&&e instanceof i.EndOfStreamError)return 0;throw e}if(!r.mayBeLess&&n<r.length)throw new i.EndOfStreamError}return n}async ignore(e){const t=Math.min(256e3,e),r=new Uint8Array(t);let n=0;for(;n<e;){const i=e-n,o=await this.readBuffer(r,{length:Math.min(t,i)});if(o<0)return o;n+=o}return n}}t.ReadStreamTokenizer=o},"./node_modules/strtok3/lib/core.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromBuffer=t.fromStream=t.EndOfStreamError=void 0;const n=r("./node_modules/strtok3/lib/ReadStreamTokenizer.js"),i=r("./node_modules/strtok3/lib/BufferTokenizer.js");var o=r("./node_modules/peek-readable/lib/index.js");Object.defineProperty(t,"EndOfStreamError",{enumerable:!0,get:function(){return o.EndOfStreamError}}),t.fromStream=function(e,t){return t=t||{},new n.ReadStreamTokenizer(e,t)},t.fromBuffer=function(e,t){return new i.BufferTokenizer(e,t)}},"./node_modules/strtok3/lib/index.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromStream=t.fromBuffer=t.EndOfStreamError=t.fromFile=void 0;const n=r("./node_modules/strtok3/lib/FsPromise.js"),i=r("./node_modules/strtok3/lib/core.js");var o=r("./node_modules/strtok3/lib/FileTokenizer.js");Object.defineProperty(t,"fromFile",{enumerable:!0,get:function(){return o.fromFile}});var s=r("./node_modules/strtok3/lib/core.js");Object.defineProperty(t,"EndOfStreamError",{enumerable:!0,get:function(){return s.EndOfStreamError}}),Object.defineProperty(t,"fromBuffer",{enumerable:!0,get:function(){return s.fromBuffer}}),t.fromStream=async function(e,t){if(t=t||{},e.path){const r=await n.stat(e.path);t.path=e.path,t.size=r.size}return i.fromStream(e,t)}},"./node_modules/to-regex-range/index.js":(e,t,r)=>{"use strict";const n=r("./node_modules/is-number/index.js"),i=(e,t,r)=>{if(!1===n(e))throw new TypeError("toRegexRange: expected the first argument to be a number");if(void 0===t||e===t)return String(e);if(!1===n(t))throw new TypeError("toRegexRange: expected the second argument to be a number.");let o={relaxZeros:!0,...r};"boolean"==typeof o.strictZeros&&(o.relaxZeros=!1===o.strictZeros);let u=e+":"+t+"="+String(o.relaxZeros)+String(o.shorthand)+String(o.capture)+String(o.wrap);if(i.cache.hasOwnProperty(u))return i.cache[u].result;let l=Math.min(e,t),d=Math.max(e,t);if(1===Math.abs(l-d)){let r=e+"|"+t;return o.capture?`(${r})`:!1===o.wrap?r:`(?:${r})`}let c=h(e)||h(t),f={min:e,max:t,a:l,b:d},p=[],m=[];if(c&&(f.isPadded=c,f.maxLen=String(f.max).length),l<0){m=s(d<0?Math.abs(d):1,Math.abs(l),f,o),l=f.a=0}return d>=0&&(p=s(l,d,f,o)),f.negatives=m,f.positives=p,f.result=function(e,t,r){let n=a(e,t,"-",!1,r)||[],i=a(t,e,"",!1,r)||[],o=a(e,t,"-?",!0,r)||[];return n.concat(o).concat(i).join("|")}(m,p,o),!0===o.capture?f.result=`(${f.result})`:!1!==o.wrap&&p.length+m.length>1&&(f.result=`(?:${f.result})`),i.cache[u]=f,f.result};function o(e,t,r){if(e===t)return{pattern:e,count:[],digits:0};let n=function(e,t){let r=[];for(let n=0;n<e.length;n++)r.push([e[n],t[n]]);return r}(e,t),i=n.length,o="",s=0;for(let e=0;e<i;e++){let[t,i]=n[e];t===i?o+=t:"0"!==t||"9"!==i?o+=p(t,i,r):s++}return s&&(o+=!0===r.shorthand?"\\d":"[0-9]"),{pattern:o,count:[s],digits:i}}function s(e,t,r,n){let i,s=function(e,t){let r=1,n=1,i=d(e,r),o=new Set([t]);for(;e<=i&&i<=t;)o.add(i),r+=1,i=d(e,r);for(i=c(t+1,n)-1;e<i&&i<=t;)o.add(i),n+=1,i=c(t+1,n)-1;return o=[...o],o.sort(u),o}(e,t),a=[],l=e;for(let e=0;e<s.length;e++){let t=s[e],u=o(String(l),String(t),n),d="";r.isPadded||!i||i.pattern!==u.pattern?(r.isPadded&&(d=m(t,r,n)),u.string=d+u.pattern+f(u.count),a.push(u),l=t+1,i=u):(i.count.length>1&&i.count.pop(),i.count.push(u.count[0]),i.string=i.pattern+f(i.count),l=t+1)}return a}function a(e,t,r,n,i){let o=[];for(let i of e){let{string:e}=i;n||l(t,"string",e)||o.push(r+e),n&&l(t,"string",e)&&o.push(r+e)}return o}function u(e,t){return e>t?1:t>e?-1:0}function l(e,t,r){return e.some((e=>e[t]===r))}function d(e,t){return Number(String(e).slice(0,-t)+"9".repeat(t))}function c(e,t){return e-e%Math.pow(10,t)}function f(e){let[t=0,r=""]=e;return r||t>1?`{${t+(r?","+r:"")}}`:""}function p(e,t,r){return`[${e}${t-e==1?"":"-"}${t}]`}function h(e){return/^-?(0+)\d/.test(e)}function m(e,t,r){if(!t.isPadded)return e;let n=Math.abs(t.maxLen-String(e).length),i=!1!==r.relaxZeros;switch(n){case 0:return"";case 1:return i?"0?":"0";case 2:return i?"0{0,2}":"00";default:return i?`0{0,${n}}`:`0{${n}}`}}i.cache={},i.clearCache=()=>i.cache={},e.exports=i},"./node_modules/token-types/lib/index.js":(e,t,r)=>{"use strict";var n=r("./node_modules/node-polyfill-webpack-plugin/node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.AnsiStringType=t.StringType=t.BufferType=t.Uint8ArrayType=t.IgnoreType=t.Float80_LE=t.Float80_BE=t.Float64_LE=t.Float64_BE=t.Float32_LE=t.Float32_BE=t.Float16_LE=t.Float16_BE=t.INT64_BE=t.UINT64_BE=t.INT64_LE=t.UINT64_LE=t.INT32_LE=t.INT32_BE=t.INT24_BE=t.INT24_LE=t.INT16_LE=t.INT16_BE=t.INT8=t.UINT32_BE=t.UINT32_LE=t.UINT24_BE=t.UINT24_LE=t.UINT16_BE=t.UINT16_LE=t.UINT8=void 0;const i=r("./node_modules/ieee754/index.js");function o(e){return new DataView(e.buffer,e.byteOffset)}t.UINT8={len:1,get:(e,t)=>o(e).getUint8(t),put:(e,t,r)=>(o(e).setUint8(t,r),t+1)},t.UINT16_LE={len:2,get:(e,t)=>o(e).getUint16(t,!0),put:(e,t,r)=>(o(e).setUint16(t,r,!0),t+2)},t.UINT16_BE={len:2,get:(e,t)=>o(e).getUint16(t),put:(e,t,r)=>(o(e).setUint16(t,r),t+2)},t.UINT24_LE={len:3,get(e,t){const r=o(e);return r.getUint8(t)+(r.getUint16(t+1,!0)<<8)},put(e,t,r){const n=o(e);return n.setUint8(t,255&r),n.setUint16(t+1,r>>8,!0),t+3}},t.UINT24_BE={len:3,get(e,t){const r=o(e);return(r.getUint16(t)<<8)+r.getUint8(t+2)},put(e,t,r){const n=o(e);return n.setUint16(t,r>>8),n.setUint8(t+2,255&r),t+3}},t.UINT32_LE={len:4,get:(e,t)=>o(e).getUint32(t,!0),put:(e,t,r)=>(o(e).setUint32(t,r,!0),t+4)},t.UINT32_BE={len:4,get:(e,t)=>o(e).getUint32(t),put:(e,t,r)=>(o(e).setUint32(t,r),t+4)},t.INT8={len:1,get:(e,t)=>o(e).getInt8(t),put:(e,t,r)=>(o(e).setInt8(t,r),t+1)},t.INT16_BE={len:2,get:(e,t)=>o(e).getInt16(t),put:(e,t,r)=>(o(e).setInt16(t,r),t+2)},t.INT16_LE={len:2,get:(e,t)=>o(e).getInt16(t,!0),put:(e,t,r)=>(o(e).setInt16(t,r,!0),t+2)},t.INT24_LE={len:3,get(e,r){const n=t.UINT24_LE.get(e,r);return n>8388607?n-16777216:n},put(e,t,r){const n=o(e);return n.setUint8(t,255&r),n.setUint16(t+1,r>>8,!0),t+3}},t.INT24_BE={len:3,get(e,r){const n=t.UINT24_BE.get(e,r);return n>8388607?n-16777216:n},put(e,t,r){const n=o(e);return n.setUint16(t,r>>8),n.setUint8(t+2,255&r),t+3}},t.INT32_BE={len:4,get:(e,t)=>o(e).getInt32(t),put:(e,t,r)=>(o(e).setInt32(t,r),t+4)},t.INT32_LE={len:4,get:(e,t)=>o(e).getInt32(t,!0),put:(e,t,r)=>(o(e).setInt32(t,r,!0),t+4)},t.UINT64_LE={len:8,get:(e,t)=>o(e).getBigUint64(t,!0),put:(e,t,r)=>(o(e).setBigUint64(t,r,!0),t+8)},t.INT64_LE={len:8,get:(e,t)=>o(e).getBigInt64(t,!0),put:(e,t,r)=>(o(e).setBigInt64(t,r,!0),t+8)},t.UINT64_BE={len:8,get:(e,t)=>o(e).getBigUint64(t),put:(e,t,r)=>(o(e).setBigUint64(t,r),t+8)},t.INT64_BE={len:8,get:(e,t)=>o(e).getBigInt64(t),put:(e,t,r)=>(o(e).setBigInt64(t,r),t+8)},t.Float16_BE={len:2,get(e,t){return i.read(e,t,!1,10,this.len)},put(e,t,r){return i.write(e,r,t,!1,10,this.len),t+this.len}},t.Float16_LE={len:2,get(e,t){return i.read(e,t,!0,10,this.len)},put(e,t,r){return i.write(e,r,t,!0,10,this.len),t+this.len}},t.Float32_BE={len:4,get:(e,t)=>o(e).getFloat32(t),put:(e,t,r)=>(o(e).setFloat32(t,r),t+4)},t.Float32_LE={len:4,get:(e,t)=>o(e).getFloat32(t,!0),put:(e,t,r)=>(o(e).setFloat32(t,r,!0),t+4)},t.Float64_BE={len:8,get:(e,t)=>o(e).getFloat64(t),put:(e,t,r)=>(o(e).setFloat64(t,r),t+8)},t.Float64_LE={len:8,get:(e,t)=>o(e).getFloat64(t,!0),put:(e,t,r)=>(o(e).setFloat64(t,r,!0),t+8)},t.Float80_BE={len:10,get(e,t){return i.read(e,t,!1,63,this.len)},put(e,t,r){return i.write(e,r,t,!1,63,this.len),t+this.len}},t.Float80_LE={len:10,get(e,t){return i.read(e,t,!0,63,this.len)},put(e,t,r){return i.write(e,r,t,!0,63,this.len),t+this.len}};t.IgnoreType=class{constructor(e){this.len=e}get(e,t){}};t.Uint8ArrayType=class{constructor(e){this.len=e}get(e,t){return e.subarray(t,t+this.len)}};t.BufferType=class{constructor(e){this.len=e}get(e,t){return n.from(e.subarray(t,t+this.len))}};t.StringType=class{constructor(e,t){this.len=e,this.encoding=t}get(e,t){return n.from(e).toString(this.encoding,t,t+this.len)}};class s{constructor(e){this.len=e}static decode(e,t,r){let n="";for(let i=t;i<r;++i)n+=s.codePointToString(s.singleByteDecoder(e[i]));return n}static inRange(e,t,r){return t<=e&&e<=r}static codePointToString(e){return e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10),56320+(1023&e)))}static singleByteDecoder(e){if(s.inRange(e,0,127))return e;const t=s.windows1252[e-128];if(null===t)throw Error("invaliding encoding");return t}get(e,t=0){return s.decode(e,t,t+this.len)}}t.AnsiStringType=s,s.windows1252=[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,381,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,382,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]},"./node_modules/util-deprecate/browser.js":(e,t,r)=>{var n=r("./node_modules/console-browserify/index.js");function i(e){try{if(!r.g.localStorage)return!1}catch(e){return!1}var t=r.g.localStorage[e];return null!=t&&"true"===String(t).toLowerCase()}e.exports=function(e,t){if(i("noDeprecation"))return e;var r=!1;return function(){if(!r){if(i("throwDeprecation"))throw new Error(t);i("traceDeprecation")?n.trace(t):n.warn(t),r=!0}return e.apply(this,arguments)}}},"?3b09":()=>{},"?dc05":()=>{},"?28e7":()=>{},"?cbdb":()=>{},"?54c0":()=>{},"?ed1b":()=>{},"?d17e":()=>{},"?15b5":()=>{},"./app/components/Canvas/Transition.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>c});var n=r("./node_modules/gsap/index.js"),i=r("./node_modules/imagemin/index.js"),o=r("./node_modules/ogl/src/extras/Plane.js"),s=r("./node_modules/ogl/src/core/Program.js"),a=r("./node_modules/ogl/src/core/Mesh.js"),u=r("./app/shaders/plane-fragment.glsl"),l=r("./app/shaders/plane-vertex.glsl"),d=r("./node_modules/console-browserify/index.js");const c=class{constructor({collections:e,gl:t,scene:r,sizes:n,url:i}){this.collections=e,this.gl=t,this.scene=r,this.sizes=n,this.url=i,this.geometry=new o.Plane(this.gl)}createTexture(){const{index:e,medias:t}=this.collections,{texture:r}=t[e];this.texture=window.TEXTURES[i.default.getAttribute]}createProgram(e){this.program=new s.Program(this.gl,{fragment:u.default,vertex:l.default,uniforms:{uAlpha:{value:1},tMap:{value:e}}})}createMesh(e){this.mesh=new a.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.scale.x=e.scale.x,this.mesh.scale.y=e.scale.y,this.mesh.scale.z=e.scale.z,this.mesh.position.x=e.position.x,this.mesh.position.y=e.position.y,this.mesh.position.z=e.position.z+.01,this.mesh.rotation.x=e.rotation.x,this.mesh.rotation.y=e.rotation.y,this.mesh.rotation.z=e.rotation.z,this.mesh.setParent(this.scene)}setElement(e){if(d.log(e.id),"collections"===e.id){const{index:t,medias:r}=e,n=r[t];this.createProgram(n.texture),this.createMesh(n.mesh),this.transition="detail"}else this.createProgram(e.texture),this.createMesh(e.mesh),this.transition="collections"}animate(e,t){const r=n.default.timeline({});r.to(this.mesh.scale,{duration:1.5,ease:"expo.inOut",x:e.scale.x,y:e.scale.y,z:e.scale.z},0),r.to(this.mesh.position,{duration:1.5,ease:"expo.inOut",x:e.position.x,y:e.position.y,z:e.position.z},0),r.to(this.mesh.rotation,{duration:1.5,ease:"expo.inOut",x:e.rotation.x,y:e.rotation.y,z:e.rotation.z},0),r.call((e=>{t()})),r.call((e=>{this.scene.removeChild(this.mesh)}),null,"+=0.2")}}},"./node_modules/imagemin/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>g});var n=r("node:buffer"),i=r("node:fs"),o=r("node:util"),s=r("node:path"),a=r("./node_modules/graceful-fs/graceful-fs.js"),u=r("./node_modules/file-type/index.js"),l=r("./node_modules/imagemin/node_modules/globby/index.js"),d=r("./node_modules/p-pipe/index.js"),c=r("./node_modules/replace-ext/index.js"),f=r("./node_modules/junk/index.js"),p=r("./node_modules/imagemin/node_modules/slash/index.js");const h=(0,o.promisify)(a.readFile),m=(0,o.promisify)(a.writeFile);async function g(e,{glob:t=!0,...r}={}){if(!Array.isArray(e))throw new TypeError(`Expected an \`Array\`, got \`${typeof e}\``);const n=e.map((e=>p(e))),o=t?await(0,l.globby)(n,{onlyFiles:!0}):e;return Promise.all(o.filter((e=>f.not(s.basename(e)))).map((async t=>{try{return await(async(e,{destination:t,plugins:r=[]})=>{if(r&&!Array.isArray(r))throw new TypeError("The `plugins` option should be an `Array`");let n=await h(e);n=await(r.length>0?(0,d.default)(...r)(n):n);const{ext:o}=await u.fromBuffer(n)||{ext:s.extname(e)};let a=t?s.join(t,s.basename(e)):void 0;a="webp"===o?c(a,".webp"):a;const l={data:n,sourcePath:e,destinationPath:a};return a?(await i.promises.mkdir(s.dirname(l.destinationPath),{recursive:!0}),await m(l.destinationPath,l.data),l):l})(t,r)}catch(t){throw t.message=`Error occurred when handling file: ${e}\n\n${t.stack}`,t}})))}g.buffer=async(e,{plugins:t=[]}={})=>{if(!n.Buffer.isBuffer(e))throw new TypeError(`Expected a \`Buffer\`, got \`${typeof e}\``);return 0===t.length?e:(0,d.default)(...t)(e)}},"./node_modules/imagemin/node_modules/array-union/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n=(...e)=>[...new Set(e.flat())]},"./node_modules/imagemin/node_modules/globby/gitignore.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{isGitIgnored:()=>m,isGitIgnoredSync:()=>g});var n=r("node:process"),i=r("node:fs"),o=r("node:path"),s=r("./node_modules/fast-glob/out/index.js"),a=r("./node_modules/ignore/index.js"),u=r("./node_modules/imagemin/node_modules/globby/node_modules/slash/index.js"),l=r("./node_modules/imagemin/node_modules/globby/to-path.js");const d=["**/node_modules/**","**/flow-typed/**","**/coverage/**","**/.git"],c=(e,t)=>{const r=(0,u.default)(o.relative(t.cwd,o.dirname(t.fileName)));return e.split(/\r?\n/).filter(Boolean).filter((e=>!e.startsWith("#"))).map((e=>t=>t.startsWith("!")?"!"+o.posix.join(e,t.slice(1)):o.posix.join(e,t))(r))},f=e=>{const t=a();for(const r of e)t.add(c(r.content,{cwd:r.cwd,fileName:r.filePath}));return t},p=(e,t)=>r=>e.ignores((0,u.default)(o.relative(t,((e,t)=>{if(e=(0,u.default)(e),o.isAbsolute(t)){if((0,u.default)(t).startsWith(e))return t;throw new Error(`Path ${t} is not in cwd ${e}`)}return o.join(e,t)})(t,(0,l.default)(r.path||r))))),h=({ignore:e=[],cwd:t=(0,u.default)(n.cwd())}={})=>({ignore:[...d,...e],cwd:(0,l.default)(t)}),m=async e=>{e=h(e);const t=await s("**/.gitignore",e),r=await Promise.all(t.map((t=>(async(e,t)=>{const r=o.join(t,e);return{cwd:t,filePath:r,content:await i.promises.readFile(r,"utf8")}})(t,e.cwd)))),n=f(r);return p(n,e.cwd)},g=e=>{e=h(e);const t=s.sync("**/.gitignore",e).map((t=>((e,t)=>{const r=o.join(t,e);return{cwd:t,filePath:r,content:i.readFileSync(r,"utf8")}})(t,e.cwd))),r=f(t);return p(r,e.cwd)}},"./node_modules/imagemin/node_modules/globby/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{generateGlobTasks:()=>p,globby:()=>_,globbyStream:()=>y,globbySync:()=>b,isDynamicPattern:()=>w,isGitIgnored:()=>l.isGitIgnored,isGitIgnoredSync:()=>l.isGitIgnoredSync});var n=r("node:fs"),i=r("./node_modules/imagemin/node_modules/array-union/index.js"),o=r("./node_modules/merge2/index.js"),s=r("./node_modules/fast-glob/out/index.js"),a=r("./node_modules/dir-glob/index.js"),u=r("./node_modules/imagemin/node_modules/globby/to-path.js"),l=r("./node_modules/imagemin/node_modules/globby/gitignore.js"),d=r("./node_modules/imagemin/node_modules/globby/stream-utils.js");const c=()=>!1,f=e=>"!"===e[0],p=(e,t={})=>{(e=>{if(!e.every((e=>"string"==typeof e)))throw new TypeError("Patterns must be a string or an array of strings")})(e=(0,i.default)([e].flat()));const r=[];(e=>{if(!e.cwd)return;let t;try{t=n.statSync(e.cwd)}catch{return}if(!t.isDirectory())throw new Error("The `cwd` option must be a path to a directory")})(t={ignore:[],expandDirectories:!0,...t,cwd:(0,u.default)(t.cwd)});for(const[n,i]of e.entries()){if(f(i))continue;const o=e.slice(n).filter((e=>f(e))).map((e=>e.slice(1))),s={...t,ignore:[...t.ignore,...o]};r.push({pattern:i,options:s})}return r},h=(e,t)=>e.options.expandDirectories?((e,t)=>{let r={};return e.options.cwd&&(r.cwd=e.options.cwd),Array.isArray(e.options.expandDirectories)?r={...r,files:e.options.expandDirectories}:"object"==typeof e.options.expandDirectories&&(r={...r,...e.options.expandDirectories}),t(e.pattern,r)})(e,t):[e.pattern],m=e=>e&&e.gitignore?(0,l.isGitIgnoredSync)({cwd:e.cwd,ignore:e.ignore}):c,g=e=>t=>{const{options:r}=e;return r.ignore&&Array.isArray(r.ignore)&&r.expandDirectories&&(r.ignore=a.sync(r.ignore)),{pattern:t,options:r}},_=async(e,t)=>{const r=p(e,t),[o,u]=await Promise.all([(async()=>t&&t.gitignore?(0,l.isGitIgnored)({cwd:t.cwd,ignore:t.ignore}):c)(),(async()=>{const e=await Promise.all(r.map((async e=>{const t=await h(e,a);return Promise.all(t.map((e=>async t=>{const{options:r}=e;return r.ignore&&Array.isArray(r.ignore)&&r.expandDirectories&&(r.ignore=await a(r.ignore)),{pattern:t,options:r}})(e)))})));return(0,i.default)(...e)})()]),d=await Promise.all(u.map((e=>s(e.pattern,e.options))));return(0,i.default)(...d).filter((e=>{return!o((t=e,t.stats instanceof n.Stats?t.path:t));var t}))},b=(e,t)=>{const r=p(e,t),n=[];for(const e of r){const t=h(e,a.sync).map(g(e));n.push(...t)}const o=m(t);let u=[];for(const e of n)u=(0,i.default)(u,s.sync(e.pattern,e.options));return u.filter((e=>!o(e)))},y=(e,t)=>{const r=p(e,t),n=[];for(const e of r){const t=h(e,a.sync).map(g(e));n.push(...t)}const i=m(t),u=new d.FilterStream((e=>!i(e))),l=new d.UniqueStream;return o(n.map((e=>s.stream(e.pattern,e.options)))).pipe(u).pipe(l)},w=(e,t={})=>(t={...t,cwd:(0,u.default)(t.cwd)},[e].flat().some((e=>s.isDynamicPattern(e,t))))},"./node_modules/imagemin/node_modules/globby/node_modules/slash/index.js":(e,t,r)=>{"use strict";function n(e){const t=/^\\\\\?\\/.test(e),r=/[^\u0000-\u0080]+/.test(e);return t||r?e:e.replace(/\\/g,"/")}r.r(t),r.d(t,{default:()=>n})},"./node_modules/imagemin/node_modules/globby/stream-utils.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{FilterStream:()=>o,UniqueStream:()=>s});var n=r("node:stream");class i extends n.Transform{constructor(){super({objectMode:!0})}}class o extends i{constructor(e){super(),this._filter=e}_transform(e,t,r){this._filter(e)&&this.push(e),r()}}class s extends i{constructor(){super(),this._pushed=new Set}_transform(e,t,r){this._pushed.has(e)||(this.push(e),this._pushed.add(e)),r()}}},"./node_modules/imagemin/node_modules/globby/to-path.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("node:url");const i=e=>e?(e instanceof URL&&(e=e.href),e.startsWith("file://")?(0,n.fileURLToPath)(e):e):e},"./node_modules/p-pipe/index.js":(e,t,r)=>{"use strict";function n(...e){if(0===e.length)throw new Error("Expected at least one argument");return async t=>{let r=t;for(const t of e)r=await t(r);return r}}r.r(t),r.d(t,{default:()=>n})},"./node_modules/constants-browserify/constants.json":e=>{"use strict";e.exports=JSON.parse('{"O_RDONLY":0,"O_WRONLY":1,"O_RDWR":2,"S_IFMT":61440,"S_IFREG":32768,"S_IFDIR":16384,"S_IFCHR":8192,"S_IFBLK":24576,"S_IFIFO":4096,"S_IFLNK":40960,"S_IFSOCK":49152,"O_CREAT":512,"O_EXCL":2048,"O_NOCTTY":131072,"O_TRUNC":1024,"O_APPEND":8,"O_DIRECTORY":1048576,"O_NOFOLLOW":256,"O_SYNC":128,"O_SYMLINK":2097152,"O_NONBLOCK":4,"S_IRWXU":448,"S_IRUSR":256,"S_IWUSR":128,"S_IXUSR":64,"S_IRWXG":56,"S_IRGRP":32,"S_IWGRP":16,"S_IXGRP":8,"S_IRWXO":7,"S_IROTH":4,"S_IWOTH":2,"S_IXOTH":1,"E2BIG":7,"EACCES":13,"EADDRINUSE":48,"EADDRNOTAVAIL":49,"EAFNOSUPPORT":47,"EAGAIN":35,"EALREADY":37,"EBADF":9,"EBADMSG":94,"EBUSY":16,"ECANCELED":89,"ECHILD":10,"ECONNABORTED":53,"ECONNREFUSED":61,"ECONNRESET":54,"EDEADLK":11,"EDESTADDRREQ":39,"EDOM":33,"EDQUOT":69,"EEXIST":17,"EFAULT":14,"EFBIG":27,"EHOSTUNREACH":65,"EIDRM":90,"EILSEQ":92,"EINPROGRESS":36,"EINTR":4,"EINVAL":22,"EIO":5,"EISCONN":56,"EISDIR":21,"ELOOP":62,"EMFILE":24,"EMLINK":31,"EMSGSIZE":40,"EMULTIHOP":95,"ENAMETOOLONG":63,"ENETDOWN":50,"ENETRESET":52,"ENETUNREACH":51,"ENFILE":23,"ENOBUFS":55,"ENODATA":96,"ENODEV":19,"ENOENT":2,"ENOEXEC":8,"ENOLCK":77,"ENOLINK":97,"ENOMEM":12,"ENOMSG":91,"ENOPROTOOPT":42,"ENOSPC":28,"ENOSR":98,"ENOSTR":99,"ENOSYS":78,"ENOTCONN":57,"ENOTDIR":20,"ENOTEMPTY":66,"ENOTSOCK":38,"ENOTSUP":45,"ENOTTY":25,"ENXIO":6,"EOPNOTSUPP":102,"EOVERFLOW":84,"EPERM":1,"EPIPE":32,"EPROTO":100,"EPROTONOSUPPORT":43,"EPROTOTYPE":41,"ERANGE":34,"EROFS":30,"ESPIPE":29,"ESRCH":3,"ESTALE":70,"ETIME":101,"ETIMEDOUT":60,"ETXTBSY":26,"EWOULDBLOCK":35,"EXDEV":18,"SIGHUP":1,"SIGINT":2,"SIGQUIT":3,"SIGILL":4,"SIGTRAP":5,"SIGABRT":6,"SIGIOT":6,"SIGBUS":10,"SIGFPE":8,"SIGKILL":9,"SIGUSR1":30,"SIGSEGV":11,"SIGUSR2":31,"SIGPIPE":13,"SIGALRM":14,"SIGTERM":15,"SIGCHLD":20,"SIGCONT":19,"SIGSTOP":17,"SIGTSTP":18,"SIGTTIN":21,"SIGTTOU":22,"SIGURG":16,"SIGXCPU":24,"SIGXFSZ":25,"SIGVTALRM":26,"SIGPROF":27,"SIGWINCH":28,"SIGIO":23,"SIGSYS":12,"SSL_OP_ALL":2147486719,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION":262144,"SSL_OP_CIPHER_SERVER_PREFERENCE":4194304,"SSL_OP_CISCO_ANYCONNECT":32768,"SSL_OP_COOKIE_EXCHANGE":8192,"SSL_OP_CRYPTOPRO_TLSEXT_BUG":2147483648,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS":2048,"SSL_OP_EPHEMERAL_RSA":0,"SSL_OP_LEGACY_SERVER_CONNECT":4,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER":32,"SSL_OP_MICROSOFT_SESS_ID_BUG":1,"SSL_OP_MSIE_SSLV2_RSA_PADDING":0,"SSL_OP_NETSCAPE_CA_DN_BUG":536870912,"SSL_OP_NETSCAPE_CHALLENGE_BUG":2,"SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG":1073741824,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG":8,"SSL_OP_NO_COMPRESSION":131072,"SSL_OP_NO_QUERY_MTU":4096,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION":65536,"SSL_OP_NO_SSLv2":16777216,"SSL_OP_NO_SSLv3":33554432,"SSL_OP_NO_TICKET":16384,"SSL_OP_NO_TLSv1":67108864,"SSL_OP_NO_TLSv1_1":268435456,"SSL_OP_NO_TLSv1_2":134217728,"SSL_OP_PKCS1_CHECK_1":0,"SSL_OP_PKCS1_CHECK_2":0,"SSL_OP_SINGLE_DH_USE":1048576,"SSL_OP_SINGLE_ECDH_USE":524288,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG":128,"SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG":0,"SSL_OP_TLS_BLOCK_PADDING_BUG":512,"SSL_OP_TLS_D5_BUG":256,"SSL_OP_TLS_ROLLBACK_BUG":8388608,"ENGINE_METHOD_DSA":2,"ENGINE_METHOD_DH":4,"ENGINE_METHOD_RAND":8,"ENGINE_METHOD_ECDH":16,"ENGINE_METHOD_ECDSA":32,"ENGINE_METHOD_CIPHERS":64,"ENGINE_METHOD_DIGESTS":128,"ENGINE_METHOD_STORE":256,"ENGINE_METHOD_PKEY_METHS":512,"ENGINE_METHOD_PKEY_ASN1_METHS":1024,"ENGINE_METHOD_ALL":65535,"ENGINE_METHOD_NONE":0,"DH_CHECK_P_NOT_SAFE_PRIME":2,"DH_CHECK_P_NOT_PRIME":1,"DH_UNABLE_TO_CHECK_GENERATOR":4,"DH_NOT_SUITABLE_GENERATOR":8,"NPN_ENABLED":1,"RSA_PKCS1_PADDING":1,"RSA_SSLV23_PADDING":2,"RSA_NO_PADDING":3,"RSA_PKCS1_OAEP_PADDING":4,"RSA_X931_PADDING":5,"RSA_PKCS1_PSS_PADDING":6,"POINT_CONVERSION_COMPRESSED":2,"POINT_CONVERSION_UNCOMPRESSED":4,"POINT_CONVERSION_HYBRID":6,"F_OK":0,"R_OK":4,"W_OK":2,"X_OK":1,"UV_UDP_REUSEADDR":4}')},"node:buffer":()=>{throw new Error('Module build failed: UnhandledSchemeError: Reading from "node:buffer" is not handled by plugins (Unhandled scheme).\nWebpack supports "data:" and "file:" URIs by default.\nYou may need an additional plugin to handle "node:" URIs.\n    at /home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:832:25\n    at Hook.eval [as callAsync] (eval at create (/home/raveun/Coding/awwwards/immersive-website/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:6:1)\n    at Hook.CALL_ASYNC_DELEGATE [as _callAsync] (/home/raveun/Coding/awwwards/immersive-website/node_modules/tapable/lib/Hook.js:18:14)\n    at Object.processResource (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:829:8)\n    at processResource (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:220:11)\n    at iteratePitchingLoaders (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:171:10)\n    at runLoaders (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:398:2)\n    at NormalModule._doBuild (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:819:3)\n    at NormalModule.build (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:963:15)\n    at /home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/Compilation.js:1371:12')},"node:fs":()=>{throw new Error('Module build failed: UnhandledSchemeError: Reading from "node:fs" is not handled by plugins (Unhandled scheme).\nWebpack supports "data:" and "file:" URIs by default.\nYou may need an additional plugin to handle "node:" URIs.\n    at /home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:832:25\n    at Hook.eval [as callAsync] (eval at create (/home/raveun/Coding/awwwards/immersive-website/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:6:1)\n    at Object.processResource (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:829:8)\n    at processResource (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:220:11)\n    at iteratePitchingLoaders (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:171:10)\n    at runLoaders (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:398:2)\n    at NormalModule._doBuild (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:819:3)\n    at NormalModule.build (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:963:15)\n    at /home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/Compilation.js:1371:12\n    at NormalModule.needBuild (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:1253:32)')},"node:path":()=>{throw new Error('Module build failed: UnhandledSchemeError: Reading from "node:path" is not handled by plugins (Unhandled scheme).\nWebpack supports "data:" and "file:" URIs by default.\nYou may need an additional plugin to handle "node:" URIs.\n    at /home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:832:25\n    at Hook.eval [as callAsync] (eval at create (/home/raveun/Coding/awwwards/immersive-website/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:6:1)\n    at Object.processResource (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:829:8)\n    at processResource (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:220:11)\n    at iteratePitchingLoaders (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:171:10)\n    at runLoaders (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:398:2)\n    at NormalModule._doBuild (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:819:3)\n    at NormalModule.build (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:963:15)\n    at /home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/Compilation.js:1371:12\n    at NormalModule.needBuild (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:1253:32)')},"node:process":()=>{throw new Error('Module build failed: UnhandledSchemeError: Reading from "node:process" is not handled by plugins (Unhandled scheme).\nWebpack supports "data:" and "file:" URIs by default.\nYou may need an additional plugin to handle "node:" URIs.\n    at /home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:832:25\n    at Hook.eval [as callAsync] (eval at create (/home/raveun/Coding/awwwards/immersive-website/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:6:1)\n    at Object.processResource (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:829:8)\n    at processResource (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:220:11)\n    at iteratePitchingLoaders (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:171:10)\n    at runLoaders (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:398:2)\n    at NormalModule._doBuild (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:819:3)\n    at NormalModule.build (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:963:15)\n    at /home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/Compilation.js:1371:12\n    at NormalModule.needBuild (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:1253:32)')},"node:stream":()=>{throw new Error('Module build failed: UnhandledSchemeError: Reading from "node:stream" is not handled by plugins (Unhandled scheme).\nWebpack supports "data:" and "file:" URIs by default.\nYou may need an additional plugin to handle "node:" URIs.\n    at /home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:832:25\n    at Hook.eval [as callAsync] (eval at create (/home/raveun/Coding/awwwards/immersive-website/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:6:1)\n    at Object.processResource (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:829:8)\n    at processResource (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:220:11)\n    at iteratePitchingLoaders (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:171:10)\n    at runLoaders (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:398:2)\n    at NormalModule._doBuild (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:819:3)\n    at NormalModule.build (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:963:15)\n    at /home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/Compilation.js:1371:12\n    at NormalModule.needBuild (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:1253:32)')},"node:url":()=>{throw new Error('Module build failed: UnhandledSchemeError: Reading from "node:url" is not handled by plugins (Unhandled scheme).\nWebpack supports "data:" and "file:" URIs by default.\nYou may need an additional plugin to handle "node:" URIs.\n    at /home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:832:25\n    at Hook.eval [as callAsync] (eval at create (/home/raveun/Coding/awwwards/immersive-website/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:6:1)\n    at Object.processResource (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:829:8)\n    at processResource (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:220:11)\n    at iteratePitchingLoaders (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:171:10)\n    at runLoaders (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:398:2)\n    at NormalModule._doBuild (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:819:3)\n    at NormalModule.build (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:963:15)\n    at /home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/Compilation.js:1371:12\n    at NormalModule.needBuild (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:1253:32)')},"node:util":()=>{throw new Error('Module build failed: UnhandledSchemeError: Reading from "node:util" is not handled by plugins (Unhandled scheme).\nWebpack supports "data:" and "file:" URIs by default.\nYou may need an additional plugin to handle "node:" URIs.\n    at /home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:832:25\n    at Hook.eval [as callAsync] (eval at create (/home/raveun/Coding/awwwards/immersive-website/node_modules/tapable/lib/HookCodeFactory.js:33:10), <anonymous>:6:1)\n    at Object.processResource (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:829:8)\n    at processResource (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:220:11)\n    at iteratePitchingLoaders (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:171:10)\n    at runLoaders (/home/raveun/Coding/awwwards/immersive-website/node_modules/loader-runner/lib/LoaderRunner.js:398:2)\n    at NormalModule._doBuild (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:819:3)\n    at NormalModule.build (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:963:15)\n    at /home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/Compilation.js:1371:12\n    at NormalModule.needBuild (/home/raveun/Coding/awwwards/immersive-website/node_modules/webpack/lib/NormalModule.js:1253:32)')}},(function(e){e.h=()=>"d8bce6f01ab267bfe93d"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,