/*! For license information please see main.773519e424001d4aa57b.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateimmersive_website("main",{"./app/components/Canvas/index.js":(t,e,r)=>{r.r(e),r.d(e,{default:()=>u});var s=r("./node_modules/ogl/src/core/Renderer.js"),i=r("./node_modules/ogl/src/core/Camera.js"),n=r("./node_modules/ogl/src/extras/Box.js"),a=r("./node_modules/ogl/src/core/Program.js"),o=r("./node_modules/ogl/src/core/Mesh.js"),h=r("./node_modules/ogl/src/core/Transform.js");class u{constructor(){this.createRenderer(),this.createScene(),this.createCube()}createRenderer(){this.renderer=new s.Renderer,this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new i.Camera(this.gl),this.camera.position.z=5}createCube(){this.geometry=new n.Box(this.gl),this.program=new a.Program(this.gl,{vertex:"\n        attribute vec3 position;\n\n        uniform mat4 modelViewMatrix;\n        uniform mat4 projectionMatrix;\n\n        void main() {\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n        }\n      ",fragment:"\n        void main() {\n            gl_FragColor = vec4(1.0);\n        }\n      "}),this.mesh=new o.Mesh(this.gl,this.geometry,this.program),this.mesh.setParent(this.scene)}createScene(){this.scene=new h.Transform}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight})}update(){this.renderer.render({camera:this.camera,scene:this.scene})}}},"./node_modules/ogl/src/core/Camera.js":(t,e,r)=>{r.r(e),r.d(e,{Camera:()=>u});var s=r("./node_modules/ogl/src/core/Transform.js"),i=r("./node_modules/ogl/src/math/Mat4.js"),n=r("./node_modules/ogl/src/math/Vec3.js");const a=new i.Mat4,o=new n.Vec3,h=new n.Vec3;class u extends s.Transform{constructor(t,{near:e=.1,far:r=100,fov:s=45,aspect:a=1,left:o,right:h,bottom:u,top:l,zoom:d=1}={}){super(),Object.assign(this,{near:e,far:r,fov:s,aspect:a,left:o,right:h,bottom:u,top:l,zoom:d}),this.projectionMatrix=new i.Mat4,this.viewMatrix=new i.Mat4,this.projectionViewMatrix=new i.Mat4,this.worldPosition=new n.Vec3,this.type=o||h?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:t=this.near,far:e=this.far,fov:r=this.fov,aspect:s=this.aspect}={}){return Object.assign(this,{near:t,far:e,fov:r,aspect:s}),this.projectionMatrix.fromPerspective({fov:r*(Math.PI/180),aspect:s,near:t,far:e}),this.type="perspective",this}orthographic({near:t=this.near,far:e=this.far,left:r=this.left,right:s=this.right,bottom:i=this.bottom,top:n=this.top,zoom:a=this.zoom}={}){return Object.assign(this,{near:t,far:e,left:r,right:s,bottom:i,top:n,zoom:a}),r/=a,s/=a,i/=a,n/=a,this.projectionMatrix.fromOrthogonal({left:r,right:s,bottom:i,top:n,near:t,far:e}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(t){return super.lookAt(t,!0),this}project(t){return t.applyMatrix4(this.viewMatrix),t.applyMatrix4(this.projectionMatrix),this}unproject(t){return t.applyMatrix4(a.inverse(this.projectionMatrix)),t.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3]);const t=this.projectionViewMatrix;this.frustum[0].set(t[3]-t[0],t[7]-t[4],t[11]-t[8]).constant=t[15]-t[12],this.frustum[1].set(t[3]+t[0],t[7]+t[4],t[11]+t[8]).constant=t[15]+t[12],this.frustum[2].set(t[3]+t[1],t[7]+t[5],t[11]+t[9]).constant=t[15]+t[13],this.frustum[3].set(t[3]-t[1],t[7]-t[5],t[11]-t[9]).constant=t[15]-t[13],this.frustum[4].set(t[3]-t[2],t[7]-t[6],t[11]-t[10]).constant=t[15]-t[14],this.frustum[5].set(t[3]+t[2],t[7]+t[6],t[11]+t[10]).constant=t[15]+t[14];for(let t=0;t<6;t++){const e=1/this.frustum[t].distance();this.frustum[t].multiply(e),this.frustum[t].constant*=e}}frustumIntersectsMesh(t){if(!t.geometry.attributes.position)return!0;if(t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere(),!t.geometry.bounds)return!0;const e=o;e.copy(t.geometry.bounds.center),e.applyMatrix4(t.worldMatrix);const r=t.geometry.bounds.radius*t.worldMatrix.getMaxScaleOnAxis();return this.frustumIntersectsSphere(e,r)}frustumIntersectsSphere(t,e){const r=h;for(let s=0;s<6;s++){const i=this.frustum[s];if(r.copy(i).dot(t)+i.constant<-e)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,r)=>{r.r(e),r.d(e,{Geometry:()=>u});var s=r("./node_modules/ogl/src/math/Vec3.js"),i=r("./node_modules/console-browserify/index.js");const n=new s.Vec3;let a=1,o=1,h=!1;class u{constructor(t,e={}){t.canvas||i.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=a++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=o++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return i.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:r})=>{if(!this.attributes[e])return void i.warn(`active attribute ${e} not being supplied`);const s=this.attributes[e];this.gl.bindBuffer(s.target,s.buffer),this.glState.boundBuffer=s.buffer;let n=1;35674===r&&(n=2),35675===r&&(n=3),35676===r&&(n=4);const a=s.size/n,o=1===n?0:n*n*n,h=1===n?0:n*n;for(let e=0;e<n;e++)this.gl.vertexAttribPointer(t+e,a,s.type,s.normalized,s.stride+o,s.offset+e*h),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,s.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const r=this.attributes[e];r.needsUpdate&&this.updateAttribute(r)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:h?void 0:(i.warn("No position buffer data found to compute bounds"),h=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,r=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||(this.bounds={min:new s.Vec3,max:new s.Vec3,center:new s.Vec3,scale:new s.Vec3,radius:1/0});const i=this.bounds.min,n=this.bounds.max,a=this.bounds.center,o=this.bounds.scale;i.set(1/0),n.set(-1/0);for(let t=0,s=e.length;t<s;t+=r){const r=e[t],s=e[t+1],a=e[t+2];i.x=Math.min(r,i.x),i.y=Math.min(s,i.y),i.z=Math.min(a,i.z),n.x=Math.max(r,n.x),n.y=Math.max(s,n.y),n.z=Math.max(a,n.z)}o.sub(n,i),a.add(i,n).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,r=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||this.computeBoundingBox(t);let s=0;for(let t=0,i=e.length;t<i;t+=r)n.fromArray(e,t),s=Math.max(s,this.bounds.center.squaredDistance(n));this.bounds.radius=Math.sqrt(s)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,r)=>{r.r(e),r.d(e,{Mesh:()=>h});var s=r("./node_modules/ogl/src/core/Transform.js"),i=r("./node_modules/ogl/src/math/Mat3.js"),n=r("./node_modules/ogl/src/math/Mat4.js"),a=r("./node_modules/console-browserify/index.js");let o=0;class h extends s.Transform{constructor(t,{geometry:e,program:r,mode:s=t.TRIANGLES,frustumCulled:h=!0,renderOrder:u=0}={}){super(),t.canvas||a.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=o++,this.geometry=e,this.program=r,this.mode=s,this.frustumCulled=h,this.renderOrder=u,this.modelViewMatrix=new n.Mat4,this.normalMatrix=new i.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t}))),t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,r)=>{r.r(e),r.d(e,{Program:()=>a});var s=r("./node_modules/console-browserify/index.js");let i=1;const n={};class a{constructor(t,{vertex:e,fragment:r,uniforms:n={},transparent:a=!1,cullFace:o=t.BACK,frontFace:u=t.CCW,depthTest:l=!0,depthWrite:d=!0,depthFunc:c=t.LESS}={}){t.canvas||s.error("gl not passed as fist argument to Program"),this.gl=t,this.uniforms=n,this.id=i++,e||s.warn("vertex shader not supplied"),r||s.warn("fragment shader not supplied"),this.transparent=a,this.cullFace=o,this.frontFace=u,this.depthTest=l,this.depthWrite=d,this.depthFunc=c,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const m=t.createShader(t.VERTEX_SHADER);t.shaderSource(m,e),t.compileShader(m),""!==t.getShaderInfoLog(m)&&s.warn(`${t.getShaderInfoLog(m)}\nVertex Shader\n${h(e)}`);const g=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(g,r),t.compileShader(g),""!==t.getShaderInfoLog(g)&&s.warn(`${t.getShaderInfoLog(g)}\nFragment Shader\n${h(r)}`),this.program=t.createProgram(),t.attachShader(this.program,m),t.attachShader(this.program,g),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return s.warn(t.getProgramInfoLog(this.program));t.deleteShader(m),t.deleteShader(g),this.uniformLocations=new Map;let f=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<f;e++){let r=t.getActiveUniform(this.program,e);this.uniformLocations.set(r,t.getUniformLocation(this.program,r.name));const s=r.name.match(/(\w+)/g);r.uniformName=s[0],3===s.length?(r.isStructArray=!0,r.structIndex=Number(s[1]),r.structProperty=s[2]):2===s.length&&isNaN(Number(s[1]))&&(r.isStruct=!0,r.structProperty=s[1])}this.attributeLocations=new Map;const p=[],x=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<x;e++){const r=t.getActiveAttrib(this.program,e),s=t.getAttribLocation(this.program,r.name);-1!==s&&(p[s]=r.name,this.attributeLocations.set(r,s))}this.attributeOrder=p.join("")}setBlendFunc(t,e,r,s){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=r,this.blendFunc.dstAlpha=s,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,r)=>{let s=r.uniformName,i=this.uniforms[s];if(r.isStruct&&(i=i[r.structProperty],s+=`.${r.structProperty}`),r.isStructArray&&(i=i[r.structIndex][r.structProperty],s+=`[${r.structIndex}].${r.structProperty}`),!i)return l(`Active uniform ${s} has not been supplied`);if(i&&void 0===i.value)return l(`${s} uniform is missing a value parameter`);if(i.value.texture)return e+=1,i.value.update(e),o(this.gl,r.type,t,e);if(i.value.length&&i.value[0].texture){const s=[];return i.value.forEach((t=>{e+=1,t.update(e),s.push(e)})),o(this.gl,r.type,t,s)}o(this.gl,r.type,t,i.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function o(t,e,r,s){s=s.length?function(t){const e=t.length,r=t[0].length;if(void 0===r)return t;const s=e*r;let i=n[s];i||(n[s]=i=new Float32Array(s));for(let s=0;s<e;s++)i.set(t[s],s*r);return i}(s):s;const i=t.renderer.state.uniformLocations.get(r);if(s.length)if(void 0===i||i.length!==s.length)t.renderer.state.uniformLocations.set(r,s.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let r=0,s=t.length;r<s;r++)if(t[r]!==e[r])return!1;return!0}(i,s))return;i.set?i.set(s):function(t,e){for(let r=0,s=t.length;r<s;r++)t[r]=e[r]}(i,s),t.renderer.state.uniformLocations.set(r,i)}else{if(i===s)return;t.renderer.state.uniformLocations.set(r,s)}switch(e){case 5126:return s.length?t.uniform1fv(r,s):t.uniform1f(r,s);case 35664:return t.uniform2fv(r,s);case 35665:return t.uniform3fv(r,s);case 35666:return t.uniform4fv(r,s);case 35670:case 5124:case 35678:case 35680:return s.length?t.uniform1iv(r,s):t.uniform1i(r,s);case 35671:case 35667:return t.uniform2iv(r,s);case 35672:case 35668:return t.uniform3iv(r,s);case 35673:case 35669:return t.uniform4iv(r,s);case 35674:return t.uniformMatrix2fv(r,!1,s);case 35675:return t.uniformMatrix3fv(r,!1,s);case 35676:return t.uniformMatrix4fv(r,!1,s)}}function h(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let u=0;function l(t){u>100||(s.warn(t),u++,u>100&&s.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(t,e,r)=>{r.r(e),r.d(e,{Renderer:()=>o});var s=r("./node_modules/ogl/src/math/Vec3.js"),i=r("./node_modules/console-browserify/index.js");const n=new s.Vec3;let a=1;class o{constructor({canvas:t=document.createElement("canvas"),width:e=300,height:r=150,dpr:s=1,alpha:n=!1,depth:o=!0,stencil:h=!1,antialias:u=!1,premultipliedAlpha:l=!1,preserveDrawingBuffer:d=!1,powerPreference:c="default",autoClear:m=!0,webgl:g=2}={}){const f={alpha:n,depth:o,stencil:h,antialias:u,premultipliedAlpha:l,preserveDrawingBuffer:d,powerPreference:c};this.dpr=s,this.alpha=n,this.color=!0,this.depth=o,this.stencil=h,this.premultipliedAlpha=l,this.autoClear=m,this.id=a++,2===g&&(this.gl=t.getContext("webgl2",f)),this.isWebgl2=!!this.gl,this.gl||(this.gl=t.getContext("webgl",f)),this.gl||i.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(e,r),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(t,e){this.width=t,this.height=e,this.gl.canvas.width=t*this.dpr,this.gl.canvas.height=e*this.dpr,Object.assign(this.gl.canvas.style,{width:t+"px",height:e+"px"})}setViewport(t,e,r=0,s=0){this.state.viewport.width===t&&this.state.viewport.height===e||(this.state.viewport.width=t,this.state.viewport.height=e,this.state.viewport.x=r,this.state.viewport.y=s,this.gl.viewport(r,s,t,e))}setScissor(t,e,r=0,s=0){this.gl.scissor(r,s,t,e)}enable(t){!0!==this.state[t]&&(this.gl.enable(t),this.state[t]=!0)}disable(t){!1!==this.state[t]&&(this.gl.disable(t),this.state[t]=!1)}setBlendFunc(t,e,r,s){this.state.blendFunc.src===t&&this.state.blendFunc.dst===e&&this.state.blendFunc.srcAlpha===r&&this.state.blendFunc.dstAlpha===s||(this.state.blendFunc.src=t,this.state.blendFunc.dst=e,this.state.blendFunc.srcAlpha=r,this.state.blendFunc.dstAlpha=s,void 0!==r?this.gl.blendFuncSeparate(t,e,r,s):this.gl.blendFunc(t,e))}setBlendEquation(t,e){t=t||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===t&&this.state.blendEquation.modeAlpha===e||(this.state.blendEquation.modeRGB=t,this.state.blendEquation.modeAlpha=e,void 0!==e?this.gl.blendEquationSeparate(t,e):this.gl.blendEquation(t))}setCullFace(t){this.state.cullFace!==t&&(this.state.cullFace=t,this.gl.cullFace(t))}setFrontFace(t){this.state.frontFace!==t&&(this.state.frontFace=t,this.gl.frontFace(t))}setDepthMask(t){this.state.depthMask!==t&&(this.state.depthMask=t,this.gl.depthMask(t))}setDepthFunc(t){this.state.depthFunc!==t&&(this.state.depthFunc=t,this.gl.depthFunc(t))}activeTexture(t){this.state.activeTextureUnit!==t&&(this.state.activeTextureUnit=t,this.gl.activeTexture(this.gl.TEXTURE0+t))}bindFramebuffer({target:t=this.gl.FRAMEBUFFER,buffer:e=null}={}){this.state.framebuffer!==e&&(this.state.framebuffer=e,this.gl.bindFramebuffer(t,e))}getExtension(t,e,r){return e&&this.gl[e]?this.gl[e].bind(this.gl):(this.extensions[t]||(this.extensions[t]=this.gl.getExtension(t)),e?this.extensions[t]?this.extensions[t][r].bind(this.extensions[t]):null:this.extensions[t])}sortOpaque(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:t.zDepth!==e.zDepth?t.zDepth-e.zDepth:e.id-t.id}sortTransparent(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.zDepth!==e.zDepth?e.zDepth-t.zDepth:e.id-t.id}sortUI(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:e.id-t.id}getRenderList({scene:t,camera:e,frustumCull:r,sort:s}){let i=[];if(e&&r&&e.updateFrustum(),t.traverse((t=>{if(!t.visible)return!0;t.draw&&(r&&t.frustumCulled&&e&&!e.frustumIntersectsMesh(t)||i.push(t))})),s){const t=[],r=[],s=[];i.forEach((i=>{i.program.transparent?i.program.depthTest?r.push(i):s.push(i):t.push(i),i.zDepth=0,0===i.renderOrder&&i.program.depthTest&&e&&(i.worldMatrix.getTranslation(n),n.applyMatrix4(e.projectionViewMatrix),i.zDepth=n.z)})),t.sort(this.sortOpaque),r.sort(this.sortTransparent),s.sort(this.sortUI),i=t.concat(r,s)}return i}render({scene:t,camera:e,target:r=null,update:s=!0,sort:i=!0,frustumCull:n=!0,clear:a}){null===r?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(r),this.setViewport(r.width,r.height)),(a||this.autoClear&&!1!==a)&&(!this.depth||r&&!r.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),s&&t.updateMatrixWorld(),e&&e.updateMatrixWorld();this.getRenderList({scene:t,camera:e,frustumCull:n,sort:i}).forEach((t=>{t.draw({camera:e})}))}}},"./node_modules/ogl/src/core/Transform.js":(t,e,r)=>{r.r(e),r.d(e,{Transform:()=>o});var s=r("./node_modules/ogl/src/math/Vec3.js"),i=r("./node_modules/ogl/src/math/Quat.js"),n=r("./node_modules/ogl/src/math/Mat4.js"),a=r("./node_modules/ogl/src/math/Euler.js");class o{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new n.Mat4,this.worldMatrix=new n.Mat4,this.matrixAutoUpdate=!0,this.position=new s.Vec3,this.quaternion=new i.Quat,this.scale=new s.Vec3(1),this.rotation=new a.Euler,this.up=new s.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(t,e=!0){this.parent&&t!==this.parent&&this.parent.removeChild(this,!1),this.parent=t,e&&t&&t.addChild(this,!1)}addChild(t,e=!0){~this.children.indexOf(t)||this.children.push(t),e&&t.setParent(this,!1)}removeChild(t,e=!0){~this.children.indexOf(t)&&this.children.splice(this.children.indexOf(t),1),e&&t.setParent(null,!1)}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||t)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,t=!0);for(let e=0,r=this.children.length;e<r;e++)this.children[e].updateMatrixWorld(t)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(t){if(!t(this))for(let e=0,r=this.children.length;e<r;e++)this.children[e].traverse(t)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(t,e=!1){e?this.matrix.lookAt(this.position,t,this.up):this.matrix.lookAt(t,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Box.js":(t,e,r)=>{r.r(e),r.d(e,{Box:()=>n});var s=r("./node_modules/ogl/src/core/Geometry.js"),i=r("./node_modules/ogl/src/extras/Plane.js");class n extends s.Geometry{constructor(t,{width:e=1,height:r=1,depth:s=1,widthSegments:n=1,heightSegments:a=1,depthSegments:o=1,attributes:h={}}={}){const u=n,l=a,d=o,c=(u+1)*(l+1)*2+(u+1)*(d+1)*2+(l+1)*(d+1)*2,m=6*(u*l*2+u*d*2+l*d*2),g=new Float32Array(3*c),f=new Float32Array(3*c),p=new Float32Array(2*c),x=c>65536?new Uint32Array(m):new Uint16Array(m);let M=0,b=0;i.Plane.buildPlane(g,f,p,x,s,r,e,d,l,2,1,0,-1,-1,M,b),M+=(d+1)*(l+1),b+=d*l,i.Plane.buildPlane(g,f,p,x,s,r,-e,d,l,2,1,0,1,-1,M,b),M+=(d+1)*(l+1),b+=d*l,i.Plane.buildPlane(g,f,p,x,e,s,r,d,u,0,2,1,1,1,M,b),M+=(u+1)*(d+1),b+=u*d,i.Plane.buildPlane(g,f,p,x,e,s,-r,d,u,0,2,1,1,-1,M,b),M+=(u+1)*(d+1),b+=u*d,i.Plane.buildPlane(g,f,p,x,e,r,-s,u,l,0,1,2,-1,-1,M,b),M+=(u+1)*(l+1),b+=u*l,i.Plane.buildPlane(g,f,p,x,e,r,s,u,l,0,1,2,1,-1,M,b),Object.assign(h,{position:{size:3,data:g},normal:{size:3,data:f},uv:{size:2,data:p},index:{data:x}}),super(t,h)}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,r)=>{r.r(e),r.d(e,{Plane:()=>i});var s=r("./node_modules/ogl/src/core/Geometry.js");class i extends s.Geometry{constructor(t,{width:e=1,height:r=1,widthSegments:s=1,heightSegments:n=1,attributes:a={}}={}){const o=s,h=n,u=(o+1)*(h+1),l=o*h*6,d=new Float32Array(3*u),c=new Float32Array(3*u),m=new Float32Array(2*u),g=l>65536?new Uint32Array(l):new Uint16Array(l);i.buildPlane(d,c,m,g,e,r,0,o,h),Object.assign(a,{position:{size:3,data:d},normal:{size:3,data:c},uv:{size:2,data:m},index:{data:g}}),super(t,a)}static buildPlane(t,e,r,s,i,n,a,o,h,u=0,l=1,d=2,c=1,m=-1,g=0,f=0){const p=g,x=i/o,M=n/h;for(let b=0;b<=h;b++){let y=b*M-n/2;for(let n=0;n<=o;n++,g++){let M=n*x-i/2;if(t[3*g+u]=M*c,t[3*g+l]=y*m,t[3*g+d]=a/2,e[3*g+u]=0,e[3*g+l]=0,e[3*g+d]=a>=0?1:-1,r[2*g]=n/o,r[2*g+1]=1-b/h,b===h||n===o)continue;let w=p+n+b*(o+1),_=p+n+(b+1)*(o+1),E=p+n+(b+1)*(o+1)+1,v=p+n+b*(o+1)+1;s[6*f]=w,s[6*f+1]=_,s[6*f+2]=v,s[6*f+3]=_,s[6*f+4]=E,s[6*f+5]=v,f++}}}}},"./node_modules/ogl/src/math/Euler.js":(t,e,r)=>{r.r(e),r.d(e,{Euler:()=>n});var s=r("./node_modules/ogl/src/math/functions/EulerFunc.js");const i=new(r("./node_modules/ogl/src/math/Mat4.js").Mat4);class n extends Array{constructor(t=0,e=t,r=t,s="YXZ"){return super(t,e,r),this.order=s,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set(t,e=t,r=t){return t.length?this.copy(t):(this[0]=t,this[1]=e,this[2]=r,this.onChange(),this)}copy(t){return this[0]=t[0],this[1]=t[1],this[2]=t[2],this.onChange(),this}reorder(t){return this.order=t,this.onChange(),this}fromRotationMatrix(t,e=this.order){return s.fromRotationMatrix(this,t,e),this}fromQuaternion(t,e=this.order){return i.fromQuaternion(t),this.fromRotationMatrix(i,e)}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,r)=>{r.r(e),r.d(e,{Mat3:()=>i});var s=r("./node_modules/ogl/src/math/functions/Mat3Func.js");class i extends Array{constructor(t=1,e=0,r=0,s=0,i=1,n=0,a=0,o=0,h=1){return super(t,e,r,s,i,n,a,o,h),this}set(t,e,r,i,n,a,o,h,u){return t.length?this.copy(t):(s.set(this,t,e,r,i,n,a,o,h,u),this)}translate(t,e=this){return s.translate(this,e,t),this}rotate(t,e=this){return s.rotate(this,e,t),this}scale(t,e=this){return s.scale(this,e,t),this}multiply(t,e){return e?s.multiply(this,t,e):s.multiply(this,this,t),this}identity(){return s.identity(this),this}copy(t){return s.copy(this,t),this}fromMatrix4(t){return s.fromMat4(this,t),this}fromQuaternion(t){return s.fromQuat(this,t),this}fromBasis(t,e,r){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],r[0],r[1],r[2]),this}inverse(t=this){return s.invert(this,t),this}getNormalMatrix(t){return s.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/Mat4.js":(t,e,r)=>{r.r(e),r.d(e,{Mat4:()=>i});var s=r("./node_modules/ogl/src/math/functions/Mat4Func.js");class i extends Array{constructor(t=1,e=0,r=0,s=0,i=0,n=1,a=0,o=0,h=0,u=0,l=1,d=0,c=0,m=0,g=0,f=1){return super(t,e,r,s,i,n,a,o,h,u,l,d,c,m,g,f),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(t){this[12]=t}set y(t){this[13]=t}set z(t){this[14]=t}set w(t){this[15]=t}set(t,e,r,i,n,a,o,h,u,l,d,c,m,g,f,p){return t.length?this.copy(t):(s.set(this,t,e,r,i,n,a,o,h,u,l,d,c,m,g,f,p),this)}translate(t,e=this){return s.translate(this,e,t),this}rotate(t,e,r=this){return s.rotate(this,r,t,e),this}scale(t,e=this){return s.scale(this,e,"number"==typeof t?[t,t,t]:t),this}multiply(t,e){return e?s.multiply(this,t,e):s.multiply(this,this,t),this}identity(){return s.identity(this),this}copy(t){return s.copy(this,t),this}fromPerspective({fov:t,aspect:e,near:r,far:i}={}){return s.perspective(this,t,e,r,i),this}fromOrthogonal({left:t,right:e,bottom:r,top:i,near:n,far:a}){return s.ortho(this,t,e,r,i,n,a),this}fromQuaternion(t){return s.fromQuat(this,t),this}setPosition(t){return this.x=t[0],this.y=t[1],this.z=t[2],this}inverse(t=this){return s.invert(this,t),this}compose(t,e,r){return s.fromRotationTranslationScale(this,t,e,r),this}getRotation(t){return s.getRotation(t,this),this}getTranslation(t){return s.getTranslation(t,this),this}getScaling(t){return s.getScaling(t,this),this}getMaxScaleOnAxis(){return s.getMaxScaleOnAxis(this)}lookAt(t,e,r){return s.targetTo(this,t,e,r),this}determinant(){return s.determinant(this)}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this[4]=t[e+4],this[5]=t[e+5],this[6]=t[e+6],this[7]=t[e+7],this[8]=t[e+8],this[9]=t[e+9],this[10]=t[e+10],this[11]=t[e+11],this[12]=t[e+12],this[13]=t[e+13],this[14]=t[e+14],this[15]=t[e+15],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t[e+4]=this[4],t[e+5]=this[5],t[e+6]=this[6],t[e+7]=this[7],t[e+8]=this[8],t[e+9]=this[9],t[e+10]=this[10],t[e+11]=this[11],t[e+12]=this[12],t[e+13]=this[13],t[e+14]=this[14],t[e+15]=this[15],t}}},"./node_modules/ogl/src/math/Quat.js":(t,e,r)=>{r.r(e),r.d(e,{Quat:()=>i});var s=r("./node_modules/ogl/src/math/functions/QuatFunc.js");class i extends Array{constructor(t=0,e=0,r=0,s=1){return super(t,e,r,s),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set w(t){this[3]=t,this.onChange()}identity(){return s.identity(this),this.onChange(),this}set(t,e,r,i){return t.length?this.copy(t):(s.set(this,t,e,r,i),this.onChange(),this)}rotateX(t){return s.rotateX(this,this,t),this.onChange(),this}rotateY(t){return s.rotateY(this,this,t),this.onChange(),this}rotateZ(t){return s.rotateZ(this,this,t),this.onChange(),this}inverse(t=this){return s.invert(this,t),this.onChange(),this}conjugate(t=this){return s.conjugate(this,t),this.onChange(),this}copy(t){return s.copy(this,t),this.onChange(),this}normalize(t=this){return s.normalize(this,t),this.onChange(),this}multiply(t,e){return e?s.multiply(this,t,e):s.multiply(this,this,t),this.onChange(),this}dot(t){return s.dot(this,t)}fromMatrix3(t){return s.fromMat3(this,t),this.onChange(),this}fromEuler(t){return s.fromEuler(this,t,t.order),this}fromAxisAngle(t,e){return s.setAxisAngle(this,t,e),this}slerp(t,e){return s.slerp(this,this,t,e),this}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}},"./node_modules/ogl/src/math/Vec3.js":(t,e,r)=>{r.r(e),r.d(e,{Vec3:()=>i});var s=r("./node_modules/ogl/src/math/functions/Vec3Func.js");class i extends Array{constructor(t=0,e=t,r=t){return super(t,e,r),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,e=t,r=t){return t.length?this.copy(t):(s.set(this,t,e,r),this)}copy(t){return s.copy(this,t),this}add(t,e){return e?s.add(this,t,e):s.add(this,this,t),this}sub(t,e){return e?s.subtract(this,t,e):s.subtract(this,this,t),this}multiply(t){return t.length?s.multiply(this,this,t):s.scale(this,this,t),this}divide(t){return t.length?s.divide(this,this,t):s.scale(this,this,1/t),this}inverse(t=this){return s.inverse(this,t),this}len(){return s.length(this)}distance(t){return t?s.distance(this,t):s.length(this)}squaredLen(){return s.squaredLength(this)}squaredDistance(t){return t?s.squaredDistance(this,t):s.squaredLength(this)}negate(t=this){return s.negate(this,t),this}cross(t,e){return e?s.cross(this,t,e):s.cross(this,this,t),this}scale(t){return s.scale(this,this,t),this}normalize(){return s.normalize(this,this),this}dot(t){return s.dot(this,t)}equals(t){return s.exactEquals(this,t)}applyMatrix3(t){return s.transformMat3(this,this,t),this}applyMatrix4(t){return s.transformMat4(this,this,t),this}scaleRotateMatrix4(t){return s.scaleRotateMat4(this,this,t),this}applyQuaternion(t){return s.transformQuat(this,this,t),this}angle(t){return s.angle(this,t)}lerp(t,e){return s.lerp(this,this,t,e),this}clone(){return new i(this[0],this[1],this[2])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}transformDirection(t){const e=this[0],r=this[1],s=this[2];return this[0]=t[0]*e+t[4]*r+t[8]*s,this[1]=t[1]*e+t[5]*r+t[9]*s,this[2]=t[2]*e+t[6]*r+t[10]*s,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(t,e,r)=>{function s(t,e,r="YXZ"){return"XYZ"===r?(t[1]=Math.asin(Math.min(Math.max(e[8],-1),1)),Math.abs(e[8])<.99999?(t[0]=Math.atan2(-e[9],e[10]),t[2]=Math.atan2(-e[4],e[0])):(t[0]=Math.atan2(e[6],e[5]),t[2]=0)):"YXZ"===r?(t[0]=Math.asin(-Math.min(Math.max(e[9],-1),1)),Math.abs(e[9])<.99999?(t[1]=Math.atan2(e[8],e[10]),t[2]=Math.atan2(e[1],e[5])):(t[1]=Math.atan2(-e[2],e[0]),t[2]=0)):"ZXY"===r?(t[0]=Math.asin(Math.min(Math.max(e[6],-1),1)),Math.abs(e[6])<.99999?(t[1]=Math.atan2(-e[2],e[10]),t[2]=Math.atan2(-e[4],e[5])):(t[1]=0,t[2]=Math.atan2(e[1],e[0]))):"ZYX"===r?(t[1]=Math.asin(-Math.min(Math.max(e[2],-1),1)),Math.abs(e[2])<.99999?(t[0]=Math.atan2(e[6],e[10]),t[2]=Math.atan2(e[1],e[0])):(t[0]=0,t[2]=Math.atan2(-e[4],e[5]))):"YZX"===r?(t[2]=Math.asin(Math.min(Math.max(e[1],-1),1)),Math.abs(e[1])<.99999?(t[0]=Math.atan2(-e[9],e[5]),t[1]=Math.atan2(-e[2],e[0])):(t[0]=0,t[1]=Math.atan2(e[8],e[10]))):"XZY"===r&&(t[2]=Math.asin(-Math.min(Math.max(e[4],-1),1)),Math.abs(e[4])<.99999?(t[0]=Math.atan2(e[6],e[5]),t[1]=Math.atan2(e[8],e[0])):(t[0]=Math.atan2(-e[9],e[10]),t[1]=0)),t}r.r(e),r.d(e,{fromRotationMatrix:()=>s})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,r)=>{r.r(e),r.d(e,{add:()=>x,copy:()=>n,determinant:()=>l,fromMat4:()=>s,fromQuat:()=>i,identity:()=>o,invert:()=>u,multiply:()=>d,multiplyScalar:()=>b,normalFromMat4:()=>f,projection:()=>p,rotate:()=>m,scale:()=>g,set:()=>a,subtract:()=>M,translate:()=>c,transpose:()=>h});function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function i(t,e){let r=e[0],s=e[1],i=e[2],n=e[3],a=r+r,o=s+s,h=i+i,u=r*a,l=s*a,d=s*o,c=i*a,m=i*o,g=i*h,f=n*a,p=n*o,x=n*h;return t[0]=1-d-g,t[3]=l-x,t[6]=c+p,t[1]=l+x,t[4]=1-u-g,t[7]=m-f,t[2]=c-p,t[5]=m+f,t[8]=1-u-d,t}function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function a(t,e,r,s,i,n,a,o,h,u){return t[0]=e,t[1]=r,t[2]=s,t[3]=i,t[4]=n,t[5]=a,t[6]=o,t[7]=h,t[8]=u,t}function o(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function h(t,e){if(t===e){let r=e[1],s=e[2],i=e[5];t[1]=e[3],t[2]=e[6],t[3]=r,t[5]=e[7],t[6]=s,t[7]=i}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function u(t,e){let r=e[0],s=e[1],i=e[2],n=e[3],a=e[4],o=e[5],h=e[6],u=e[7],l=e[8],d=l*a-o*u,c=-l*n+o*h,m=u*n-a*h,g=r*d+s*c+i*m;return g?(g=1/g,t[0]=d*g,t[1]=(-l*s+i*u)*g,t[2]=(o*s-i*a)*g,t[3]=c*g,t[4]=(l*r-i*h)*g,t[5]=(-o*r+i*n)*g,t[6]=m*g,t[7]=(-u*r+s*h)*g,t[8]=(a*r-s*n)*g,t):null}function l(t){let e=t[0],r=t[1],s=t[2],i=t[3],n=t[4],a=t[5],o=t[6],h=t[7],u=t[8];return e*(u*n-a*h)+r*(-u*i+a*o)+s*(h*i-n*o)}function d(t,e,r){let s=e[0],i=e[1],n=e[2],a=e[3],o=e[4],h=e[5],u=e[6],l=e[7],d=e[8],c=r[0],m=r[1],g=r[2],f=r[3],p=r[4],x=r[5],M=r[6],b=r[7],y=r[8];return t[0]=c*s+m*a+g*u,t[1]=c*i+m*o+g*l,t[2]=c*n+m*h+g*d,t[3]=f*s+p*a+x*u,t[4]=f*i+p*o+x*l,t[5]=f*n+p*h+x*d,t[6]=M*s+b*a+y*u,t[7]=M*i+b*o+y*l,t[8]=M*n+b*h+y*d,t}function c(t,e,r){let s=e[0],i=e[1],n=e[2],a=e[3],o=e[4],h=e[5],u=e[6],l=e[7],d=e[8],c=r[0],m=r[1];return t[0]=s,t[1]=i,t[2]=n,t[3]=a,t[4]=o,t[5]=h,t[6]=c*s+m*a+u,t[7]=c*i+m*o+l,t[8]=c*n+m*h+d,t}function m(t,e,r){let s=e[0],i=e[1],n=e[2],a=e[3],o=e[4],h=e[5],u=e[6],l=e[7],d=e[8],c=Math.sin(r),m=Math.cos(r);return t[0]=m*s+c*a,t[1]=m*i+c*o,t[2]=m*n+c*h,t[3]=m*a-c*s,t[4]=m*o-c*i,t[5]=m*h-c*n,t[6]=u,t[7]=l,t[8]=d,t}function g(t,e,r){let s=r[0],i=r[1];return t[0]=s*e[0],t[1]=s*e[1],t[2]=s*e[2],t[3]=i*e[3],t[4]=i*e[4],t[5]=i*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function f(t,e){let r=e[0],s=e[1],i=e[2],n=e[3],a=e[4],o=e[5],h=e[6],u=e[7],l=e[8],d=e[9],c=e[10],m=e[11],g=e[12],f=e[13],p=e[14],x=e[15],M=r*o-s*a,b=r*h-i*a,y=r*u-n*a,w=s*h-i*o,_=s*u-n*o,E=i*u-n*h,v=l*f-d*g,A=l*p-c*g,F=l*x-m*g,S=d*p-c*f,C=d*x-m*f,R=c*x-m*p,j=M*R-b*C+y*S+w*F-_*A+E*v;return j?(j=1/j,t[0]=(o*R-h*C+u*S)*j,t[1]=(h*F-a*R-u*A)*j,t[2]=(a*C-o*F+u*v)*j,t[3]=(i*C-s*R-n*S)*j,t[4]=(r*R-i*F+n*A)*j,t[5]=(s*F-r*C-n*v)*j,t[6]=(f*E-p*_+x*w)*j,t[7]=(p*y-g*E-x*b)*j,t[8]=(g*_-f*y+x*M)*j,t):null}function p(t,e,r){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/r,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function x(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t}function M(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t}function b(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(t,e,r)=>{r.r(e),r.d(e,{add:()=>_,copy:()=>s,determinant:()=>h,fromQuat:()=>M,fromRotationTranslationScale:()=>x,getMaxScaleOnAxis:()=>f,getRotation:()=>p,getScaling:()=>g,getTranslation:()=>m,identity:()=>n,invert:()=>o,multiply:()=>u,multiplyScalar:()=>v,ortho:()=>y,perspective:()=>b,rotate:()=>c,scale:()=>d,set:()=>i,subtract:()=>E,targetTo:()=>w,translate:()=>l,transpose:()=>a});function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function i(t,e,r,s,i,n,a,o,h,u,l,d,c,m,g,f,p){return t[0]=e,t[1]=r,t[2]=s,t[3]=i,t[4]=n,t[5]=a,t[6]=o,t[7]=h,t[8]=u,t[9]=l,t[10]=d,t[11]=c,t[12]=m,t[13]=g,t[14]=f,t[15]=p,t}function n(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function a(t,e){if(t===e){let r=e[1],s=e[2],i=e[3],n=e[6],a=e[7],o=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=r,t[6]=e[9],t[7]=e[13],t[8]=s,t[9]=n,t[11]=e[14],t[12]=i,t[13]=a,t[14]=o}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function o(t,e){let r=e[0],s=e[1],i=e[2],n=e[3],a=e[4],o=e[5],h=e[6],u=e[7],l=e[8],d=e[9],c=e[10],m=e[11],g=e[12],f=e[13],p=e[14],x=e[15],M=r*o-s*a,b=r*h-i*a,y=r*u-n*a,w=s*h-i*o,_=s*u-n*o,E=i*u-n*h,v=l*f-d*g,A=l*p-c*g,F=l*x-m*g,S=d*p-c*f,C=d*x-m*f,R=c*x-m*p,j=M*R-b*C+y*S+w*F-_*A+E*v;return j?(j=1/j,t[0]=(o*R-h*C+u*S)*j,t[1]=(i*C-s*R-n*S)*j,t[2]=(f*E-p*_+x*w)*j,t[3]=(c*_-d*E-m*w)*j,t[4]=(h*F-a*R-u*A)*j,t[5]=(r*R-i*F+n*A)*j,t[6]=(p*y-g*E-x*b)*j,t[7]=(l*E-c*y+m*b)*j,t[8]=(a*C-o*F+u*v)*j,t[9]=(s*F-r*C-n*v)*j,t[10]=(g*_-f*y+x*M)*j,t[11]=(d*y-l*_-m*M)*j,t[12]=(o*A-a*S-h*v)*j,t[13]=(r*S-s*A+i*v)*j,t[14]=(f*b-g*w-p*M)*j,t[15]=(l*w-d*b+c*M)*j,t):null}function h(t){let e=t[0],r=t[1],s=t[2],i=t[3],n=t[4],a=t[5],o=t[6],h=t[7],u=t[8],l=t[9],d=t[10],c=t[11],m=t[12],g=t[13],f=t[14],p=t[15];return(e*a-r*n)*(d*p-c*f)-(e*o-s*n)*(l*p-c*g)+(e*h-i*n)*(l*f-d*g)+(r*o-s*a)*(u*p-c*m)-(r*h-i*a)*(u*f-d*m)+(s*h-i*o)*(u*g-l*m)}function u(t,e,r){let s=e[0],i=e[1],n=e[2],a=e[3],o=e[4],h=e[5],u=e[6],l=e[7],d=e[8],c=e[9],m=e[10],g=e[11],f=e[12],p=e[13],x=e[14],M=e[15],b=r[0],y=r[1],w=r[2],_=r[3];return t[0]=b*s+y*o+w*d+_*f,t[1]=b*i+y*h+w*c+_*p,t[2]=b*n+y*u+w*m+_*x,t[3]=b*a+y*l+w*g+_*M,b=r[4],y=r[5],w=r[6],_=r[7],t[4]=b*s+y*o+w*d+_*f,t[5]=b*i+y*h+w*c+_*p,t[6]=b*n+y*u+w*m+_*x,t[7]=b*a+y*l+w*g+_*M,b=r[8],y=r[9],w=r[10],_=r[11],t[8]=b*s+y*o+w*d+_*f,t[9]=b*i+y*h+w*c+_*p,t[10]=b*n+y*u+w*m+_*x,t[11]=b*a+y*l+w*g+_*M,b=r[12],y=r[13],w=r[14],_=r[15],t[12]=b*s+y*o+w*d+_*f,t[13]=b*i+y*h+w*c+_*p,t[14]=b*n+y*u+w*m+_*x,t[15]=b*a+y*l+w*g+_*M,t}function l(t,e,r){let s,i,n,a,o,h,u,l,d,c,m,g,f=r[0],p=r[1],x=r[2];return e===t?(t[12]=e[0]*f+e[4]*p+e[8]*x+e[12],t[13]=e[1]*f+e[5]*p+e[9]*x+e[13],t[14]=e[2]*f+e[6]*p+e[10]*x+e[14],t[15]=e[3]*f+e[7]*p+e[11]*x+e[15]):(s=e[0],i=e[1],n=e[2],a=e[3],o=e[4],h=e[5],u=e[6],l=e[7],d=e[8],c=e[9],m=e[10],g=e[11],t[0]=s,t[1]=i,t[2]=n,t[3]=a,t[4]=o,t[5]=h,t[6]=u,t[7]=l,t[8]=d,t[9]=c,t[10]=m,t[11]=g,t[12]=s*f+o*p+d*x+e[12],t[13]=i*f+h*p+c*x+e[13],t[14]=n*f+u*p+m*x+e[14],t[15]=a*f+l*p+g*x+e[15]),t}function d(t,e,r){let s=r[0],i=r[1],n=r[2];return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function c(t,e,r,s){let i,n,a,o,h,u,l,d,c,m,g,f,p,x,M,b,y,w,_,E,v,A,F,S,C=s[0],R=s[1],j=s[2],T=Math.hypot(C,R,j);return Math.abs(T)<1e-6?null:(T=1/T,C*=T,R*=T,j*=T,i=Math.sin(r),n=Math.cos(r),a=1-n,o=e[0],h=e[1],u=e[2],l=e[3],d=e[4],c=e[5],m=e[6],g=e[7],f=e[8],p=e[9],x=e[10],M=e[11],b=C*C*a+n,y=R*C*a+j*i,w=j*C*a-R*i,_=C*R*a-j*i,E=R*R*a+n,v=j*R*a+C*i,A=C*j*a+R*i,F=R*j*a-C*i,S=j*j*a+n,t[0]=o*b+d*y+f*w,t[1]=h*b+c*y+p*w,t[2]=u*b+m*y+x*w,t[3]=l*b+g*y+M*w,t[4]=o*_+d*E+f*v,t[5]=h*_+c*E+p*v,t[6]=u*_+m*E+x*v,t[7]=l*_+g*E+M*v,t[8]=o*A+d*F+f*S,t[9]=h*A+c*F+p*S,t[10]=u*A+m*F+x*S,t[11]=l*A+g*F+M*S,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function m(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function g(t,e){let r=e[0],s=e[1],i=e[2],n=e[4],a=e[5],o=e[6],h=e[8],u=e[9],l=e[10];return t[0]=Math.hypot(r,s,i),t[1]=Math.hypot(n,a,o),t[2]=Math.hypot(h,u,l),t}function f(t){let e=t[0],r=t[1],s=t[2],i=t[4],n=t[5],a=t[6],o=t[8],h=t[9],u=t[10];const l=e*e+r*r+s*s,d=i*i+n*n+a*a,c=o*o+h*h+u*u;return Math.sqrt(Math.max(l,d,c))}const p=function(){const t=[0,0,0];return function(e,r){let s=t;g(s,r);let i=1/s[0],n=1/s[1],a=1/s[2],o=r[0]*i,h=r[1]*n,u=r[2]*a,l=r[4]*i,d=r[5]*n,c=r[6]*a,m=r[8]*i,f=r[9]*n,p=r[10]*a,x=o+d+p,M=0;return x>0?(M=2*Math.sqrt(x+1),e[3]=.25*M,e[0]=(c-f)/M,e[1]=(m-u)/M,e[2]=(h-l)/M):o>d&&o>p?(M=2*Math.sqrt(1+o-d-p),e[3]=(c-f)/M,e[0]=.25*M,e[1]=(h+l)/M,e[2]=(m+u)/M):d>p?(M=2*Math.sqrt(1+d-o-p),e[3]=(m-u)/M,e[0]=(h+l)/M,e[1]=.25*M,e[2]=(c+f)/M):(M=2*Math.sqrt(1+p-o-d),e[3]=(h-l)/M,e[0]=(m+u)/M,e[1]=(c+f)/M,e[2]=.25*M),e}}();function x(t,e,r,s){let i=e[0],n=e[1],a=e[2],o=e[3],h=i+i,u=n+n,l=a+a,d=i*h,c=i*u,m=i*l,g=n*u,f=n*l,p=a*l,x=o*h,M=o*u,b=o*l,y=s[0],w=s[1],_=s[2];return t[0]=(1-(g+p))*y,t[1]=(c+b)*y,t[2]=(m-M)*y,t[3]=0,t[4]=(c-b)*w,t[5]=(1-(d+p))*w,t[6]=(f+x)*w,t[7]=0,t[8]=(m+M)*_,t[9]=(f-x)*_,t[10]=(1-(d+g))*_,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function M(t,e){let r=e[0],s=e[1],i=e[2],n=e[3],a=r+r,o=s+s,h=i+i,u=r*a,l=s*a,d=s*o,c=i*a,m=i*o,g=i*h,f=n*a,p=n*o,x=n*h;return t[0]=1-d-g,t[1]=l+x,t[2]=c-p,t[3]=0,t[4]=l-x,t[5]=1-u-g,t[6]=m+f,t[7]=0,t[8]=c+p,t[9]=m-f,t[10]=1-u-d,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function b(t,e,r,s,i){let n=1/Math.tan(e/2),a=1/(s-i);return t[0]=n/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(i+s)*a,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*i*s*a,t[15]=0,t}function y(t,e,r,s,i,n,a){let o=1/(e-r),h=1/(s-i),u=1/(n-a);return t[0]=-2*o,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*h,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*u,t[11]=0,t[12]=(e+r)*o,t[13]=(i+s)*h,t[14]=(a+n)*u,t[15]=1,t}function w(t,e,r,s){let i=e[0],n=e[1],a=e[2],o=s[0],h=s[1],u=s[2],l=i-r[0],d=n-r[1],c=a-r[2],m=l*l+d*d+c*c;0===m?c=1:(m=1/Math.sqrt(m),l*=m,d*=m,c*=m);let g=h*c-u*d,f=u*l-o*c,p=o*d-h*l;return m=g*g+f*f+p*p,0===m&&(u?o+=1e-6:h?u+=1e-6:h+=1e-6,g=h*c-u*d,f=u*l-o*c,p=o*d-h*l,m=g*g+f*f+p*p),m=1/Math.sqrt(m),g*=m,f*=m,p*=m,t[0]=g,t[1]=f,t[2]=p,t[3]=0,t[4]=d*p-c*f,t[5]=c*g-l*p,t[6]=l*f-d*g,t[7]=0,t[8]=l,t[9]=d,t[10]=c,t[11]=0,t[12]=i,t[13]=n,t[14]=a,t[15]=1,t}function _(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t[9]=e[9]+r[9],t[10]=e[10]+r[10],t[11]=e[11]+r[11],t[12]=e[12]+r[12],t[13]=e[13]+r[13],t[14]=e[14]+r[14],t[15]=e[15]+r[15],t}function E(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t[9]=e[9]-r[9],t[10]=e[10]-r[10],t[11]=e[11]-r[11],t[12]=e[12]-r[12],t[13]=e[13]-r[13],t[14]=e[14]-r[14],t[15]=e[15]-r[15],t}function v(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t[9]=e[9]*r,t[10]=e[10]*r,t[11]=e[11]*r,t[12]=e[12]*r,t[13]=e[13]*r,t[14]=e[14]*r,t[15]=e[15]*r,t}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(t,e,r)=>{r.r(e),r.d(e,{add:()=>x,conjugate:()=>c,copy:()=>f,dot:()=>b,fromEuler:()=>g,fromMat3:()=>m,identity:()=>i,invert:()=>d,length:()=>w,lerp:()=>y,multiply:()=>a,normalize:()=>_,rotateX:()=>o,rotateY:()=>h,rotateZ:()=>u,scale:()=>M,set:()=>p,setAxisAngle:()=>n,slerp:()=>l});var s=r("./node_modules/ogl/src/math/functions/Vec4Func.js");function i(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function n(t,e,r){r*=.5;let s=Math.sin(r);return t[0]=s*e[0],t[1]=s*e[1],t[2]=s*e[2],t[3]=Math.cos(r),t}function a(t,e,r){let s=e[0],i=e[1],n=e[2],a=e[3],o=r[0],h=r[1],u=r[2],l=r[3];return t[0]=s*l+a*o+i*u-n*h,t[1]=i*l+a*h+n*o-s*u,t[2]=n*l+a*u+s*h-i*o,t[3]=a*l-s*o-i*h-n*u,t}function o(t,e,r){r*=.5;let s=e[0],i=e[1],n=e[2],a=e[3],o=Math.sin(r),h=Math.cos(r);return t[0]=s*h+a*o,t[1]=i*h+n*o,t[2]=n*h-i*o,t[3]=a*h-s*o,t}function h(t,e,r){r*=.5;let s=e[0],i=e[1],n=e[2],a=e[3],o=Math.sin(r),h=Math.cos(r);return t[0]=s*h-n*o,t[1]=i*h+a*o,t[2]=n*h+s*o,t[3]=a*h-i*o,t}function u(t,e,r){r*=.5;let s=e[0],i=e[1],n=e[2],a=e[3],o=Math.sin(r),h=Math.cos(r);return t[0]=s*h+i*o,t[1]=i*h-s*o,t[2]=n*h+a*o,t[3]=a*h-n*o,t}function l(t,e,r,s){let i,n,a,o,h,u=e[0],l=e[1],d=e[2],c=e[3],m=r[0],g=r[1],f=r[2],p=r[3];return n=u*m+l*g+d*f+c*p,n<0&&(n=-n,m=-m,g=-g,f=-f,p=-p),1-n>1e-6?(i=Math.acos(n),a=Math.sin(i),o=Math.sin((1-s)*i)/a,h=Math.sin(s*i)/a):(o=1-s,h=s),t[0]=o*u+h*m,t[1]=o*l+h*g,t[2]=o*d+h*f,t[3]=o*c+h*p,t}function d(t,e){let r=e[0],s=e[1],i=e[2],n=e[3],a=r*r+s*s+i*i+n*n,o=a?1/a:0;return t[0]=-r*o,t[1]=-s*o,t[2]=-i*o,t[3]=n*o,t}function c(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function m(t,e){let r,s=e[0]+e[4]+e[8];if(s>0)r=Math.sqrt(s+1),t[3]=.5*r,r=.5/r,t[0]=(e[5]-e[7])*r,t[1]=(e[6]-e[2])*r,t[2]=(e[1]-e[3])*r;else{let s=0;e[4]>e[0]&&(s=1),e[8]>e[3*s+s]&&(s=2);let i=(s+1)%3,n=(s+2)%3;r=Math.sqrt(e[3*s+s]-e[3*i+i]-e[3*n+n]+1),t[s]=.5*r,r=.5/r,t[3]=(e[3*i+n]-e[3*n+i])*r,t[i]=(e[3*i+s]+e[3*s+i])*r,t[n]=(e[3*n+s]+e[3*s+n])*r}return t}function g(t,e,r="YXZ"){let s=Math.sin(.5*e[0]),i=Math.cos(.5*e[0]),n=Math.sin(.5*e[1]),a=Math.cos(.5*e[1]),o=Math.sin(.5*e[2]),h=Math.cos(.5*e[2]);return"XYZ"===r?(t[0]=s*a*h+i*n*o,t[1]=i*n*h-s*a*o,t[2]=i*a*o+s*n*h,t[3]=i*a*h-s*n*o):"YXZ"===r?(t[0]=s*a*h+i*n*o,t[1]=i*n*h-s*a*o,t[2]=i*a*o-s*n*h,t[3]=i*a*h+s*n*o):"ZXY"===r?(t[0]=s*a*h-i*n*o,t[1]=i*n*h+s*a*o,t[2]=i*a*o+s*n*h,t[3]=i*a*h-s*n*o):"ZYX"===r?(t[0]=s*a*h-i*n*o,t[1]=i*n*h+s*a*o,t[2]=i*a*o-s*n*h,t[3]=i*a*h+s*n*o):"YZX"===r?(t[0]=s*a*h+i*n*o,t[1]=i*n*h+s*a*o,t[2]=i*a*o-s*n*h,t[3]=i*a*h-s*n*o):"XZY"===r&&(t[0]=s*a*h-i*n*o,t[1]=i*n*h-s*a*o,t[2]=i*a*o+s*n*h,t[3]=i*a*h+s*n*o),t}const f=s.copy,p=s.set,x=s.add,M=s.scale,b=s.dot,y=s.lerp,w=s.length,_=s.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(t,e,r)=>{r.r(e),r.d(e,{add:()=>a,angle:()=>v,copy:()=>i,cross:()=>M,distance:()=>d,divide:()=>u,dot:()=>x,exactEquals:()=>A,inverse:()=>f,length:()=>s,lerp:()=>b,multiply:()=>h,negate:()=>g,normalize:()=>p,scale:()=>l,scaleRotateMat4:()=>w,set:()=>n,squaredDistance:()=>c,squaredLength:()=>m,subtract:()=>o,transformMat3:()=>_,transformMat4:()=>y,transformQuat:()=>E});function s(t){let e=t[0],r=t[1],s=t[2];return Math.sqrt(e*e+r*r+s*s)}function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function n(t,e,r,s){return t[0]=e,t[1]=r,t[2]=s,t}function a(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t}function o(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t}function h(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t[2]=e[2]*r[2],t}function u(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t[2]=e[2]/r[2],t}function l(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t}function d(t,e){let r=e[0]-t[0],s=e[1]-t[1],i=e[2]-t[2];return Math.sqrt(r*r+s*s+i*i)}function c(t,e){let r=e[0]-t[0],s=e[1]-t[1],i=e[2]-t[2];return r*r+s*s+i*i}function m(t){let e=t[0],r=t[1],s=t[2];return e*e+r*r+s*s}function g(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function f(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function p(t,e){let r=e[0],s=e[1],i=e[2],n=r*r+s*s+i*i;return n>0&&(n=1/Math.sqrt(n)),t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function x(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function M(t,e,r){let s=e[0],i=e[1],n=e[2],a=r[0],o=r[1],h=r[2];return t[0]=i*h-n*o,t[1]=n*a-s*h,t[2]=s*o-i*a,t}function b(t,e,r,s){let i=e[0],n=e[1],a=e[2];return t[0]=i+s*(r[0]-i),t[1]=n+s*(r[1]-n),t[2]=a+s*(r[2]-a),t}function y(t,e,r){let s=e[0],i=e[1],n=e[2],a=r[3]*s+r[7]*i+r[11]*n+r[15];return a=a||1,t[0]=(r[0]*s+r[4]*i+r[8]*n+r[12])/a,t[1]=(r[1]*s+r[5]*i+r[9]*n+r[13])/a,t[2]=(r[2]*s+r[6]*i+r[10]*n+r[14])/a,t}function w(t,e,r){let s=e[0],i=e[1],n=e[2],a=r[3]*s+r[7]*i+r[11]*n+r[15];return a=a||1,t[0]=(r[0]*s+r[4]*i+r[8]*n)/a,t[1]=(r[1]*s+r[5]*i+r[9]*n)/a,t[2]=(r[2]*s+r[6]*i+r[10]*n)/a,t}function _(t,e,r){let s=e[0],i=e[1],n=e[2];return t[0]=s*r[0]+i*r[3]+n*r[6],t[1]=s*r[1]+i*r[4]+n*r[7],t[2]=s*r[2]+i*r[5]+n*r[8],t}function E(t,e,r){let s=e[0],i=e[1],n=e[2],a=r[0],o=r[1],h=r[2],u=o*n-h*i,l=h*s-a*n,d=a*i-o*s,c=o*d-h*l,m=h*u-a*d,g=a*l-o*u,f=2*r[3];return u*=f,l*=f,d*=f,c*=2,m*=2,g*=2,t[0]=s+u+c,t[1]=i+l+m,t[2]=n+d+g,t}const v=function(){const t=[0,0,0],e=[0,0,0];return function(r,s){i(t,r),i(e,s),p(t,t),p(e,e);let n=x(t,e);return n>1?0:n<-1?Math.PI:Math.acos(n)}}();function A(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(t,e,r)=>{r.r(e),r.d(e,{add:()=>n,copy:()=>s,dot:()=>u,length:()=>o,lerp:()=>l,normalize:()=>h,scale:()=>a,set:()=>i});function s(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function i(t,e,r,s,i){return t[0]=e,t[1]=r,t[2]=s,t[3]=i,t}function n(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t}function a(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t}function o(t){let e=t[0],r=t[1],s=t[2],i=t[3];return Math.sqrt(e*e+r*r+s*s+i*i)}function h(t,e){let r=e[0],s=e[1],i=e[2],n=e[3],a=r*r+s*s+i*i+n*n;return a>0&&(a=1/Math.sqrt(a)),t[0]=r*a,t[1]=s*a,t[2]=i*a,t[3]=n*a,t}function u(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function l(t,e,r,s){let i=e[0],n=e[1],a=e[2],o=e[3];return t[0]=i+s*(r[0]-i),t[1]=n+s*(r[1]-n),t[2]=a+s*(r[2]-a),t[3]=o+s*(r[3]-o),t}}},(function(t){t.h=()=>"ad33f5f953a1a087f810"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,