/*! For license information please see main.7583a40fa58df6be1e5e.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateimmersive_website("main",{"./app/shaders/plane-fragment.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n}\n"},"./app/shaders/plane-vertex.glsl":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i="#define GLSLIFY 1\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"},"./app/components/Canvas/Home/Media.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>l});var i=s("./node_modules/ogl/src/core/Texture.js"),r=s("./node_modules/ogl/src/core/Program.js"),n=s("./node_modules/ogl/src/core/Mesh.js"),a=s("./node_modules/gsap/index.js"),h=s("./app/shaders/plane-fragment.glsl"),o=s("./app/shaders/plane-vertex.glsl");const l=class{constructor({element:t,geometry:e,gl:s,index:i,scene:r,sizes:n}){this.element=t,this.geometry=e,this.gl=s,this.scene=r,this.index=i,this.sizes=n,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){this.texture=new i.Texture(this.gl),this.image=new window.Image,this.image.crossOrigin="anonymous",this.image.src=this.element.getAttribute("data-src"),this.image.onload=t=>this.texture.image=this.image}createProgram(){this.program=new r.Program(this.gl,{fragment:h.default,vertex:o.default,uniforms:{tMap:{value:this.texture}}})}createMesh(){this.mesh=new n.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.rotation.z=a.default.utils.random(.03*-Math.PI,.03*Math.PI)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(t),this.updateX(),this.updateY()}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(t){this.bounds&&(this.updateX(t.x),this.updateY(t.y))}onResize(t,e){this.createBounds(t),this.extra={x:0,y:0},this.updateX(e?e.x:0),this.updateY(e?e.y:0)}}},"./app/components/Canvas/Home/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>o});var i=s("./app/components/Canvas/Home/Media.js"),r=s("./node_modules/lodash/map.js"),n=s("./node_modules/gsap/index.js"),a=s("./node_modules/ogl/src/core/Transform.js"),h=s("./node_modules/ogl/src/extras/Plane.js");const o=class{constructor({gl:t,scene:e,sizes:s}){this.group=new a.Transform,this.gl=t,this.sizes=s,this.galleryElement=document.querySelector(".home__gallery"),this.mediasElements=document.querySelectorAll(".home__gallery__media__image"),this.createGeometry(),this.createGallery(),this.group.setParent(e),this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0}}createGeometry(){this.geometry=new h.Plane(this.gl)}createGallery(){this.medias=r(this.mediasElements,((t,e)=>new i.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}onResize(t){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=t.sizes,this.gallerySizes={height:this.galleryBounds.height/window.innerHeight*this.sizes.height,width:this.galleryBounds.width/window.innerWidth*this.sizes.width},this.scroll.x=this.x.target=0,this.scroll.y=this.y.target=0,this.scroll&&r(this.medias,(e=>e.onResize(t,this.scroll)))}onTouchDown({x:t,y:e}){this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onTouchMove({x:t,y:e}){const s=t.start-t.end,i=e.start-e.end;this.x.target=this.scrollCurrent.x-s,this.y.target=this.scrollCurrent.y-i}onTouchUp({x:t,y:e}){}onWheel({pixelX:t,pixelY:e}){this.x.target+=t,this.y.target+=e}update(){this.galleryBounds&&(this.x.current=n.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=n.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="right":this.scroll.x>this.x.current&&(this.x.direction="left"),this.scroll.y<this.y.current?this.y.direction="top":this.scroll.y>this.y.current&&(this.y.direction="bottom"),this.scroll.x=this.x.current,this.scroll.y=this.y.current,r(this.medias,((t,e)=>{const s=t.mesh.scale.x/2,i=t.mesh.scale.y/2;if("left"===this.x.direction){t.mesh.position.x+s<-this.sizes.width/2&&(t.extra.x+=this.gallerySizes.width,t.mesh.rotation.z=n.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("right"===this.x.direction){t.mesh.position.x-s>this.sizes.width/2&&(t.extra.x-=this.gallerySizes.width,t.mesh.rotation.z=n.default.utils.random(.03*-Math.PI,.03*Math.PI))}if("top"===this.y.direction){t.mesh.position.y-i<-this.sizes.width/2&&(t.extra.y+=this.gallerySizes.height,t.mesh.rotation.z=n.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("bottom"===this.y.direction){t.mesh.position.y+i>this.sizes.width/2&&(t.extra.y-=this.gallerySizes.height,t.mesh.rotation.z=n.default.utils.random(.03*-Math.PI,.03*Math.PI))}t.update(this.scroll)})))}}},"./app/components/Canvas/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>h});var i=s("./node_modules/ogl/src/core/Renderer.js"),r=s("./node_modules/ogl/src/core/Camera.js"),n=s("./node_modules/ogl/src/core/Transform.js"),a=s("./app/components/Canvas/Home/index.js");class h{constructor({template:t}){this.template=t,this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize(),this.onRouteUpdate(this.template),this.createHome()}createRenderer(){this.renderer=new i.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new r.Camera(this.gl),this.camera.position.z=5}createHome(){this.home=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}createScene(){this.scene=new n.Transform}onRouteUpdate(t){"home"===t&&this.createHome()}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const t=this.camera.fov*(Math.PI/180),e=2*Math.tan(t/2)*this.camera.position.z,s=e*this.camera.aspect;this.sizes={height:e,width:s},this.home&&this.home.onResize({sizes:this.sizes})}onTouchDown(t){this.isDown=!0,this.x.start=t.touches?t.touches[0].clientX:t.clientX,this.y.start=t.touches?t.touches[0].clientY:t.clientY,this.home&&this.home.onTouchDown({x:this.x,y:this.y})}onTouchMove(t){if(!this.isDown)return;const e=t.touches?t.touches[0].clientX:t.clientX,s=t.touches?t.touches[0].clientY:t.clientY;this.x.end=e,this.y.end=s,this.home&&this.home.onTouchMove({x:this.x,y:this.y})}onTouchUp(t){this.isDown=!1;const e=t.touches?t.touches[0].clientX:t.clientX,s=t.touches?t.touches[0].clientY:t.clientY;this.x.end=e,this.y.end=s,this.home&&this.home.onTouchUp({x:this.x,y:this.y})}onWheel(t){this.home&&this.home.onWheel(t)}update(){this.home&&this.home.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./node_modules/ogl/src/core/Camera.js":(t,e,s)=>{s.r(e),s.d(e,{Camera:()=>l});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/math/Mat4.js"),n=s("./node_modules/ogl/src/math/Vec3.js");const a=new r.Mat4,h=new n.Vec3,o=new n.Vec3;class l extends i.Transform{constructor(t,{near:e=.1,far:s=100,fov:i=45,aspect:a=1,left:h,right:o,bottom:l,top:u,zoom:c=1}={}){super(),Object.assign(this,{near:e,far:s,fov:i,aspect:a,left:h,right:o,bottom:l,top:u,zoom:c}),this.projectionMatrix=new r.Mat4,this.viewMatrix=new r.Mat4,this.projectionViewMatrix=new r.Mat4,this.worldPosition=new n.Vec3,this.type=h||o?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:t=this.near,far:e=this.far,fov:s=this.fov,aspect:i=this.aspect}={}){return Object.assign(this,{near:t,far:e,fov:s,aspect:i}),this.projectionMatrix.fromPerspective({fov:s*(Math.PI/180),aspect:i,near:t,far:e}),this.type="perspective",this}orthographic({near:t=this.near,far:e=this.far,left:s=this.left,right:i=this.right,bottom:r=this.bottom,top:n=this.top,zoom:a=this.zoom}={}){return Object.assign(this,{near:t,far:e,left:s,right:i,bottom:r,top:n,zoom:a}),s/=a,i/=a,r/=a,n/=a,this.projectionMatrix.fromOrthogonal({left:s,right:i,bottom:r,top:n,near:t,far:e}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(t){return super.lookAt(t,!0),this}project(t){return t.applyMatrix4(this.viewMatrix),t.applyMatrix4(this.projectionMatrix),this}unproject(t){return t.applyMatrix4(a.inverse(this.projectionMatrix)),t.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3]);const t=this.projectionViewMatrix;this.frustum[0].set(t[3]-t[0],t[7]-t[4],t[11]-t[8]).constant=t[15]-t[12],this.frustum[1].set(t[3]+t[0],t[7]+t[4],t[11]+t[8]).constant=t[15]+t[12],this.frustum[2].set(t[3]+t[1],t[7]+t[5],t[11]+t[9]).constant=t[15]+t[13],this.frustum[3].set(t[3]-t[1],t[7]-t[5],t[11]-t[9]).constant=t[15]-t[13],this.frustum[4].set(t[3]-t[2],t[7]-t[6],t[11]-t[10]).constant=t[15]-t[14],this.frustum[5].set(t[3]+t[2],t[7]+t[6],t[11]+t[10]).constant=t[15]+t[14];for(let t=0;t<6;t++){const e=1/this.frustum[t].distance();this.frustum[t].multiply(e),this.frustum[t].constant*=e}}frustumIntersectsMesh(t){if(!t.geometry.attributes.position)return!0;if(t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere(),!t.geometry.bounds)return!0;const e=h;e.copy(t.geometry.bounds.center),e.applyMatrix4(t.worldMatrix);const s=t.geometry.bounds.radius*t.worldMatrix.getMaxScaleOnAxis();return this.frustumIntersectsSphere(e,s)}frustumIntersectsSphere(t,e){const s=o;for(let i=0;i<6;i++){const r=this.frustum[i];if(s.copy(r).dot(t)+r.constant<-e)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,s)=>{s.r(e),s.d(e,{Geometry:()=>l});var i=s("./node_modules/ogl/src/math/Vec3.js"),r=s("./node_modules/console-browserify/index.js");const n=new i.Vec3;let a=1,h=1,o=!1;class l{constructor(t,e={}){t.canvas||r.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=a++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=h++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return r.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:s})=>{if(!this.attributes[e])return void r.warn(`active attribute ${e} not being supplied`);const i=this.attributes[e];this.gl.bindBuffer(i.target,i.buffer),this.glState.boundBuffer=i.buffer;let n=1;35674===s&&(n=2),35675===s&&(n=3),35676===s&&(n=4);const a=i.size/n,h=1===n?0:n*n*n,o=1===n?0:n*n;for(let e=0;e<n;e++)this.gl.vertexAttribPointer(t+e,a,i.type,i.normalized,i.stride+h,i.offset+e*o),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,i.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const s=this.attributes[e];s.needsUpdate&&this.updateAttribute(s)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:o?void 0:(r.warn("No position buffer data found to compute bounds"),o=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,s=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||(this.bounds={min:new i.Vec3,max:new i.Vec3,center:new i.Vec3,scale:new i.Vec3,radius:1/0});const r=this.bounds.min,n=this.bounds.max,a=this.bounds.center,h=this.bounds.scale;r.set(1/0),n.set(-1/0);for(let t=0,i=e.length;t<i;t+=s){const s=e[t],i=e[t+1],a=e[t+2];r.x=Math.min(s,r.x),r.y=Math.min(i,r.y),r.z=Math.min(a,r.z),n.x=Math.max(s,n.x),n.y=Math.max(i,n.y),n.z=Math.max(a,n.z)}h.sub(n,r),a.add(r,n).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,s=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||this.computeBoundingBox(t);let i=0;for(let t=0,r=e.length;t<r;t+=s)n.fromArray(e,t),i=Math.max(i,this.bounds.center.squaredDistance(n));this.bounds.radius=Math.sqrt(i)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,s)=>{s.r(e),s.d(e,{Mesh:()=>o});var i=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/math/Mat3.js"),n=s("./node_modules/ogl/src/math/Mat4.js"),a=s("./node_modules/console-browserify/index.js");let h=0;class o extends i.Transform{constructor(t,{geometry:e,program:s,mode:i=t.TRIANGLES,frustumCulled:o=!0,renderOrder:l=0}={}){super(),t.canvas||a.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=h++,this.geometry=e,this.program=s,this.mode=i,this.frustumCulled=o,this.renderOrder=l,this.modelViewMatrix=new n.Mat4,this.normalMatrix=new r.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t}))),t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,s)=>{s.r(e),s.d(e,{Program:()=>a});var i=s("./node_modules/console-browserify/index.js");let r=1;const n={};class a{constructor(t,{vertex:e,fragment:s,uniforms:n={},transparent:a=!1,cullFace:h=t.BACK,frontFace:l=t.CCW,depthTest:u=!0,depthWrite:c=!0,depthFunc:d=t.LESS}={}){t.canvas||i.error("gl not passed as fist argument to Program"),this.gl=t,this.uniforms=n,this.id=r++,e||i.warn("vertex shader not supplied"),s||i.warn("fragment shader not supplied"),this.transparent=a,this.cullFace=h,this.frontFace=l,this.depthTest=u,this.depthWrite=c,this.depthFunc=d,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const g=t.createShader(t.VERTEX_SHADER);t.shaderSource(g,e),t.compileShader(g),""!==t.getShaderInfoLog(g)&&i.warn(`${t.getShaderInfoLog(g)}\nVertex Shader\n${o(e)}`);const m=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(m,s),t.compileShader(m),""!==t.getShaderInfoLog(m)&&i.warn(`${t.getShaderInfoLog(m)}\nFragment Shader\n${o(s)}`),this.program=t.createProgram(),t.attachShader(this.program,g),t.attachShader(this.program,m),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return i.warn(t.getProgramInfoLog(this.program));t.deleteShader(g),t.deleteShader(m),this.uniformLocations=new Map;let p=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<p;e++){let s=t.getActiveUniform(this.program,e);this.uniformLocations.set(s,t.getUniformLocation(this.program,s.name));const i=s.name.match(/(\w+)/g);s.uniformName=i[0],3===i.length?(s.isStructArray=!0,s.structIndex=Number(i[1]),s.structProperty=i[2]):2===i.length&&isNaN(Number(i[1]))&&(s.isStruct=!0,s.structProperty=i[1])}this.attributeLocations=new Map;const f=[],x=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<x;e++){const s=t.getActiveAttrib(this.program,e),i=t.getAttribLocation(this.program,s.name);-1!==i&&(f[i]=s.name,this.attributeLocations.set(s,i))}this.attributeOrder=f.join("")}setBlendFunc(t,e,s,i){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=s,this.blendFunc.dstAlpha=i,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,s)=>{let i=s.uniformName,r=this.uniforms[i];if(s.isStruct&&(r=r[s.structProperty],i+=`.${s.structProperty}`),s.isStructArray&&(r=r[s.structIndex][s.structProperty],i+=`[${s.structIndex}].${s.structProperty}`),!r)return u(`Active uniform ${i} has not been supplied`);if(r&&void 0===r.value)return u(`${i} uniform is missing a value parameter`);if(r.value.texture)return e+=1,r.value.update(e),h(this.gl,s.type,t,e);if(r.value.length&&r.value[0].texture){const i=[];return r.value.forEach((t=>{e+=1,t.update(e),i.push(e)})),h(this.gl,s.type,t,i)}h(this.gl,s.type,t,r.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function h(t,e,s,i){i=i.length?function(t){const e=t.length,s=t[0].length;if(void 0===s)return t;const i=e*s;let r=n[i];r||(n[i]=r=new Float32Array(i));for(let i=0;i<e;i++)r.set(t[i],i*s);return r}(i):i;const r=t.renderer.state.uniformLocations.get(s);if(i.length)if(void 0===r||r.length!==i.length)t.renderer.state.uniformLocations.set(s,i.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let s=0,i=t.length;s<i;s++)if(t[s]!==e[s])return!1;return!0}(r,i))return;r.set?r.set(i):function(t,e){for(let s=0,i=t.length;s<i;s++)t[s]=e[s]}(r,i),t.renderer.state.uniformLocations.set(s,r)}else{if(r===i)return;t.renderer.state.uniformLocations.set(s,i)}switch(e){case 5126:return i.length?t.uniform1fv(s,i):t.uniform1f(s,i);case 35664:return t.uniform2fv(s,i);case 35665:return t.uniform3fv(s,i);case 35666:return t.uniform4fv(s,i);case 35670:case 5124:case 35678:case 35680:return i.length?t.uniform1iv(s,i):t.uniform1i(s,i);case 35671:case 35667:return t.uniform2iv(s,i);case 35672:case 35668:return t.uniform3iv(s,i);case 35673:case 35669:return t.uniform4iv(s,i);case 35674:return t.uniformMatrix2fv(s,!1,i);case 35675:return t.uniformMatrix3fv(s,!1,i);case 35676:return t.uniformMatrix4fv(s,!1,i)}}function o(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let l=0;function u(t){l>100||(i.warn(t),l++,l>100&&i.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(t,e,s)=>{s.r(e),s.d(e,{Renderer:()=>h});var i=s("./node_modules/ogl/src/math/Vec3.js"),r=s("./node_modules/console-browserify/index.js");const n=new i.Vec3;let a=1;class h{constructor({canvas:t=document.createElement("canvas"),width:e=300,height:s=150,dpr:i=1,alpha:n=!1,depth:h=!0,stencil:o=!1,antialias:l=!1,premultipliedAlpha:u=!1,preserveDrawingBuffer:c=!1,powerPreference:d="default",autoClear:g=!0,webgl:m=2}={}){const p={alpha:n,depth:h,stencil:o,antialias:l,premultipliedAlpha:u,preserveDrawingBuffer:c,powerPreference:d};this.dpr=i,this.alpha=n,this.color=!0,this.depth=h,this.stencil=o,this.premultipliedAlpha=u,this.autoClear=g,this.id=a++,2===m&&(this.gl=t.getContext("webgl2",p)),this.isWebgl2=!!this.gl,this.gl||(this.gl=t.getContext("webgl",p)),this.gl||r.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(e,s),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(t,e){this.width=t,this.height=e,this.gl.canvas.width=t*this.dpr,this.gl.canvas.height=e*this.dpr,Object.assign(this.gl.canvas.style,{width:t+"px",height:e+"px"})}setViewport(t,e,s=0,i=0){this.state.viewport.width===t&&this.state.viewport.height===e||(this.state.viewport.width=t,this.state.viewport.height=e,this.state.viewport.x=s,this.state.viewport.y=i,this.gl.viewport(s,i,t,e))}setScissor(t,e,s=0,i=0){this.gl.scissor(s,i,t,e)}enable(t){!0!==this.state[t]&&(this.gl.enable(t),this.state[t]=!0)}disable(t){!1!==this.state[t]&&(this.gl.disable(t),this.state[t]=!1)}setBlendFunc(t,e,s,i){this.state.blendFunc.src===t&&this.state.blendFunc.dst===e&&this.state.blendFunc.srcAlpha===s&&this.state.blendFunc.dstAlpha===i||(this.state.blendFunc.src=t,this.state.blendFunc.dst=e,this.state.blendFunc.srcAlpha=s,this.state.blendFunc.dstAlpha=i,void 0!==s?this.gl.blendFuncSeparate(t,e,s,i):this.gl.blendFunc(t,e))}setBlendEquation(t,e){t=t||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===t&&this.state.blendEquation.modeAlpha===e||(this.state.blendEquation.modeRGB=t,this.state.blendEquation.modeAlpha=e,void 0!==e?this.gl.blendEquationSeparate(t,e):this.gl.blendEquation(t))}setCullFace(t){this.state.cullFace!==t&&(this.state.cullFace=t,this.gl.cullFace(t))}setFrontFace(t){this.state.frontFace!==t&&(this.state.frontFace=t,this.gl.frontFace(t))}setDepthMask(t){this.state.depthMask!==t&&(this.state.depthMask=t,this.gl.depthMask(t))}setDepthFunc(t){this.state.depthFunc!==t&&(this.state.depthFunc=t,this.gl.depthFunc(t))}activeTexture(t){this.state.activeTextureUnit!==t&&(this.state.activeTextureUnit=t,this.gl.activeTexture(this.gl.TEXTURE0+t))}bindFramebuffer({target:t=this.gl.FRAMEBUFFER,buffer:e=null}={}){this.state.framebuffer!==e&&(this.state.framebuffer=e,this.gl.bindFramebuffer(t,e))}getExtension(t,e,s){return e&&this.gl[e]?this.gl[e].bind(this.gl):(this.extensions[t]||(this.extensions[t]=this.gl.getExtension(t)),e?this.extensions[t]?this.extensions[t][s].bind(this.extensions[t]):null:this.extensions[t])}sortOpaque(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:t.zDepth!==e.zDepth?t.zDepth-e.zDepth:e.id-t.id}sortTransparent(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.zDepth!==e.zDepth?e.zDepth-t.zDepth:e.id-t.id}sortUI(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:e.id-t.id}getRenderList({scene:t,camera:e,frustumCull:s,sort:i}){let r=[];if(e&&s&&e.updateFrustum(),t.traverse((t=>{if(!t.visible)return!0;t.draw&&(s&&t.frustumCulled&&e&&!e.frustumIntersectsMesh(t)||r.push(t))})),i){const t=[],s=[],i=[];r.forEach((r=>{r.program.transparent?r.program.depthTest?s.push(r):i.push(r):t.push(r),r.zDepth=0,0===r.renderOrder&&r.program.depthTest&&e&&(r.worldMatrix.getTranslation(n),n.applyMatrix4(e.projectionViewMatrix),r.zDepth=n.z)})),t.sort(this.sortOpaque),s.sort(this.sortTransparent),i.sort(this.sortUI),r=t.concat(s,i)}return r}render({scene:t,camera:e,target:s=null,update:i=!0,sort:r=!0,frustumCull:n=!0,clear:a}){null===s?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(s),this.setViewport(s.width,s.height)),(a||this.autoClear&&!1!==a)&&(!this.depth||s&&!s.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),i&&t.updateMatrixWorld(),e&&e.updateMatrixWorld();this.getRenderList({scene:t,camera:e,frustumCull:n,sort:r}).forEach((t=>{t.draw({camera:e})}))}}},"./node_modules/ogl/src/core/Texture.js":(t,e,s)=>{s.r(e),s.d(e,{Texture:()=>a});const i=new Uint8Array(4);function r(t){return 0==(t&t-1)}let n=1;class a{constructor(t,{image:e,target:s=t.TEXTURE_2D,type:i=t.UNSIGNED_BYTE,format:r=t.RGBA,internalFormat:a=r,wrapS:h=t.CLAMP_TO_EDGE,wrapT:o=t.CLAMP_TO_EDGE,generateMipmaps:l=!0,minFilter:u=(l?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:c=t.LINEAR,premultiplyAlpha:d=!1,unpackAlignment:g=4,flipY:m=s==t.TEXTURE_2D,anisotropy:p=0,level:f=0,width:x,height:M=x}={}){this.gl=t,this.id=n++,this.image=e,this.target=s,this.type=i,this.format=r,this.internalFormat=a,this.minFilter=u,this.magFilter=c,this.wrapS=h,this.wrapT=o,this.generateMipmaps=l,this.premultiplyAlpha=d,this.unpackAlignment=g,this.flipY=m,this.anisotropy=Math.min(p,this.gl.renderer.parameters.maxAnisotropy),this.level=f,this.width=x,this.height=M,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||r(this.image.width)&&r(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,i);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,i);this.store.image=this.image}}}},"./node_modules/ogl/src/core/Transform.js":(t,e,s)=>{s.r(e),s.d(e,{Transform:()=>h});var i=s("./node_modules/ogl/src/math/Vec3.js"),r=s("./node_modules/ogl/src/math/Quat.js"),n=s("./node_modules/ogl/src/math/Mat4.js"),a=s("./node_modules/ogl/src/math/Euler.js");class h{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new n.Mat4,this.worldMatrix=new n.Mat4,this.matrixAutoUpdate=!0,this.position=new i.Vec3,this.quaternion=new r.Quat,this.scale=new i.Vec3(1),this.rotation=new a.Euler,this.up=new i.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(t,e=!0){this.parent&&t!==this.parent&&this.parent.removeChild(this,!1),this.parent=t,e&&t&&t.addChild(this,!1)}addChild(t,e=!0){~this.children.indexOf(t)||this.children.push(t),e&&t.setParent(this,!1)}removeChild(t,e=!0){~this.children.indexOf(t)&&this.children.splice(this.children.indexOf(t),1),e&&t.setParent(null,!1)}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||t)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,t=!0);for(let e=0,s=this.children.length;e<s;e++)this.children[e].updateMatrixWorld(t)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(t){if(!t(this))for(let e=0,s=this.children.length;e<s;e++)this.children[e].traverse(t)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(t,e=!1){e?this.matrix.lookAt(this.position,t,this.up):this.matrix.lookAt(t,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,s)=>{s.r(e),s.d(e,{Plane:()=>r});var i=s("./node_modules/ogl/src/core/Geometry.js");class r extends i.Geometry{constructor(t,{width:e=1,height:s=1,widthSegments:i=1,heightSegments:n=1,attributes:a={}}={}){const h=i,o=n,l=(h+1)*(o+1),u=h*o*6,c=new Float32Array(3*l),d=new Float32Array(3*l),g=new Float32Array(2*l),m=u>65536?new Uint32Array(u):new Uint16Array(u);r.buildPlane(c,d,g,m,e,s,0,h,o),Object.assign(a,{position:{size:3,data:c},normal:{size:3,data:d},uv:{size:2,data:g},index:{data:m}}),super(t,a)}static buildPlane(t,e,s,i,r,n,a,h,o,l=0,u=1,c=2,d=1,g=-1,m=0,p=0){const f=m,x=r/h,M=n/o;for(let y=0;y<=o;y++){let w=y*M-n/2;for(let n=0;n<=h;n++,m++){let M=n*x-r/2;if(t[3*m+l]=M*d,t[3*m+u]=w*g,t[3*m+c]=a/2,e[3*m+l]=0,e[3*m+u]=0,e[3*m+c]=a>=0?1:-1,s[2*m]=n/h,s[2*m+1]=1-y/o,y===o||n===h)continue;let b=f+n+y*(h+1),E=f+n+(y+1)*(h+1),_=f+n+(y+1)*(h+1)+1,A=f+n+y*(h+1)+1;i[6*p]=b,i[6*p+1]=E,i[6*p+2]=A,i[6*p+3]=E,i[6*p+4]=_,i[6*p+5]=A,p++}}}}},"./node_modules/ogl/src/math/Euler.js":(t,e,s)=>{s.r(e),s.d(e,{Euler:()=>n});var i=s("./node_modules/ogl/src/math/functions/EulerFunc.js");const r=new(s("./node_modules/ogl/src/math/Mat4.js").Mat4);class n extends Array{constructor(t=0,e=t,s=t,i="YXZ"){return super(t,e,s),this.order=i,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set(t,e=t,s=t){return t.length?this.copy(t):(this[0]=t,this[1]=e,this[2]=s,this.onChange(),this)}copy(t){return this[0]=t[0],this[1]=t[1],this[2]=t[2],this.onChange(),this}reorder(t){return this.order=t,this.onChange(),this}fromRotationMatrix(t,e=this.order){return i.fromRotationMatrix(this,t,e),this}fromQuaternion(t,e=this.order){return r.fromQuaternion(t),this.fromRotationMatrix(r,e)}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,s)=>{s.r(e),s.d(e,{Mat3:()=>r});var i=s("./node_modules/ogl/src/math/functions/Mat3Func.js");class r extends Array{constructor(t=1,e=0,s=0,i=0,r=1,n=0,a=0,h=0,o=1){return super(t,e,s,i,r,n,a,h,o),this}set(t,e,s,r,n,a,h,o,l){return t.length?this.copy(t):(i.set(this,t,e,s,r,n,a,h,o,l),this)}translate(t,e=this){return i.translate(this,e,t),this}rotate(t,e=this){return i.rotate(this,e,t),this}scale(t,e=this){return i.scale(this,e,t),this}multiply(t,e){return e?i.multiply(this,t,e):i.multiply(this,this,t),this}identity(){return i.identity(this),this}copy(t){return i.copy(this,t),this}fromMatrix4(t){return i.fromMat4(this,t),this}fromQuaternion(t){return i.fromQuat(this,t),this}fromBasis(t,e,s){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],s[0],s[1],s[2]),this}inverse(t=this){return i.invert(this,t),this}getNormalMatrix(t){return i.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/Mat4.js":(t,e,s)=>{s.r(e),s.d(e,{Mat4:()=>r});var i=s("./node_modules/ogl/src/math/functions/Mat4Func.js");class r extends Array{constructor(t=1,e=0,s=0,i=0,r=0,n=1,a=0,h=0,o=0,l=0,u=1,c=0,d=0,g=0,m=0,p=1){return super(t,e,s,i,r,n,a,h,o,l,u,c,d,g,m,p),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(t){this[12]=t}set y(t){this[13]=t}set z(t){this[14]=t}set w(t){this[15]=t}set(t,e,s,r,n,a,h,o,l,u,c,d,g,m,p,f){return t.length?this.copy(t):(i.set(this,t,e,s,r,n,a,h,o,l,u,c,d,g,m,p,f),this)}translate(t,e=this){return i.translate(this,e,t),this}rotate(t,e,s=this){return i.rotate(this,s,t,e),this}scale(t,e=this){return i.scale(this,e,"number"==typeof t?[t,t,t]:t),this}multiply(t,e){return e?i.multiply(this,t,e):i.multiply(this,this,t),this}identity(){return i.identity(this),this}copy(t){return i.copy(this,t),this}fromPerspective({fov:t,aspect:e,near:s,far:r}={}){return i.perspective(this,t,e,s,r),this}fromOrthogonal({left:t,right:e,bottom:s,top:r,near:n,far:a}){return i.ortho(this,t,e,s,r,n,a),this}fromQuaternion(t){return i.fromQuat(this,t),this}setPosition(t){return this.x=t[0],this.y=t[1],this.z=t[2],this}inverse(t=this){return i.invert(this,t),this}compose(t,e,s){return i.fromRotationTranslationScale(this,t,e,s),this}getRotation(t){return i.getRotation(t,this),this}getTranslation(t){return i.getTranslation(t,this),this}getScaling(t){return i.getScaling(t,this),this}getMaxScaleOnAxis(){return i.getMaxScaleOnAxis(this)}lookAt(t,e,s){return i.targetTo(this,t,e,s),this}determinant(){return i.determinant(this)}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this[4]=t[e+4],this[5]=t[e+5],this[6]=t[e+6],this[7]=t[e+7],this[8]=t[e+8],this[9]=t[e+9],this[10]=t[e+10],this[11]=t[e+11],this[12]=t[e+12],this[13]=t[e+13],this[14]=t[e+14],this[15]=t[e+15],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t[e+4]=this[4],t[e+5]=this[5],t[e+6]=this[6],t[e+7]=this[7],t[e+8]=this[8],t[e+9]=this[9],t[e+10]=this[10],t[e+11]=this[11],t[e+12]=this[12],t[e+13]=this[13],t[e+14]=this[14],t[e+15]=this[15],t}}},"./node_modules/ogl/src/math/Quat.js":(t,e,s)=>{s.r(e),s.d(e,{Quat:()=>r});var i=s("./node_modules/ogl/src/math/functions/QuatFunc.js");class r extends Array{constructor(t=0,e=0,s=0,i=1){return super(t,e,s,i),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set w(t){this[3]=t,this.onChange()}identity(){return i.identity(this),this.onChange(),this}set(t,e,s,r){return t.length?this.copy(t):(i.set(this,t,e,s,r),this.onChange(),this)}rotateX(t){return i.rotateX(this,this,t),this.onChange(),this}rotateY(t){return i.rotateY(this,this,t),this.onChange(),this}rotateZ(t){return i.rotateZ(this,this,t),this.onChange(),this}inverse(t=this){return i.invert(this,t),this.onChange(),this}conjugate(t=this){return i.conjugate(this,t),this.onChange(),this}copy(t){return i.copy(this,t),this.onChange(),this}normalize(t=this){return i.normalize(this,t),this.onChange(),this}multiply(t,e){return e?i.multiply(this,t,e):i.multiply(this,this,t),this.onChange(),this}dot(t){return i.dot(this,t)}fromMatrix3(t){return i.fromMat3(this,t),this.onChange(),this}fromEuler(t){return i.fromEuler(this,t,t.order),this}fromAxisAngle(t,e){return i.setAxisAngle(this,t,e),this}slerp(t,e){return i.slerp(this,this,t,e),this}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}},"./node_modules/ogl/src/math/Vec3.js":(t,e,s)=>{s.r(e),s.d(e,{Vec3:()=>r});var i=s("./node_modules/ogl/src/math/functions/Vec3Func.js");class r extends Array{constructor(t=0,e=t,s=t){return super(t,e,s),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,e=t,s=t){return t.length?this.copy(t):(i.set(this,t,e,s),this)}copy(t){return i.copy(this,t),this}add(t,e){return e?i.add(this,t,e):i.add(this,this,t),this}sub(t,e){return e?i.subtract(this,t,e):i.subtract(this,this,t),this}multiply(t){return t.length?i.multiply(this,this,t):i.scale(this,this,t),this}divide(t){return t.length?i.divide(this,this,t):i.scale(this,this,1/t),this}inverse(t=this){return i.inverse(this,t),this}len(){return i.length(this)}distance(t){return t?i.distance(this,t):i.length(this)}squaredLen(){return i.squaredLength(this)}squaredDistance(t){return t?i.squaredDistance(this,t):i.squaredLength(this)}negate(t=this){return i.negate(this,t),this}cross(t,e){return e?i.cross(this,t,e):i.cross(this,this,t),this}scale(t){return i.scale(this,this,t),this}normalize(){return i.normalize(this,this),this}dot(t){return i.dot(this,t)}equals(t){return i.exactEquals(this,t)}applyMatrix3(t){return i.transformMat3(this,this,t),this}applyMatrix4(t){return i.transformMat4(this,this,t),this}scaleRotateMatrix4(t){return i.scaleRotateMat4(this,this,t),this}applyQuaternion(t){return i.transformQuat(this,this,t),this}angle(t){return i.angle(this,t)}lerp(t,e){return i.lerp(this,this,t,e),this}clone(){return new r(this[0],this[1],this[2])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}transformDirection(t){const e=this[0],s=this[1],i=this[2];return this[0]=t[0]*e+t[4]*s+t[8]*i,this[1]=t[1]*e+t[5]*s+t[9]*i,this[2]=t[2]*e+t[6]*s+t[10]*i,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(t,e,s)=>{function i(t,e,s="YXZ"){return"XYZ"===s?(t[1]=Math.asin(Math.min(Math.max(e[8],-1),1)),Math.abs(e[8])<.99999?(t[0]=Math.atan2(-e[9],e[10]),t[2]=Math.atan2(-e[4],e[0])):(t[0]=Math.atan2(e[6],e[5]),t[2]=0)):"YXZ"===s?(t[0]=Math.asin(-Math.min(Math.max(e[9],-1),1)),Math.abs(e[9])<.99999?(t[1]=Math.atan2(e[8],e[10]),t[2]=Math.atan2(e[1],e[5])):(t[1]=Math.atan2(-e[2],e[0]),t[2]=0)):"ZXY"===s?(t[0]=Math.asin(Math.min(Math.max(e[6],-1),1)),Math.abs(e[6])<.99999?(t[1]=Math.atan2(-e[2],e[10]),t[2]=Math.atan2(-e[4],e[5])):(t[1]=0,t[2]=Math.atan2(e[1],e[0]))):"ZYX"===s?(t[1]=Math.asin(-Math.min(Math.max(e[2],-1),1)),Math.abs(e[2])<.99999?(t[0]=Math.atan2(e[6],e[10]),t[2]=Math.atan2(e[1],e[0])):(t[0]=0,t[2]=Math.atan2(-e[4],e[5]))):"YZX"===s?(t[2]=Math.asin(Math.min(Math.max(e[1],-1),1)),Math.abs(e[1])<.99999?(t[0]=Math.atan2(-e[9],e[5]),t[1]=Math.atan2(-e[2],e[0])):(t[0]=0,t[1]=Math.atan2(e[8],e[10]))):"XZY"===s&&(t[2]=Math.asin(-Math.min(Math.max(e[4],-1),1)),Math.abs(e[4])<.99999?(t[0]=Math.atan2(e[6],e[5]),t[1]=Math.atan2(e[8],e[0])):(t[0]=Math.atan2(-e[9],e[10]),t[1]=0)),t}s.r(e),s.d(e,{fromRotationMatrix:()=>i})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>x,copy:()=>n,determinant:()=>u,fromMat4:()=>i,fromQuat:()=>r,identity:()=>h,invert:()=>l,multiply:()=>c,multiplyScalar:()=>y,normalFromMat4:()=>p,projection:()=>f,rotate:()=>g,scale:()=>m,set:()=>a,subtract:()=>M,translate:()=>d,transpose:()=>o});function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function r(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],a=s+s,h=i+i,o=r+r,l=s*a,u=i*a,c=i*h,d=r*a,g=r*h,m=r*o,p=n*a,f=n*h,x=n*o;return t[0]=1-c-m,t[3]=u-x,t[6]=d+f,t[1]=u+x,t[4]=1-l-m,t[7]=g-p,t[2]=d-f,t[5]=g+p,t[8]=1-l-c,t}function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function a(t,e,s,i,r,n,a,h,o,l){return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t[4]=n,t[5]=a,t[6]=h,t[7]=o,t[8]=l,t}function h(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function o(t,e){if(t===e){let s=e[1],i=e[2],r=e[5];t[1]=e[3],t[2]=e[6],t[3]=s,t[5]=e[7],t[6]=i,t[7]=r}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function l(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],a=e[4],h=e[5],o=e[6],l=e[7],u=e[8],c=u*a-h*l,d=-u*n+h*o,g=l*n-a*o,m=s*c+i*d+r*g;return m?(m=1/m,t[0]=c*m,t[1]=(-u*i+r*l)*m,t[2]=(h*i-r*a)*m,t[3]=d*m,t[4]=(u*s-r*o)*m,t[5]=(-h*s+r*n)*m,t[6]=g*m,t[7]=(-l*s+i*o)*m,t[8]=(a*s-i*n)*m,t):null}function u(t){let e=t[0],s=t[1],i=t[2],r=t[3],n=t[4],a=t[5],h=t[6],o=t[7],l=t[8];return e*(l*n-a*o)+s*(-l*r+a*h)+i*(o*r-n*h)}function c(t,e,s){let i=e[0],r=e[1],n=e[2],a=e[3],h=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=s[0],g=s[1],m=s[2],p=s[3],f=s[4],x=s[5],M=s[6],y=s[7],w=s[8];return t[0]=d*i+g*a+m*l,t[1]=d*r+g*h+m*u,t[2]=d*n+g*o+m*c,t[3]=p*i+f*a+x*l,t[4]=p*r+f*h+x*u,t[5]=p*n+f*o+x*c,t[6]=M*i+y*a+w*l,t[7]=M*r+y*h+w*u,t[8]=M*n+y*o+w*c,t}function d(t,e,s){let i=e[0],r=e[1],n=e[2],a=e[3],h=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=s[0],g=s[1];return t[0]=i,t[1]=r,t[2]=n,t[3]=a,t[4]=h,t[5]=o,t[6]=d*i+g*a+l,t[7]=d*r+g*h+u,t[8]=d*n+g*o+c,t}function g(t,e,s){let i=e[0],r=e[1],n=e[2],a=e[3],h=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=Math.sin(s),g=Math.cos(s);return t[0]=g*i+d*a,t[1]=g*r+d*h,t[2]=g*n+d*o,t[3]=g*a-d*i,t[4]=g*h-d*r,t[5]=g*o-d*n,t[6]=l,t[7]=u,t[8]=c,t}function m(t,e,s){let i=s[0],r=s[1];return t[0]=i*e[0],t[1]=i*e[1],t[2]=i*e[2],t[3]=r*e[3],t[4]=r*e[4],t[5]=r*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function p(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],a=e[4],h=e[5],o=e[6],l=e[7],u=e[8],c=e[9],d=e[10],g=e[11],m=e[12],p=e[13],f=e[14],x=e[15],M=s*h-i*a,y=s*o-r*a,w=s*l-n*a,b=i*o-r*h,E=i*l-n*h,_=r*l-n*o,A=u*p-c*m,v=u*f-d*m,T=u*x-g*m,F=c*f-d*p,S=c*x-g*p,R=d*x-g*f,C=M*R-y*S+w*F+b*T-E*v+_*A;return C?(C=1/C,t[0]=(h*R-o*S+l*F)*C,t[1]=(o*T-a*R-l*v)*C,t[2]=(a*S-h*T+l*A)*C,t[3]=(r*S-i*R-n*F)*C,t[4]=(s*R-r*T+n*v)*C,t[5]=(i*T-s*S-n*A)*C,t[6]=(p*_-f*E+x*b)*C,t[7]=(f*w-m*_-x*y)*C,t[8]=(m*E-p*w+x*M)*C,t):null}function f(t,e,s){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/s,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function x(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t[4]=e[4]+s[4],t[5]=e[5]+s[5],t[6]=e[6]+s[6],t[7]=e[7]+s[7],t[8]=e[8]+s[8],t}function M(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t[3]=e[3]-s[3],t[4]=e[4]-s[4],t[5]=e[5]-s[5],t[6]=e[6]-s[6],t[7]=e[7]-s[7],t[8]=e[8]-s[8],t}function y(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*s,t}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>E,copy:()=>i,determinant:()=>o,fromQuat:()=>M,fromRotationTranslationScale:()=>x,getMaxScaleOnAxis:()=>p,getRotation:()=>f,getScaling:()=>m,getTranslation:()=>g,identity:()=>n,invert:()=>h,multiply:()=>l,multiplyScalar:()=>A,ortho:()=>w,perspective:()=>y,rotate:()=>d,scale:()=>c,set:()=>r,subtract:()=>_,targetTo:()=>b,translate:()=>u,transpose:()=>a});function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function r(t,e,s,i,r,n,a,h,o,l,u,c,d,g,m,p,f){return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t[4]=n,t[5]=a,t[6]=h,t[7]=o,t[8]=l,t[9]=u,t[10]=c,t[11]=d,t[12]=g,t[13]=m,t[14]=p,t[15]=f,t}function n(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function a(t,e){if(t===e){let s=e[1],i=e[2],r=e[3],n=e[6],a=e[7],h=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=s,t[6]=e[9],t[7]=e[13],t[8]=i,t[9]=n,t[11]=e[14],t[12]=r,t[13]=a,t[14]=h}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function h(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],a=e[4],h=e[5],o=e[6],l=e[7],u=e[8],c=e[9],d=e[10],g=e[11],m=e[12],p=e[13],f=e[14],x=e[15],M=s*h-i*a,y=s*o-r*a,w=s*l-n*a,b=i*o-r*h,E=i*l-n*h,_=r*l-n*o,A=u*p-c*m,v=u*f-d*m,T=u*x-g*m,F=c*f-d*p,S=c*x-g*p,R=d*x-g*f,C=M*R-y*S+w*F+b*T-E*v+_*A;return C?(C=1/C,t[0]=(h*R-o*S+l*F)*C,t[1]=(r*S-i*R-n*F)*C,t[2]=(p*_-f*E+x*b)*C,t[3]=(d*E-c*_-g*b)*C,t[4]=(o*T-a*R-l*v)*C,t[5]=(s*R-r*T+n*v)*C,t[6]=(f*w-m*_-x*y)*C,t[7]=(u*_-d*w+g*y)*C,t[8]=(a*S-h*T+l*A)*C,t[9]=(i*T-s*S-n*A)*C,t[10]=(m*E-p*w+x*M)*C,t[11]=(c*w-u*E-g*M)*C,t[12]=(h*v-a*F-o*A)*C,t[13]=(s*F-i*v+r*A)*C,t[14]=(p*y-m*b-f*M)*C,t[15]=(u*b-c*y+d*M)*C,t):null}function o(t){let e=t[0],s=t[1],i=t[2],r=t[3],n=t[4],a=t[5],h=t[6],o=t[7],l=t[8],u=t[9],c=t[10],d=t[11],g=t[12],m=t[13],p=t[14],f=t[15];return(e*a-s*n)*(c*f-d*p)-(e*h-i*n)*(u*f-d*m)+(e*o-r*n)*(u*p-c*m)+(s*h-i*a)*(l*f-d*g)-(s*o-r*a)*(l*p-c*g)+(i*o-r*h)*(l*m-u*g)}function l(t,e,s){let i=e[0],r=e[1],n=e[2],a=e[3],h=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=e[9],g=e[10],m=e[11],p=e[12],f=e[13],x=e[14],M=e[15],y=s[0],w=s[1],b=s[2],E=s[3];return t[0]=y*i+w*h+b*c+E*p,t[1]=y*r+w*o+b*d+E*f,t[2]=y*n+w*l+b*g+E*x,t[3]=y*a+w*u+b*m+E*M,y=s[4],w=s[5],b=s[6],E=s[7],t[4]=y*i+w*h+b*c+E*p,t[5]=y*r+w*o+b*d+E*f,t[6]=y*n+w*l+b*g+E*x,t[7]=y*a+w*u+b*m+E*M,y=s[8],w=s[9],b=s[10],E=s[11],t[8]=y*i+w*h+b*c+E*p,t[9]=y*r+w*o+b*d+E*f,t[10]=y*n+w*l+b*g+E*x,t[11]=y*a+w*u+b*m+E*M,y=s[12],w=s[13],b=s[14],E=s[15],t[12]=y*i+w*h+b*c+E*p,t[13]=y*r+w*o+b*d+E*f,t[14]=y*n+w*l+b*g+E*x,t[15]=y*a+w*u+b*m+E*M,t}function u(t,e,s){let i,r,n,a,h,o,l,u,c,d,g,m,p=s[0],f=s[1],x=s[2];return e===t?(t[12]=e[0]*p+e[4]*f+e[8]*x+e[12],t[13]=e[1]*p+e[5]*f+e[9]*x+e[13],t[14]=e[2]*p+e[6]*f+e[10]*x+e[14],t[15]=e[3]*p+e[7]*f+e[11]*x+e[15]):(i=e[0],r=e[1],n=e[2],a=e[3],h=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=e[9],g=e[10],m=e[11],t[0]=i,t[1]=r,t[2]=n,t[3]=a,t[4]=h,t[5]=o,t[6]=l,t[7]=u,t[8]=c,t[9]=d,t[10]=g,t[11]=m,t[12]=i*p+h*f+c*x+e[12],t[13]=r*p+o*f+d*x+e[13],t[14]=n*p+l*f+g*x+e[14],t[15]=a*p+u*f+m*x+e[15]),t}function c(t,e,s){let i=s[0],r=s[1],n=s[2];return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function d(t,e,s,i){let r,n,a,h,o,l,u,c,d,g,m,p,f,x,M,y,w,b,E,_,A,v,T,F,S=i[0],R=i[1],C=i[2],P=Math.hypot(S,R,C);return Math.abs(P)<1e-6?null:(P=1/P,S*=P,R*=P,C*=P,r=Math.sin(s),n=Math.cos(s),a=1-n,h=e[0],o=e[1],l=e[2],u=e[3],c=e[4],d=e[5],g=e[6],m=e[7],p=e[8],f=e[9],x=e[10],M=e[11],y=S*S*a+n,w=R*S*a+C*r,b=C*S*a-R*r,E=S*R*a-C*r,_=R*R*a+n,A=C*R*a+S*r,v=S*C*a+R*r,T=R*C*a-S*r,F=C*C*a+n,t[0]=h*y+c*w+p*b,t[1]=o*y+d*w+f*b,t[2]=l*y+g*w+x*b,t[3]=u*y+m*w+M*b,t[4]=h*E+c*_+p*A,t[5]=o*E+d*_+f*A,t[6]=l*E+g*_+x*A,t[7]=u*E+m*_+M*A,t[8]=h*v+c*T+p*F,t[9]=o*v+d*T+f*F,t[10]=l*v+g*T+x*F,t[11]=u*v+m*T+M*F,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function g(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function m(t,e){let s=e[0],i=e[1],r=e[2],n=e[4],a=e[5],h=e[6],o=e[8],l=e[9],u=e[10];return t[0]=Math.hypot(s,i,r),t[1]=Math.hypot(n,a,h),t[2]=Math.hypot(o,l,u),t}function p(t){let e=t[0],s=t[1],i=t[2],r=t[4],n=t[5],a=t[6],h=t[8],o=t[9],l=t[10];const u=e*e+s*s+i*i,c=r*r+n*n+a*a,d=h*h+o*o+l*l;return Math.sqrt(Math.max(u,c,d))}const f=function(){const t=[0,0,0];return function(e,s){let i=t;m(i,s);let r=1/i[0],n=1/i[1],a=1/i[2],h=s[0]*r,o=s[1]*n,l=s[2]*a,u=s[4]*r,c=s[5]*n,d=s[6]*a,g=s[8]*r,p=s[9]*n,f=s[10]*a,x=h+c+f,M=0;return x>0?(M=2*Math.sqrt(x+1),e[3]=.25*M,e[0]=(d-p)/M,e[1]=(g-l)/M,e[2]=(o-u)/M):h>c&&h>f?(M=2*Math.sqrt(1+h-c-f),e[3]=(d-p)/M,e[0]=.25*M,e[1]=(o+u)/M,e[2]=(g+l)/M):c>f?(M=2*Math.sqrt(1+c-h-f),e[3]=(g-l)/M,e[0]=(o+u)/M,e[1]=.25*M,e[2]=(d+p)/M):(M=2*Math.sqrt(1+f-h-c),e[3]=(o-u)/M,e[0]=(g+l)/M,e[1]=(d+p)/M,e[2]=.25*M),e}}();function x(t,e,s,i){let r=e[0],n=e[1],a=e[2],h=e[3],o=r+r,l=n+n,u=a+a,c=r*o,d=r*l,g=r*u,m=n*l,p=n*u,f=a*u,x=h*o,M=h*l,y=h*u,w=i[0],b=i[1],E=i[2];return t[0]=(1-(m+f))*w,t[1]=(d+y)*w,t[2]=(g-M)*w,t[3]=0,t[4]=(d-y)*b,t[5]=(1-(c+f))*b,t[6]=(p+x)*b,t[7]=0,t[8]=(g+M)*E,t[9]=(p-x)*E,t[10]=(1-(c+m))*E,t[11]=0,t[12]=s[0],t[13]=s[1],t[14]=s[2],t[15]=1,t}function M(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],a=s+s,h=i+i,o=r+r,l=s*a,u=i*a,c=i*h,d=r*a,g=r*h,m=r*o,p=n*a,f=n*h,x=n*o;return t[0]=1-c-m,t[1]=u+x,t[2]=d-f,t[3]=0,t[4]=u-x,t[5]=1-l-m,t[6]=g+p,t[7]=0,t[8]=d+f,t[9]=g-p,t[10]=1-l-c,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function y(t,e,s,i,r){let n=1/Math.tan(e/2),a=1/(i-r);return t[0]=n/s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(r+i)*a,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*r*i*a,t[15]=0,t}function w(t,e,s,i,r,n,a){let h=1/(e-s),o=1/(i-r),l=1/(n-a);return t[0]=-2*h,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*l,t[11]=0,t[12]=(e+s)*h,t[13]=(r+i)*o,t[14]=(a+n)*l,t[15]=1,t}function b(t,e,s,i){let r=e[0],n=e[1],a=e[2],h=i[0],o=i[1],l=i[2],u=r-s[0],c=n-s[1],d=a-s[2],g=u*u+c*c+d*d;0===g?d=1:(g=1/Math.sqrt(g),u*=g,c*=g,d*=g);let m=o*d-l*c,p=l*u-h*d,f=h*c-o*u;return g=m*m+p*p+f*f,0===g&&(l?h+=1e-6:o?l+=1e-6:o+=1e-6,m=o*d-l*c,p=l*u-h*d,f=h*c-o*u,g=m*m+p*p+f*f),g=1/Math.sqrt(g),m*=g,p*=g,f*=g,t[0]=m,t[1]=p,t[2]=f,t[3]=0,t[4]=c*f-d*p,t[5]=d*m-u*f,t[6]=u*p-c*m,t[7]=0,t[8]=u,t[9]=c,t[10]=d,t[11]=0,t[12]=r,t[13]=n,t[14]=a,t[15]=1,t}function E(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t[4]=e[4]+s[4],t[5]=e[5]+s[5],t[6]=e[6]+s[6],t[7]=e[7]+s[7],t[8]=e[8]+s[8],t[9]=e[9]+s[9],t[10]=e[10]+s[10],t[11]=e[11]+s[11],t[12]=e[12]+s[12],t[13]=e[13]+s[13],t[14]=e[14]+s[14],t[15]=e[15]+s[15],t}function _(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t[3]=e[3]-s[3],t[4]=e[4]-s[4],t[5]=e[5]-s[5],t[6]=e[6]-s[6],t[7]=e[7]-s[7],t[8]=e[8]-s[8],t[9]=e[9]-s[9],t[10]=e[10]-s[10],t[11]=e[11]-s[11],t[12]=e[12]-s[12],t[13]=e[13]-s[13],t[14]=e[14]-s[14],t[15]=e[15]-s[15],t}function A(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*s,t[9]=e[9]*s,t[10]=e[10]*s,t[11]=e[11]*s,t[12]=e[12]*s,t[13]=e[13]*s,t[14]=e[14]*s,t[15]=e[15]*s,t}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>x,conjugate:()=>d,copy:()=>p,dot:()=>y,fromEuler:()=>m,fromMat3:()=>g,identity:()=>r,invert:()=>c,length:()=>b,lerp:()=>w,multiply:()=>a,normalize:()=>E,rotateX:()=>h,rotateY:()=>o,rotateZ:()=>l,scale:()=>M,set:()=>f,setAxisAngle:()=>n,slerp:()=>u});var i=s("./node_modules/ogl/src/math/functions/Vec4Func.js");function r(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function n(t,e,s){s*=.5;let i=Math.sin(s);return t[0]=i*e[0],t[1]=i*e[1],t[2]=i*e[2],t[3]=Math.cos(s),t}function a(t,e,s){let i=e[0],r=e[1],n=e[2],a=e[3],h=s[0],o=s[1],l=s[2],u=s[3];return t[0]=i*u+a*h+r*l-n*o,t[1]=r*u+a*o+n*h-i*l,t[2]=n*u+a*l+i*o-r*h,t[3]=a*u-i*h-r*o-n*l,t}function h(t,e,s){s*=.5;let i=e[0],r=e[1],n=e[2],a=e[3],h=Math.sin(s),o=Math.cos(s);return t[0]=i*o+a*h,t[1]=r*o+n*h,t[2]=n*o-r*h,t[3]=a*o-i*h,t}function o(t,e,s){s*=.5;let i=e[0],r=e[1],n=e[2],a=e[3],h=Math.sin(s),o=Math.cos(s);return t[0]=i*o-n*h,t[1]=r*o+a*h,t[2]=n*o+i*h,t[3]=a*o-r*h,t}function l(t,e,s){s*=.5;let i=e[0],r=e[1],n=e[2],a=e[3],h=Math.sin(s),o=Math.cos(s);return t[0]=i*o+r*h,t[1]=r*o-i*h,t[2]=n*o+a*h,t[3]=a*o-n*h,t}function u(t,e,s,i){let r,n,a,h,o,l=e[0],u=e[1],c=e[2],d=e[3],g=s[0],m=s[1],p=s[2],f=s[3];return n=l*g+u*m+c*p+d*f,n<0&&(n=-n,g=-g,m=-m,p=-p,f=-f),1-n>1e-6?(r=Math.acos(n),a=Math.sin(r),h=Math.sin((1-i)*r)/a,o=Math.sin(i*r)/a):(h=1-i,o=i),t[0]=h*l+o*g,t[1]=h*u+o*m,t[2]=h*c+o*p,t[3]=h*d+o*f,t}function c(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],a=s*s+i*i+r*r+n*n,h=a?1/a:0;return t[0]=-s*h,t[1]=-i*h,t[2]=-r*h,t[3]=n*h,t}function d(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function g(t,e){let s,i=e[0]+e[4]+e[8];if(i>0)s=Math.sqrt(i+1),t[3]=.5*s,s=.5/s,t[0]=(e[5]-e[7])*s,t[1]=(e[6]-e[2])*s,t[2]=(e[1]-e[3])*s;else{let i=0;e[4]>e[0]&&(i=1),e[8]>e[3*i+i]&&(i=2);let r=(i+1)%3,n=(i+2)%3;s=Math.sqrt(e[3*i+i]-e[3*r+r]-e[3*n+n]+1),t[i]=.5*s,s=.5/s,t[3]=(e[3*r+n]-e[3*n+r])*s,t[r]=(e[3*r+i]+e[3*i+r])*s,t[n]=(e[3*n+i]+e[3*i+n])*s}return t}function m(t,e,s="YXZ"){let i=Math.sin(.5*e[0]),r=Math.cos(.5*e[0]),n=Math.sin(.5*e[1]),a=Math.cos(.5*e[1]),h=Math.sin(.5*e[2]),o=Math.cos(.5*e[2]);return"XYZ"===s?(t[0]=i*a*o+r*n*h,t[1]=r*n*o-i*a*h,t[2]=r*a*h+i*n*o,t[3]=r*a*o-i*n*h):"YXZ"===s?(t[0]=i*a*o+r*n*h,t[1]=r*n*o-i*a*h,t[2]=r*a*h-i*n*o,t[3]=r*a*o+i*n*h):"ZXY"===s?(t[0]=i*a*o-r*n*h,t[1]=r*n*o+i*a*h,t[2]=r*a*h+i*n*o,t[3]=r*a*o-i*n*h):"ZYX"===s?(t[0]=i*a*o-r*n*h,t[1]=r*n*o+i*a*h,t[2]=r*a*h-i*n*o,t[3]=r*a*o+i*n*h):"YZX"===s?(t[0]=i*a*o+r*n*h,t[1]=r*n*o+i*a*h,t[2]=r*a*h-i*n*o,t[3]=r*a*o-i*n*h):"XZY"===s&&(t[0]=i*a*o-r*n*h,t[1]=r*n*o-i*a*h,t[2]=r*a*h+i*n*o,t[3]=r*a*o+i*n*h),t}const p=i.copy,f=i.set,x=i.add,M=i.scale,y=i.dot,w=i.lerp,b=i.length,E=i.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>a,angle:()=>A,copy:()=>r,cross:()=>M,distance:()=>c,divide:()=>l,dot:()=>x,exactEquals:()=>v,inverse:()=>p,length:()=>i,lerp:()=>y,multiply:()=>o,negate:()=>m,normalize:()=>f,scale:()=>u,scaleRotateMat4:()=>b,set:()=>n,squaredDistance:()=>d,squaredLength:()=>g,subtract:()=>h,transformMat3:()=>E,transformMat4:()=>w,transformQuat:()=>_});function i(t){let e=t[0],s=t[1],i=t[2];return Math.sqrt(e*e+s*s+i*i)}function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function n(t,e,s,i){return t[0]=e,t[1]=s,t[2]=i,t}function a(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t}function h(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t}function o(t,e,s){return t[0]=e[0]*s[0],t[1]=e[1]*s[1],t[2]=e[2]*s[2],t}function l(t,e,s){return t[0]=e[0]/s[0],t[1]=e[1]/s[1],t[2]=e[2]/s[2],t}function u(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}function c(t,e){let s=e[0]-t[0],i=e[1]-t[1],r=e[2]-t[2];return Math.sqrt(s*s+i*i+r*r)}function d(t,e){let s=e[0]-t[0],i=e[1]-t[1],r=e[2]-t[2];return s*s+i*i+r*r}function g(t){let e=t[0],s=t[1],i=t[2];return e*e+s*s+i*i}function m(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function p(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function f(t,e){let s=e[0],i=e[1],r=e[2],n=s*s+i*i+r*r;return n>0&&(n=1/Math.sqrt(n)),t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function x(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function M(t,e,s){let i=e[0],r=e[1],n=e[2],a=s[0],h=s[1],o=s[2];return t[0]=r*o-n*h,t[1]=n*a-i*o,t[2]=i*h-r*a,t}function y(t,e,s,i){let r=e[0],n=e[1],a=e[2];return t[0]=r+i*(s[0]-r),t[1]=n+i*(s[1]-n),t[2]=a+i*(s[2]-a),t}function w(t,e,s){let i=e[0],r=e[1],n=e[2],a=s[3]*i+s[7]*r+s[11]*n+s[15];return a=a||1,t[0]=(s[0]*i+s[4]*r+s[8]*n+s[12])/a,t[1]=(s[1]*i+s[5]*r+s[9]*n+s[13])/a,t[2]=(s[2]*i+s[6]*r+s[10]*n+s[14])/a,t}function b(t,e,s){let i=e[0],r=e[1],n=e[2],a=s[3]*i+s[7]*r+s[11]*n+s[15];return a=a||1,t[0]=(s[0]*i+s[4]*r+s[8]*n)/a,t[1]=(s[1]*i+s[5]*r+s[9]*n)/a,t[2]=(s[2]*i+s[6]*r+s[10]*n)/a,t}function E(t,e,s){let i=e[0],r=e[1],n=e[2];return t[0]=i*s[0]+r*s[3]+n*s[6],t[1]=i*s[1]+r*s[4]+n*s[7],t[2]=i*s[2]+r*s[5]+n*s[8],t}function _(t,e,s){let i=e[0],r=e[1],n=e[2],a=s[0],h=s[1],o=s[2],l=h*n-o*r,u=o*i-a*n,c=a*r-h*i,d=h*c-o*u,g=o*l-a*c,m=a*u-h*l,p=2*s[3];return l*=p,u*=p,c*=p,d*=2,g*=2,m*=2,t[0]=i+l+d,t[1]=r+u+g,t[2]=n+c+m,t}const A=function(){const t=[0,0,0],e=[0,0,0];return function(s,i){r(t,s),r(e,i),f(t,t),f(e,e);let n=x(t,e);return n>1?0:n<-1?Math.PI:Math.acos(n)}}();function v(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>n,copy:()=>i,dot:()=>l,length:()=>h,lerp:()=>u,normalize:()=>o,scale:()=>a,set:()=>r});function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function r(t,e,s,i,r){return t[0]=e,t[1]=s,t[2]=i,t[3]=r,t}function n(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t}function a(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t}function h(t){let e=t[0],s=t[1],i=t[2],r=t[3];return Math.sqrt(e*e+s*s+i*i+r*r)}function o(t,e){let s=e[0],i=e[1],r=e[2],n=e[3],a=s*s+i*i+r*r+n*n;return a>0&&(a=1/Math.sqrt(a)),t[0]=s*a,t[1]=i*a,t[2]=r*a,t[3]=n*a,t}function l(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function u(t,e,s,i){let r=e[0],n=e[1],a=e[2],h=e[3];return t[0]=r+i*(s[0]-r),t[1]=n+i*(s[1]-n),t[2]=a+i*(s[2]-a),t[3]=h+i*(s[3]-h),t}}},(function(t){t.h=()=>"04f9baa4454ec7db4ebb"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,