/*! For license information please see main.3065d06ce9e716318a7e.hot-update.js.LICENSE.txt */
self.webpackHotUpdateimmersive_website("main",{"./node_modules/lodash/_DataView.js":(e,s,o)=>{var t=o("./node_modules/lodash/_getNative.js")(o("./node_modules/lodash/_root.js"),"DataView");e.exports=t},"./node_modules/lodash/_Hash.js":(e,s,o)=>{var t=o("./node_modules/lodash/_hashClear.js"),a=o("./node_modules/lodash/_hashDelete.js"),n=o("./node_modules/lodash/_hashGet.js"),r=o("./node_modules/lodash/_hashHas.js"),l=o("./node_modules/lodash/_hashSet.js");function d(e){var s=-1,o=null==e?0:e.length;for(this.clear();++s<o;){var t=e[s];this.set(t[0],t[1])}}d.prototype.clear=t,d.prototype.delete=a,d.prototype.get=n,d.prototype.has=r,d.prototype.set=l,e.exports=d},"./node_modules/lodash/_ListCache.js":(e,s,o)=>{var t=o("./node_modules/lodash/_listCacheClear.js"),a=o("./node_modules/lodash/_listCacheDelete.js"),n=o("./node_modules/lodash/_listCacheGet.js"),r=o("./node_modules/lodash/_listCacheHas.js"),l=o("./node_modules/lodash/_listCacheSet.js");function d(e){var s=-1,o=null==e?0:e.length;for(this.clear();++s<o;){var t=e[s];this.set(t[0],t[1])}}d.prototype.clear=t,d.prototype.delete=a,d.prototype.get=n,d.prototype.has=r,d.prototype.set=l,e.exports=d},"./node_modules/lodash/_Map.js":(e,s,o)=>{var t=o("./node_modules/lodash/_getNative.js")(o("./node_modules/lodash/_root.js"),"Map");e.exports=t},"./node_modules/lodash/_MapCache.js":(e,s,o)=>{var t=o("./node_modules/lodash/_mapCacheClear.js"),a=o("./node_modules/lodash/_mapCacheDelete.js"),n=o("./node_modules/lodash/_mapCacheGet.js"),r=o("./node_modules/lodash/_mapCacheHas.js"),l=o("./node_modules/lodash/_mapCacheSet.js");function d(e){var s=-1,o=null==e?0:e.length;for(this.clear();++s<o;){var t=e[s];this.set(t[0],t[1])}}d.prototype.clear=t,d.prototype.delete=a,d.prototype.get=n,d.prototype.has=r,d.prototype.set=l,e.exports=d},"./node_modules/lodash/_Promise.js":(e,s,o)=>{var t=o("./node_modules/lodash/_getNative.js")(o("./node_modules/lodash/_root.js"),"Promise");e.exports=t},"./node_modules/lodash/_Set.js":(e,s,o)=>{var t=o("./node_modules/lodash/_getNative.js")(o("./node_modules/lodash/_root.js"),"Set");e.exports=t},"./node_modules/lodash/_SetCache.js":(e,s,o)=>{var t=o("./node_modules/lodash/_MapCache.js"),a=o("./node_modules/lodash/_setCacheAdd.js"),n=o("./node_modules/lodash/_setCacheHas.js");function r(e){var s=-1,o=null==e?0:e.length;for(this.__data__=new t;++s<o;)this.add(e[s])}r.prototype.add=r.prototype.push=a,r.prototype.has=n,e.exports=r},"./node_modules/lodash/_Stack.js":(e,s,o)=>{var t=o("./node_modules/lodash/_ListCache.js"),a=o("./node_modules/lodash/_stackClear.js"),n=o("./node_modules/lodash/_stackDelete.js"),r=o("./node_modules/lodash/_stackGet.js"),l=o("./node_modules/lodash/_stackHas.js"),d=o("./node_modules/lodash/_stackSet.js");function i(e){var s=this.__data__=new t(e);this.size=s.size}i.prototype.clear=a,i.prototype.delete=n,i.prototype.get=r,i.prototype.has=l,i.prototype.set=d,e.exports=i},"./node_modules/lodash/_Uint8Array.js":(e,s,o)=>{var t=o("./node_modules/lodash/_root.js").Uint8Array;e.exports=t},"./node_modules/lodash/_WeakMap.js":(e,s,o)=>{var t=o("./node_modules/lodash/_getNative.js")(o("./node_modules/lodash/_root.js"),"WeakMap");e.exports=t},"./node_modules/lodash/_arrayFilter.js":e=>{e.exports=function(e,s){for(var o=-1,t=null==e?0:e.length,a=0,n=[];++o<t;){var r=e[o];s(r,o,e)&&(n[a++]=r)}return n}},"./node_modules/lodash/_arrayMap.js":e=>{e.exports=function(e,s){for(var o=-1,t=null==e?0:e.length,a=Array(t);++o<t;)a[o]=s(e[o],o,e);return a}},"./node_modules/lodash/_arrayPush.js":e=>{e.exports=function(e,s){for(var o=-1,t=s.length,a=e.length;++o<t;)e[a+o]=s[o];return e}},"./node_modules/lodash/_arraySome.js":e=>{e.exports=function(e,s){for(var o=-1,t=null==e?0:e.length;++o<t;)if(s(e[o],o,e))return!0;return!1}},"./node_modules/lodash/_assocIndexOf.js":(e,s,o)=>{var t=o("./node_modules/lodash/eq.js");e.exports=function(e,s){for(var o=e.length;o--;)if(t(e[o][0],s))return o;return-1}},"./node_modules/lodash/_baseGet.js":(e,s,o)=>{var t=o("./node_modules/lodash/_castPath.js"),a=o("./node_modules/lodash/_toKey.js");e.exports=function(e,s){for(var o=0,n=(s=t(s,e)).length;null!=e&&o<n;)e=e[a(s[o++])];return o&&o==n?e:void 0}},"./node_modules/lodash/_baseGetAllKeys.js":(e,s,o)=>{var t=o("./node_modules/lodash/_arrayPush.js"),a=o("./node_modules/lodash/isArray.js");e.exports=function(e,s,o){var n=s(e);return a(e)?n:t(n,o(e))}},"./node_modules/lodash/_baseHasIn.js":e=>{e.exports=function(e,s){return null!=e&&s in Object(e)}},"./node_modules/lodash/_baseIsEqual.js":(e,s,o)=>{var t=o("./node_modules/lodash/_baseIsEqualDeep.js"),a=o("./node_modules/lodash/isObjectLike.js");e.exports=function e(s,o,n,r,l){return s===o||(null==s||null==o||!a(s)&&!a(o)?s!=s&&o!=o:t(s,o,n,r,e,l))}},"./node_modules/lodash/_baseIsEqualDeep.js":(e,s,o)=>{var t=o("./node_modules/lodash/_Stack.js"),a=o("./node_modules/lodash/_equalArrays.js"),n=o("./node_modules/lodash/_equalByTag.js"),r=o("./node_modules/lodash/_equalObjects.js"),l=o("./node_modules/lodash/_getTag.js"),d=o("./node_modules/lodash/isArray.js"),i=o("./node_modules/lodash/isBuffer.js"),u=o("./node_modules/lodash/isTypedArray.js"),h="[object Arguments]",_="[object Array]",m="[object Object]",c=Object.prototype.hasOwnProperty;e.exports=function(e,s,o,p,j,f){var v=d(e),y=d(s),x=v?_:l(e),b=y?_:l(s),g=(x=x==h?m:x)==m,w=(b=b==h?m:b)==m,A=x==b;if(A&&i(e)){if(!i(s))return!1;v=!0,g=!1}if(A&&!g)return f||(f=new t),v||u(e)?a(e,s,o,p,j,f):n(e,s,x,o,p,j,f);if(!(1&o)){var C=g&&c.call(e,"__wrapped__"),S=w&&c.call(s,"__wrapped__");if(C||S){var O=C?e.value():e,M=S?s.value():s;return f||(f=new t),j(O,M,o,p,f)}}return!!A&&(f||(f=new t),r(e,s,o,p,j,f))}},"./node_modules/lodash/_baseIsMatch.js":(e,s,o)=>{var t=o("./node_modules/lodash/_Stack.js"),a=o("./node_modules/lodash/_baseIsEqual.js");e.exports=function(e,s,o,n){var r=o.length,l=r,d=!n;if(null==e)return!l;for(e=Object(e);r--;){var i=o[r];if(d&&i[2]?i[1]!==e[i[0]]:!(i[0]in e))return!1}for(;++r<l;){var u=(i=o[r])[0],h=e[u],_=i[1];if(d&&i[2]){if(void 0===h&&!(u in e))return!1}else{var m=new t;if(n)var c=n(h,_,u,e,s,m);if(!(void 0===c?a(_,h,3,n,m):c))return!1}}return!0}},"./node_modules/lodash/_baseIsNative.js":(e,s,o)=>{var t=o("./node_modules/lodash/isFunction.js"),a=o("./node_modules/lodash/_isMasked.js"),n=o("./node_modules/lodash/isObject.js"),r=o("./node_modules/lodash/_toSource.js"),l=/^\[object .+?Constructor\]$/,d=Function.prototype,i=Object.prototype,u=d.toString,h=i.hasOwnProperty,_=RegExp("^"+u.call(h).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!n(e)||a(e))&&(t(e)?_:l).test(r(e))}},"./node_modules/lodash/_baseIteratee.js":(e,s,o)=>{var t=o("./node_modules/lodash/_baseMatches.js"),a=o("./node_modules/lodash/_baseMatchesProperty.js"),n=o("./node_modules/lodash/identity.js"),r=o("./node_modules/lodash/isArray.js"),l=o("./node_modules/lodash/property.js");e.exports=function(e){return"function"==typeof e?e:null==e?n:"object"==typeof e?r(e)?a(e[0],e[1]):t(e):l(e)}},"./node_modules/lodash/_baseMap.js":(e,s,o)=>{var t=o("./node_modules/lodash/_baseEach.js"),a=o("./node_modules/lodash/isArrayLike.js");e.exports=function(e,s){var o=-1,n=a(e)?Array(e.length):[];return t(e,(function(e,t,a){n[++o]=s(e,t,a)})),n}},"./node_modules/lodash/_baseMatches.js":(e,s,o)=>{var t=o("./node_modules/lodash/_baseIsMatch.js"),a=o("./node_modules/lodash/_getMatchData.js"),n=o("./node_modules/lodash/_matchesStrictComparable.js");e.exports=function(e){var s=a(e);return 1==s.length&&s[0][2]?n(s[0][0],s[0][1]):function(o){return o===e||t(o,e,s)}}},"./node_modules/lodash/_baseMatchesProperty.js":(e,s,o)=>{var t=o("./node_modules/lodash/_baseIsEqual.js"),a=o("./node_modules/lodash/get.js"),n=o("./node_modules/lodash/hasIn.js"),r=o("./node_modules/lodash/_isKey.js"),l=o("./node_modules/lodash/_isStrictComparable.js"),d=o("./node_modules/lodash/_matchesStrictComparable.js"),i=o("./node_modules/lodash/_toKey.js");e.exports=function(e,s){return r(e)&&l(s)?d(i(e),s):function(o){var r=a(o,e);return void 0===r&&r===s?n(o,e):t(s,r,3)}}},"./node_modules/lodash/_baseProperty.js":e=>{e.exports=function(e){return function(s){return null==s?void 0:s[e]}}},"./node_modules/lodash/_basePropertyDeep.js":(e,s,o)=>{var t=o("./node_modules/lodash/_baseGet.js");e.exports=function(e){return function(s){return t(s,e)}}},"./node_modules/lodash/_baseToString.js":(e,s,o)=>{var t=o("./node_modules/lodash/_Symbol.js"),a=o("./node_modules/lodash/_arrayMap.js"),n=o("./node_modules/lodash/isArray.js"),r=o("./node_modules/lodash/isSymbol.js"),l=t?t.prototype:void 0,d=l?l.toString:void 0;e.exports=function e(s){if("string"==typeof s)return s;if(n(s))return a(s,e)+"";if(r(s))return d?d.call(s):"";var o=s+"";return"0"==o&&1/s==-Infinity?"-0":o}},"./node_modules/lodash/_cacheHas.js":e=>{e.exports=function(e,s){return e.has(s)}},"./node_modules/lodash/_castPath.js":(e,s,o)=>{var t=o("./node_modules/lodash/isArray.js"),a=o("./node_modules/lodash/_isKey.js"),n=o("./node_modules/lodash/_stringToPath.js"),r=o("./node_modules/lodash/toString.js");e.exports=function(e,s){return t(e)?e:a(e,s)?[e]:n(r(e))}},"./node_modules/lodash/_coreJsData.js":(e,s,o)=>{var t=o("./node_modules/lodash/_root.js")["__core-js_shared__"];e.exports=t},"./node_modules/lodash/_equalArrays.js":(e,s,o)=>{var t=o("./node_modules/lodash/_SetCache.js"),a=o("./node_modules/lodash/_arraySome.js"),n=o("./node_modules/lodash/_cacheHas.js");e.exports=function(e,s,o,r,l,d){var i=1&o,u=e.length,h=s.length;if(u!=h&&!(i&&h>u))return!1;var _=d.get(e),m=d.get(s);if(_&&m)return _==s&&m==e;var c=-1,p=!0,j=2&o?new t:void 0;for(d.set(e,s),d.set(s,e);++c<u;){var f=e[c],v=s[c];if(r)var y=i?r(v,f,c,s,e,d):r(f,v,c,e,s,d);if(void 0!==y){if(y)continue;p=!1;break}if(j){if(!a(s,(function(e,s){if(!n(j,s)&&(f===e||l(f,e,o,r,d)))return j.push(s)}))){p=!1;break}}else if(f!==v&&!l(f,v,o,r,d)){p=!1;break}}return d.delete(e),d.delete(s),p}},"./node_modules/lodash/_equalByTag.js":(e,s,o)=>{var t=o("./node_modules/lodash/_Symbol.js"),a=o("./node_modules/lodash/_Uint8Array.js"),n=o("./node_modules/lodash/eq.js"),r=o("./node_modules/lodash/_equalArrays.js"),l=o("./node_modules/lodash/_mapToArray.js"),d=o("./node_modules/lodash/_setToArray.js"),i=t?t.prototype:void 0,u=i?i.valueOf:void 0;e.exports=function(e,s,o,t,i,h,_){switch(o){case"[object DataView]":if(e.byteLength!=s.byteLength||e.byteOffset!=s.byteOffset)return!1;e=e.buffer,s=s.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=s.byteLength||!h(new a(e),new a(s)));case"[object Boolean]":case"[object Date]":case"[object Number]":return n(+e,+s);case"[object Error]":return e.name==s.name&&e.message==s.message;case"[object RegExp]":case"[object String]":return e==s+"";case"[object Map]":var m=l;case"[object Set]":var c=1&t;if(m||(m=d),e.size!=s.size&&!c)return!1;var p=_.get(e);if(p)return p==s;t|=2,_.set(e,s);var j=r(m(e),m(s),t,i,h,_);return _.delete(e),j;case"[object Symbol]":if(u)return u.call(e)==u.call(s)}return!1}},"./node_modules/lodash/_equalObjects.js":(e,s,o)=>{var t=o("./node_modules/lodash/_getAllKeys.js"),a=Object.prototype.hasOwnProperty;e.exports=function(e,s,o,n,r,l){var d=1&o,i=t(e),u=i.length;if(u!=t(s).length&&!d)return!1;for(var h=u;h--;){var _=i[h];if(!(d?_ in s:a.call(s,_)))return!1}var m=l.get(e),c=l.get(s);if(m&&c)return m==s&&c==e;var p=!0;l.set(e,s),l.set(s,e);for(var j=d;++h<u;){var f=e[_=i[h]],v=s[_];if(n)var y=d?n(v,f,_,s,e,l):n(f,v,_,e,s,l);if(!(void 0===y?f===v||r(f,v,o,n,l):y)){p=!1;break}j||(j="constructor"==_)}if(p&&!j){var x=e.constructor,b=s.constructor;x==b||!("constructor"in e)||!("constructor"in s)||"function"==typeof x&&x instanceof x&&"function"==typeof b&&b instanceof b||(p=!1)}return l.delete(e),l.delete(s),p}},"./node_modules/lodash/_getAllKeys.js":(e,s,o)=>{var t=o("./node_modules/lodash/_baseGetAllKeys.js"),a=o("./node_modules/lodash/_getSymbols.js"),n=o("./node_modules/lodash/keys.js");e.exports=function(e){return t(e,n,a)}},"./node_modules/lodash/_getMapData.js":(e,s,o)=>{var t=o("./node_modules/lodash/_isKeyable.js");e.exports=function(e,s){var o=e.__data__;return t(s)?o["string"==typeof s?"string":"hash"]:o.map}},"./node_modules/lodash/_getMatchData.js":(e,s,o)=>{var t=o("./node_modules/lodash/_isStrictComparable.js"),a=o("./node_modules/lodash/keys.js");e.exports=function(e){for(var s=a(e),o=s.length;o--;){var n=s[o],r=e[n];s[o]=[n,r,t(r)]}return s}},"./node_modules/lodash/_getNative.js":(e,s,o)=>{var t=o("./node_modules/lodash/_baseIsNative.js"),a=o("./node_modules/lodash/_getValue.js");e.exports=function(e,s){var o=a(e,s);return t(o)?o:void 0}},"./node_modules/lodash/_getSymbols.js":(e,s,o)=>{var t=o("./node_modules/lodash/_arrayFilter.js"),a=o("./node_modules/lodash/stubArray.js"),n=Object.prototype.propertyIsEnumerable,r=Object.getOwnPropertySymbols,l=r?function(e){return null==e?[]:(e=Object(e),t(r(e),(function(s){return n.call(e,s)})))}:a;e.exports=l},"./node_modules/lodash/_getTag.js":(e,s,o)=>{var t=o("./node_modules/lodash/_DataView.js"),a=o("./node_modules/lodash/_Map.js"),n=o("./node_modules/lodash/_Promise.js"),r=o("./node_modules/lodash/_Set.js"),l=o("./node_modules/lodash/_WeakMap.js"),d=o("./node_modules/lodash/_baseGetTag.js"),i=o("./node_modules/lodash/_toSource.js"),u="[object Map]",h="[object Promise]",_="[object Set]",m="[object WeakMap]",c="[object DataView]",p=i(t),j=i(a),f=i(n),v=i(r),y=i(l),x=d;(t&&x(new t(new ArrayBuffer(1)))!=c||a&&x(new a)!=u||n&&x(n.resolve())!=h||r&&x(new r)!=_||l&&x(new l)!=m)&&(x=function(e){var s=d(e),o="[object Object]"==s?e.constructor:void 0,t=o?i(o):"";if(t)switch(t){case p:return c;case j:return u;case f:return h;case v:return _;case y:return m}return s}),e.exports=x},"./node_modules/lodash/_getValue.js":e=>{e.exports=function(e,s){return null==e?void 0:e[s]}},"./node_modules/lodash/_hasPath.js":(e,s,o)=>{var t=o("./node_modules/lodash/_castPath.js"),a=o("./node_modules/lodash/isArguments.js"),n=o("./node_modules/lodash/isArray.js"),r=o("./node_modules/lodash/_isIndex.js"),l=o("./node_modules/lodash/isLength.js"),d=o("./node_modules/lodash/_toKey.js");e.exports=function(e,s,o){for(var i=-1,u=(s=t(s,e)).length,h=!1;++i<u;){var _=d(s[i]);if(!(h=null!=e&&o(e,_)))break;e=e[_]}return h||++i!=u?h:!!(u=null==e?0:e.length)&&l(u)&&r(_,u)&&(n(e)||a(e))}},"./node_modules/lodash/_hashClear.js":(e,s,o)=>{var t=o("./node_modules/lodash/_nativeCreate.js");e.exports=function(){this.__data__=t?t(null):{},this.size=0}},"./node_modules/lodash/_hashDelete.js":e=>{e.exports=function(e){var s=this.has(e)&&delete this.__data__[e];return this.size-=s?1:0,s}},"./node_modules/lodash/_hashGet.js":(e,s,o)=>{var t=o("./node_modules/lodash/_nativeCreate.js"),a=Object.prototype.hasOwnProperty;e.exports=function(e){var s=this.__data__;if(t){var o=s[e];return"__lodash_hash_undefined__"===o?void 0:o}return a.call(s,e)?s[e]:void 0}},"./node_modules/lodash/_hashHas.js":(e,s,o)=>{var t=o("./node_modules/lodash/_nativeCreate.js"),a=Object.prototype.hasOwnProperty;e.exports=function(e){var s=this.__data__;return t?void 0!==s[e]:a.call(s,e)}},"./node_modules/lodash/_hashSet.js":(e,s,o)=>{var t=o("./node_modules/lodash/_nativeCreate.js");e.exports=function(e,s){var o=this.__data__;return this.size+=this.has(e)?0:1,o[e]=t&&void 0===s?"__lodash_hash_undefined__":s,this}},"./node_modules/lodash/_isKey.js":(e,s,o)=>{var t=o("./node_modules/lodash/isArray.js"),a=o("./node_modules/lodash/isSymbol.js"),n=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,r=/^\w*$/;e.exports=function(e,s){if(t(e))return!1;var o=typeof e;return!("number"!=o&&"symbol"!=o&&"boolean"!=o&&null!=e&&!a(e))||(r.test(e)||!n.test(e)||null!=s&&e in Object(s))}},"./node_modules/lodash/_isKeyable.js":e=>{e.exports=function(e){var s=typeof e;return"string"==s||"number"==s||"symbol"==s||"boolean"==s?"__proto__"!==e:null===e}},"./node_modules/lodash/_isMasked.js":(e,s,o)=>{var t,a=o("./node_modules/lodash/_coreJsData.js"),n=(t=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+t:"";e.exports=function(e){return!!n&&n in e}},"./node_modules/lodash/_isStrictComparable.js":(e,s,o)=>{var t=o("./node_modules/lodash/isObject.js");e.exports=function(e){return e==e&&!t(e)}},"./node_modules/lodash/_listCacheClear.js":e=>{e.exports=function(){this.__data__=[],this.size=0}},"./node_modules/lodash/_listCacheDelete.js":(e,s,o)=>{var t=o("./node_modules/lodash/_assocIndexOf.js"),a=Array.prototype.splice;e.exports=function(e){var s=this.__data__,o=t(s,e);return!(o<0)&&(o==s.length-1?s.pop():a.call(s,o,1),--this.size,!0)}},"./node_modules/lodash/_listCacheGet.js":(e,s,o)=>{var t=o("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){var s=this.__data__,o=t(s,e);return o<0?void 0:s[o][1]}},"./node_modules/lodash/_listCacheHas.js":(e,s,o)=>{var t=o("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){return t(this.__data__,e)>-1}},"./node_modules/lodash/_listCacheSet.js":(e,s,o)=>{var t=o("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e,s){var o=this.__data__,a=t(o,e);return a<0?(++this.size,o.push([e,s])):o[a][1]=s,this}},"./node_modules/lodash/_mapCacheClear.js":(e,s,o)=>{var t=o("./node_modules/lodash/_Hash.js"),a=o("./node_modules/lodash/_ListCache.js"),n=o("./node_modules/lodash/_Map.js");e.exports=function(){this.size=0,this.__data__={hash:new t,map:new(n||a),string:new t}}},"./node_modules/lodash/_mapCacheDelete.js":(e,s,o)=>{var t=o("./node_modules/lodash/_getMapData.js");e.exports=function(e){var s=t(this,e).delete(e);return this.size-=s?1:0,s}},"./node_modules/lodash/_mapCacheGet.js":(e,s,o)=>{var t=o("./node_modules/lodash/_getMapData.js");e.exports=function(e){return t(this,e).get(e)}},"./node_modules/lodash/_mapCacheHas.js":(e,s,o)=>{var t=o("./node_modules/lodash/_getMapData.js");e.exports=function(e){return t(this,e).has(e)}},"./node_modules/lodash/_mapCacheSet.js":(e,s,o)=>{var t=o("./node_modules/lodash/_getMapData.js");e.exports=function(e,s){var o=t(this,e),a=o.size;return o.set(e,s),this.size+=o.size==a?0:1,this}},"./node_modules/lodash/_mapToArray.js":e=>{e.exports=function(e){var s=-1,o=Array(e.size);return e.forEach((function(e,t){o[++s]=[t,e]})),o}},"./node_modules/lodash/_matchesStrictComparable.js":e=>{e.exports=function(e,s){return function(o){return null!=o&&(o[e]===s&&(void 0!==s||e in Object(o)))}}},"./node_modules/lodash/_memoizeCapped.js":(e,s,o)=>{var t=o("./node_modules/lodash/memoize.js");e.exports=function(e){var s=t(e,(function(e){return 500===o.size&&o.clear(),e})),o=s.cache;return s}},"./node_modules/lodash/_nativeCreate.js":(e,s,o)=>{var t=o("./node_modules/lodash/_getNative.js")(Object,"create");e.exports=t},"./node_modules/lodash/_setCacheAdd.js":e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},"./node_modules/lodash/_setCacheHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_setToArray.js":e=>{e.exports=function(e){var s=-1,o=Array(e.size);return e.forEach((function(e){o[++s]=e})),o}},"./node_modules/lodash/_stackClear.js":(e,s,o)=>{var t=o("./node_modules/lodash/_ListCache.js");e.exports=function(){this.__data__=new t,this.size=0}},"./node_modules/lodash/_stackDelete.js":e=>{e.exports=function(e){var s=this.__data__,o=s.delete(e);return this.size=s.size,o}},"./node_modules/lodash/_stackGet.js":e=>{e.exports=function(e){return this.__data__.get(e)}},"./node_modules/lodash/_stackHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_stackSet.js":(e,s,o)=>{var t=o("./node_modules/lodash/_ListCache.js"),a=o("./node_modules/lodash/_Map.js"),n=o("./node_modules/lodash/_MapCache.js");e.exports=function(e,s){var o=this.__data__;if(o instanceof t){var r=o.__data__;if(!a||r.length<199)return r.push([e,s]),this.size=++o.size,this;o=this.__data__=new n(r)}return o.set(e,s),this.size=o.size,this}},"./node_modules/lodash/_stringToPath.js":(e,s,o)=>{var t=o("./node_modules/lodash/_memoizeCapped.js"),a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,n=/\\(\\)?/g,r=t((function(e){var s=[];return 46===e.charCodeAt(0)&&s.push(""),e.replace(a,(function(e,o,t,a){s.push(t?a.replace(n,"$1"):o||e)})),s}));e.exports=r},"./node_modules/lodash/_toKey.js":(e,s,o)=>{var t=o("./node_modules/lodash/isSymbol.js");e.exports=function(e){if("string"==typeof e||t(e))return e;var s=e+"";return"0"==s&&1/e==-Infinity?"-0":s}},"./node_modules/lodash/_toSource.js":e=>{var s=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return s.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},"./node_modules/lodash/eq.js":e=>{e.exports=function(e,s){return e===s||e!=e&&s!=s}},"./node_modules/lodash/get.js":(e,s,o)=>{var t=o("./node_modules/lodash/_baseGet.js");e.exports=function(e,s,o){var a=null==e?void 0:t(e,s);return void 0===a?o:a}},"./node_modules/lodash/hasIn.js":(e,s,o)=>{var t=o("./node_modules/lodash/_baseHasIn.js"),a=o("./node_modules/lodash/_hasPath.js");e.exports=function(e,s){return null!=e&&a(e,s,t)}},"./node_modules/lodash/isSymbol.js":(e,s,o)=>{var t=o("./node_modules/lodash/_baseGetTag.js"),a=o("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return"symbol"==typeof e||a(e)&&"[object Symbol]"==t(e)}},"./node_modules/lodash/map.js":(e,s,o)=>{var t=o("./node_modules/lodash/_arrayMap.js"),a=o("./node_modules/lodash/_baseIteratee.js"),n=o("./node_modules/lodash/_baseMap.js"),r=o("./node_modules/lodash/isArray.js");e.exports=function(e,s){return(r(e)?t:n)(e,a(s,3))}},"./node_modules/lodash/memoize.js":(e,s,o)=>{var t=o("./node_modules/lodash/_MapCache.js");function a(e,s){if("function"!=typeof e||null!=s&&"function"!=typeof s)throw new TypeError("Expected a function");var o=function(){var t=arguments,a=s?s.apply(this,t):t[0],n=o.cache;if(n.has(a))return n.get(a);var r=e.apply(this,t);return o.cache=n.set(a,r)||n,r};return o.cache=new(a.Cache||t),o}a.Cache=t,e.exports=a},"./node_modules/lodash/property.js":(e,s,o)=>{var t=o("./node_modules/lodash/_baseProperty.js"),a=o("./node_modules/lodash/_basePropertyDeep.js"),n=o("./node_modules/lodash/_isKey.js"),r=o("./node_modules/lodash/_toKey.js");e.exports=function(e){return n(e)?t(r(e)):a(e)}},"./node_modules/lodash/stubArray.js":e=>{e.exports=function(){return[]}},"./node_modules/lodash/toString.js":(e,s,o)=>{var t=o("./node_modules/lodash/_baseToString.js");e.exports=function(e){return null==e?"":t(e)}},"./node_modules/normalize-wheel/index.js":(e,s,o)=>{e.exports=o("./node_modules/normalize-wheel/src/normalizeWheel.js")},"./node_modules/normalize-wheel/src/ExecutionEnvironment.js":e=>{"use strict";var s=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:s,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:s&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:s&&!!window.screen,isInWorker:!s};e.exports=o},"./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":e=>{var s,o,t,a,n,r,l,d,i,u,h,_,m,c,p,j=!1;function f(){if(!j){j=!0;var e=navigator.userAgent,f=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e),v=/(Mac OS X)|(Windows)|(Linux)/.exec(e);if(_=/\b(iPhone|iP[ao]d)/.exec(e),m=/\b(iP[ao]d)/.exec(e),u=/Android/i.exec(e),c=/FBAN\/\w+;/i.exec(e),p=/Mobile/i.exec(e),h=!!/Win64/.exec(e),f){(s=f[1]?parseFloat(f[1]):f[5]?parseFloat(f[5]):NaN)&&document&&document.documentMode&&(s=document.documentMode);var y=/(?:Trident\/(\d+.\d+))/.exec(e);r=y?parseFloat(y[1])+4:s,o=f[2]?parseFloat(f[2]):NaN,t=f[3]?parseFloat(f[3]):NaN,(a=f[4]?parseFloat(f[4]):NaN)?(f=/(?:Chrome\/(\d+\.\d+))/.exec(e),n=f&&f[1]?parseFloat(f[1]):NaN):n=NaN}else s=o=t=n=a=NaN;if(v){if(v[1]){var x=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e);l=!x||parseFloat(x[1].replace("_","."))}else l=!1;d=!!v[2],i=!!v[3]}else l=d=i=!1}}var v={ie:function(){return f()||s},ieCompatibilityMode:function(){return f()||r>s},ie64:function(){return v.ie()&&h},firefox:function(){return f()||o},opera:function(){return f()||t},webkit:function(){return f()||a},safari:function(){return v.webkit()},chrome:function(){return f()||n},windows:function(){return f()||d},osx:function(){return f()||l},linux:function(){return f()||i},iphone:function(){return f()||_},mobile:function(){return f()||_||m||u||p},nativeApp:function(){return f()||c},android:function(){return f()||u},ipad:function(){return f()||m}};e.exports=v},"./node_modules/normalize-wheel/src/isEventSupported.js":(e,s,o)=>{"use strict";var t,a=o("./node_modules/normalize-wheel/src/ExecutionEnvironment.js");a.canUseDOM&&(t=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),e.exports=function(e,s){if(!a.canUseDOM||s&&!("addEventListener"in document))return!1;var o="on"+e,n=o in document;if(!n){var r=document.createElement("div");r.setAttribute(o,"return;"),n="function"==typeof r[o]}return!n&&t&&"wheel"===e&&(n=document.implementation.hasFeature("Events.wheel","3.0")),n}},"./node_modules/normalize-wheel/src/normalizeWheel.js":(e,s,o)=>{"use strict";var t=o("./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"),a=o("./node_modules/normalize-wheel/src/isEventSupported.js");function n(e){var s=0,o=0,t=0,a=0;return"detail"in e&&(o=e.detail),"wheelDelta"in e&&(o=-e.wheelDelta/120),"wheelDeltaY"in e&&(o=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(s=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(s=o,o=0),t=10*s,a=10*o,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(t=e.deltaX),(t||a)&&e.deltaMode&&(1==e.deltaMode?(t*=40,a*=40):(t*=800,a*=800)),t&&!s&&(s=t<1?-1:1),a&&!o&&(o=a<1?-1:1),{spinX:s,spinY:o,pixelX:t,pixelY:a}}n.getEventType=function(){return t.firefox()?"DOMMouseScroll":a("wheel")?"wheel":"mousewheel"},e.exports=n},"./node_modules/prefix/index.js":e=>{var s="undefined"!=typeof document?document.createElement("p").style:{},o=["O","ms","Moz","Webkit"],t=/([A-Z])/g,a={};function n(e){if(e=e.replace(/-([a-z])/g,(function(e,s){return s.toUpperCase()})),void 0!==s[e])return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),a=o.length;a--;){var n=o[a]+t;if(void 0!==s[n])return n}return e}e.exports=function(e){return e in a?a[e]:a[e]=n(e)},e.exports.dash=function(e){return e=n(e),t.test(e)&&(e="-"+e.replace(t,"-$1"),t.lastIndex=0),e.toLowerCase()}},"./app/animations/Label.js":(e,s,o)=>{"use strict";o.r(s),o.d(s,{default:()=>l});var t=o("./app/classes/Animation.js"),a=o("./node_modules/gsap/index.js"),n=o("./node_modules/lodash/each.js"),r=o("./app/utils/text.js");class l extends t.default{constructor({element:e,elements:s}){super({element:e,elements:s}),this.elementsLinesSpans=(0,r.split)({element:this.element,append:!0})}animateIn(){this.timelineIn=a.default.timeline({delay:.5}),this.timelineIn.set(this.element,{autoAlpha:1}),a.default.set(this.element,{autoAlpha:1}),n(this.elementsLines,((e,s)=>{a.default.fromTo(e,{autoAlpha:0,y:"100%"},{autoAlpha:1,delay:.2*s,duration:1.5,ease:"expo.out",y:"0%"})}),0)}animateOut(){a.default.set(this.element,{autoAlpha:0})}onResize(){this.elementsLines=(0,r.calculate)(this.elementLinesSpans)}}},"./app/animations/Paragraph.js":(e,s,o)=>{"use strict";o.r(s),o.d(s,{default:()=>l});var t=o("./app/classes/Animation.js"),a=o("./node_modules/gsap/index.js"),n=o("./node_modules/lodash/each.js"),r=o("./app/utils/text.js");class l extends t.default{constructor({element:e,elements:s}){super({element:e,elements:s}),this.elementsLinesSpans=(0,r.split)({element:this.element,append:!0})}animateIn(){this.timelineIn=a.default.timeline({delay:.5}),this.timelineIn.set(this.element,{autoAlpha:1}),a.default.set(this.element,{autoAlpha:1}),n(this.elementsLines,((e,s)=>{a.default.fromTo(e,{autoAlpha:0,y:"100%"},{autoAlpha:1,delay:.2*s,duration:1.5,ease:"expo.out",y:"0%"})}),0)}animateOut(){a.default.set(this.element,{autoAlpha:0})}onResize(){this.elementsLines=(0,r.calculate)(this.elementLinesSpans)}}},"./app/animations/Title.js":(e,s,o)=>{"use strict";o.r(s),o.d(s,{default:()=>l});var t=o("./app/classes/Animation.js"),a=o("./node_modules/gsap/index.js"),n=o("./node_modules/lodash/each.js"),r=o("./app/utils/text.js");class l extends t.default{constructor({element:e,elements:s}){super({element:e,elements:s}),(0,r.split)({element:this.element,append:!0}),(0,r.split)({element:this.element,append:!0}),this.elementLinesSpans=this.element.querySelectorAll("span span")}animateIn(){this.timelineIn=a.default.timeline({delay:.5}),this.timelineIn.set(this.element,{autoAlpha:1}),a.default.set(this.element,{autoAlpha:1}),n(this.elementsLines,((e,s)=>{a.default.fromTo(e,{y:"100%"},{delay:.2*s,duration:1.5,ease:"expo.out",y:"0%"})}),0)}animateOut(){a.default.set(this.element,{autoAlpha:0})}onResize(){this.elementsLines=(0,r.calculate)(this.elementLinesSpans)}}},"./app/classes/Animation.js":(e,s,o)=>{"use strict";o.r(s),o.d(s,{default:()=>a});var t=o("./app/classes/Component.js");class a extends t.default{constructor({element:e,elements:s}){super({element:e,elements:s}),this.createObserver(),this.animateOut()}createObserver(){this.observer=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting?this.animateIn():this.animateOut()}))})),this.observer.observe(this.element)}animateOut(){}animateIn(){}}},"./app/classes/Page.js":(e,s,o)=>{"use strict";o.r(s),o.d(s,{default:()=>_});var t=o("./node_modules/lodash/each.js"),a=o("./node_modules/lodash/map.js"),n=o("./node_modules/gsap/index.js"),r=o("./node_modules/prefix/index.js"),l=o("./node_modules/normalize-wheel/index.js"),d=o("./app/animations/Title.js"),i=o("./app/animations/Paragraph.js"),u=o("./app/animations/Label.js"),h=o("./node_modules/console-browserify/index.js");class _{constructor({element:e,elements:s,id:o}){this.selector=e,this.selectorChildren={...s,animationsTitles:'[data-animation="title"]',animationsParagraphs:'[data-animation="paragraph"]',animationsLabel:'[data-animation="label"]'},this.id=o,this.onMouseWheelEvent=this.onMouseWheel.bind(this),this.transformPrefix=r("transform")}create(){this.element=document.querySelector(this.selector),this.elements={},this.scroll={current:0,target:0,last:0,limit:0},t(this.selectorChildren,((e,s)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[s]=e:(this.elements[s]=document.querySelectorAll(e),0===this.elements[s].length?this.elements[s]=null:1===this.elements[s].length&&(this.elements[s]=document.querySelector(e)))})),this.createAnimations()}createAnimations(){this.animations=[],this.animationsTitles=a(this.elements.animationsTitles,(e=>new d.default({element:e}))),this.animationsParagraphs=a(this.elements.animationsParagraphs,(e=>new i.default({element:e}))),this.animationsLabel=a(this.elements.animationsLabel,(e=>new u.default({element:e}))),this.animations.push(...this.animationsTitles,...this.animationsParagraphs)}show(){return new Promise((e=>{this.animationIn=n.default.timeline(),n.default.fromTo(this.element,{autoAlpha:0},{autoAlpha:1}),this.animationIn.call((s=>{this.addEventListeners(),e()}))}))}hide(){return new Promise((e=>{thisNaNpxoveEventListeners(),this.animationOut=n.default.timeline(),n.default.to(this.element,{autoAlpha:0,onComplete:e})}))}onMouseWheel(e){const{pixelY:s}=l(e);this.scroll.target+=s,h.log(s)}onResize(){this.elements.wrapper&&(this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight),t(this.animations,(e=>e.onResize()))}update(){this.scroll.target=n.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=n.default.utils.interpolate(this.scroll.current,this.scroll.target,.1),this.scroll.current<.01&&(this.scroll.current=0),this.elements.wrapper&&(this.elements.wrapper.style[this.transformPrefix]=`translateY(-${this.scroll.current}px)`)}addEventListeners(){window.addEventListener("mousewheel",this.onMouseWheelEvent)}removeEventListeners(){windowNaNpxoveEventListener("mousewheel",this.onMouseWheelEvent)}}}},(function(e){e.h=()=>"32f3d863c98cd6276c51"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,