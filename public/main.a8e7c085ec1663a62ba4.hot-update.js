/*! For license information please see main.a8e7c085ec1663a62ba4.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateimmersive_website("main",{"./app/components/Canvas/Home.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var r=s("./app/components/Canvas/Media.js"),i=s("./node_modules/lodash/map.js"),a=s("./node_modules/ogl/src/extras/Plane.js");const n=class{constructor(){this.medias=document.querySelectorAll(".home__gallery__media__image"),this.createGeometry(),this.createGallery()}createGeometry(){this.geometry=new a.Plane}createGallery(){i(this.medias,((t,e)=>new r.default({element:t,index:e})))}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,s)=>{s.r(e),s.d(e,{Geometry:()=>u});var r=s("./node_modules/ogl/src/math/Vec3.js"),i=s("./node_modules/console-browserify/index.js");const a=new r.Vec3;let n=1,d=1,o=!1;class u{constructor(t,e={}){t.canvas||i.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=n++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=d++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return i.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:s})=>{if(!this.attributes[e])return void i.warn(`active attribute ${e} not being supplied`);const r=this.attributes[e];this.gl.bindBuffer(r.target,r.buffer),this.glState.boundBuffer=r.buffer;let a=1;35674===s&&(a=2),35675===s&&(a=3),35676===s&&(a=4);const n=r.size/a,d=1===a?0:a*a*a,o=1===a?0:a*a;for(let e=0;e<a;e++)this.gl.vertexAttribPointer(t+e,n,r.type,r.normalized,r.stride+d,r.offset+e*o),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,r.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const s=this.attributes[e];s.needsUpdate&&this.updateAttribute(s)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:o?void 0:(i.warn("No position buffer data found to compute bounds"),o=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,s=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||(this.bounds={min:new r.Vec3,max:new r.Vec3,center:new r.Vec3,scale:new r.Vec3,radius:1/0});const i=this.bounds.min,a=this.bounds.max,n=this.bounds.center,d=this.bounds.scale;i.set(1/0),a.set(-1/0);for(let t=0,r=e.length;t<r;t+=s){const s=e[t],r=e[t+1],n=e[t+2];i.x=Math.min(s,i.x),i.y=Math.min(r,i.y),i.z=Math.min(n,i.z),a.x=Math.max(s,a.x),a.y=Math.max(r,a.y),a.z=Math.max(n,a.z)}d.sub(a,i),n.add(i,a).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,s=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||this.computeBoundingBox(t);let r=0;for(let t=0,i=e.length;t<i;t+=s)a.fromArray(e,t),r=Math.max(r,this.bounds.center.squaredDistance(a));this.bounds.radius=Math.sqrt(r)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,s)=>{s.r(e),s.d(e,{Plane:()=>i});var r=s("./node_modules/ogl/src/core/Geometry.js");class i extends r.Geometry{constructor(t,{width:e=1,height:s=1,widthSegments:r=1,heightSegments:a=1,attributes:n={}}={}){const d=r,o=a,u=(d+1)*(o+1),h=d*o*6,l=new Float32Array(3*u),c=new Float32Array(3*u),g=new Float32Array(2*u),b=h>65536?new Uint32Array(h):new Uint16Array(h);i.buildPlane(l,c,g,b,e,s,0,d,o),Object.assign(n,{position:{size:3,data:l},normal:{size:3,data:c},uv:{size:2,data:g},index:{data:b}}),super(t,n)}static buildPlane(t,e,s,r,i,a,n,d,o,u=0,h=1,l=2,c=1,g=-1,b=0,f=0){const m=b,A=i/d,y=a/o;for(let w=0;w<=o;w++){let x=w*y-a/2;for(let a=0;a<=d;a++,b++){let y=a*A-i/2;if(t[3*b+u]=y*c,t[3*b+h]=x*g,t[3*b+l]=n/2,e[3*b+u]=0,e[3*b+h]=0,e[3*b+l]=n>=0?1:-1,s[2*b]=a/d,s[2*b+1]=1-w/o,w===o||a===d)continue;let p=m+a+w*(d+1),R=m+a+(w+1)*(d+1),_=m+a+(w+1)*(d+1)+1,E=m+a+w*(d+1)+1;r[6*f]=p,r[6*f+1]=R,r[6*f+2]=E,r[6*f+3]=R,r[6*f+4]=_,r[6*f+5]=E,f++}}}}}},(function(t){t.h=()=>"db19ad11769527b3859f"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUtJLEdBQU1ELEVBQUssSUFBTXJCLEVBQVEsR0FDbEN5QixFQUFJUCxFQUFLSSxHQUFNRCxFQUFLLElBQU1yQixFQUFRLEdBQUssRUFDdkMwQixFQUFJUixFQUFLSSxFQUFLRCxHQUFNckIsRUFBUSxHQUFLLEVBRXJDcEgsRUFBVyxFQUFMcUksR0FBVU0sRUFDaEIzSSxFQUFXLEVBQUxxSSxFQUFTLEdBQUtPLEVBQ3BCNUksRUFBVyxFQUFMcUksRUFBUyxHQUFLUyxFQUNwQjlJLEVBQVcsRUFBTHFJLEVBQVMsR0FBS08sRUFDcEI1SSxFQUFXLEVBQUxxSSxFQUFTLEdBQUtRLEVBQ3BCN0ksRUFBVyxFQUFMcUksRUFBUyxHQUFLUyxFQUNwQlQsR0FDSCxDQUNKLENBQ0osa0JDakVMVSxFQUFvQkMsRUFBSSxJQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvSG9tZS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvR2VvbWV0cnkuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9leHRyYXMvUGxhbmUuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNZWRpYSBmcm9tICcuL01lZGlhJ1xuaW1wb3J0IG1hcCBmcm9tICdsb2Rhc2gvbWFwJ1xuXG5pbXBvcnQgeyBQbGFuZSB9IGZyb20gJ29nbCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLm1lZGlhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5ob21lX19nYWxsZXJ5X19tZWRpYV9faW1hZ2UnKVxuXG5cdFx0dGhpcy5jcmVhdGVHZW9tZXRyeSgpXG5cdFx0dGhpcy5jcmVhdGVHYWxsZXJ5KClcblx0fVxuXG5cdGNyZWF0ZUdlb21ldHJ5KCkge1xuXHRcdHRoaXMuZ2VvbWV0cnkgPSBuZXcgUGxhbmUoKVxuXHR9XG5cblx0Y3JlYXRlR2FsbGVyeSgpIHtcblx0XHRtYXAodGhpcy5tZWRpYXMsIChlbGVtZW50LCBpbmRleCkgPT4ge1xuXHRcdFx0cmV0dXJuIG5ldyBNZWRpYSh7XG5cdFx0XHRcdGVsZW1lbnQsXG5cdFx0XHRcdGluZGV4LFxuXHRcdFx0fSlcblx0XHR9KVxuXHR9XG59XG4iLCIvLyBhdHRyaWJ1dGUgcGFyYW1zXG4vLyB7XG4vLyAgICAgZGF0YSAtIHR5cGVkIGFycmF5IGVnIFVJbnQxNkFycmF5IGZvciBpbmRpY2VzLCBGbG9hdDMyQXJyYXlcbi8vICAgICBzaXplIC0gaW50IGRlZmF1bHQgMVxuLy8gICAgIGluc3RhbmNlZCAtIGRlZmF1bHQgbnVsbC4gUGFzcyBkaXZpc29yIGFtb3VudFxuLy8gICAgIHR5cGUgLSBnbCBlbnVtIGRlZmF1bHQgZ2wuVU5TSUdORURfU0hPUlQgZm9yICdpbmRleCcsIGdsLkZMT0FUIGZvciBvdGhlcnNcbi8vICAgICBub3JtYWxpemVkIC0gYm9vbGVhbiBkZWZhdWx0IGZhbHNlXG5cbi8vICAgICBidWZmZXIgLSBnbCBidWZmZXIsIGlmIGJ1ZmZlciBleGlzdHMsIGRvbid0IG5lZWQgdG8gcHJvdmlkZSBkYXRhIC0gYWx0aG91Z2ggbmVlZHMgcG9zaXRpb24gZGF0YSBmb3IgYm91bmRzIGNhbGN1bGF0aW9uXG4vLyAgICAgc3RyaWRlIC0gZGVmYXVsdCAwIC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vICAgICBvZmZzZXQgLSBkZWZhdWx0IDAgLSBmb3Igd2hlbiBwYXNzaW5nIGluIGJ1ZmZlclxuLy8gICAgIGNvdW50IC0gZGVmYXVsdCBudWxsIC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vICAgICBtaW4gLSBhcnJheSAtIGZvciB3aGVuIHBhc3NpbmcgaW4gYnVmZmVyXG4vLyAgICAgbWF4IC0gYXJyYXkgLSBmb3Igd2hlbiBwYXNzaW5nIGluIGJ1ZmZlclxuLy8gfVxuXG4vLyBUT0RPOiBmaXQgaW4gdHJhbnNmb3JtIGZlZWRiYWNrXG5cbmltcG9ydCB7IFZlYzMgfSBmcm9tICcuLi9tYXRoL1ZlYzMuanMnO1xuXG5jb25zdCB0ZW1wVmVjMyA9IG5ldyBWZWMzKCk7XG5cbmxldCBJRCA9IDE7XG5sZXQgQVRUUl9JRCA9IDE7XG5cbi8vIFRvIHN0b3AgaW5pZmluaXRlIHdhcm5pbmdzXG5sZXQgaXNCb3VuZHNXYXJuZWQgPSBmYWxzZTtcblxuZXhwb3J0IGNsYXNzIEdlb21ldHJ5IHtcbiAgICBjb25zdHJ1Y3RvcihnbCwgYXR0cmlidXRlcyA9IHt9KSB7XG4gICAgICAgIGlmICghZ2wuY2FudmFzKSBjb25zb2xlLmVycm9yKCdnbCBub3QgcGFzc2VkIGFzIGZpcnN0IGFyZ3VtZW50IHRvIEdlb21ldHJ5Jyk7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgICAgICAgdGhpcy5pZCA9IElEKys7XG5cbiAgICAgICAgLy8gU3RvcmUgb25lIFZBTyBwZXIgcHJvZ3JhbSBhdHRyaWJ1dGUgbG9jYXRpb25zIG9yZGVyXG4gICAgICAgIHRoaXMuVkFPcyA9IHt9O1xuXG4gICAgICAgIHRoaXMuZHJhd1JhbmdlID0geyBzdGFydDogMCwgY291bnQ6IDAgfTtcbiAgICAgICAgdGhpcy5pbnN0YW5jZWRDb3VudCA9IDA7XG5cbiAgICAgICAgLy8gVW5iaW5kIGN1cnJlbnQgVkFPIHNvIHRoYXQgbmV3IGJ1ZmZlcnMgZG9uJ3QgZ2V0IGFkZGVkIHRvIGFjdGl2ZSBtZXNoXG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuYmluZFZlcnRleEFycmF5KG51bGwpO1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmN1cnJlbnRHZW9tZXRyeSA9IG51bGw7XG5cbiAgICAgICAgLy8gQWxpYXMgZm9yIHN0YXRlIHN0b3JlIHRvIGF2b2lkIHJlZHVuZGFudCBjYWxscyBmb3IgZ2xvYmFsIHN0YXRlXG4gICAgICAgIHRoaXMuZ2xTdGF0ZSA9IHRoaXMuZ2wucmVuZGVyZXIuc3RhdGU7XG5cbiAgICAgICAgLy8gY3JlYXRlIHRoZSBidWZmZXJzXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRBdHRyaWJ1dGUoa2V5LCBhdHRyKSB7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlc1trZXldID0gYXR0cjtcblxuICAgICAgICAvLyBTZXQgb3B0aW9uc1xuICAgICAgICBhdHRyLmlkID0gQVRUUl9JRCsrOyAvLyBUT0RPOiBjdXJyZW50bHkgdW51c2VkLCByZW1vdmU/XG4gICAgICAgIGF0dHIuc2l6ZSA9IGF0dHIuc2l6ZSB8fCAxO1xuICAgICAgICBhdHRyLnR5cGUgPVxuICAgICAgICAgICAgYXR0ci50eXBlIHx8XG4gICAgICAgICAgICAoYXR0ci5kYXRhLmNvbnN0cnVjdG9yID09PSBGbG9hdDMyQXJyYXlcbiAgICAgICAgICAgICAgICA/IHRoaXMuZ2wuRkxPQVRcbiAgICAgICAgICAgICAgICA6IGF0dHIuZGF0YS5jb25zdHJ1Y3RvciA9PT0gVWludDE2QXJyYXlcbiAgICAgICAgICAgICAgICA/IHRoaXMuZ2wuVU5TSUdORURfU0hPUlRcbiAgICAgICAgICAgICAgICA6IHRoaXMuZ2wuVU5TSUdORURfSU5UKTsgLy8gVWludDMyQXJyYXlcbiAgICAgICAgYXR0ci50YXJnZXQgPSBrZXkgPT09ICdpbmRleCcgPyB0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSIDogdGhpcy5nbC5BUlJBWV9CVUZGRVI7XG4gICAgICAgIGF0dHIubm9ybWFsaXplZCA9IGF0dHIubm9ybWFsaXplZCB8fCBmYWxzZTtcbiAgICAgICAgYXR0ci5zdHJpZGUgPSBhdHRyLnN0cmlkZSB8fCAwO1xuICAgICAgICBhdHRyLm9mZnNldCA9IGF0dHIub2Zmc2V0IHx8IDA7XG4gICAgICAgIGF0dHIuY291bnQgPSBhdHRyLmNvdW50IHx8IChhdHRyLnN0cmlkZSA/IGF0dHIuZGF0YS5ieXRlTGVuZ3RoIC8gYXR0ci5zdHJpZGUgOiBhdHRyLmRhdGEubGVuZ3RoIC8gYXR0ci5zaXplKTtcbiAgICAgICAgYXR0ci5kaXZpc29yID0gYXR0ci5pbnN0YW5jZWQgfHwgMDtcbiAgICAgICAgYXR0ci5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICBhdHRyLnVzYWdlID0gYXR0ci51c2FnZSB8fCB0aGlzLmdsLlNUQVRJQ19EUkFXO1xuXG4gICAgICAgIGlmICghYXR0ci5idWZmZXIpIHtcbiAgICAgICAgICAgIC8vIFB1c2ggZGF0YSB0byBidWZmZXJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIGdlb21ldHJ5IGNvdW50cy4gSWYgaW5kZXhlZCwgaWdub3JlIHJlZ3VsYXIgYXR0cmlidXRlc1xuICAgICAgICBpZiAoYXR0ci5kaXZpc29yKSB7XG4gICAgICAgICAgICB0aGlzLmlzSW5zdGFuY2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmluc3RhbmNlZENvdW50ICYmIHRoaXMuaW5zdGFuY2VkQ291bnQgIT09IGF0dHIuY291bnQgKiBhdHRyLmRpdmlzb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2dlb21ldHJ5IGhhcyBtdWx0aXBsZSBpbnN0YW5jZWQgYnVmZmVycyBvZiBkaWZmZXJlbnQgbGVuZ3RoJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmluc3RhbmNlZENvdW50ID0gTWF0aC5taW4odGhpcy5pbnN0YW5jZWRDb3VudCwgYXR0ci5jb3VudCAqIGF0dHIuZGl2aXNvcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZWRDb3VudCA9IGF0dHIuY291bnQgKiBhdHRyLmRpdmlzb3I7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaW5kZXgnKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCA9IGF0dHIuY291bnQ7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuYXR0cmlidXRlcy5pbmRleCkge1xuICAgICAgICAgICAgdGhpcy5kcmF3UmFuZ2UuY291bnQgPSBNYXRoLm1heCh0aGlzLmRyYXdSYW5nZS5jb3VudCwgYXR0ci5jb3VudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVBdHRyaWJ1dGUoYXR0cikge1xuICAgICAgICBjb25zdCBpc05ld0J1ZmZlciA9ICFhdHRyLmJ1ZmZlcjtcbiAgICAgICAgaWYgKGlzTmV3QnVmZmVyKSBhdHRyLmJ1ZmZlciA9IHRoaXMuZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgIGlmICh0aGlzLmdsU3RhdGUuYm91bmRCdWZmZXIgIT09IGF0dHIuYnVmZmVyKSB7XG4gICAgICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIoYXR0ci50YXJnZXQsIGF0dHIuYnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMuZ2xTdGF0ZS5ib3VuZEJ1ZmZlciA9IGF0dHIuYnVmZmVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05ld0J1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5nbC5idWZmZXJEYXRhKGF0dHIudGFyZ2V0LCBhdHRyLmRhdGEsIGF0dHIudXNhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nbC5idWZmZXJTdWJEYXRhKGF0dHIudGFyZ2V0LCAwLCBhdHRyLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGF0dHIubmVlZHNVcGRhdGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBzZXRJbmRleCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZSgnaW5kZXgnLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgc2V0RHJhd1JhbmdlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICB0aGlzLmRyYXdSYW5nZS5zdGFydCA9IHN0YXJ0O1xuICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCA9IGNvdW50O1xuICAgIH1cblxuICAgIHNldEluc3RhbmNlZENvdW50KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaW5zdGFuY2VkQ291bnQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBjcmVhdGVWQU8ocHJvZ3JhbSkge1xuICAgICAgICB0aGlzLlZBT3NbcHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcl0gPSB0aGlzLmdsLnJlbmRlcmVyLmNyZWF0ZVZlcnRleEFycmF5KCk7XG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuYmluZFZlcnRleEFycmF5KHRoaXMuVkFPc1twcm9ncmFtLmF0dHJpYnV0ZU9yZGVyXSk7XG4gICAgICAgIHRoaXMuYmluZEF0dHJpYnV0ZXMocHJvZ3JhbSk7XG4gICAgfVxuXG4gICAgYmluZEF0dHJpYnV0ZXMocHJvZ3JhbSkge1xuICAgICAgICAvLyBMaW5rIGFsbCBhdHRyaWJ1dGVzIHRvIHByb2dyYW0gdXNpbmcgZ2wudmVydGV4QXR0cmliUG9pbnRlclxuICAgICAgICBwcm9ncmFtLmF0dHJpYnV0ZUxvY2F0aW9ucy5mb3JFYWNoKChsb2NhdGlvbiwgeyBuYW1lLCB0eXBlIH0pID0+IHtcbiAgICAgICAgICAgIC8vIElmIGdlb21ldHJ5IG1pc3NpbmcgYSByZXF1aXJlZCBzaGFkZXIgYXR0cmlidXRlXG4gICAgICAgICAgICBpZiAoIXRoaXMuYXR0cmlidXRlc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgYWN0aXZlIGF0dHJpYnV0ZSAke25hbWV9IG5vdCBiZWluZyBzdXBwbGllZGApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgYXR0ciA9IHRoaXMuYXR0cmlidXRlc1tuYW1lXTtcblxuICAgICAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKGF0dHIudGFyZ2V0LCBhdHRyLmJ1ZmZlcik7XG4gICAgICAgICAgICB0aGlzLmdsU3RhdGUuYm91bmRCdWZmZXIgPSBhdHRyLmJ1ZmZlcjtcblxuICAgICAgICAgICAgLy8gRm9yIG1hdHJpeCBhdHRyaWJ1dGVzLCBidWZmZXIgbmVlZHMgdG8gYmUgZGVmaW5lZCBwZXIgY29sdW1uXG4gICAgICAgICAgICBsZXQgbnVtTG9jID0gMTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAzNTY3NCkgbnVtTG9jID0gMjsgLy8gbWF0MlxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IDM1Njc1KSBudW1Mb2MgPSAzOyAvLyBtYXQzXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gMzU2NzYpIG51bUxvYyA9IDQ7IC8vIG1hdDRcblxuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IGF0dHIuc2l6ZSAvIG51bUxvYztcbiAgICAgICAgICAgIGNvbnN0IHN0cmlkZSA9IG51bUxvYyA9PT0gMSA/IDAgOiBudW1Mb2MgKiBudW1Mb2MgKiBudW1Mb2M7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBudW1Mb2MgPT09IDEgPyAwIDogbnVtTG9jICogbnVtTG9jO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUxvYzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGxvY2F0aW9uICsgaSwgc2l6ZSwgYXR0ci50eXBlLCBhdHRyLm5vcm1hbGl6ZWQsIGF0dHIuc3RyaWRlICsgc3RyaWRlLCBhdHRyLm9mZnNldCArIGkgKiBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkobG9jYXRpb24gKyBpKTtcblxuICAgICAgICAgICAgICAgIC8vIEZvciBpbnN0YW5jZWQgYXR0cmlidXRlcywgZGl2aXNvciBuZWVkcyB0byBiZSBzZXQuXG4gICAgICAgICAgICAgICAgLy8gRm9yIGZpcmVmb3gsIG5lZWQgdG8gc2V0IGJhY2sgdG8gMCBpZiBub24taW5zdGFuY2VkIGRyYXduIGFmdGVyIGluc3RhbmNlZC4gRWxzZSB3b24ndCByZW5kZXJcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnZlcnRleEF0dHJpYkRpdmlzb3IobG9jYXRpb24gKyBpLCBhdHRyLmRpdmlzb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBCaW5kIGluZGljZXMgaWYgZ2VvbWV0cnkgaW5kZXhlZFxuICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmluZGV4KSB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5hdHRyaWJ1dGVzLmluZGV4LmJ1ZmZlcik7XG4gICAgfVxuXG4gICAgZHJhdyh7IHByb2dyYW0sIG1vZGUgPSB0aGlzLmdsLlRSSUFOR0xFUyB9KSB7XG4gICAgICAgIGlmICh0aGlzLmdsLnJlbmRlcmVyLmN1cnJlbnRHZW9tZXRyeSAhPT0gYCR7dGhpcy5pZH1fJHtwcm9ncmFtLmF0dHJpYnV0ZU9yZGVyfWApIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5WQU9zW3Byb2dyYW0uYXR0cmlidXRlT3JkZXJdKSB0aGlzLmNyZWF0ZVZBTyhwcm9ncmFtKTtcbiAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuYmluZFZlcnRleEFycmF5KHRoaXMuVkFPc1twcm9ncmFtLmF0dHJpYnV0ZU9yZGVyXSk7XG4gICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmN1cnJlbnRHZW9tZXRyeSA9IGAke3RoaXMuaWR9XyR7cHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcn1gO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgYW55IGF0dHJpYnV0ZXMgbmVlZCB1cGRhdGluZ1xuICAgICAgICBwcm9ncmFtLmF0dHJpYnV0ZUxvY2F0aW9ucy5mb3JFYWNoKChsb2NhdGlvbiwgeyBuYW1lIH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHIgPSB0aGlzLmF0dHJpYnV0ZXNbbmFtZV07XG4gICAgICAgICAgICBpZiAoYXR0ci5uZWVkc1VwZGF0ZSkgdGhpcy51cGRhdGVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLmlzSW5zdGFuY2VkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5kcmF3RWxlbWVudHNJbnN0YW5jZWQoXG4gICAgICAgICAgICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd1JhbmdlLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuaW5kZXgudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmluZGV4Lm9mZnNldCArIHRoaXMuZHJhd1JhbmdlLnN0YXJ0ICogMixcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZWRDb3VudFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuZHJhd0FycmF5c0luc3RhbmNlZChtb2RlLCB0aGlzLmRyYXdSYW5nZS5zdGFydCwgdGhpcy5kcmF3UmFuZ2UuY291bnQsIHRoaXMuaW5zdGFuY2VkQ291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5pbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wuZHJhd0VsZW1lbnRzKG1vZGUsIHRoaXMuZHJhd1JhbmdlLmNvdW50LCB0aGlzLmF0dHJpYnV0ZXMuaW5kZXgudHlwZSwgdGhpcy5hdHRyaWJ1dGVzLmluZGV4Lm9mZnNldCArIHRoaXMuZHJhd1JhbmdlLnN0YXJ0ICogMik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wuZHJhd0FycmF5cyhtb2RlLCB0aGlzLmRyYXdSYW5nZS5zdGFydCwgdGhpcy5kcmF3UmFuZ2UuY291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0UG9zaXRpb24oKSB7XG4gICAgICAgIC8vIFVzZSBwb3NpdGlvbiBidWZmZXIsIG9yIG1pbi9tYXggaWYgYXZhaWxhYmxlXG4gICAgICAgIGNvbnN0IGF0dHIgPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247XG4gICAgICAgIC8vIGlmIChhdHRyLm1pbikgcmV0dXJuIFsuLi5hdHRyLm1pbiwgLi4uYXR0ci5tYXhdO1xuICAgICAgICBpZiAoYXR0ci5kYXRhKSByZXR1cm4gYXR0cjtcbiAgICAgICAgaWYgKGlzQm91bmRzV2FybmVkKSByZXR1cm47XG4gICAgICAgIGNvbnNvbGUud2FybignTm8gcG9zaXRpb24gYnVmZmVyIGRhdGEgZm91bmQgdG8gY29tcHV0ZSBib3VuZHMnKTtcbiAgICAgICAgcmV0dXJuIChpc0JvdW5kc1dhcm5lZCA9IHRydWUpO1xuICAgIH1cblxuICAgIGNvbXB1dGVCb3VuZGluZ0JveChhdHRyKSB7XG4gICAgICAgIGlmICghYXR0cikgYXR0ciA9IHRoaXMuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBhdHRyLmRhdGE7XG4gICAgICAgIGNvbnN0IHN0cmlkZSA9IGF0dHIuc3RyaWRlID8gYXR0ci5zdHJpZGUgLyBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCA6IGF0dHIuc2l6ZTtcblxuICAgICAgICBpZiAoIXRoaXMuYm91bmRzKSB7XG4gICAgICAgICAgICB0aGlzLmJvdW5kcyA9IHtcbiAgICAgICAgICAgICAgICBtaW46IG5ldyBWZWMzKCksXG4gICAgICAgICAgICAgICAgbWF4OiBuZXcgVmVjMygpLFxuICAgICAgICAgICAgICAgIGNlbnRlcjogbmV3IFZlYzMoKSxcbiAgICAgICAgICAgICAgICBzY2FsZTogbmV3IFZlYzMoKSxcbiAgICAgICAgICAgICAgICByYWRpdXM6IEluZmluaXR5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMuYm91bmRzLm1pbjtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5ib3VuZHMubWF4O1xuICAgICAgICBjb25zdCBjZW50ZXIgPSB0aGlzLmJvdW5kcy5jZW50ZXI7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gdGhpcy5ib3VuZHMuc2NhbGU7XG5cbiAgICAgICAgbWluLnNldCgrSW5maW5pdHkpO1xuICAgICAgICBtYXguc2V0KC1JbmZpbml0eSk7XG5cbiAgICAgICAgLy8gVE9ETzogY2hlY2sgc2l6ZSBvZiBwb3NpdGlvbiAoZWcgdHJpYW5nbGUgd2l0aCBWZWMyKVxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKz0gc3RyaWRlKSB7XG4gICAgICAgICAgICBjb25zdCB4ID0gYXJyYXlbaV07XG4gICAgICAgICAgICBjb25zdCB5ID0gYXJyYXlbaSArIDFdO1xuICAgICAgICAgICAgY29uc3QgeiA9IGFycmF5W2kgKyAyXTtcblxuICAgICAgICAgICAgbWluLnggPSBNYXRoLm1pbih4LCBtaW4ueCk7XG4gICAgICAgICAgICBtaW4ueSA9IE1hdGgubWluKHksIG1pbi55KTtcbiAgICAgICAgICAgIG1pbi56ID0gTWF0aC5taW4oeiwgbWluLnopO1xuXG4gICAgICAgICAgICBtYXgueCA9IE1hdGgubWF4KHgsIG1heC54KTtcbiAgICAgICAgICAgIG1heC55ID0gTWF0aC5tYXgoeSwgbWF4LnkpO1xuICAgICAgICAgICAgbWF4LnogPSBNYXRoLm1heCh6LCBtYXgueik7XG4gICAgICAgIH1cblxuICAgICAgICBzY2FsZS5zdWIobWF4LCBtaW4pO1xuICAgICAgICBjZW50ZXIuYWRkKG1pbiwgbWF4KS5kaXZpZGUoMik7XG4gICAgfVxuXG4gICAgY29tcHV0ZUJvdW5kaW5nU3BoZXJlKGF0dHIpIHtcbiAgICAgICAgaWYgKCFhdHRyKSBhdHRyID0gdGhpcy5nZXRQb3NpdGlvbigpO1xuICAgICAgICBjb25zdCBhcnJheSA9IGF0dHIuZGF0YTtcbiAgICAgICAgY29uc3Qgc3RyaWRlID0gYXR0ci5zdHJpZGUgPyBhdHRyLnN0cmlkZSAvIGFycmF5LkJZVEVTX1BFUl9FTEVNRU5UIDogYXR0ci5zaXplO1xuXG4gICAgICAgIGlmICghdGhpcy5ib3VuZHMpIHRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KGF0dHIpO1xuXG4gICAgICAgIGxldCBtYXhSYWRpdXNTcSA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcbiAgICAgICAgICAgIHRlbXBWZWMzLmZyb21BcnJheShhcnJheSwgaSk7XG4gICAgICAgICAgICBtYXhSYWRpdXNTcSA9IE1hdGgubWF4KG1heFJhZGl1c1NxLCB0aGlzLmJvdW5kcy5jZW50ZXIuc3F1YXJlZERpc3RhbmNlKHRlbXBWZWMzKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJvdW5kcy5yYWRpdXMgPSBNYXRoLnNxcnQobWF4UmFkaXVzU3EpO1xuICAgIH1cblxuICAgIHJlbW92ZSgpIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuVkFPcykge1xuICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5kZWxldGVWZXJ0ZXhBcnJheSh0aGlzLlZBT3Nba2V5XSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5WQU9zW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgICAgICAgICAgdGhpcy5nbC5kZWxldGVCdWZmZXIodGhpcy5hdHRyaWJ1dGVzW2tleV0uYnVmZmVyKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEdlb21ldHJ5IH0gZnJvbSAnLi4vY29yZS9HZW9tZXRyeS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBQbGFuZSBleHRlbmRzIEdlb21ldHJ5IHtcbiAgICBjb25zdHJ1Y3RvcihnbCwgeyB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIHdpZHRoU2VnbWVudHMgPSAxLCBoZWlnaHRTZWdtZW50cyA9IDEsIGF0dHJpYnV0ZXMgPSB7fSB9ID0ge30pIHtcbiAgICAgICAgY29uc3Qgd1NlZ3MgPSB3aWR0aFNlZ21lbnRzO1xuICAgICAgICBjb25zdCBoU2VncyA9IGhlaWdodFNlZ21lbnRzO1xuXG4gICAgICAgIC8vIERldGVybWluZSBsZW5ndGggb2YgYXJyYXlzXG4gICAgICAgIGNvbnN0IG51bSA9ICh3U2VncyArIDEpICogKGhTZWdzICsgMSk7XG4gICAgICAgIGNvbnN0IG51bUluZGljZXMgPSB3U2VncyAqIGhTZWdzICogNjtcblxuICAgICAgICAvLyBHZW5lcmF0ZSBlbXB0eSBhcnJheXMgb25jZVxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IG5ldyBGbG9hdDMyQXJyYXkobnVtICogMyk7XG4gICAgICAgIGNvbnN0IG5vcm1hbCA9IG5ldyBGbG9hdDMyQXJyYXkobnVtICogMyk7XG4gICAgICAgIGNvbnN0IHV2ID0gbmV3IEZsb2F0MzJBcnJheShudW0gKiAyKTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBudW1JbmRpY2VzID4gNjU1MzYgPyBuZXcgVWludDMyQXJyYXkobnVtSW5kaWNlcykgOiBuZXcgVWludDE2QXJyYXkobnVtSW5kaWNlcyk7XG5cbiAgICAgICAgUGxhbmUuYnVpbGRQbGFuZShwb3NpdGlvbiwgbm9ybWFsLCB1diwgaW5kZXgsIHdpZHRoLCBoZWlnaHQsIDAsIHdTZWdzLCBoU2Vncyk7XG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihhdHRyaWJ1dGVzLCB7XG4gICAgICAgICAgICBwb3NpdGlvbjogeyBzaXplOiAzLCBkYXRhOiBwb3NpdGlvbiB9LFxuICAgICAgICAgICAgbm9ybWFsOiB7IHNpemU6IDMsIGRhdGE6IG5vcm1hbCB9LFxuICAgICAgICAgICAgdXY6IHsgc2l6ZTogMiwgZGF0YTogdXYgfSxcbiAgICAgICAgICAgIGluZGV4OiB7IGRhdGE6IGluZGV4IH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN1cGVyKGdsLCBhdHRyaWJ1dGVzKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYnVpbGRQbGFuZShwb3NpdGlvbiwgbm9ybWFsLCB1diwgaW5kZXgsIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCB3U2VncywgaFNlZ3MsIHUgPSAwLCB2ID0gMSwgdyA9IDIsIHVEaXIgPSAxLCB2RGlyID0gLTEsIGkgPSAwLCBpaSA9IDApIHtcbiAgICAgICAgY29uc3QgaW8gPSBpO1xuICAgICAgICBjb25zdCBzZWdXID0gd2lkdGggLyB3U2VncztcbiAgICAgICAgY29uc3Qgc2VnSCA9IGhlaWdodCAvIGhTZWdzO1xuXG4gICAgICAgIGZvciAobGV0IGl5ID0gMDsgaXkgPD0gaFNlZ3M7IGl5KyspIHtcbiAgICAgICAgICAgIGxldCB5ID0gaXkgKiBzZWdIIC0gaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGZvciAobGV0IGl4ID0gMDsgaXggPD0gd1NlZ3M7IGl4KyssIGkrKykge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gaXggKiBzZWdXIC0gd2lkdGggLyAyO1xuXG4gICAgICAgICAgICAgICAgcG9zaXRpb25baSAqIDMgKyB1XSA9IHggKiB1RGlyO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uW2kgKiAzICsgdl0gPSB5ICogdkRpcjtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbltpICogMyArIHddID0gZGVwdGggLyAyO1xuXG4gICAgICAgICAgICAgICAgbm9ybWFsW2kgKiAzICsgdV0gPSAwO1xuICAgICAgICAgICAgICAgIG5vcm1hbFtpICogMyArIHZdID0gMDtcbiAgICAgICAgICAgICAgICBub3JtYWxbaSAqIDMgKyB3XSA9IGRlcHRoID49IDAgPyAxIDogLTE7XG5cbiAgICAgICAgICAgICAgICB1dltpICogMl0gPSBpeCAvIHdTZWdzO1xuICAgICAgICAgICAgICAgIHV2W2kgKiAyICsgMV0gPSAxIC0gaXkgLyBoU2VncztcblxuICAgICAgICAgICAgICAgIGlmIChpeSA9PT0gaFNlZ3MgfHwgaXggPT09IHdTZWdzKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBsZXQgYSA9IGlvICsgaXggKyBpeSAqICh3U2VncyArIDEpO1xuICAgICAgICAgICAgICAgIGxldCBiID0gaW8gKyBpeCArIChpeSArIDEpICogKHdTZWdzICsgMSk7XG4gICAgICAgICAgICAgICAgbGV0IGMgPSBpbyArIGl4ICsgKGl5ICsgMSkgKiAod1NlZ3MgKyAxKSArIDE7XG4gICAgICAgICAgICAgICAgbGV0IGQgPSBpbyArIGl4ICsgaXkgKiAod1NlZ3MgKyAxKSArIDE7XG5cbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDZdID0gYTtcbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDYgKyAxXSA9IGI7XG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2ICsgMl0gPSBkO1xuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNiArIDNdID0gYjtcbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDYgKyA0XSA9IGM7XG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2ICsgNV0gPSBkO1xuICAgICAgICAgICAgICAgIGlpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCJkYjE5YWQxMTc2OTUyN2IzODU5ZlwiKSJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsInRoaXMiLCJtZWRpYXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjcmVhdGVHZW9tZXRyeSIsImNyZWF0ZUdhbGxlcnkiLCJnZW9tZXRyeSIsIlBsYW5lIiwibWFwIiwiZWxlbWVudCIsImluZGV4IiwiTWVkaWEiLCJ0ZW1wVmVjMyIsIlZlYzMiLCJJRCIsIkFUVFJfSUQiLCJpc0JvdW5kc1dhcm5lZCIsIkdlb21ldHJ5IiwiZ2wiLCJhdHRyaWJ1dGVzIiwiY2FudmFzIiwiY29uc29sZSIsImVycm9yIiwiaWQiLCJWQU9zIiwiZHJhd1JhbmdlIiwic3RhcnQiLCJjb3VudCIsImluc3RhbmNlZENvdW50IiwicmVuZGVyZXIiLCJiaW5kVmVydGV4QXJyYXkiLCJjdXJyZW50R2VvbWV0cnkiLCJnbFN0YXRlIiwic3RhdGUiLCJrZXkiLCJhZGRBdHRyaWJ1dGUiLCJhdHRyIiwic2l6ZSIsInR5cGUiLCJkYXRhIiwiRmxvYXQzMkFycmF5IiwiRkxPQVQiLCJVaW50MTZBcnJheSIsIlVOU0lHTkVEX1NIT1JUIiwiVU5TSUdORURfSU5UIiwidGFyZ2V0IiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJBUlJBWV9CVUZGRVIiLCJub3JtYWxpemVkIiwic3RyaWRlIiwib2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImxlbmd0aCIsImRpdmlzb3IiLCJpbnN0YW5jZWQiLCJuZWVkc1VwZGF0ZSIsInVzYWdlIiwiU1RBVElDX0RSQVciLCJidWZmZXIiLCJ1cGRhdGVBdHRyaWJ1dGUiLCJpc0luc3RhbmNlZCIsIndhcm4iLCJNYXRoIiwibWluIiwibWF4IiwiaXNOZXdCdWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJib3VuZEJ1ZmZlciIsImJpbmRCdWZmZXIiLCJidWZmZXJEYXRhIiwiYnVmZmVyU3ViRGF0YSIsInNldEluZGV4IiwidmFsdWUiLCJzZXREcmF3UmFuZ2UiLCJzZXRJbnN0YW5jZWRDb3VudCIsImNyZWF0ZVZBTyIsInByb2dyYW0iLCJhdHRyaWJ1dGVPcmRlciIsImNyZWF0ZVZlcnRleEFycmF5IiwiYmluZEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVMb2NhdGlvbnMiLCJmb3JFYWNoIiwibG9jYXRpb24iLCJuYW1lIiwibnVtTG9jIiwiaSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYkRpdmlzb3IiLCJkcmF3IiwibW9kZSIsIlRSSUFOR0xFUyIsImRyYXdFbGVtZW50c0luc3RhbmNlZCIsImRyYXdBcnJheXNJbnN0YW5jZWQiLCJkcmF3RWxlbWVudHMiLCJkcmF3QXJyYXlzIiwiZ2V0UG9zaXRpb24iLCJwb3NpdGlvbiIsImNvbXB1dGVCb3VuZGluZ0JveCIsImFycmF5IiwiQllURVNfUEVSX0VMRU1FTlQiLCJib3VuZHMiLCJjZW50ZXIiLCJzY2FsZSIsInJhZGl1cyIsIkluZmluaXR5Iiwic2V0IiwibCIsIngiLCJ5IiwieiIsInN1YiIsImFkZCIsImRpdmlkZSIsImNvbXB1dGVCb3VuZGluZ1NwaGVyZSIsIm1heFJhZGl1c1NxIiwiZnJvbUFycmF5Iiwic3F1YXJlZERpc3RhbmNlIiwic3FydCIsInJlbW92ZSIsImRlbGV0ZVZlcnRleEFycmF5IiwiZGVsZXRlQnVmZmVyIiwid2lkdGgiLCJoZWlnaHQiLCJ3aWR0aFNlZ21lbnRzIiwiaGVpZ2h0U2VnbWVudHMiLCJ3U2VncyIsImhTZWdzIiwibnVtIiwibnVtSW5kaWNlcyIsIm5vcm1hbCIsInV2IiwiVWludDMyQXJyYXkiLCJidWlsZFBsYW5lIiwiT2JqZWN0IiwiYXNzaWduIiwic3VwZXIiLCJkZXB0aCIsInUiLCJ2IiwidyIsInVEaXIiLCJ2RGlyIiwiaWkiLCJpbyIsInNlZ1ciLCJzZWdIIiwiaXkiLCJpeCIsImEiLCJiIiwiYyIsImQiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiaCJdLCJzb3VyY2VSb290IjoiIn0=