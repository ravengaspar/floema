/*! For license information please see main.ad784bee35f7957c9c52.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateimmersive_website("main",{"./app/shaders/plane-fragment.glsl":(t,e,i)=>{i.r(e),i.d(e,{default:()=>r});const r="precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n}\n"},"./app/shaders/plane-vertex.glsl":(t,e,i)=>{i.r(e),i.d(e,{default:()=>r});const r="#define GLSLIFY 1\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"},"./app/components/Canvas/Media.js":(t,e,i)=>{i.r(e),i.d(e,{default:()=>l});var r=i("./node_modules/ogl/src/core/Texture.js"),s=i("./node_modules/ogl/src/core/Program.js"),a=i("./node_modules/ogl/src/core/Mesh.js"),n=i("./app/shaders/plane-fragment.glsl"),h=i("./app/shaders/plane-vertex.glsl");const l=class{constructor({element:t,geometry:e,gl:i,index:r,scene:s,sizes:a}){this.element=t,this.geometry=e,this.gl=i,this.scene=s,this.index=r,this.sizes=a,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){this.texture=new r.Texture(this.gl),this.image=new window.Image,this.image.crossOrigin="anonymous",this.image.src=this.element.getAttribute("data-src"),this.image.onload=t=>this.texture.image=this.image}createProgram(){this.program=new s.Program(this.gl,{fragment:n.default,vertex:h.default,uniforms:{tMap:{value:this.texture}}})}createMesh(){this.mesh=new a.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.scale.x=2}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(t),this.updateX(),this.updateY()}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height}update(t){this.bounds&&(this.updateX(t.x),this.updateY(t.y))}onResize(t){this.createBounds(t)}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,i)=>{i.r(e),i.d(e,{Mesh:()=>l});var r=i("./node_modules/ogl/src/core/Transform.js"),s=i("./node_modules/ogl/src/math/Mat3.js"),a=i("./node_modules/ogl/src/math/Mat4.js"),n=i("./node_modules/console-browserify/index.js");let h=0;class l extends r.Transform{constructor(t,{geometry:e,program:i,mode:r=t.TRIANGLES,frustumCulled:l=!0,renderOrder:o=0}={}){super(),t.canvas||n.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=h++,this.geometry=e,this.program=i,this.mode=r,this.frustumCulled=l,this.renderOrder=o,this.modelViewMatrix=new a.Mat4,this.normalMatrix=new s.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t}))),t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,i)=>{i.r(e),i.d(e,{Program:()=>n});var r=i("./node_modules/console-browserify/index.js");let s=1;const a={};class n{constructor(t,{vertex:e,fragment:i,uniforms:a={},transparent:n=!1,cullFace:h=t.BACK,frontFace:o=t.CCW,depthTest:u=!0,depthWrite:g=!0,depthFunc:m=t.LESS}={}){t.canvas||r.error("gl not passed as fist argument to Program"),this.gl=t,this.uniforms=a,this.id=s++,e||r.warn("vertex shader not supplied"),i||r.warn("fragment shader not supplied"),this.transparent=n,this.cullFace=h,this.frontFace=o,this.depthTest=u,this.depthWrite=g,this.depthFunc=m,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const d=t.createShader(t.VERTEX_SHADER);t.shaderSource(d,e),t.compileShader(d),""!==t.getShaderInfoLog(d)&&r.warn(`${t.getShaderInfoLog(d)}\nVertex Shader\n${l(e)}`);const c=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(c,i),t.compileShader(c),""!==t.getShaderInfoLog(c)&&r.warn(`${t.getShaderInfoLog(c)}\nFragment Shader\n${l(i)}`),this.program=t.createProgram(),t.attachShader(this.program,d),t.attachShader(this.program,c),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return r.warn(t.getProgramInfoLog(this.program));t.deleteShader(d),t.deleteShader(c),this.uniformLocations=new Map;let p=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<p;e++){let i=t.getActiveUniform(this.program,e);this.uniformLocations.set(i,t.getUniformLocation(this.program,i.name));const r=i.name.match(/(\w+)/g);i.uniformName=r[0],3===r.length?(i.isStructArray=!0,i.structIndex=Number(r[1]),i.structProperty=r[2]):2===r.length&&isNaN(Number(r[1]))&&(i.isStruct=!0,i.structProperty=r[1])}this.attributeLocations=new Map;const f=[],x=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<x;e++){const i=t.getActiveAttrib(this.program,e),r=t.getAttribLocation(this.program,i.name);-1!==r&&(f[r]=i.name,this.attributeLocations.set(i,r))}this.attributeOrder=f.join("")}setBlendFunc(t,e,i,r){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=i,this.blendFunc.dstAlpha=r,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,i)=>{let r=i.uniformName,s=this.uniforms[r];if(i.isStruct&&(s=s[i.structProperty],r+=`.${i.structProperty}`),i.isStructArray&&(s=s[i.structIndex][i.structProperty],r+=`[${i.structIndex}].${i.structProperty}`),!s)return u(`Active uniform ${r} has not been supplied`);if(s&&void 0===s.value)return u(`${r} uniform is missing a value parameter`);if(s.value.texture)return e+=1,s.value.update(e),h(this.gl,i.type,t,e);if(s.value.length&&s.value[0].texture){const r=[];return s.value.forEach((t=>{e+=1,t.update(e),r.push(e)})),h(this.gl,i.type,t,r)}h(this.gl,i.type,t,s.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function h(t,e,i,r){r=r.length?function(t){const e=t.length,i=t[0].length;if(void 0===i)return t;const r=e*i;let s=a[r];s||(a[r]=s=new Float32Array(r));for(let r=0;r<e;r++)s.set(t[r],r*i);return s}(r):r;const s=t.renderer.state.uniformLocations.get(i);if(r.length)if(void 0===s||s.length!==r.length)t.renderer.state.uniformLocations.set(i,r.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let i=0,r=t.length;i<r;i++)if(t[i]!==e[i])return!1;return!0}(s,r))return;s.set?s.set(r):function(t,e){for(let i=0,r=t.length;i<r;i++)t[i]=e[i]}(s,r),t.renderer.state.uniformLocations.set(i,s)}else{if(s===r)return;t.renderer.state.uniformLocations.set(i,r)}switch(e){case 5126:return r.length?t.uniform1fv(i,r):t.uniform1f(i,r);case 35664:return t.uniform2fv(i,r);case 35665:return t.uniform3fv(i,r);case 35666:return t.uniform4fv(i,r);case 35670:case 5124:case 35678:case 35680:return r.length?t.uniform1iv(i,r):t.uniform1i(i,r);case 35671:case 35667:return t.uniform2iv(i,r);case 35672:case 35668:return t.uniform3iv(i,r);case 35673:case 35669:return t.uniform4iv(i,r);case 35674:return t.uniformMatrix2fv(i,!1,r);case 35675:return t.uniformMatrix3fv(i,!1,r);case 35676:return t.uniformMatrix4fv(i,!1,r)}}function l(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let o=0;function u(t){o>100||(r.warn(t),o++,o>100&&r.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Texture.js":(t,e,i)=>{i.r(e),i.d(e,{Texture:()=>n});const r=new Uint8Array(4);function s(t){return 0==(t&t-1)}let a=1;class n{constructor(t,{image:e,target:i=t.TEXTURE_2D,type:r=t.UNSIGNED_BYTE,format:s=t.RGBA,internalFormat:n=s,wrapS:h=t.CLAMP_TO_EDGE,wrapT:l=t.CLAMP_TO_EDGE,generateMipmaps:o=!0,minFilter:u=(o?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:g=t.LINEAR,premultiplyAlpha:m=!1,unpackAlignment:d=4,flipY:c=i==t.TEXTURE_2D,anisotropy:p=0,level:f=0,width:x,height:E=x}={}){this.gl=t,this.id=a++,this.image=e,this.target=i,this.type=r,this.format=s,this.internalFormat=n,this.minFilter=u,this.magFilter=g,this.wrapS=h,this.wrapT=l,this.generateMipmaps=o,this.premultiplyAlpha=m,this.unpackAlignment=d,this.flipY=c,this.anisotropy=Math.min(p,this.gl.renderer.parameters.maxAnisotropy),this.level=f,this.width=x,this.height=E,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||s(this.image.width)&&s(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,r);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,r);this.store.image=this.image}}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,i)=>{i.r(e),i.d(e,{Mat3:()=>s});var r=i("./node_modules/ogl/src/math/functions/Mat3Func.js");class s extends Array{constructor(t=1,e=0,i=0,r=0,s=1,a=0,n=0,h=0,l=1){return super(t,e,i,r,s,a,n,h,l),this}set(t,e,i,s,a,n,h,l,o){return t.length?this.copy(t):(r.set(this,t,e,i,s,a,n,h,l,o),this)}translate(t,e=this){return r.translate(this,e,t),this}rotate(t,e=this){return r.rotate(this,e,t),this}scale(t,e=this){return r.scale(this,e,t),this}multiply(t,e){return e?r.multiply(this,t,e):r.multiply(this,this,t),this}identity(){return r.identity(this),this}copy(t){return r.copy(this,t),this}fromMatrix4(t){return r.fromMat4(this,t),this}fromQuaternion(t){return r.fromQuat(this,t),this}fromBasis(t,e,i){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],i[0],i[1],i[2]),this}inverse(t=this){return r.invert(this,t),this}getNormalMatrix(t){return r.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,i)=>{i.r(e),i.d(e,{add:()=>x,copy:()=>a,determinant:()=>u,fromMat4:()=>r,fromQuat:()=>s,identity:()=>h,invert:()=>o,multiply:()=>g,multiplyScalar:()=>M,normalFromMat4:()=>p,projection:()=>f,rotate:()=>d,scale:()=>c,set:()=>n,subtract:()=>E,translate:()=>m,transpose:()=>l});function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function s(t,e){let i=e[0],r=e[1],s=e[2],a=e[3],n=i+i,h=r+r,l=s+s,o=i*n,u=r*n,g=r*h,m=s*n,d=s*h,c=s*l,p=a*n,f=a*h,x=a*l;return t[0]=1-g-c,t[3]=u-x,t[6]=m+f,t[1]=u+x,t[4]=1-o-c,t[7]=d-p,t[2]=m-f,t[5]=d+p,t[8]=1-o-g,t}function a(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function n(t,e,i,r,s,a,n,h,l,o){return t[0]=e,t[1]=i,t[2]=r,t[3]=s,t[4]=a,t[5]=n,t[6]=h,t[7]=l,t[8]=o,t}function h(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function l(t,e){if(t===e){let i=e[1],r=e[2],s=e[5];t[1]=e[3],t[2]=e[6],t[3]=i,t[5]=e[7],t[6]=r,t[7]=s}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function o(t,e){let i=e[0],r=e[1],s=e[2],a=e[3],n=e[4],h=e[5],l=e[6],o=e[7],u=e[8],g=u*n-h*o,m=-u*a+h*l,d=o*a-n*l,c=i*g+r*m+s*d;return c?(c=1/c,t[0]=g*c,t[1]=(-u*r+s*o)*c,t[2]=(h*r-s*n)*c,t[3]=m*c,t[4]=(u*i-s*l)*c,t[5]=(-h*i+s*a)*c,t[6]=d*c,t[7]=(-o*i+r*l)*c,t[8]=(n*i-r*a)*c,t):null}function u(t){let e=t[0],i=t[1],r=t[2],s=t[3],a=t[4],n=t[5],h=t[6],l=t[7],o=t[8];return e*(o*a-n*l)+i*(-o*s+n*h)+r*(l*s-a*h)}function g(t,e,i){let r=e[0],s=e[1],a=e[2],n=e[3],h=e[4],l=e[5],o=e[6],u=e[7],g=e[8],m=i[0],d=i[1],c=i[2],p=i[3],f=i[4],x=i[5],E=i[6],M=i[7],v=i[8];return t[0]=m*r+d*n+c*o,t[1]=m*s+d*h+c*u,t[2]=m*a+d*l+c*g,t[3]=p*r+f*n+x*o,t[4]=p*s+f*h+x*u,t[5]=p*a+f*l+x*g,t[6]=E*r+M*n+v*o,t[7]=E*s+M*h+v*u,t[8]=E*a+M*l+v*g,t}function m(t,e,i){let r=e[0],s=e[1],a=e[2],n=e[3],h=e[4],l=e[5],o=e[6],u=e[7],g=e[8],m=i[0],d=i[1];return t[0]=r,t[1]=s,t[2]=a,t[3]=n,t[4]=h,t[5]=l,t[6]=m*r+d*n+o,t[7]=m*s+d*h+u,t[8]=m*a+d*l+g,t}function d(t,e,i){let r=e[0],s=e[1],a=e[2],n=e[3],h=e[4],l=e[5],o=e[6],u=e[7],g=e[8],m=Math.sin(i),d=Math.cos(i);return t[0]=d*r+m*n,t[1]=d*s+m*h,t[2]=d*a+m*l,t[3]=d*n-m*r,t[4]=d*h-m*s,t[5]=d*l-m*a,t[6]=o,t[7]=u,t[8]=g,t}function c(t,e,i){let r=i[0],s=i[1];return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=s*e[3],t[4]=s*e[4],t[5]=s*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function p(t,e){let i=e[0],r=e[1],s=e[2],a=e[3],n=e[4],h=e[5],l=e[6],o=e[7],u=e[8],g=e[9],m=e[10],d=e[11],c=e[12],p=e[13],f=e[14],x=e[15],E=i*h-r*n,M=i*l-s*n,v=i*o-a*n,w=r*l-s*h,A=r*o-a*h,T=s*o-a*l,_=u*p-g*c,F=u*f-m*c,S=u*x-d*c,y=g*f-m*p,P=g*x-d*p,b=m*x-d*f,R=E*b-M*P+v*y+w*S-A*F+T*_;return R?(R=1/R,t[0]=(h*b-l*P+o*y)*R,t[1]=(l*S-n*b-o*F)*R,t[2]=(n*P-h*S+o*_)*R,t[3]=(s*P-r*b-a*y)*R,t[4]=(i*b-s*S+a*F)*R,t[5]=(r*S-i*P-a*_)*R,t[6]=(p*T-f*A+x*w)*R,t[7]=(f*v-c*T-x*M)*R,t[8]=(c*A-p*v+x*E)*R,t):null}function f(t,e,i){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/i,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function x(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t[2]=e[2]+i[2],t[3]=e[3]+i[3],t[4]=e[4]+i[4],t[5]=e[5]+i[5],t[6]=e[6]+i[6],t[7]=e[7]+i[7],t[8]=e[8]+i[8],t}function E(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t[2]=e[2]-i[2],t[3]=e[3]-i[3],t[4]=e[4]-i[4],t[5]=e[5]-i[5],t[6]=e[6]-i[6],t[7]=e[7]-i[7],t[8]=e[8]-i[8],t}function M(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t[3]=e[3]*i,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*i,t}}},(function(t){t.h=()=>"ab6a26ca9975f759631a"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,