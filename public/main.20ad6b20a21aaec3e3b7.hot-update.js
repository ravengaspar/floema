/*! For license information please see main.20ad6b20a21aaec3e3b7.hot-update.js.LICENSE.txt */
self.webpackHotUpdateimmersive_website("main",{"./node_modules/gsap/CSSPlugin.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{CSSPlugin:()=>Mt,_createElement:()=>I,_getBBox:()=>X,checkPrefix:()=>N,default:()=>Mt});var r,n,i,a,o,h,l,u,d=s("./node_modules/gsap/gsap-core.js"),c={},p=180/Math.PI,m=Math.PI/180,f=Math.atan2,_=/([A-Z])/g,g=/(left|right|width|margin|padding|x)/i,v=/[\s,\(]\S/,y={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},x=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},b=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},w=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},j=function(t,e){var s=e.s+e.c*t;e.set(e.t,e.p,~~(s+(s<0?-.5:.5))+e.u,e)},M=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},T=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},A=function(t,e,s){return t.style[e]=s},E=function(t,e,s){return t.style.setProperty(e,s)},S=function(t,e,s){return t._gsap[e]=s},C=function(t,e,s){return t._gsap.scaleX=t._gsap.scaleY=s},O=function(t,e,s,r,n){var i=t._gsap;i.scaleX=i.scaleY=s,i.renderTransform(n,i)},P=function(t,e,s,r,n){var i=t._gsap;i[e]=s,i.renderTransform(n,i)},L="transform",F=L+"Origin",R=function(t){var e=this,s=this.target,r=s.style;if(t in c){if(this.tfm=this.tfm||{},"transform"!==t&&(~(t=y[t]||t).indexOf(",")?t.split(",").forEach((function(t){return e.tfm[t]=Z(s,t)})):this.tfm[t]=s._gsap.x?s._gsap[t]:Z(s,t)),s._gsap.svg&&(this.svg=s.getAttribute(t)||""),this.props.indexOf(L)>=0)return;t=L}r&&this.props.push(t,r[t])},z=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},k=function(){var t,e,s=this.props,r=this.target,n=r.style,i=r._gsap;for(t=0;t<s.length;t+=2)s[t+1]?n[s[t]]=s[t+1]:n.removeProperty(s[t].replace(_,"-$1").toLowerCase());if(this.tfm){for(e in i.svg&&r.setAttribute("transform",this.svg||""),this.tfm)i[e]=this.tfm[e];!(t=l())||t.isStart||n[L]||(z(n),i.uncache=1)}},D=function(t,e){var s={target:t,props:[],revert:k,save:R};return e&&e.split(",").forEach((function(t){return s.save(t)})),s},I=function(t,e){var s=n.createElementNS?n.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):n.createElement(t);return s.style?s:n.createElement(t)},B=function t(e,s,r){var n=getComputedStyle(e);return n[s]||n.getPropertyValue(s.replace(_,"-$1").toLowerCase())||n.getPropertyValue(s)||!r&&t(e,N(s)||s,1)||""},U="O,Moz,ms,Ms,Webkit".split(","),N=function(t,e,s){var r=(e||o).style,n=5;if(t in r&&!s)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);n--&&!(U[n]+t in r););return n<0?null:(3===n?"ms":n>=0?U[n]:"")+t},q=function(){"undefined"!=typeof window&&window.document&&(r=window,n=r.document,i=n.documentElement,o=I("div")||{style:{}},I("div"),L=N(L),F=L+"Origin",o.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",u=!!N("perspective"),l=d.gsap.core.reverting,a=1)},V=function t(e){var s,r=I("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,a=this.nextSibling,o=this.style.cssText;if(i.appendChild(r),r.appendChild(this),this.style.display="block",e)try{s=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(s=this._gsapBBox());return n&&(a?n.insertBefore(this,a):n.appendChild(this)),i.removeChild(r),this.style.cssText=o,s},G=function(t,e){for(var s=e.length;s--;)if(t.hasAttribute(e[s]))return t.getAttribute(e[s])},X=function(t){var e;try{e=t.getBBox()}catch(s){e=V.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===V||(e=V.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+G(t,["x","cx","x1"])||0,y:+G(t,["y","cy","y1"])||0,width:0,height:0}},Y=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!X(t))},W=function(t,e){if(e){var s=t.style;e in c&&e!==F&&(e=L),s.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),s.removeProperty(e.replace(_,"-$1").toLowerCase())):s.removeAttribute(e)}},H=function(t,e,s,r,n,i){var a=new d.PropTween(t._pt,e,s,0,1,i?T:M);return t._pt=a,a.b=r,a.e=n,t._props.push(s),a},$={deg:1,rad:1,turn:1},Q={grid:1,flex:1},K=function t(e,s,r,i){var a,h,l,u,p=parseFloat(r)||0,m=(r+"").trim().substr((p+"").length)||"px",f=o.style,_=g.test(s),v="svg"===e.tagName.toLowerCase(),y=(v?"client":"offset")+(_?"Width":"Height"),x=100,b="px"===i,w="%"===i;return i===m||!p||$[i]||$[m]?p:("px"!==m&&!b&&(p=t(e,s,r,"px")),u=e.getCTM&&Y(e),!w&&"%"!==m||!c[s]&&!~s.indexOf("adius")?(f[_?"width":"height"]=x+(b?m:i),h=~s.indexOf("adius")||"em"===i&&e.appendChild&&!v?e:e.parentNode,u&&(h=(e.ownerSVGElement||{}).parentNode),h&&h!==n&&h.appendChild||(h=n.body),(l=h._gsap)&&w&&l.width&&_&&l.time===d._ticker.time&&!l.uncache?(0,d._round)(p/l.width*x):((w||"%"===m)&&!Q[B(h,"display")]&&(f.position=B(e,"position")),h===e&&(f.position="static"),h.appendChild(o),a=o[y],h.removeChild(o),f.position="absolute",_&&w&&((l=(0,d._getCache)(h)).time=d._ticker.time,l.width=h[y]),(0,d._round)(b?a*p/x:a&&p?x/a*p:0))):(a=u?e.getBBox()[_?"width":"height"]:e[y],(0,d._round)(w?p/a*x:p/100*a)))},Z=function(t,e,s,r){var n;return a||q(),e in y&&"transform"!==e&&~(e=y[e]).indexOf(",")&&(e=e.split(",")[0]),c[e]&&"transform"!==e?(n=lt(t,r),n="transformOrigin"!==e?n[e]:n.svg?n.origin:ut(B(t,F))+" "+n.zOrigin+"px"):(!(n=t.style[e])||"auto"===n||r||~(n+"").indexOf("calc("))&&(n=st[e]&&st[e](t,e,s)||B(t,e)||(0,d._getProperty)(t,e)||("opacity"===e?1:0)),s&&!~(n+"").trim().indexOf(" ")?K(t,e,n,s)+s:n},J=function(t,e,s,r){if(!s||"none"===s){var n=N(e,t,1),i=n&&B(t,n,1);i&&i!==s?(e=n,s=i):"borderColor"===e&&(s=B(t,"borderTopColor"))}var a,o,h,l,u,c,p,m,f,_,g,v=new d.PropTween(this._pt,t.style,e,0,1,d._renderComplexString),y=0,x=0;if(v.b=s,v.e=r,s+="","auto"===(r+="")&&(t.style[e]=r,r=B(t,e)||r,t.style[e]=s),a=[s,r],(0,d._colorStringFilter)(a),r=a[1],h=(s=a[0]).match(d._numWithUnitExp)||[],(r.match(d._numWithUnitExp)||[]).length){for(;o=d._numWithUnitExp.exec(r);)p=o[0],f=r.substring(y,o.index),u?u=(u+1)%5:"rgba("!==f.substr(-5)&&"hsla("!==f.substr(-5)||(u=1),p!==(c=h[x++]||"")&&(l=parseFloat(c)||0,g=c.substr((l+"").length),"="===p.charAt(1)&&(p=(0,d._parseRelative)(l,p)+g),m=parseFloat(p),_=p.substr((m+"").length),y=d._numWithUnitExp.lastIndex-_.length,_||(_=_||d._config.units[e]||g,y===r.length&&(r+=_,v.e+=_)),g!==_&&(l=K(t,e,c,_)||0),v._pt={_next:v._pt,p:f||1===x?f:",",s:l,c:m-l,m:u&&u<4||"zIndex"===e?Math.round:0});v.c=y<r.length?r.substring(y,r.length):""}else v.r="display"===e&&"none"===r?T:M;return d._relExp.test(r)&&(v.e=0),this._pt=v,v},tt={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},et=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var s,r,n,i=e.t,a=i.style,o=e.u,h=i._gsap;if("all"===o||!0===o)a.cssText="",r=1;else for(n=(o=o.split(",")).length;--n>-1;)s=o[n],c[s]&&(r=1,s="transformOrigin"===s?F:L),W(i,s);r&&(W(i,L),h&&(h.svg&&i.removeAttribute("transform"),lt(i,1),h.uncache=1,z(a)))}},st={clearProps:function(t,e,s,r,n){if("isFromStart"!==n.data){var i=t._pt=new d.PropTween(t._pt,e,s,0,0,et);return i.u=r,i.pr=-10,i.tween=n,t._props.push(s),1}}},rt=[1,0,0,1,0,0],nt={},it=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},at=function(t){var e=B(t,L);return it(e)?rt:e.substr(7).match(d._numExp).map(d._round)},ot=function(t,e){var s,r,n,a,o=t._gsap||(0,d._getCache)(t),h=t.style,l=at(t);return o.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(l=[(n=t.transform.baseVal.consolidate().matrix).a,n.b,n.c,n.d,n.e,n.f]).join(",")?rt:l:(l!==rt||t.offsetParent||t===i||o.svg||(n=h.display,h.display="block",(s=t.parentNode)&&t.offsetParent||(a=1,r=t.nextElementSibling,i.appendChild(t)),l=at(t),n?h.display=n:W(t,"display"),a&&(r?s.insertBefore(t,r):s?s.appendChild(t):i.removeChild(t))),e&&l.length>6?[l[0],l[1],l[4],l[5],l[12],l[13]]:l)},ht=function(t,e,s,r,n,i){var a,o,h,l=t._gsap,u=n||ot(t,!0),d=l.xOrigin||0,c=l.yOrigin||0,p=l.xOffset||0,m=l.yOffset||0,f=u[0],_=u[1],g=u[2],v=u[3],y=u[4],x=u[5],b=e.split(" "),w=parseFloat(b[0])||0,j=parseFloat(b[1])||0;s?u!==rt&&(o=f*v-_*g)&&(h=w*(-_/o)+j*(f/o)-(f*x-_*y)/o,w=w*(v/o)+j*(-g/o)+(g*x-v*y)/o,j=h):(w=(a=X(t)).x+(~b[0].indexOf("%")?w/100*a.width:w),j=a.y+(~(b[1]||b[0]).indexOf("%")?j/100*a.height:j)),r||!1!==r&&l.smooth?(y=w-d,x=j-c,l.xOffset=p+(y*f+x*g)-y,l.yOffset=m+(y*_+x*v)-x):l.xOffset=l.yOffset=0,l.xOrigin=w,l.yOrigin=j,l.smooth=!!r,l.origin=e,l.originIsAbsolute=!!s,t.style[F]="0px 0px",i&&(H(i,l,"xOrigin",d,w),H(i,l,"yOrigin",c,j),H(i,l,"xOffset",p,l.xOffset),H(i,l,"yOffset",m,l.yOffset)),t.setAttribute("data-svg-origin",w+" "+j)},lt=function(t,e){var s=t._gsap||new d.GSCache(t);if("x"in s&&!e&&!s.uncache)return s;var r,n,i,a,o,h,l,c,_,g,v,y,x,b,w,j,M,T,A,E,S,C,O,P,R,z,k,D,I,U,N,q,V=t.style,G=s.scaleX<0,X="px",W="deg",H=getComputedStyle(t),$=B(t,F)||"0";return r=n=i=h=l=c=_=g=v=0,a=o=1,s.svg=!(!t.getCTM||!Y(t)),H.translate&&("none"===H.translate&&"none"===H.scale&&"none"===H.rotate||(V[L]=("none"!==H.translate?"translate3d("+(H.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==H.rotate?"rotate("+H.rotate+") ":"")+("none"!==H.scale?"scale("+H.scale.split(" ").join(",")+") ":"")+H[L]),V.scale=V.rotate=V.translate="none"),b=ot(t,s.svg),s.svg&&(P=(!s.uncache||"0px 0px"===$)&&!e&&t.getAttribute("data-svg-origin"),ht(t,P||$,!!P||s.originIsAbsolute,!1!==s.smooth,b)),y=s.xOrigin||0,x=s.yOrigin||0,b!==rt&&(T=b[0],A=b[1],E=b[2],S=b[3],r=C=b[4],n=O=b[5],6===b.length?(a=Math.sqrt(T*T+A*A),o=Math.sqrt(S*S+E*E),h=T||A?f(A,T)*p:0,(_=E||S?f(E,S)*p+h:0)&&(o*=Math.abs(Math.cos(_*m))),s.svg&&(r-=y-(y*T+x*E),n-=x-(y*A+x*S))):(q=b[6],U=b[7],k=b[8],D=b[9],I=b[10],N=b[11],r=b[12],n=b[13],i=b[14],l=(w=f(q,I))*p,w&&(P=C*(j=Math.cos(-w))+k*(M=Math.sin(-w)),R=O*j+D*M,z=q*j+I*M,k=C*-M+k*j,D=O*-M+D*j,I=q*-M+I*j,N=U*-M+N*j,C=P,O=R,q=z),c=(w=f(-E,I))*p,w&&(j=Math.cos(-w),N=S*(M=Math.sin(-w))+N*j,T=P=T*j-k*M,A=R=A*j-D*M,E=z=E*j-I*M),h=(w=f(A,T))*p,w&&(P=T*(j=Math.cos(w))+A*(M=Math.sin(w)),R=C*j+O*M,A=A*j-T*M,O=O*j-C*M,T=P,C=R),l&&Math.abs(l)+Math.abs(h)>359.9&&(l=h=0,c=180-c),a=(0,d._round)(Math.sqrt(T*T+A*A+E*E)),o=(0,d._round)(Math.sqrt(O*O+q*q)),w=f(C,O),_=Math.abs(w)>2e-4?w*p:0,v=N?1/(N<0?-N:N):0),s.svg&&(P=t.getAttribute("transform"),s.forceCSS=t.setAttribute("transform","")||!it(B(t,L)),P&&t.setAttribute("transform",P))),Math.abs(_)>90&&Math.abs(_)<270&&(G?(a*=-1,_+=h<=0?180:-180,h+=h<=0?180:-180):(o*=-1,_+=_<=0?180:-180)),e=e||s.uncache,s.x=r-((s.xPercent=r&&(!e&&s.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-r)?-50:0)))?t.offsetWidth*s.xPercent/100:0)+X,s.y=n-((s.yPercent=n&&(!e&&s.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-n)?-50:0)))?t.offsetHeight*s.yPercent/100:0)+X,s.z=i+X,s.scaleX=(0,d._round)(a),s.scaleY=(0,d._round)(o),s.rotation=(0,d._round)(h)+W,s.rotationX=(0,d._round)(l)+W,s.rotationY=(0,d._round)(c)+W,s.skewX=_+W,s.skewY=g+W,s.transformPerspective=v+X,(s.zOrigin=parseFloat($.split(" ")[2])||0)&&(V[F]=ut($)),s.xOffset=s.yOffset=0,s.force3D=d._config.force3D,s.renderTransform=s.svg?gt:u?_t:ct,s.uncache=0,s},ut=function(t){return(t=t.split(" "))[0]+" "+t[1]},dt=function(t,e,s){var r=(0,d.getUnit)(e);return(0,d._round)(parseFloat(e)+parseFloat(K(t,"x",s+"px",r)))+r},ct=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,_t(t,e)},pt="0deg",mt="0px",ft=") ",_t=function(t,e){var s=e||this,r=s.xPercent,n=s.yPercent,i=s.x,a=s.y,o=s.z,h=s.rotation,l=s.rotationY,u=s.rotationX,d=s.skewX,c=s.skewY,p=s.scaleX,f=s.scaleY,_=s.transformPerspective,g=s.force3D,v=s.target,y=s.zOrigin,x="",b="auto"===g&&t&&1!==t||!0===g;if(y&&(u!==pt||l!==pt)){var w,j=parseFloat(l)*m,M=Math.sin(j),T=Math.cos(j);j=parseFloat(u)*m,w=Math.cos(j),i=dt(v,i,M*w*-y),a=dt(v,a,-Math.sin(j)*-y),o=dt(v,o,T*w*-y+y)}_!==mt&&(x+="perspective("+_+ft),(r||n)&&(x+="translate("+r+"%, "+n+"%) "),(b||i!==mt||a!==mt||o!==mt)&&(x+=o!==mt||b?"translate3d("+i+", "+a+", "+o+") ":"translate("+i+", "+a+ft),h!==pt&&(x+="rotate("+h+ft),l!==pt&&(x+="rotateY("+l+ft),u!==pt&&(x+="rotateX("+u+ft),d===pt&&c===pt||(x+="skew("+d+", "+c+ft),1===p&&1===f||(x+="scale("+p+", "+f+ft),v.style[L]=x||"translate(0, 0)"},gt=function(t,e){var s,r,n,i,a,o=e||this,h=o.xPercent,l=o.yPercent,u=o.x,c=o.y,p=o.rotation,f=o.skewX,_=o.skewY,g=o.scaleX,v=o.scaleY,y=o.target,x=o.xOrigin,b=o.yOrigin,w=o.xOffset,j=o.yOffset,M=o.forceCSS,T=parseFloat(u),A=parseFloat(c);p=parseFloat(p),f=parseFloat(f),(_=parseFloat(_))&&(f+=_=parseFloat(_),p+=_),p||f?(p*=m,f*=m,s=Math.cos(p)*g,r=Math.sin(p)*g,n=Math.sin(p-f)*-v,i=Math.cos(p-f)*v,f&&(_*=m,a=Math.tan(f-_),n*=a=Math.sqrt(1+a*a),i*=a,_&&(a=Math.tan(_),s*=a=Math.sqrt(1+a*a),r*=a)),s=(0,d._round)(s),r=(0,d._round)(r),n=(0,d._round)(n),i=(0,d._round)(i)):(s=g,i=v,r=n=0),(T&&!~(u+"").indexOf("px")||A&&!~(c+"").indexOf("px"))&&(T=K(y,"x",u,"px"),A=K(y,"y",c,"px")),(x||b||w||j)&&(T=(0,d._round)(T+x-(x*s+b*n)+w),A=(0,d._round)(A+b-(x*r+b*i)+j)),(h||l)&&(a=y.getBBox(),T=(0,d._round)(T+h/100*a.width),A=(0,d._round)(A+l/100*a.height)),a="matrix("+s+","+r+","+n+","+i+","+T+","+A+")",y.setAttribute("transform",a),M&&(y.style[L]=a)},vt=function(t,e,s,r,n){var i,a,o=360,h=(0,d._isString)(n),l=parseFloat(n)*(h&&~n.indexOf("rad")?p:1)-r,u=r+l+"deg";return h&&("short"===(i=n.split("_")[1])&&(l%=o)!==l%180&&(l+=l<0?o:-360),"cw"===i&&l<0?l=(l+36e9)%o-~~(l/o)*o:"ccw"===i&&l>0&&(l=(l-36e9)%o-~~(l/o)*o)),t._pt=a=new d.PropTween(t._pt,e,s,r,l,b),a.e=u,a.u="deg",t._props.push(s),a},yt=function(t,e){for(var s in e)t[s]=e[s];return t},xt=function(t,e,s){var r,n,i,a,o,h,l,u=yt({},s._gsap),p=s.style;for(n in u.svg?(i=s.getAttribute("transform"),s.setAttribute("transform",""),p[L]=e,r=lt(s,1),W(s,L),s.setAttribute("transform",i)):(i=getComputedStyle(s)[L],p[L]=e,r=lt(s,1),p[L]=i),c)(i=u[n])!==(a=r[n])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(n)<0&&(o=(0,d.getUnit)(i)!==(l=(0,d.getUnit)(a))?K(s,n,i,l):parseFloat(i),h=parseFloat(a),t._pt=new d.PropTween(t._pt,r,n,o,h-o,x),t._pt.u=l||0,t._props.push(n));yt(r,u)};(0,d._forEachName)("padding,margin,Width,Radius",(function(t,e){var s="Top",r="Right",n="Bottom",i="Left",a=(e<3?[s,r,n,i]:[s+i,s+r,n+r,n+i]).map((function(s){return e<2?t+s:"border"+s+t}));st[e>1?"border"+t:t]=function(t,e,s,r,n){var i,o;if(arguments.length<4)return i=a.map((function(e){return Z(t,e,s)})),5===(o=i.join(" ")).split(i[0]).length?i[0]:o;i=(r+"").split(" "),o={},a.forEach((function(t,e){return o[t]=i[e]=i[e]||i[(e-1)/2|0]})),t.init(e,o,n)}}));var bt,wt,jt,Mt={name:"css",register:q,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,s,r,n){var i,o,h,l,u,p,m,f,_,g,b,M,T,A,E,S,C,O,P,R,z=this._props,k=t.style,I=s.vars.startAt;for(m in a||q(),this.styles=this.styles||D(t),S=this.styles.props,this.tween=s,e)if("autoRound"!==m&&(o=e[m],!d._plugins[m]||!(0,d._checkPlugin)(m,e,s,r,t,n)))if(u=typeof o,p=st[m],"function"===u&&(u=typeof(o=o.call(s,r,t,n))),"string"===u&&~o.indexOf("random(")&&(o=(0,d._replaceRandom)(o)),p)p(this,t,m,o,s)&&(E=1);else if("--"===m.substr(0,2))i=(getComputedStyle(t).getPropertyValue(m)+"").trim(),o+="",d._colorExp.lastIndex=0,d._colorExp.test(i)||(f=(0,d.getUnit)(i),_=(0,d.getUnit)(o)),_?f!==_&&(i=K(t,m,i,_)+_):f&&(o+=f),this.add(k,"setProperty",i,o,r,n,0,0,m),z.push(m),S.push(m,k[m]);else if("undefined"!==u){if(I&&m in I?(i="function"==typeof I[m]?I[m].call(s,r,t,n):I[m],(0,d._isString)(i)&&~i.indexOf("random(")&&(i=(0,d._replaceRandom)(i)),(0,d.getUnit)(i+"")||(i+=d._config.units[m]||(0,d.getUnit)(Z(t,m))||""),"="===(i+"").charAt(1)&&(i=Z(t,m))):i=Z(t,m),l=parseFloat(i),(g="string"===u&&"="===o.charAt(1)&&o.substr(0,2))&&(o=o.substr(2)),h=parseFloat(o),m in y&&("autoAlpha"===m&&(1===l&&"hidden"===Z(t,"visibility")&&h&&(l=0),S.push("visibility",k.visibility),H(this,k,"visibility",l?"inherit":"hidden",h?"inherit":"hidden",!h)),"scale"!==m&&"transform"!==m&&~(m=y[m]).indexOf(",")&&(m=m.split(",")[0])),b=m in c)if(this.styles.save(m),M||((T=t._gsap).renderTransform&&!e.parseTransform||lt(t,e.parseTransform),A=!1!==e.smoothOrigin&&T.smooth,(M=this._pt=new d.PropTween(this._pt,k,L,0,1,T.renderTransform,T,0,-1)).dep=1),"scale"===m)this._pt=new d.PropTween(this._pt,T,"scaleY",T.scaleY,(g?(0,d._parseRelative)(T.scaleY,g+h):h)-T.scaleY||0,x),this._pt.u=0,z.push("scaleY",m),m+="X";else{if("transformOrigin"===m){S.push(F,k[F]),O=void 0,P=void 0,R=void 0,O=(C=o).split(" "),P=O[0],R=O[1]||"50%","top"!==P&&"bottom"!==P&&"left"!==R&&"right"!==R||(C=P,P=R,R=C),O[0]=tt[P]||P,O[1]=tt[R]||R,o=O.join(" "),T.svg?ht(t,o,0,A,0,this):((_=parseFloat(o.split(" ")[2])||0)!==T.zOrigin&&H(this,T,"zOrigin",T.zOrigin,_),H(this,k,m,ut(i),ut(o)));continue}if("svgOrigin"===m){ht(t,o,1,A,0,this);continue}if(m in nt){vt(this,T,m,l,g?(0,d._parseRelative)(l,g+o):o);continue}if("smoothOrigin"===m){H(this,T,"smooth",T.smooth,o);continue}if("force3D"===m){T[m]=o;continue}if("transform"===m){xt(this,o,t);continue}}else m in k||(m=N(m)||m);if(b||(h||0===h)&&(l||0===l)&&!v.test(o)&&m in k)h||(h=0),(f=(i+"").substr((l+"").length))!==(_=(0,d.getUnit)(o)||(m in d._config.units?d._config.units[m]:f))&&(l=K(t,m,i,_)),this._pt=new d.PropTween(this._pt,b?T:k,m,l,(g?(0,d._parseRelative)(l,g+h):h)-l,b||"px"!==_&&"zIndex"!==m||!1===e.autoRound?x:j),this._pt.u=_||0,f!==_&&"%"!==_&&(this._pt.b=i,this._pt.r=w);else if(m in k)J.call(this,t,m,i,g?g+o:o);else{if(!(m in t)){(0,d._missingPlugin)(m,o);continue}this.add(t,m,i||t[m],g?g+o:o,r,n)}b||S.push(m,k[m]),z.push(m)}E&&(0,d._sortPropTweensByPriority)(this)},render:function(t,e){if(e.tween._time||!l())for(var s=e._pt;s;)s.r(t,s.d),s=s._next;else e.styles.revert()},get:Z,aliases:y,getSetter:function(t,e,s){var r=y[e];return r&&r.indexOf(",")<0&&(e=r),e in c&&e!==F&&(t._gsap.x||Z(t,"x"))?s&&h===s?"scale"===e?C:S:(h=s||{})&&("scale"===e?O:P):t.style&&!(0,d._isUndefined)(t.style[e])?A:~e.indexOf("-")?E:(0,d._getSetter)(t,e)},core:{_removeProperty:W,_getMatrix:ot}};d.gsap.utils.checkPrefix=N,d.gsap.core.getStyleSaver=D,bt="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",wt="rotation,rotationX,rotationY,skewX,skewY",jt=(0,d._forEachName)(bt+","+wt+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){c[t]=1})),(0,d._forEachName)(wt,(function(t){d._config.units[t]="deg",nt[t]=1})),y[jt[13]]=bt+","+wt,(0,d._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");y[e[1]]=jt[e[0]]})),(0,d._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){d._config.units[t]="px"})),d.gsap.registerPlugin(Mt)},"./node_modules/gsap/gsap-core.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Animation:()=>We,Back:()=>Gs,Bounce:()=>Ys,Circ:()=>$s,Cubic:()=>Bs,Elastic:()=>Vs,Expo:()=>Hs,GSCache:()=>Ye,Linear:()=>Ds,Power0:()=>Ls,Power1:()=>Fs,Power2:()=>Rs,Power3:()=>zs,Power4:()=>ks,PropTween:()=>ys,Quad:()=>Is,Quart:()=>Us,Quint:()=>Ns,Sine:()=>Ws,SteppedEase:()=>Xs,Strong:()=>qs,Timeline:()=>He,TimelineLite:()=>He,TimelineMax:()=>He,Tween:()=>is,TweenLite:()=>is,TweenMax:()=>is,_checkPlugin:()=>Je,_colorExp:()=>Oe,_colorStringFilter:()=>Le,_config:()=>b,_forEachName:()=>mt,_getCache:()=>ct,_getProperty:()=>pt,_getSetter:()=>us,_isString:()=>P,_isUndefined:()=>R,_missingPlugin:()=>K,_numExp:()=>q,_numWithUnitExp:()=>V,_parseRelative:()=>gt,_plugins:()=>at,_relExp:()=>X,_removeLinkedListItem:()=>Ct,_renderComplexString:()=>ps,_replaceRandom:()=>ge,_round:()=>ft,_roundModifier:()=>he,_setDefaults:()=>jt,_sortPropTweensByPriority:()=>vs,_ticker:()=>Fe,clamp:()=>te,default:()=>Ps,distribute:()=>oe,getUnit:()=>Jt,gsap:()=>Ps,interpolate:()=>ye,mapRange:()=>ve,normalize:()=>pe,pipe:()=>de,random:()=>ue,selector:()=>ie,shuffle:()=>ae,snap:()=>le,splitColor:()=>Ee,toArray:()=>ne,unitize:()=>ce,wrap:()=>fe,wrapYoyo:()=>_e});var r=s("./node_modules/console-browserify/index.js");function n(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function i(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var a,o,h,l,u,d,c,p,m,f,_,g,v,y,x,b={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},w={duration:.5,overwrite:!1,delay:0},j=1e8,M=1e-8,T=2*Math.PI,A=T/4,E=0,S=Math.sqrt,C=Math.cos,O=Math.sin,P=function(t){return"string"==typeof t},L=function(t){return"function"==typeof t},F=function(t){return"number"==typeof t},R=function(t){return void 0===t},z=function(t){return"object"==typeof t},k=function(t){return!1!==t},D=function(){return"undefined"!=typeof window},I=function(t){return L(t)||P(t)},B="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},U=Array.isArray,N=/(?:-?\.?\d|\.)+/gi,q=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,V=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,G=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,X=/[+-]=-?[.\d]+/,Y=/[^,'"\[\]\s]+/gi,W=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,H={},$={},Q=function(t){return($=Mt(t,H))&&Ps},K=function(t,e){return r.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},Z=function(t,e){return!e&&r.warn(t)},J=function(t,e){return t&&(H[t]=e)&&$&&($[t]=e)||H},tt=function(){return 0},et={suppressEvents:!0,isStart:!0},st={suppressEvents:!0},rt={},nt=[],it={},at={},ot={},ht=30,lt=[],ut="",dt=function(t){var e,s,r=t[0];if(z(r)||L(r)||(t=[t]),!(e=(r._gsap||{}).harness)){for(s=lt.length;s--&&!lt[s].targetTest(r););e=lt[s]}for(s=t.length;s--;)t[s]&&(t[s]._gsap||(t[s]._gsap=new Ye(t[s],e)))||t.splice(s,1);return t},ct=function(t){return t._gsap||dt(ne(t))[0]._gsap},pt=function(t,e,s){return(s=t[e])&&L(s)?t[e]():R(s)&&t.getAttribute&&t.getAttribute(e)||s},mt=function(t,e){return(t=t.split(",")).forEach(e)||t},ft=function(t){return Math.round(1e5*t)/1e5||0},_t=function(t){return Math.round(1e7*t)/1e7||0},gt=function(t,e){var s=e.charAt(0),r=parseFloat(e.substr(2));return t=parseFloat(t),"+"===s?t+r:"-"===s?t-r:"*"===s?t*r:t/r},vt=function(t,e){for(var s=e.length,r=0;t.indexOf(e[r])<0&&++r<s;);return r<s},yt=function(){var t,e,s=nt.length,r=nt.slice(0);for(it={},nt.length=0,t=0;t<s;t++)(e=r[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},xt=function(t,e,s,r){nt.length&&yt(),t.render(e,s,r||o),nt.length&&yt()},bt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(Y).length<2?e:P(t)?t.trim():t},wt=function(t){return t},jt=function(t,e){for(var s in e)s in t||(t[s]=e[s]);return t},Mt=function(t,e){for(var s in e)t[s]=e[s];return t},Tt=function t(e,s){for(var r in s)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(e[r]=z(s[r])?t(e[r]||(e[r]={}),s[r]):s[r]);return e},At=function(t,e){var s,r={};for(s in t)s in e||(r[s]=t[s]);return r},Et=function(t){var e,s=t.parent||l,r=t.keyframes?(e=U(t.keyframes),function(t,s){for(var r in s)r in t||"duration"===r&&e||"ease"===r||(t[r]=s[r])}):jt;if(k(t.inherit))for(;s;)r(t,s.vars.defaults),s=s.parent||s._dp;return t},St=function(t,e,s,r,n){void 0===s&&(s="_first"),void 0===r&&(r="_last");var i,a=t[r];if(n)for(i=e[n];a&&a[n]>i;)a=a._prev;return a?(e._next=a._next,a._next=e):(e._next=t[s],t[s]=e),e._next?e._next._prev=e:t[r]=e,e._prev=a,e.parent=e._dp=t,e},Ct=function(t,e,s,r){void 0===s&&(s="_first"),void 0===r&&(r="_last");var n=e._prev,i=e._next;n?n._next=i:t[s]===e&&(t[s]=i),i?i._prev=n:t[r]===e&&(t[r]=n),e._next=e._prev=e.parent=null},Ot=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove(t),t._act=0},Pt=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var s=t;s;)s._dirty=1,s=s.parent;return t},Lt=function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t},Ft=function(t,e,s,r){return t._startAt&&(o?t._startAt.revert(st):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,r))},Rt=function t(e){return!e||e._ts&&t(e.parent)},zt=function(t){return t._repeat?kt(t._tTime,t=t.duration()+t._rDelay)*t:0},kt=function(t,e){var s=Math.floor(t/=e);return t&&s===t?s-1:s},Dt=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},It=function(t){return t._end=_t(t._start+(t._tDur/Math.abs(t._ts||t._rts||M)||0))},Bt=function(t,e){var s=t._dp;return s&&s.smoothChildTiming&&t._ts&&(t._start=_t(s._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),It(t),s._dirty||Pt(s,t)),t},Ut=function(t,e){var s;if((e._time||e._initted&&!e._dur)&&(s=Dt(t.rawTime(),e),(!e._dur||Zt(0,e.totalDuration(),s)-e._tTime>M)&&e.render(s,!0)),Pt(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(s=t;s._dp;)s.rawTime()>=0&&s.totalTime(s._tTime),s=s._dp;t._zTime=-1e-8}},Nt=function(t,e,s,r){return e.parent&&Ot(e),e._start=_t((F(s)?s:s||t!==l?$t(t,s,e):t._time)+e._delay),e._end=_t(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),St(t,e,"_first","_last",t._sort?"_start":0),Xt(e)||(t._recent=e),r||Ut(t,e),t._ts<0&&Bt(t,t._tTime),t},qt=function(t,e){return(H.ScrollTrigger||K("scrollTrigger",e))&&H.ScrollTrigger.create(e,t)},Vt=function(t,e,s,r){return ts(t,e),t._initted?!s&&t._pt&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&m!==Fe.frame?(nt.push(t),t._lazy=[e,r],1):void 0:1},Gt=function t(e){var s=e.parent;return s&&s._ts&&s._initted&&!s._lock&&(s.rawTime()<0||t(s))},Xt=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},Yt=function(t,e,s,r){var n=t._repeat,i=_t(e)||0,a=t._tTime/t._tDur;return a&&!r&&(t._time*=i/t._dur),t._dur=i,t._tDur=n?n<0?1e10:_t(i*(n+1)+t._rDelay*n):i,a>0&&!r?Bt(t,t._tTime=t._tDur*a):t.parent&&It(t),s||Pt(t.parent,t),t},Wt=function(t){return t instanceof He?Pt(t):Yt(t,t._dur)},Ht={_start:0,endTime:tt,totalDuration:tt},$t=function t(e,s,r){var n,i,a,o=e.labels,h=e._recent||Ht,l=e.duration()>=j?h.endTime(!1):e._dur;return P(s)&&(isNaN(s)||s in o)?(i=s.charAt(0),a="%"===s.substr(-1),n=s.indexOf("="),"<"===i||">"===i?(n>=0&&(s=s.replace(/=/,"")),("<"===i?h._start:h.endTime(h._repeat>=0))+(parseFloat(s.substr(1))||0)*(a?(n<0?h:r).totalDuration()/100:1)):n<0?(s in o||(o[s]=l),o[s]):(i=parseFloat(s.charAt(n-1)+s.substr(n+1)),a&&r&&(i=i/100*(U(r)?r[0]:r).totalDuration()),n>1?t(e,s.substr(0,n-1),r)+i:l+i)):null==s?l:+s},Qt=function(t,e,s){var r,n,i=F(e[1]),a=(i?2:1)+(t<2?0:1),o=e[a];if(i&&(o.duration=e[1]),o.parent=s,t){for(r=o,n=s;n&&!("immediateRender"in r);)r=n.vars.defaults||{},n=k(n.vars.inherit)&&n.parent;o.immediateRender=k(r.immediateRender),t<2?o.runBackwards=1:o.startAt=e[a-1]}return new is(e[0],o,e[a+1])},Kt=function(t,e){return t||0===t?e(t):e},Zt=function(t,e,s){return s<t?t:s>e?e:s},Jt=function(t,e){return P(t)&&(e=W.exec(t))?e[1]:""},te=function(t,e,s){return Kt(s,(function(s){return Zt(t,e,s)}))},ee=[].slice,se=function(t,e){return t&&z(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&z(t[0]))&&!t.nodeType&&t!==u},re=function(t,e,s){return void 0===s&&(s=[]),t.forEach((function(t){var r;return P(t)&&!e||se(t,1)?(r=s).push.apply(r,ne(t)):s.push(t)}))||s},ne=function(t,e,s){return h&&!e&&h.selector?h.selector(t):!P(t)||s||!d&&Re()?U(t)?re(t,s):se(t)?ee.call(t,0):t?[t]:[]:ee.call((e||c).querySelectorAll(t),0)},ie=function(t){return t=ne(t)[0]||Z("Invalid scope")||{},function(e){var s=t.current||t.nativeElement||t;return ne(e,s.querySelectorAll?s:s===t?Z("Invalid scope")||c.createElement("div"):t)}},ae=function(t){return t.sort((function(){return.5-Math.random()}))},oe=function(t){if(L(t))return t;var e=z(t)?t:{each:t},s=Ne(e.ease),r=e.from||0,n=parseFloat(e.base)||0,i={},a=r>0&&r<1,o=isNaN(r)||a,h=e.axis,l=r,u=r;return P(r)?l=u={center:.5,edges:.5,end:1}[r]||0:!a&&o&&(l=r[0],u=r[1]),function(t,a,d){var c,p,m,f,_,g,v,y,x,b=(d||e).length,w=i[b];if(!w){if(!(x="auto"===e.grid?0:(e.grid||[1,j])[1])){for(v=-j;v<(v=d[x++].getBoundingClientRect().left)&&x<b;);x--}for(w=i[b]=[],c=o?Math.min(x,b)*l-.5:r%x,p=x===j?0:o?b*u/x-.5:r/x|0,v=0,y=j,g=0;g<b;g++)m=g%x-c,f=p-(g/x|0),w[g]=_=h?Math.abs("y"===h?f:m):S(m*m+f*f),_>v&&(v=_),_<y&&(y=_);"random"===r&&ae(w),w.max=v-y,w.min=y,w.v=b=(parseFloat(e.amount)||parseFloat(e.each)*(x>b?b-1:h?"y"===h?b/x:x:Math.max(x,b/x))||0)*("edges"===r?-1:1),w.b=b<0?n-b:n,w.u=Jt(e.amount||e.each)||0,s=s&&b<0?Be(s):s}return b=(w[t]-w.min)/w.max||0,_t(w.b+(s?s(b):b)*w.v)+w.u}},he=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(s){var r=_t(Math.round(parseFloat(s)/t)*t*e);return(r-r%1)/e+(F(s)?0:Jt(s))}},le=function(t,e){var s,r,n=U(t);return!n&&z(t)&&(s=n=t.radius||j,t.values?(t=ne(t.values),(r=!F(t[0]))&&(s*=s)):t=he(t.increment)),Kt(e,n?L(t)?function(e){return r=t(e),Math.abs(r-e)<=s?r:e}:function(e){for(var n,i,a=parseFloat(r?e.x:e),o=parseFloat(r?e.y:0),h=j,l=0,u=t.length;u--;)(n=r?(n=t[u].x-a)*n+(i=t[u].y-o)*i:Math.abs(t[u]-a))<h&&(h=n,l=u);return l=!s||h<=s?t[l]:e,r||l===e||F(e)?l:l+Jt(e)}:he(t))},ue=function(t,e,s,r){return Kt(U(t)?!e:!0===s?!!(s=0):!r,(function(){return U(t)?t[~~(Math.random()*t.length)]:(s=s||1e-5)&&(r=s<1?Math.pow(10,(s+"").length-2):1)&&Math.floor(Math.round((t-s/2+Math.random()*(e-t+.99*s))/s)*s*r)/r}))},de=function(){for(var t=arguments.length,e=new Array(t),s=0;s<t;s++)e[s]=arguments[s];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},ce=function(t,e){return function(s){return t(parseFloat(s))+(e||Jt(s))}},pe=function(t,e,s){return ve(t,e,0,1,s)},me=function(t,e,s){return Kt(s,(function(s){return t[~~e(s)]}))},fe=function t(e,s,r){var n=s-e;return U(e)?me(e,t(0,e.length),s):Kt(r,(function(t){return(n+(t-e)%n)%n+e}))},_e=function t(e,s,r){var n=s-e,i=2*n;return U(e)?me(e,t(0,e.length-1),s):Kt(r,(function(t){return e+((t=(i+(t-e)%i)%i||0)>n?i-t:t)}))},ge=function(t){for(var e,s,r,n,i=0,a="";~(e=t.indexOf("random(",i));)r=t.indexOf(")",e),n="["===t.charAt(e+7),s=t.substr(e+7,r-e-7).match(n?Y:N),a+=t.substr(i,e-i)+ue(n?s:+s[0],n?0:+s[1],+s[2]||1e-5),i=r+1;return a+t.substr(i,t.length-i)},ve=function(t,e,s,r,n){var i=e-t,a=r-s;return Kt(n,(function(e){return s+((e-t)/i*a||0)}))},ye=function t(e,s,r,n){var i=isNaN(e+s)?0:function(t){return(1-t)*e+t*s};if(!i){var a,o,h,l,u,d=P(e),c={};if(!0===r&&(n=1)&&(r=null),d)e={p:e},s={p:s};else if(U(e)&&!U(s)){for(h=[],l=e.length,u=l-2,o=1;o<l;o++)h.push(t(e[o-1],e[o]));l--,i=function(t){t*=l;var e=Math.min(u,~~t);return h[e](t-e)},r=s}else n||(e=Mt(U(e)?[]:{},e));if(!h){for(a in s)Ze.call(c,e,a,"get",s[a]);i=function(t){return ms(t,c)||(d?e.p:e)}}}return Kt(r,i)},xe=function(t,e,s){var r,n,i,a=t.labels,o=j;for(r in a)(n=a[r]-e)<0==!!s&&n&&o>(n=Math.abs(n))&&(i=r,o=n);return i},be=function(t,e,s){var r,n,i,a=t.vars,o=a[e],l=h,u=t._ctx;if(o)return r=a[e+"Params"],n=a.callbackScope||t,s&&nt.length&&yt(),u&&(h=u),i=r?o.apply(n,r):o.call(n),h=l,i},we=function(t){return Ot(t),t.scrollTrigger&&t.scrollTrigger.kill(!1),t.progress()<1&&be(t,"onInterrupt"),t},je=function(t){var e=(t=!t.name&&t.default||t).name,s=L(t),r=e&&!s&&t.init?function(){this._props=[]}:t,n={init:tt,render:ms,add:Ze,kill:_s,modifier:fs,rawVars:0},i={targetTest:0,get:0,getSetter:us,aliases:{},register:0};if(Re(),t!==r){if(at[e])return;jt(r,jt(At(t,n),i)),Mt(r.prototype,Mt(n,At(t,i))),at[r.prop=e]=r,t.targetTest&&(lt.push(r),rt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}J(e,r),t.register&&t.register(Ps,r,ys)},Me=255,Te={aqua:[0,Me,Me],lime:[0,Me,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Me],navy:[0,0,128],white:[Me,Me,Me],olive:[128,128,0],yellow:[Me,Me,0],orange:[Me,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Me,0,0],pink:[Me,192,203],cyan:[0,Me,Me],transparent:[Me,Me,Me,0]},Ae=function(t,e,s){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(s-e)*t*6:t<.5?s:3*t<2?e+(s-e)*(2/3-t)*6:e)*Me+.5|0},Ee=function(t,e,s){var r,n,i,a,o,h,l,u,d,c,p=t?F(t)?[t>>16,t>>8&Me,t&Me]:0:Te.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),Te[t])p=Te[t];else if("#"===t.charAt(0)){if(t.length<6&&(r=t.charAt(1),n=t.charAt(2),i=t.charAt(3),t="#"+r+r+n+n+i+i+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&Me,p&Me,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&Me,t&Me]}else if("hsl"===t.substr(0,3))if(p=c=t.match(N),e){if(~t.indexOf("="))return p=t.match(q),s&&p.length<4&&(p[3]=1),p}else a=+p[0]%360/360,o=+p[1]/100,r=2*(h=+p[2]/100)-(n=h<=.5?h*(o+1):h+o-h*o),p.length>3&&(p[3]*=1),p[0]=Ae(a+1/3,r,n),p[1]=Ae(a,r,n),p[2]=Ae(a-1/3,r,n);else p=t.match(N)||Te.transparent;p=p.map(Number)}return e&&!c&&(r=p[0]/Me,n=p[1]/Me,i=p[2]/Me,h=((l=Math.max(r,n,i))+(u=Math.min(r,n,i)))/2,l===u?a=o=0:(d=l-u,o=h>.5?d/(2-l-u):d/(l+u),a=l===r?(n-i)/d+(n<i?6:0):l===n?(i-r)/d+2:(r-n)/d+4,a*=60),p[0]=~~(a+.5),p[1]=~~(100*o+.5),p[2]=~~(100*h+.5)),s&&p.length<4&&(p[3]=1),p},Se=function(t){var e=[],s=[],r=-1;return t.split(Oe).forEach((function(t){var n=t.match(V)||[];e.push.apply(e,n),s.push(r+=n.length+1)})),e.c=s,e},Ce=function(t,e,s){var r,n,i,a,o="",h=(t+o).match(Oe),l=e?"hsla(":"rgba(",u=0;if(!h)return t;if(h=h.map((function(t){return(t=Ee(t,e,1))&&l+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),s&&(i=Se(t),(r=s.c).join(o)!==i.c.join(o)))for(a=(n=t.replace(Oe,"1").split(V)).length-1;u<a;u++)o+=n[u]+(~r.indexOf(u)?h.shift()||l+"0,0,0,0)":(i.length?i:h.length?h:s).shift());if(!n)for(a=(n=t.split(Oe)).length-1;u<a;u++)o+=n[u]+h[u];return o+n[a]},Oe=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in Te)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Pe=/hsl[a]?\(/,Le=function(t){var e,s=t.join(" ");if(Oe.lastIndex=0,Oe.test(s))return e=Pe.test(s),t[1]=Ce(t[1],e),t[0]=Ce(t[0],e,Se(t[1])),!0},Fe=function(){var t,e,s,r,n,i,a=Date.now,o=500,h=33,l=a(),m=l,f=1e3/240,g=f,v=[],y=function s(u){var d,c,p,_,y=a()-m,x=!0===u;if(y>o&&(l+=y-h),((d=(p=(m+=y)-l)-g)>0||x)&&(_=++r.frame,n=p-1e3*r.time,r.time=p/=1e3,g+=d+(d>=f?4:f-d),c=1),x||(t=e(s)),c)for(i=0;i<v.length;i++)v[i](p,n,_,u)};return r={time:0,frame:0,tick:function(){y(!0)},deltaRatio:function(t){return n/(1e3/(t||60))},wake:function(){p&&(!d&&D()&&(u=d=window,c=u.document||{},H.gsap=Ps,(u.gsapVersions||(u.gsapVersions=[])).push(Ps.version),Q($||u.GreenSockGlobals||!u.gsap&&u||{}),s=u.requestAnimationFrame),t&&r.sleep(),e=s||function(t){return setTimeout(t,g-1e3*r.time+1|0)},_=1,y(2))},sleep:function(){(s?u.cancelAnimationFrame:clearTimeout)(t),_=0,e=tt},lagSmoothing:function(t,e){o=t||1e8,h=Math.min(e,o,0)},fps:function(t){f=1e3/(t||240),g=1e3*r.time+f},add:function(t,e,s){var n=e?function(e,s,i,a){t(e,s,i,a),r.remove(n)}:t;return r.remove(t),v[s?"unshift":"push"](n),Re(),n},remove:function(t,e){~(e=v.indexOf(t))&&v.splice(e,1)&&i>=e&&i--},_listeners:v}}(),Re=function(){return!_&&Fe.wake()},ze={},ke=/^[\d.\-M][\d.\-,\s]/,De=/["']/g,Ie=function(t){for(var e,s,r,n={},i=t.substr(1,t.length-3).split(":"),a=i[0],o=1,h=i.length;o<h;o++)s=i[o],e=o!==h-1?s.lastIndexOf(","):s.length,r=s.substr(0,e),n[a]=isNaN(r)?r.replace(De,"").trim():+r,a=s.substr(e+1).trim();return n},Be=function(t){return function(e){return 1-t(1-e)}},Ue=function t(e,s){for(var r,n=e._first;n;)n instanceof He?t(n,s):!n.vars.yoyoEase||n._yoyo&&n._repeat||n._yoyo===s||(n.timeline?t(n.timeline,s):(r=n._ease,n._ease=n._yEase,n._yEase=r,n._yoyo=s)),n=n._next},Ne=function(t,e){return t&&(L(t)?t:ze[t]||function(t){var e,s,r,n,i=(t+"").split("("),a=ze[i[0]];return a&&i.length>1&&a.config?a.config.apply(null,~t.indexOf("{")?[Ie(i[1])]:(e=t,s=e.indexOf("(")+1,r=e.indexOf(")"),n=e.indexOf("(",s),e.substring(s,~n&&n<r?e.indexOf(")",r+1):r)).split(",").map(bt)):ze._CE&&ke.test(t)?ze._CE("",t):a}(t))||e},qe=function(t,e,s,r){void 0===s&&(s=function(t){return 1-e(1-t)}),void 0===r&&(r=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var n,i={easeIn:e,easeOut:s,easeInOut:r};return mt(t,(function(t){for(var e in ze[t]=H[t]=i,ze[n=t.toLowerCase()]=s,i)ze[n+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=ze[t+"."+e]=i[e]})),i},Ve=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},Ge=function t(e,s,r){var n=s>=1?s:1,i=(r||(e?.3:.45))/(s<1?s:1),a=i/T*(Math.asin(1/n)||0),o=function(t){return 1===t?1:n*Math.pow(2,-10*t)*O((t-a)*i)+1},h="out"===e?o:"in"===e?function(t){return 1-o(1-t)}:Ve(o);return i=T/i,h.config=function(s,r){return t(e,s,r)},h},Xe=function t(e,s){void 0===s&&(s=1.70158);var r=function(t){return t?--t*t*((s+1)*t+s)+1:0},n="out"===e?r:"in"===e?function(t){return 1-r(1-t)}:Ve(r);return n.config=function(s){return t(e,s)},n};mt("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var s=e<5?e+1:e;qe(t+",Power"+(s-1),e?function(t){return Math.pow(t,s)}:function(t){return t},(function(t){return 1-Math.pow(1-t,s)}),(function(t){return t<.5?Math.pow(2*t,s)/2:1-Math.pow(2*(1-t),s)/2}))})),ze.Linear.easeNone=ze.none=ze.Linear.easeIn,qe("Elastic",Ge("in"),Ge("out"),Ge()),g=7.5625,y=1/(v=2.75),qe("Bounce",(function(t){return 1-x(1-t)}),x=function(t){return t<y?g*t*t:t<.7272727272727273?g*Math.pow(t-1.5/v,2)+.75:t<.9090909090909092?g*(t-=2.25/v)*t+.9375:g*Math.pow(t-2.625/v,2)+.984375}),qe("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),qe("Circ",(function(t){return-(S(1-t*t)-1)})),qe("Sine",(function(t){return 1===t?1:1-C(t*A)})),qe("Back",Xe("in"),Xe("out"),Xe()),ze.SteppedEase=ze.steps=H.SteppedEase={config:function(t,e){void 0===t&&(t=1);var s=1/t,r=t+(e?0:1),n=e?1:0;return function(t){return((r*Zt(0,.99999999,t)|0)+n)*s}}},w.ease=ze["quad.out"],mt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return ut+=t+","+t+"Params,"}));var Ye=function(t,e){this.id=E++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:pt,this.set=e?e.getSetter:us},We=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Yt(this,+t.duration,1,1),this.data=t.data,h&&(this._ctx=h,h.data.push(this)),_||Fe.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Yt(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(Re(),!arguments.length)return this._tTime;var s=this._dp;if(s&&s.smoothChildTiming&&this._ts){for(Bt(this,t),!s._dp||s.parent||Ut(s,this);s&&s.parent;)s.parent._time!==s._start+(s._ts>=0?s._tTime/s._ts:(s.totalDuration()-s._tTime)/-s._ts)&&s.totalTime(s._tTime,!0),s=s.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&Nt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===M||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),xt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+zt(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+zt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},e.iteration=function(t,e){var s=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*s,e):this._repeat?kt(this._tTime,s)+1:1},e.timeScale=function(t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var e=this.parent&&this._ts?Dt(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Zt(-this._delay,this._tDur,e),!0),It(this),Lt(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Re(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==M&&(this._tTime-=M)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&Nt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(k(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Dt(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=st);var e=o;return o=t,this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents),"nested"!==this.data&&Ot(this),o=e,this},e.globalTime=function(t){for(var e=this,s=arguments.length?t:e.rawTime();e;)s=e._start+s/(e._ts||1),e=e._dp;return!this.parent&&this.vars.immediateRender?-1:s},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,Wt(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,Wt(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime($t(this,t),k(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,k(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,s=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=s&&t<this.endTime(!0)-M))},e.eventCallback=function(t,e,s){var r=this.vars;return arguments.length>1?(e?(r[t]=e,s&&(r[t+"Params"]=s),"onUpdate"===t&&(this._onUpdate=e)):delete r[t],this):r[t]},e.then=function(t){var e=this;return new Promise((function(s){var r=L(t)?t:wt,n=function(){var t=e.then;e.then=null,L(r)&&(r=r(e))&&(r.then||r===e)&&(e.then=t),s(r),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?n():e._prom=n}))},e.kill=function(){we(this)},t}();jt(We.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var He=function(t){function e(e,s){var r;return void 0===e&&(e={}),(r=t.call(this,e)||this).labels={},r.smoothChildTiming=!!e.smoothChildTiming,r.autoRemoveChildren=!!e.autoRemoveChildren,r._sort=k(e.sortChildren),l&&Nt(e.parent||l,n(r),s),e.reversed&&r.reverse(),e.paused&&r.paused(!0),e.scrollTrigger&&qt(n(r),e.scrollTrigger),r}i(e,t);var s=e.prototype;return s.to=function(t,e,s){return Qt(0,arguments,this),this},s.from=function(t,e,s){return Qt(1,arguments,this),this},s.fromTo=function(t,e,s,r){return Qt(2,arguments,this),this},s.set=function(t,e,s){return e.duration=0,e.parent=this,Et(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new is(t,e,$t(this,s),1),this},s.call=function(t,e,s){return Nt(this,is.delayedCall(0,t,e),s)},s.staggerTo=function(t,e,s,r,n,i,a){return s.duration=e,s.stagger=s.stagger||r,s.onComplete=i,s.onCompleteParams=a,s.parent=this,new is(t,s,$t(this,n)),this},s.staggerFrom=function(t,e,s,r,n,i,a){return s.runBackwards=1,Et(s).immediateRender=k(s.immediateRender),this.staggerTo(t,e,s,r,n,i,a)},s.staggerFromTo=function(t,e,s,r,n,i,a,o){return r.startAt=s,Et(r).immediateRender=k(r.immediateRender),this.staggerTo(t,e,r,n,i,a,o)},s.render=function(t,e,s){var r,n,i,a,h,u,d,c,p,m,f,_,g=this._time,v=this._dirty?this.totalDuration():this._tDur,y=this._dur,x=t<=0?0:_t(t),b=this._zTime<0!=t<0&&(this._initted||!y);if(this!==l&&x>v&&t>=0&&(x=v),x!==this._tTime||s||b){if(g!==this._time&&y&&(x+=this._time-g,t+=this._time-g),r=x,p=this._start,u=!(c=this._ts),b&&(y||(g=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(f=this._yoyo,h=y+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*h+t,e,s);if(r=_t(x%h),x===v?(a=this._repeat,r=y):((a=~~(x/h))&&a===x/h&&(r=y,a--),r>y&&(r=y)),m=kt(this._tTime,h),!g&&this._tTime&&m!==a&&(m=a),f&&1&a&&(r=y-r,_=1),a!==m&&!this._lock){var w=f&&1&m,j=w===(f&&1&a);if(a<m&&(w=!w),g=w?0:y,this._lock=1,this.render(g||(_?0:_t(a*h)),e,!y)._lock=0,this._tTime=x,!e&&this.parent&&be(this,"onRepeat"),this.vars.repeatRefresh&&!_&&(this.invalidate()._lock=1),g&&g!==this._time||u!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(y=this._dur,v=this._tDur,j&&(this._lock=2,g=w?y:-1e-4,this.render(g,!0),this.vars.repeatRefresh&&!_&&this.invalidate()),this._lock=0,!this._ts&&!u)return this;Ue(this,_)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(d=function(t,e,s){var r;if(s>e)for(r=t._first;r&&r._start<=s;){if("isPause"===r.data&&r._start>e)return r;r=r._next}else for(r=t._last;r&&r._start>=s;){if("isPause"===r.data&&r._start<e)return r;r=r._prev}}(this,_t(g),_t(r)),d&&(x-=r-(r=d._start))),this._tTime=x,this._time=r,this._act=!c,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,g=0),!g&&r&&!e&&(be(this,"onStart"),this._tTime!==x))return this;if(r>=g&&t>=0)for(n=this._first;n;){if(i=n._next,(n._act||r>=n._start)&&n._ts&&d!==n){if(n.parent!==this)return this.render(t,e,s);if(n.render(n._ts>0?(r-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(r-n._start)*n._ts,e,s),r!==this._time||!this._ts&&!u){d=0,i&&(x+=this._zTime=-1e-8);break}}n=i}else{s=s||o,n=this._last;for(var T=t<0?t:r;n;){if(i=n._prev,(n._act||T<=n._end)&&n._ts&&d!==n){if(n.parent!==this)return this.render(t,e,s);if(n.render(n._ts>0?(T-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(T-n._start)*n._ts,e,s),r!==this._time||!this._ts&&!u){d=0,i&&(x+=this._zTime=T?-1e-8:M);break}}n=i}}if(d&&!e&&(this.pause(),d.render(r>=g?0:-1e-8)._zTime=r>=g?1:-1,this._ts))return this._start=p,It(this),this.render(t,e,s);this._onUpdate&&!e&&be(this,"onUpdate",!0),(x===v&&this._tTime>=this.totalDuration()||!x&&g)&&(p!==this._start&&Math.abs(c)===Math.abs(this._ts)||this._lock||((t||!y)&&(x===v&&this._ts>0||!x&&this._ts<0)&&Ot(this,1),e||t<0&&!g||!x&&!g&&v||(be(this,x===v&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(x<v&&this.timeScale()>0)&&this._prom())))}return this},s.add=function(t,e){var s=this;if(F(e)||(e=$t(this,e,t)),!(t instanceof We)){if(U(t))return t.forEach((function(t){return s.add(t,e)})),this;if(P(t))return this.addLabel(t,e);if(!L(t))return this;t=is.delayedCall(0,t)}return this!==t?Nt(this,t,e):this},s.getChildren=function(t,e,s,r){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===s&&(s=!0),void 0===r&&(r=-j);for(var n=[],i=this._first;i;)i._start>=r&&(i instanceof is?e&&n.push(i):(s&&n.push(i),t&&n.push.apply(n,i.getChildren(!0,e,s)))),i=i._next;return n},s.getById=function(t){for(var e=this.getChildren(1,1,1),s=e.length;s--;)if(e[s].vars.id===t)return e[s]},s.remove=function(t){return P(t)?this.removeLabel(t):L(t)?this.killTweensOf(t):(Ct(this,t),t===this._recent&&(this._recent=this._last),Pt(this))},s.totalTime=function(e,s){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=_t(Fe.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,s),this._forcing=0,this):this._tTime},s.addLabel=function(t,e){return this.labels[t]=$t(this,e),this},s.removeLabel=function(t){return delete this.labels[t],this},s.addPause=function(t,e,s){var r=is.delayedCall(0,e||tt,s);return r.data="isPause",this._hasPause=1,Nt(this,r,$t(this,t))},s.removePause=function(t){var e=this._first;for(t=$t(this,t);e;)e._start===t&&"isPause"===e.data&&Ot(e),e=e._next},s.killTweensOf=function(t,e,s){for(var r=this.getTweensOf(t,s),n=r.length;n--;)$e!==r[n]&&r[n].kill(t,e);return this},s.getTweensOf=function(t,e){for(var s,r=[],n=ne(t),i=this._first,a=F(e);i;)i instanceof is?vt(i._targets,n)&&(a?(!$e||i._initted&&i._ts)&&i.globalTime(0)<=e&&i.globalTime(i.totalDuration())>e:!e||i.isActive())&&r.push(i):(s=i.getTweensOf(n,e)).length&&r.push.apply(r,s),i=i._next;return r},s.tweenTo=function(t,e){e=e||{};var s,r=this,n=$t(r,t),i=e,a=i.startAt,o=i.onStart,h=i.onStartParams,l=i.immediateRender,u=is.to(r,jt({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:n,overwrite:"auto",duration:e.duration||Math.abs((n-(a&&"time"in a?a.time:r._time))/r.timeScale())||M,onStart:function(){if(r.pause(),!s){var t=e.duration||Math.abs((n-(a&&"time"in a?a.time:r._time))/r.timeScale());u._dur!==t&&Yt(u,t,0,1).render(u._time,!0,!0),s=1}o&&o.apply(u,h||[])}},e));return l?u.render(0):u},s.tweenFromTo=function(t,e,s){return this.tweenTo(e,jt({startAt:{time:$t(this,t)}},s))},s.recent=function(){return this._recent},s.nextLabel=function(t){return void 0===t&&(t=this._time),xe(this,$t(this,t))},s.previousLabel=function(t){return void 0===t&&(t=this._time),xe(this,$t(this,t),1)},s.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+M)},s.shiftChildren=function(t,e,s){void 0===s&&(s=0);for(var r,n=this._first,i=this.labels;n;)n._start>=s&&(n._start+=t,n._end+=t),n=n._next;if(e)for(r in i)i[r]>=s&&(i[r]+=t);return Pt(this)},s.invalidate=function(){var e=this._first;for(this._lock=0;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},s.clear=function(t){void 0===t&&(t=!0);for(var e,s=this._first;s;)e=s._next,this.remove(s),s=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),Pt(this)},s.totalDuration=function(t){var e,s,r,n=0,i=this,a=i._last,o=j;if(arguments.length)return i.timeScale((i._repeat<0?i.duration():i.totalDuration())/(i.reversed()?-t:t));if(i._dirty){for(r=i.parent;a;)e=a._prev,a._dirty&&a.totalDuration(),(s=a._start)>o&&i._sort&&a._ts&&!i._lock?(i._lock=1,Nt(i,a,s-a._delay,1)._lock=0):o=s,s<0&&a._ts&&(n-=s,(!r&&!i._dp||r&&r.smoothChildTiming)&&(i._start+=s/i._ts,i._time-=s,i._tTime-=s),i.shiftChildren(-s,!1,-Infinity),o=0),a._end>n&&a._ts&&(n=a._end),a=e;Yt(i,i===l&&i._time>n?i._time:n,1,1),i._dirty=0}return i._tDur},e.updateRoot=function(t){if(l._ts&&(xt(l,Dt(t,l)),m=Fe.frame),Fe.frame>=ht){ht+=b.autoSleep||120;var e=l._first;if((!e||!e._ts)&&b.autoSleep&&Fe._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Fe.sleep()}}},e}(We);jt(He.prototype,{_lock:0,_hasPause:0,_forcing:0});var $e,Qe,Ke=function(t,e,s,r,n,i,a){var o,h,l,u,d,c,p,m,f=new ys(this._pt,t,e,0,1,ps,null,n),_=0,g=0;for(f.b=s,f.e=r,s+="",(p=~(r+="").indexOf("random("))&&(r=ge(r)),i&&(i(m=[s,r],t,e),s=m[0],r=m[1]),h=s.match(G)||[];o=G.exec(r);)u=o[0],d=r.substring(_,o.index),l?l=(l+1)%5:"rgba("===d.substr(-5)&&(l=1),u!==h[g++]&&(c=parseFloat(h[g-1])||0,f._pt={_next:f._pt,p:d||1===g?d:",",s:c,c:"="===u.charAt(1)?gt(c,u)-c:parseFloat(u)-c,m:l&&l<4?Math.round:0},_=G.lastIndex);return f.c=_<r.length?r.substring(_,r.length):"",f.fp=a,(X.test(r)||p)&&(f.e=0),this._pt=f,f},Ze=function(t,e,s,r,n,i,a,o,h,l){L(r)&&(r=r(n||0,t,i));var u,d=t[e],c="get"!==s?s:L(d)?h?t[e.indexOf("set")||!L(t["get"+e.substr(3)])?e:"get"+e.substr(3)](h):t[e]():d,p=L(d)?h?hs:os:as;if(P(r)&&(~r.indexOf("random(")&&(r=ge(r)),"="===r.charAt(1)&&((u=gt(c,r)+(Jt(c)||0))||0===u)&&(r=u)),!l||c!==r||Qe)return isNaN(c*r)||""===r?(!d&&!(e in t)&&K(e,r),Ke.call(this,t,e,c,r,p,o||b.stringFilter,h)):(u=new ys(this._pt,t,e,+c||0,r-(c||0),"boolean"==typeof d?cs:ds,0,p),h&&(u.fp=h),a&&u.modifier(a,this,t),this._pt=u)},Je=function(t,e,s,r,n,i){var a,o,h,l;if(at[t]&&!1!==(a=new at[t]).init(n,a.rawVars?e[t]:function(t,e,s,r,n){if(L(t)&&(t=ss(t,n,e,s,r)),!z(t)||t.style&&t.nodeType||U(t)||B(t))return P(t)?ss(t,n,e,s,r):t;var i,a={};for(i in t)a[i]=ss(t[i],n,e,s,r);return a}(e[t],r,n,i,s),s,r,i)&&(s._pt=o=new ys(s._pt,n,t,0,1,a.render,a,0,a.priority),s!==f))for(h=s._ptLookup[s._targets.indexOf(n)],l=a._props.length;l--;)h[a._props[l]]=o;return a},ts=function t(e,s){var r,n,i,h,u,d,c,p,m,f,_,g,v,y=e.vars,x=y.ease,b=y.startAt,T=y.immediateRender,A=y.lazy,E=y.onUpdate,S=y.onUpdateParams,C=y.callbackScope,O=y.runBackwards,P=y.yoyoEase,L=y.keyframes,F=y.autoRevert,R=e._dur,z=e._startAt,D=e._targets,I=e.parent,B=I&&"nested"===I.data?I.parent._targets:D,U="auto"===e._overwrite&&!a,N=e.timeline;if(N&&(!L||!x)&&(x="none"),e._ease=Ne(x,w.ease),e._yEase=P?Be(Ne(!0===P?x:P,w.ease)):0,P&&e._yoyo&&!e._repeat&&(P=e._yEase,e._yEase=e._ease,e._ease=P),e._from=!N&&!!y.runBackwards,!N||L&&!y.stagger){if(g=(p=D[0]?ct(D[0]).harness:0)&&y[p.prop],r=At(y,rt),z&&(z.revert(O&&R?st:et),z._lazy=0),b){if(Ot(e._startAt=is.set(D,jt({data:"isStart",overwrite:!1,parent:I,immediateRender:!0,lazy:k(A),startAt:null,delay:0,onUpdate:E,onUpdateParams:S,callbackScope:C,stagger:0},b))),s<0&&(o||!T&&!F)&&e._startAt.revert(st),T&&R&&s<=0)return void(s&&(e._zTime=s))}else if(O&&R&&!z)if(s&&(T=!1),i=jt({overwrite:!1,data:"isFromStart",lazy:T&&k(A),immediateRender:T,stagger:0,parent:I},r),g&&(i[p.prop]=g),Ot(e._startAt=is.set(D,i)),s<0&&(o?e._startAt.revert(st):e._startAt.render(-1,!0)),e._zTime=s,T){if(!s)return}else t(e._startAt,M);for(e._pt=e._ptCache=0,A=R&&k(A)||A&&!R,n=0;n<D.length;n++){if(c=(u=D[n])._gsap||dt(D)[n]._gsap,e._ptLookup[n]=f={},it[c.id]&&nt.length&&yt(),_=B===D?n:B.indexOf(u),p&&!1!==(m=new p).init(u,g||r,e,_,B)&&(e._pt=h=new ys(e._pt,u,m.name,0,1,m.render,m,0,m.priority),m._props.forEach((function(t){f[t]=h})),m.priority&&(d=1)),!p||g)for(i in r)at[i]&&(m=Je(i,r,e,_,u,B))?m.priority&&(d=1):f[i]=h=Ze.call(e,u,i,"get",r[i],_,B,0,y.stringFilter);e._op&&e._op[n]&&e.kill(u,e._op[n]),U&&e._pt&&($e=e,l.killTweensOf(u,f,e.globalTime(s)),v=!e.parent,$e=0),e._pt&&A&&(it[c.id]=1)}d&&vs(e),e._onInit&&e._onInit(e)}e._onUpdate=E,e._initted=(!e._op||e._pt)&&!v,L&&s<=0&&N.render(j,!0,!0)},es=function(t,e,s,r){var n,i,a=e.ease||r||"power1.inOut";if(U(e))i=s[t]||(s[t]=[]),e.forEach((function(t,s){return i.push({t:s/(e.length-1)*100,v:t,e:a})}));else for(n in e)i=s[n]||(s[n]=[]),"ease"===n||i.push({t:parseFloat(t),v:e[n],e:a})},ss=function(t,e,s,r,n){return L(t)?t.call(e,s,r,n):P(t)&&~t.indexOf("random(")?ge(t):t},rs=ut+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",ns={};mt(rs+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return ns[t]=1}));var is=function(t){function e(e,s,r,i){var o;"number"==typeof s&&(r.duration=s,s=r,r=null);var h,u,d,c,p,m,f,_,g=(o=t.call(this,i?s:Et(s))||this).vars,v=g.duration,y=g.delay,x=g.immediateRender,w=g.stagger,j=g.overwrite,M=g.keyframes,T=g.defaults,A=g.scrollTrigger,E=g.yoyoEase,S=s.parent||l,C=(U(e)||B(e)?F(e[0]):"length"in s)?[e]:ne(e);if(o._targets=C.length?dt(C):Z("GSAP target "+e+" not found. https://greensock.com",!b.nullTargetWarn)||[],o._ptLookup=[],o._overwrite=j,M||w||I(v)||I(y)){if(s=o.vars,(h=o.timeline=new He({data:"nested",defaults:T||{}})).kill(),h.parent=h._dp=n(o),h._start=0,w||I(v)||I(y)){if(c=C.length,f=w&&oe(w),z(w))for(p in w)~rs.indexOf(p)&&(_||(_={}),_[p]=w[p]);for(u=0;u<c;u++)(d=At(s,ns)).stagger=0,E&&(d.yoyoEase=E),_&&Mt(d,_),m=C[u],d.duration=+ss(v,n(o),u,m,C),d.delay=(+ss(y,n(o),u,m,C)||0)-o._delay,!w&&1===c&&d.delay&&(o._delay=y=d.delay,o._start+=y,d.delay=0),h.to(m,d,f?f(u,m,C):0),h._ease=ze.none;h.duration()?v=y=0:o.timeline=0}else if(M){Et(jt(h.vars.defaults,{ease:"none"})),h._ease=Ne(M.ease||s.ease||"none");var O,P,L,R=0;if(U(M))M.forEach((function(t){return h.to(C,t,">")})),h.duration();else{for(p in d={},M)"ease"===p||"easeEach"===p||es(p,M[p],d,M.easeEach);for(p in d)for(O=d[p].sort((function(t,e){return t.t-e.t})),R=0,u=0;u<O.length;u++)(L={ease:(P=O[u]).e,duration:(P.t-(u?O[u-1].t:0))/100*v})[p]=P.v,h.to(C,L,R),R+=L.duration;h.duration()<v&&h.to({},{duration:v-h.duration()})}}v||o.duration(v=h.duration())}else o.timeline=0;return!0!==j||a||($e=n(o),l.killTweensOf(C),$e=0),Nt(S,n(o),r),s.reversed&&o.reverse(),s.paused&&o.paused(!0),(x||!v&&!M&&o._start===_t(S._time)&&k(x)&&Rt(n(o))&&"nested"!==S.data)&&(o._tTime=-1e-8,o.render(Math.max(0,-y))),A&&qt(n(o),A),o}i(e,t);var s=e.prototype;return s.render=function(t,e,s){var r,n,i,a,h,l,u,d,c,p=this._time,m=this._tDur,f=this._dur,_=t<0,g=t>m-M&&!_?m:t<M?0:t;if(f){if(g!==this._tTime||!t||s||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==_){if(r=g,d=this.timeline,this._repeat){if(a=f+this._rDelay,this._repeat<-1&&_)return this.totalTime(100*a+t,e,s);if(r=_t(g%a),g===m?(i=this._repeat,r=f):((i=~~(g/a))&&i===g/a&&(r=f,i--),r>f&&(r=f)),(l=this._yoyo&&1&i)&&(c=this._yEase,r=f-r),h=kt(this._tTime,a),r===p&&!s&&this._initted)return this._tTime=g,this;i!==h&&(d&&this._yEase&&Ue(d,l),!this.vars.repeatRefresh||l||this._lock||(this._lock=s=1,this.render(_t(a*i),!0).invalidate()._lock=0))}if(!this._initted){if(Vt(this,_?t:r,s,e))return this._tTime=0,this;if(p!==this._time)return this;if(f!==this._dur)return this.render(t,e,s)}if(this._tTime=g,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(c||this._ease)(r/f),this._from&&(this.ratio=u=1-u),r&&!p&&!e&&(be(this,"onStart"),this._tTime!==g))return this;for(n=this._pt;n;)n.r(u,n.d),n=n._next;d&&d.render(t<0?t:!r&&l?-1e-8:d._dur*d._ease(r/this._dur),e,s)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(_&&Ft(this,t,0,s),be(this,"onUpdate")),this._repeat&&i!==h&&this.vars.onRepeat&&!e&&this.parent&&be(this,"onRepeat"),g!==this._tDur&&g||this._tTime!==g||(_&&!this._onUpdate&&Ft(this,t,0,!0),(t||!f)&&(g===this._tDur&&this._ts>0||!g&&this._ts<0)&&Ot(this,1),e||_&&!p||!g&&!p||(be(this,g===m?"onComplete":"onReverseComplete",!0),this._prom&&!(g<m&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,s,r){var n,i,a,h=t.ratio,l=e<0||!e&&(!t._start&&Gt(t)&&(t._initted||!Xt(t))||(t._ts<0||t._dp._ts<0)&&!Xt(t))?0:1,u=t._rDelay,d=0;if(u&&t._repeat&&(d=Zt(0,t._tDur,e),i=kt(d,u),t._yoyo&&1&i&&(l=1-l),i!==kt(t._tTime,u)&&(h=1-l,t.vars.repeatRefresh&&t._initted&&t.invalidate())),l!==h||o||r||t._zTime===M||!e&&t._zTime){if(!t._initted&&Vt(t,e,r,s))return;for(a=t._zTime,t._zTime=e||(s?M:0),s||(s=e&&!a),t.ratio=l,t._from&&(l=1-l),t._time=0,t._tTime=d,n=t._pt;n;)n.r(l,n.d),n=n._next;e<0&&Ft(t,e,0,!0),t._onUpdate&&!s&&be(t,"onUpdate"),d&&t._repeat&&!s&&t.parent&&be(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===l&&(l&&Ot(t,1),s||(be(t,l?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,s);return this},s.targets=function(){return this._targets},s.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),t.prototype.invalidate.call(this)},s.resetTo=function(t,e,s,r){_||Fe.wake(),this._ts||this.play();var n=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||ts(this,n),function(t,e,s,r,n,i,a){var o,h,l,u,d=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!d)for(d=t._ptCache[e]=[],l=t._ptLookup,u=t._targets.length;u--;){if((o=l[u][e])&&o.d&&o.d._pt)for(o=o.d._pt;o&&o.p!==e&&o.fp!==e;)o=o._next;if(!o)return Qe=1,t.vars[e]="+=0",ts(t,a),Qe=0,1;d.push(o)}for(u=d.length;u--;)(o=(h=d[u])._pt||h).s=!r&&0!==r||n?o.s+(r||0)+i*o.c:r,o.c=s-o.s,h.e&&(h.e=ft(s)+Jt(h.e)),h.b&&(h.b=o.s+Jt(h.b))}(this,t,e,s,r,this._ease(n/this._dur),n)?this.resetTo(t,e,s,r):(Bt(this,0),this.parent||St(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},s.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?we(this):this;if(this.timeline){var s=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,$e&&!0!==$e.vars.overwrite)._first||we(this),this.parent&&s!==this.timeline.totalDuration()&&Yt(this,this._dur*this.timeline._tDur/s,0,1),this}var r,n,i,a,o,h,l,u=this._targets,d=t?ne(t):u,c=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var s=t.length,r=s===e.length;r&&s--&&t[s]===e[s];);return s<0}(u,d))return"all"===e&&(this._pt=0),we(this);for(r=this._op=this._op||[],"all"!==e&&(P(e)&&(o={},mt(e,(function(t){return o[t]=1})),e=o),e=function(t,e){var s,r,n,i,a=t[0]?ct(t[0]).harness:0,o=a&&a.aliases;if(!o)return e;for(r in s=Mt({},e),o)if(r in s)for(n=(i=o[r].split(",")).length;n--;)s[i[n]]=s[r];return s}(u,e)),l=u.length;l--;)if(~d.indexOf(u[l]))for(o in n=c[l],"all"===e?(r[l]=e,a=n,i={}):(i=r[l]=r[l]||{},a=e),a)(h=n&&n[o])&&("kill"in h.d&&!0!==h.d.kill(o)||Ct(this,h,"_pt"),delete n[o]),"all"!==i&&(i[o]=1);return this._initted&&!this._pt&&p&&we(this),this},e.to=function(t,s){return new e(t,s,arguments[2])},e.from=function(t,e){return Qt(1,arguments)},e.delayedCall=function(t,s,r,n){return new e(s,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:s,onReverseComplete:s,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:n})},e.fromTo=function(t,e,s){return Qt(2,arguments)},e.set=function(t,s){return s.duration=0,s.repeatDelay||(s.repeat=0),new e(t,s)},e.killTweensOf=function(t,e,s){return l.killTweensOf(t,e,s)},e}(We);jt(is.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),mt("staggerTo,staggerFrom,staggerFromTo",(function(t){is[t]=function(){var e=new He,s=ee.call(arguments,0);return s.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,s)}}));var as=function(t,e,s){return t[e]=s},os=function(t,e,s){return t[e](s)},hs=function(t,e,s,r){return t[e](r.fp,s)},ls=function(t,e,s){return t.setAttribute(e,s)},us=function(t,e){return L(t[e])?os:R(t[e])&&t.setAttribute?ls:as},ds=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},cs=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},ps=function(t,e){var s=e._pt,r="";if(!t&&e.b)r=e.b;else if(1===t&&e.e)r=e.e;else{for(;s;)r=s.p+(s.m?s.m(s.s+s.c*t):Math.round(1e4*(s.s+s.c*t))/1e4)+r,s=s._next;r+=e.c}e.set(e.t,e.p,r,e)},ms=function(t,e){for(var s=e._pt;s;)s.r(t,s.d),s=s._next},fs=function(t,e,s,r){for(var n,i=this._pt;i;)n=i._next,i.p===r&&i.modifier(t,e,s),i=n},_s=function(t){for(var e,s,r=this._pt;r;)s=r._next,r.p===t&&!r.op||r.op===t?Ct(this,r,"_pt"):r.dep||(e=1),r=s;return!e},gs=function(t,e,s,r){r.mSet(t,e,r.m.call(r.tween,s,r.mt),r)},vs=function(t){for(var e,s,r,n,i=t._pt;i;){for(e=i._next,s=r;s&&s.pr>i.pr;)s=s._next;(i._prev=s?s._prev:n)?i._prev._next=i:r=i,(i._next=s)?s._prev=i:n=i,i=e}t._pt=r},ys=function(){function t(t,e,s,r,n,i,a,o,h){this.t=e,this.s=r,this.c=n,this.p=s,this.r=i||ds,this.d=a||this,this.set=o||as,this.pr=h||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,s){this.mSet=this.mSet||this.set,this.set=gs,this.m=t,this.mt=s,this.tween=e},t}();mt(ut+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return rt[t]=1})),H.TweenMax=H.TweenLite=is,H.TimelineLite=H.TimelineMax=He,l=new He({sortChildren:!1,defaults:w,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),b.stringFilter=Le;var xs=[],bs={},ws=[],js=0,Ms=function(t){return(bs[t]||ws).map((function(t){return t()}))},Ts=function(){var t=Date.now(),e=[];t-js>2&&(Ms("matchMediaInit"),xs.forEach((function(t){var s,r,n,i,a=t.queries,o=t.conditions;for(r in a)(s=u.matchMedia(a[r]).matches)&&(n=1),s!==o[r]&&(o[r]=s,i=1);i&&(t.revert(),n&&e.push(t))})),Ms("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t)})),js=t,Ms("matchMedia"))},As=function(){function t(t,e){this.selector=e&&ie(e),this.data=[],this._r=[],this.isReverted=!1,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,s){L(t)&&(s=e,e=t,t=L);var r=this,n=function(){var t,n=h,i=r.selector;return n&&n.data.push(r),s&&(r.selector=ie(s)),h=r,t=e.apply(r,arguments),L(t)&&r._r.push(t),h=n,r.selector=i,r.isReverted=!1,t};return r.last=n,t===L?n(r):t?r[t]=n:n},e.ignore=function(t){var e=h;h=null,t(this),h=e},e.getTweens=function(){var e=[];return this.data.forEach((function(s){return s instanceof t?e.push.apply(e,s.getTweens()):s instanceof is&&s._targets[0]!==s.vars.onComplete&&e.push(s)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var s=this;if(t?(this.getTweens().map((function(t){return{g:t.globalTime(0),t}})).sort((function(t,e){return e.g-t.g||-1})).forEach((function(e){return e.t.revert(t)})),this.data.forEach((function(e){return!(e instanceof We)&&e.revert&&e.revert(t)})),this._r.forEach((function(e){return e(t,s)})),this.isReverted=!0):this.data.forEach((function(t){return t.kill&&t.kill()})),this.clear(),e){var r=xs.indexOf(this);~r&&xs.splice(r,1)}},e.revert=function(t){this.kill(t||{})},t}(),Es=function(){function t(t){this.contexts=[],this.scope=t}var e=t.prototype;return e.add=function(t,e,s){z(t)||(t={matches:t});var r,n,i,a=new As(0,s||this.scope),o=a.conditions={};for(n in this.contexts.push(a),e=a.add("onMatch",e),a.queries=t,t)"all"===n?i=1:(r=u.matchMedia(t[n]))&&(xs.indexOf(a)<0&&xs.push(a),(o[n]=r.matches)&&(i=1),r.addListener?r.addListener(Ts):r.addEventListener("change",Ts));return i&&e(a),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),Ss={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),s=0;s<t;s++)e[s]=arguments[s];e.forEach((function(t){return je(t)}))},timeline:function(t){return new He(t)},getTweensOf:function(t,e){return l.getTweensOf(t,e)},getProperty:function(t,e,s,r){P(t)&&(t=ne(t)[0]);var n=ct(t||{}).get,i=s?wt:bt;return"native"===s&&(s=""),t?e?i((at[e]&&at[e].get||n)(t,e,s,r)):function(e,s,r){return i((at[e]&&at[e].get||n)(t,e,s,r))}:t},quickSetter:function(t,e,s){if((t=ne(t)).length>1){var r=t.map((function(t){return Ps.quickSetter(t,e,s)})),n=r.length;return function(t){for(var e=n;e--;)r[e](t)}}t=t[0]||{};var i=at[e],a=ct(t),o=a.harness&&(a.harness.aliases||{})[e]||e,h=i?function(e){var r=new i;f._pt=0,r.init(t,s?e+s:e,f,0,[t]),r.render(1,r),f._pt&&ms(1,f)}:a.set(t,o);return i?h:function(e){return h(t,o,s?e+s:e,a,1)}},quickTo:function(t,e,s){var r,n=Ps.to(t,Mt(((r={})[e]="+=0.1",r.paused=!0,r),s||{})),i=function(t,s,r){return n.resetTo(e,t,s,r)};return i.tween=n,i},isTweening:function(t){return l.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Ne(t.ease,w.ease)),Tt(w,t||{})},config:function(t){return Tt(b,t||{})},registerEffect:function(t){var e=t.name,s=t.effect,r=t.plugins,n=t.defaults,i=t.extendTimeline;(r||"").split(",").forEach((function(t){return t&&!at[t]&&!H[t]&&Z(e+" effect requires "+t+" plugin.")})),ot[e]=function(t,e,r){return s(ne(t),jt(e||{},n),r)},i&&(He.prototype[e]=function(t,s,r){return this.add(ot[e](t,z(s)?s:(r=s)&&{},this),r)})},registerEase:function(t,e){ze[t]=Ne(e)},parseEase:function(t,e){return arguments.length?Ne(t,e):ze},getById:function(t){return l.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var s,r,n=new He(t);for(n.smoothChildTiming=k(t.smoothChildTiming),l.remove(n),n._dp=0,n._time=n._tTime=l._time,s=l._first;s;)r=s._next,!e&&!s._dur&&s instanceof is&&s.vars.onComplete===s._targets[0]||Nt(n,s,s._start-s._delay),s=r;return Nt(l,n,0),n},context:function(t,e){return t?new As(t,e):h},matchMedia:function(t){return new Es(t)},matchMediaRefresh:function(){return xs.forEach((function(t){var e,s,r=t.conditions;for(s in r)r[s]&&(r[s]=!1,e=1);e&&t.revert()}))||Ts()},addEventListener:function(t,e){var s=bs[t]||(bs[t]=[]);~s.indexOf(e)||s.push(e)},removeEventListener:function(t,e){var s=bs[t],r=s&&s.indexOf(e);r>=0&&s.splice(r,1)},utils:{wrap:fe,wrapYoyo:_e,distribute:oe,random:ue,snap:le,normalize:pe,getUnit:Jt,clamp:te,splitColor:Ee,toArray:ne,selector:ie,mapRange:ve,pipe:de,unitize:ce,interpolate:ye,shuffle:ae},install:Q,effects:ot,ticker:Fe,updateRoot:He.updateRoot,plugins:at,globalTimeline:l,core:{PropTween:ys,globals:J,Tween:is,Timeline:He,Animation:We,getCache:ct,_removeLinkedListItem:Ct,reverting:function(){return o},context:function(t){return t&&h&&(h.data.push(t),t._ctx=h),h},suppressOverwrites:function(t){return a=t}}};mt("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return Ss[t]=is[t]})),Fe.add(He.updateRoot),f=Ss.to({},{duration:0});var Cs=function(t,e){for(var s=t._pt;s&&s.p!==e&&s.op!==e&&s.fp!==e;)s=s._next;return s},Os=function(t,e){return{name:t,rawVars:1,init:function(t,s,r){r._onInit=function(t){var r,n;if(P(s)&&(r={},mt(s,(function(t){return r[t]=1})),s=r),e){for(n in r={},s)r[n]=e(s[n]);s=r}!function(t,e){var s,r,n,i=t._targets;for(s in e)for(r=i.length;r--;)(n=t._ptLookup[r][s])&&(n=n.d)&&(n._pt&&(n=Cs(n,s)),n&&n.modifier&&n.modifier(e[s],t,i[r],s))}(t,s)}}}},Ps=Ss.registerPlugin({name:"attr",init:function(t,e,s,r,n){var i,a,o;for(i in this.tween=s,e)o=t.getAttribute(i)||"",(a=this.add(t,"setAttribute",(o||0)+"",e[i],r,n,0,0,i)).op=i,a.b=o,this._props.push(i)},render:function(t,e){for(var s=e._pt;s;)o?s.set(s.t,s.p,s.b,s):s.r(t,s.d),s=s._next}},{name:"endArray",init:function(t,e){for(var s=e.length;s--;)this.add(t,s,t[s]||0,e[s],0,0,0,0,0,1)}},Os("roundProps",he),Os("modifiers"),Os("snap",le))||Ss;is.version=He.version=Ps.version="3.11.0",p=1,D()&&Re();var Ls=ze.Power0,Fs=ze.Power1,Rs=ze.Power2,zs=ze.Power3,ks=ze.Power4,Ds=ze.Linear,Is=ze.Quad,Bs=ze.Cubic,Us=ze.Quart,Ns=ze.Quint,qs=ze.Strong,Vs=ze.Elastic,Gs=ze.Back,Xs=ze.SteppedEase,Ys=ze.Bounce,Ws=ze.Sine,Hs=ze.Expo,$s=ze.Circ},"./node_modules/gsap/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Back:()=>r.Back,Bounce:()=>r.Bounce,CSSPlugin:()=>n.CSSPlugin,Circ:()=>r.Circ,Cubic:()=>r.Cubic,Elastic:()=>r.Elastic,Expo:()=>r.Expo,Linear:()=>r.Linear,Power0:()=>r.Power0,Power1:()=>r.Power1,Power2:()=>r.Power2,Power3:()=>r.Power3,Power4:()=>r.Power4,Quad:()=>r.Quad,Quart:()=>r.Quart,Quint:()=>r.Quint,Sine:()=>r.Sine,SteppedEase:()=>r.SteppedEase,Strong:()=>r.Strong,TimelineLite:()=>r.TimelineLite,TimelineMax:()=>r.TimelineMax,TweenLite:()=>r.TweenLite,TweenMax:()=>a,default:()=>i,gsap:()=>i});var r=s("./node_modules/gsap/gsap-core.js"),n=s("./node_modules/gsap/CSSPlugin.js"),i=r.gsap.registerPlugin(n.CSSPlugin)||r.gsap,a=i.core.Tween},"./node_modules/lodash/_DataView.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getNative.js")(s("./node_modules/lodash/_root.js"),"DataView");t.exports=r},"./node_modules/lodash/_Hash.js":(t,e,s)=>{var r=s("./node_modules/lodash/_hashClear.js"),n=s("./node_modules/lodash/_hashDelete.js"),i=s("./node_modules/lodash/_hashGet.js"),a=s("./node_modules/lodash/_hashHas.js"),o=s("./node_modules/lodash/_hashSet.js");function h(t){var e=-1,s=null==t?0:t.length;for(this.clear();++e<s;){var r=t[e];this.set(r[0],r[1])}}h.prototype.clear=r,h.prototype.delete=n,h.prototype.get=i,h.prototype.has=a,h.prototype.set=o,t.exports=h},"./node_modules/lodash/_ListCache.js":(t,e,s)=>{var r=s("./node_modules/lodash/_listCacheClear.js"),n=s("./node_modules/lodash/_listCacheDelete.js"),i=s("./node_modules/lodash/_listCacheGet.js"),a=s("./node_modules/lodash/_listCacheHas.js"),o=s("./node_modules/lodash/_listCacheSet.js");function h(t){var e=-1,s=null==t?0:t.length;for(this.clear();++e<s;){var r=t[e];this.set(r[0],r[1])}}h.prototype.clear=r,h.prototype.delete=n,h.prototype.get=i,h.prototype.has=a,h.prototype.set=o,t.exports=h},"./node_modules/lodash/_Map.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getNative.js")(s("./node_modules/lodash/_root.js"),"Map");t.exports=r},"./node_modules/lodash/_MapCache.js":(t,e,s)=>{var r=s("./node_modules/lodash/_mapCacheClear.js"),n=s("./node_modules/lodash/_mapCacheDelete.js"),i=s("./node_modules/lodash/_mapCacheGet.js"),a=s("./node_modules/lodash/_mapCacheHas.js"),o=s("./node_modules/lodash/_mapCacheSet.js");function h(t){var e=-1,s=null==t?0:t.length;for(this.clear();++e<s;){var r=t[e];this.set(r[0],r[1])}}h.prototype.clear=r,h.prototype.delete=n,h.prototype.get=i,h.prototype.has=a,h.prototype.set=o,t.exports=h},"./node_modules/lodash/_Promise.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getNative.js")(s("./node_modules/lodash/_root.js"),"Promise");t.exports=r},"./node_modules/lodash/_Set.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getNative.js")(s("./node_modules/lodash/_root.js"),"Set");t.exports=r},"./node_modules/lodash/_SetCache.js":(t,e,s)=>{var r=s("./node_modules/lodash/_MapCache.js"),n=s("./node_modules/lodash/_setCacheAdd.js"),i=s("./node_modules/lodash/_setCacheHas.js");function a(t){var e=-1,s=null==t?0:t.length;for(this.__data__=new r;++e<s;)this.add(t[e])}a.prototype.add=a.prototype.push=n,a.prototype.has=i,t.exports=a},"./node_modules/lodash/_Stack.js":(t,e,s)=>{var r=s("./node_modules/lodash/_ListCache.js"),n=s("./node_modules/lodash/_stackClear.js"),i=s("./node_modules/lodash/_stackDelete.js"),a=s("./node_modules/lodash/_stackGet.js"),o=s("./node_modules/lodash/_stackHas.js"),h=s("./node_modules/lodash/_stackSet.js");function l(t){var e=this.__data__=new r(t);this.size=e.size}l.prototype.clear=n,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=o,l.prototype.set=h,t.exports=l},"./node_modules/lodash/_Symbol.js":(t,e,s)=>{var r=s("./node_modules/lodash/_root.js").Symbol;t.exports=r},"./node_modules/lodash/_Uint8Array.js":(t,e,s)=>{var r=s("./node_modules/lodash/_root.js").Uint8Array;t.exports=r},"./node_modules/lodash/_WeakMap.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getNative.js")(s("./node_modules/lodash/_root.js"),"WeakMap");t.exports=r},"./node_modules/lodash/_arrayEach.js":t=>{t.exports=function(t,e){for(var s=-1,r=null==t?0:t.length;++s<r&&!1!==e(t[s],s,t););return t}},"./node_modules/lodash/_arrayFilter.js":t=>{t.exports=function(t,e){for(var s=-1,r=null==t?0:t.length,n=0,i=[];++s<r;){var a=t[s];e(a,s,t)&&(i[n++]=a)}return i}},"./node_modules/lodash/_arrayLikeKeys.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseTimes.js"),n=s("./node_modules/lodash/isArguments.js"),i=s("./node_modules/lodash/isArray.js"),a=s("./node_modules/lodash/isBuffer.js"),o=s("./node_modules/lodash/_isIndex.js"),h=s("./node_modules/lodash/isTypedArray.js"),l=Object.prototype.hasOwnProperty;t.exports=function(t,e){var s=i(t),u=!s&&n(t),d=!s&&!u&&a(t),c=!s&&!u&&!d&&h(t),p=s||u||d||c,m=p?r(t.length,String):[],f=m.length;for(var _ in t)!e&&!l.call(t,_)||p&&("length"==_||d&&("offset"==_||"parent"==_)||c&&("buffer"==_||"byteLength"==_||"byteOffset"==_)||o(_,f))||m.push(_);return m}},"./node_modules/lodash/_arrayMap.js":t=>{t.exports=function(t,e){for(var s=-1,r=null==t?0:t.length,n=Array(r);++s<r;)n[s]=e(t[s],s,t);return n}},"./node_modules/lodash/_arrayPush.js":t=>{t.exports=function(t,e){for(var s=-1,r=e.length,n=t.length;++s<r;)t[n+s]=e[s];return t}},"./node_modules/lodash/_arraySome.js":t=>{t.exports=function(t,e){for(var s=-1,r=null==t?0:t.length;++s<r;)if(e(t[s],s,t))return!0;return!1}},"./node_modules/lodash/_assocIndexOf.js":(t,e,s)=>{var r=s("./node_modules/lodash/eq.js");t.exports=function(t,e){for(var s=t.length;s--;)if(r(t[s][0],e))return s;return-1}},"./node_modules/lodash/_baseEach.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseForOwn.js"),n=s("./node_modules/lodash/_createBaseEach.js")(r);t.exports=n},"./node_modules/lodash/_baseFor.js":(t,e,s)=>{var r=s("./node_modules/lodash/_createBaseFor.js")();t.exports=r},"./node_modules/lodash/_baseForOwn.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseFor.js"),n=s("./node_modules/lodash/keys.js");t.exports=function(t,e){return t&&r(t,e,n)}},"./node_modules/lodash/_baseGet.js":(t,e,s)=>{var r=s("./node_modules/lodash/_castPath.js"),n=s("./node_modules/lodash/_toKey.js");t.exports=function(t,e){for(var s=0,i=(e=r(e,t)).length;null!=t&&s<i;)t=t[n(e[s++])];return s&&s==i?t:void 0}},"./node_modules/lodash/_baseGetAllKeys.js":(t,e,s)=>{var r=s("./node_modules/lodash/_arrayPush.js"),n=s("./node_modules/lodash/isArray.js");t.exports=function(t,e,s){var i=e(t);return n(t)?i:r(i,s(t))}},"./node_modules/lodash/_baseGetTag.js":(t,e,s)=>{var r=s("./node_modules/lodash/_Symbol.js"),n=s("./node_modules/lodash/_getRawTag.js"),i=s("./node_modules/lodash/_objectToString.js"),a=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":a&&a in Object(t)?n(t):i(t)}},"./node_modules/lodash/_baseHasIn.js":t=>{t.exports=function(t,e){return null!=t&&e in Object(t)}},"./node_modules/lodash/_baseIsArguments.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseGetTag.js"),n=s("./node_modules/lodash/isObjectLike.js");t.exports=function(t){return n(t)&&"[object Arguments]"==r(t)}},"./node_modules/lodash/_baseIsEqual.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseIsEqualDeep.js"),n=s("./node_modules/lodash/isObjectLike.js");t.exports=function t(e,s,i,a,o){return e===s||(null==e||null==s||!n(e)&&!n(s)?e!=e&&s!=s:r(e,s,i,a,t,o))}},"./node_modules/lodash/_baseIsEqualDeep.js":(t,e,s)=>{var r=s("./node_modules/lodash/_Stack.js"),n=s("./node_modules/lodash/_equalArrays.js"),i=s("./node_modules/lodash/_equalByTag.js"),a=s("./node_modules/lodash/_equalObjects.js"),o=s("./node_modules/lodash/_getTag.js"),h=s("./node_modules/lodash/isArray.js"),l=s("./node_modules/lodash/isBuffer.js"),u=s("./node_modules/lodash/isTypedArray.js"),d="[object Arguments]",c="[object Array]",p="[object Object]",m=Object.prototype.hasOwnProperty;t.exports=function(t,e,s,f,_,g){var v=h(t),y=h(e),x=v?c:o(t),b=y?c:o(e),w=(x=x==d?p:x)==p,j=(b=b==d?p:b)==p,M=x==b;if(M&&l(t)){if(!l(e))return!1;v=!0,w=!1}if(M&&!w)return g||(g=new r),v||u(t)?n(t,e,s,f,_,g):i(t,e,x,s,f,_,g);if(!(1&s)){var T=w&&m.call(t,"__wrapped__"),A=j&&m.call(e,"__wrapped__");if(T||A){var E=T?t.value():t,S=A?e.value():e;return g||(g=new r),_(E,S,s,f,g)}}return!!M&&(g||(g=new r),a(t,e,s,f,_,g))}},"./node_modules/lodash/_baseIsMatch.js":(t,e,s)=>{var r=s("./node_modules/lodash/_Stack.js"),n=s("./node_modules/lodash/_baseIsEqual.js");t.exports=function(t,e,s,i){var a=s.length,o=a,h=!i;if(null==t)return!o;for(t=Object(t);a--;){var l=s[a];if(h&&l[2]?l[1]!==t[l[0]]:!(l[0]in t))return!1}for(;++a<o;){var u=(l=s[a])[0],d=t[u],c=l[1];if(h&&l[2]){if(void 0===d&&!(u in t))return!1}else{var p=new r;if(i)var m=i(d,c,u,t,e,p);if(!(void 0===m?n(c,d,3,i,p):m))return!1}}return!0}},"./node_modules/lodash/_baseIsNative.js":(t,e,s)=>{var r=s("./node_modules/lodash/isFunction.js"),n=s("./node_modules/lodash/_isMasked.js"),i=s("./node_modules/lodash/isObject.js"),a=s("./node_modules/lodash/_toSource.js"),o=/^\[object .+?Constructor\]$/,h=Function.prototype,l=Object.prototype,u=h.toString,d=l.hasOwnProperty,c=RegExp("^"+u.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!i(t)||n(t))&&(r(t)?c:o).test(a(t))}},"./node_modules/lodash/_baseIsTypedArray.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseGetTag.js"),n=s("./node_modules/lodash/isLength.js"),i=s("./node_modules/lodash/isObjectLike.js"),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,t.exports=function(t){return i(t)&&n(t.length)&&!!a[r(t)]}},"./node_modules/lodash/_baseIteratee.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseMatches.js"),n=s("./node_modules/lodash/_baseMatchesProperty.js"),i=s("./node_modules/lodash/identity.js"),a=s("./node_modules/lodash/isArray.js"),o=s("./node_modules/lodash/property.js");t.exports=function(t){return"function"==typeof t?t:null==t?i:"object"==typeof t?a(t)?n(t[0],t[1]):r(t):o(t)}},"./node_modules/lodash/_baseKeys.js":(t,e,s)=>{var r=s("./node_modules/lodash/_isPrototype.js"),n=s("./node_modules/lodash/_nativeKeys.js"),i=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return n(t);var e=[];for(var s in Object(t))i.call(t,s)&&"constructor"!=s&&e.push(s);return e}},"./node_modules/lodash/_baseMap.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseEach.js"),n=s("./node_modules/lodash/isArrayLike.js");t.exports=function(t,e){var s=-1,i=n(t)?Array(t.length):[];return r(t,(function(t,r,n){i[++s]=e(t,r,n)})),i}},"./node_modules/lodash/_baseMatches.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseIsMatch.js"),n=s("./node_modules/lodash/_getMatchData.js"),i=s("./node_modules/lodash/_matchesStrictComparable.js");t.exports=function(t){var e=n(t);return 1==e.length&&e[0][2]?i(e[0][0],e[0][1]):function(s){return s===t||r(s,t,e)}}},"./node_modules/lodash/_baseMatchesProperty.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseIsEqual.js"),n=s("./node_modules/lodash/get.js"),i=s("./node_modules/lodash/hasIn.js"),a=s("./node_modules/lodash/_isKey.js"),o=s("./node_modules/lodash/_isStrictComparable.js"),h=s("./node_modules/lodash/_matchesStrictComparable.js"),l=s("./node_modules/lodash/_toKey.js");t.exports=function(t,e){return a(t)&&o(e)?h(l(t),e):function(s){var a=n(s,t);return void 0===a&&a===e?i(s,t):r(e,a,3)}}},"./node_modules/lodash/_baseProperty.js":t=>{t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},"./node_modules/lodash/_basePropertyDeep.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseGet.js");t.exports=function(t){return function(e){return r(e,t)}}},"./node_modules/lodash/_baseTimes.js":t=>{t.exports=function(t,e){for(var s=-1,r=Array(t);++s<t;)r[s]=e(s);return r}},"./node_modules/lodash/_baseToString.js":(t,e,s)=>{var r=s("./node_modules/lodash/_Symbol.js"),n=s("./node_modules/lodash/_arrayMap.js"),i=s("./node_modules/lodash/isArray.js"),a=s("./node_modules/lodash/isSymbol.js"),o=r?r.prototype:void 0,h=o?o.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(i(e))return n(e,t)+"";if(a(e))return h?h.call(e):"";var s=e+"";return"0"==s&&1/e==-Infinity?"-0":s}},"./node_modules/lodash/_baseUnary.js":t=>{t.exports=function(t){return function(e){return t(e)}}},"./node_modules/lodash/_cacheHas.js":t=>{t.exports=function(t,e){return t.has(e)}},"./node_modules/lodash/_castFunction.js":(t,e,s)=>{var r=s("./node_modules/lodash/identity.js");t.exports=function(t){return"function"==typeof t?t:r}},"./node_modules/lodash/_castPath.js":(t,e,s)=>{var r=s("./node_modules/lodash/isArray.js"),n=s("./node_modules/lodash/_isKey.js"),i=s("./node_modules/lodash/_stringToPath.js"),a=s("./node_modules/lodash/toString.js");t.exports=function(t,e){return r(t)?t:n(t,e)?[t]:i(a(t))}},"./node_modules/lodash/_coreJsData.js":(t,e,s)=>{var r=s("./node_modules/lodash/_root.js")["__core-js_shared__"];t.exports=r},"./node_modules/lodash/_createBaseEach.js":(t,e,s)=>{var r=s("./node_modules/lodash/isArrayLike.js");t.exports=function(t,e){return function(s,n){if(null==s)return s;if(!r(s))return t(s,n);for(var i=s.length,a=e?i:-1,o=Object(s);(e?a--:++a<i)&&!1!==n(o[a],a,o););return s}}},"./node_modules/lodash/_createBaseFor.js":t=>{t.exports=function(t){return function(e,s,r){for(var n=-1,i=Object(e),a=r(e),o=a.length;o--;){var h=a[t?o:++n];if(!1===s(i[h],h,i))break}return e}}},"./node_modules/lodash/_equalArrays.js":(t,e,s)=>{var r=s("./node_modules/lodash/_SetCache.js"),n=s("./node_modules/lodash/_arraySome.js"),i=s("./node_modules/lodash/_cacheHas.js");t.exports=function(t,e,s,a,o,h){var l=1&s,u=t.length,d=e.length;if(u!=d&&!(l&&d>u))return!1;var c=h.get(t),p=h.get(e);if(c&&p)return c==e&&p==t;var m=-1,f=!0,_=2&s?new r:void 0;for(h.set(t,e),h.set(e,t);++m<u;){var g=t[m],v=e[m];if(a)var y=l?a(v,g,m,e,t,h):a(g,v,m,t,e,h);if(void 0!==y){if(y)continue;f=!1;break}if(_){if(!n(e,(function(t,e){if(!i(_,e)&&(g===t||o(g,t,s,a,h)))return _.push(e)}))){f=!1;break}}else if(g!==v&&!o(g,v,s,a,h)){f=!1;break}}return h.delete(t),h.delete(e),f}},"./node_modules/lodash/_equalByTag.js":(t,e,s)=>{var r=s("./node_modules/lodash/_Symbol.js"),n=s("./node_modules/lodash/_Uint8Array.js"),i=s("./node_modules/lodash/eq.js"),a=s("./node_modules/lodash/_equalArrays.js"),o=s("./node_modules/lodash/_mapToArray.js"),h=s("./node_modules/lodash/_setToArray.js"),l=r?r.prototype:void 0,u=l?l.valueOf:void 0;t.exports=function(t,e,s,r,l,d,c){switch(s){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!d(new n(t),new n(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var p=o;case"[object Set]":var m=1&r;if(p||(p=h),t.size!=e.size&&!m)return!1;var f=c.get(t);if(f)return f==e;r|=2,c.set(t,e);var _=a(p(t),p(e),r,l,d,c);return c.delete(t),_;case"[object Symbol]":if(u)return u.call(t)==u.call(e)}return!1}},"./node_modules/lodash/_equalObjects.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getAllKeys.js"),n=Object.prototype.hasOwnProperty;t.exports=function(t,e,s,i,a,o){var h=1&s,l=r(t),u=l.length;if(u!=r(e).length&&!h)return!1;for(var d=u;d--;){var c=l[d];if(!(h?c in e:n.call(e,c)))return!1}var p=o.get(t),m=o.get(e);if(p&&m)return p==e&&m==t;var f=!0;o.set(t,e),o.set(e,t);for(var _=h;++d<u;){var g=t[c=l[d]],v=e[c];if(i)var y=h?i(v,g,c,e,t,o):i(g,v,c,t,e,o);if(!(void 0===y?g===v||a(g,v,s,i,o):y)){f=!1;break}_||(_="constructor"==c)}if(f&&!_){var x=t.constructor,b=e.constructor;x==b||!("constructor"in t)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof b&&b instanceof b||(f=!1)}return o.delete(t),o.delete(e),f}},"./node_modules/lodash/_freeGlobal.js":(t,e,s)=>{var r="object"==typeof s.g&&s.g&&s.g.Object===Object&&s.g;t.exports=r},"./node_modules/lodash/_getAllKeys.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseGetAllKeys.js"),n=s("./node_modules/lodash/_getSymbols.js"),i=s("./node_modules/lodash/keys.js");t.exports=function(t){return r(t,i,n)}},"./node_modules/lodash/_getMapData.js":(t,e,s)=>{var r=s("./node_modules/lodash/_isKeyable.js");t.exports=function(t,e){var s=t.__data__;return r(e)?s["string"==typeof e?"string":"hash"]:s.map}},"./node_modules/lodash/_getMatchData.js":(t,e,s)=>{var r=s("./node_modules/lodash/_isStrictComparable.js"),n=s("./node_modules/lodash/keys.js");t.exports=function(t){for(var e=n(t),s=e.length;s--;){var i=e[s],a=t[i];e[s]=[i,a,r(a)]}return e}},"./node_modules/lodash/_getNative.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseIsNative.js"),n=s("./node_modules/lodash/_getValue.js");t.exports=function(t,e){var s=n(t,e);return r(s)?s:void 0}},"./node_modules/lodash/_getRawTag.js":(t,e,s)=>{var r=s("./node_modules/lodash/_Symbol.js"),n=Object.prototype,i=n.hasOwnProperty,a=n.toString,o=r?r.toStringTag:void 0;t.exports=function(t){var e=i.call(t,o),s=t[o];try{t[o]=void 0;var r=!0}catch(t){}var n=a.call(t);return r&&(e?t[o]=s:delete t[o]),n}},"./node_modules/lodash/_getSymbols.js":(t,e,s)=>{var r=s("./node_modules/lodash/_arrayFilter.js"),n=s("./node_modules/lodash/stubArray.js"),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,o=a?function(t){return null==t?[]:(t=Object(t),r(a(t),(function(e){return i.call(t,e)})))}:n;t.exports=o},"./node_modules/lodash/_getTag.js":(t,e,s)=>{var r=s("./node_modules/lodash/_DataView.js"),n=s("./node_modules/lodash/_Map.js"),i=s("./node_modules/lodash/_Promise.js"),a=s("./node_modules/lodash/_Set.js"),o=s("./node_modules/lodash/_WeakMap.js"),h=s("./node_modules/lodash/_baseGetTag.js"),l=s("./node_modules/lodash/_toSource.js"),u="[object Map]",d="[object Promise]",c="[object Set]",p="[object WeakMap]",m="[object DataView]",f=l(r),_=l(n),g=l(i),v=l(a),y=l(o),x=h;(r&&x(new r(new ArrayBuffer(1)))!=m||n&&x(new n)!=u||i&&x(i.resolve())!=d||a&&x(new a)!=c||o&&x(new o)!=p)&&(x=function(t){var e=h(t),s="[object Object]"==e?t.constructor:void 0,r=s?l(s):"";if(r)switch(r){case f:return m;case _:return u;case g:return d;case v:return c;case y:return p}return e}),t.exports=x},"./node_modules/lodash/_getValue.js":t=>{t.exports=function(t,e){return null==t?void 0:t[e]}},"./node_modules/lodash/_hasPath.js":(t,e,s)=>{var r=s("./node_modules/lodash/_castPath.js"),n=s("./node_modules/lodash/isArguments.js"),i=s("./node_modules/lodash/isArray.js"),a=s("./node_modules/lodash/_isIndex.js"),o=s("./node_modules/lodash/isLength.js"),h=s("./node_modules/lodash/_toKey.js");t.exports=function(t,e,s){for(var l=-1,u=(e=r(e,t)).length,d=!1;++l<u;){var c=h(e[l]);if(!(d=null!=t&&s(t,c)))break;t=t[c]}return d||++l!=u?d:!!(u=null==t?0:t.length)&&o(u)&&a(c,u)&&(i(t)||n(t))}},"./node_modules/lodash/_hashClear.js":(t,e,s)=>{var r=s("./node_modules/lodash/_nativeCreate.js");t.exports=function(){this.__data__=r?r(null):{},this.size=0}},"./node_modules/lodash/_hashDelete.js":t=>{t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},"./node_modules/lodash/_hashGet.js":(t,e,s)=>{var r=s("./node_modules/lodash/_nativeCreate.js"),n=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(r){var s=e[t];return"__lodash_hash_undefined__"===s?void 0:s}return n.call(e,t)?e[t]:void 0}},"./node_modules/lodash/_hashHas.js":(t,e,s)=>{var r=s("./node_modules/lodash/_nativeCreate.js"),n=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return r?void 0!==e[t]:n.call(e,t)}},"./node_modules/lodash/_hashSet.js":(t,e,s)=>{var r=s("./node_modules/lodash/_nativeCreate.js");t.exports=function(t,e){var s=this.__data__;return this.size+=this.has(t)?0:1,s[t]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},"./node_modules/lodash/_isIndex.js":t=>{var e=/^(?:0|[1-9]\d*)$/;t.exports=function(t,s){var r=typeof t;return!!(s=null==s?9007199254740991:s)&&("number"==r||"symbol"!=r&&e.test(t))&&t>-1&&t%1==0&&t<s}},"./node_modules/lodash/_isKey.js":(t,e,s)=>{var r=s("./node_modules/lodash/isArray.js"),n=s("./node_modules/lodash/isSymbol.js"),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;t.exports=function(t,e){if(r(t))return!1;var s=typeof t;return!("number"!=s&&"symbol"!=s&&"boolean"!=s&&null!=t&&!n(t))||(a.test(t)||!i.test(t)||null!=e&&t in Object(e))}},"./node_modules/lodash/_isKeyable.js":t=>{t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},"./node_modules/lodash/_isMasked.js":(t,e,s)=>{var r,n=s("./node_modules/lodash/_coreJsData.js"),i=(r=/[^.]+$/.exec(n&&n.keys&&n.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";t.exports=function(t){return!!i&&i in t}},"./node_modules/lodash/_isPrototype.js":t=>{var e=Object.prototype;t.exports=function(t){var s=t&&t.constructor;return t===("function"==typeof s&&s.prototype||e)}},"./node_modules/lodash/_isStrictComparable.js":(t,e,s)=>{var r=s("./node_modules/lodash/isObject.js");t.exports=function(t){return t==t&&!r(t)}},"./node_modules/lodash/_listCacheClear.js":t=>{t.exports=function(){this.__data__=[],this.size=0}},"./node_modules/lodash/_listCacheDelete.js":(t,e,s)=>{var r=s("./node_modules/lodash/_assocIndexOf.js"),n=Array.prototype.splice;t.exports=function(t){var e=this.__data__,s=r(e,t);return!(s<0)&&(s==e.length-1?e.pop():n.call(e,s,1),--this.size,!0)}},"./node_modules/lodash/_listCacheGet.js":(t,e,s)=>{var r=s("./node_modules/lodash/_assocIndexOf.js");t.exports=function(t){var e=this.__data__,s=r(e,t);return s<0?void 0:e[s][1]}},"./node_modules/lodash/_listCacheHas.js":(t,e,s)=>{var r=s("./node_modules/lodash/_assocIndexOf.js");t.exports=function(t){return r(this.__data__,t)>-1}},"./node_modules/lodash/_listCacheSet.js":(t,e,s)=>{var r=s("./node_modules/lodash/_assocIndexOf.js");t.exports=function(t,e){var s=this.__data__,n=r(s,t);return n<0?(++this.size,s.push([t,e])):s[n][1]=e,this}},"./node_modules/lodash/_mapCacheClear.js":(t,e,s)=>{var r=s("./node_modules/lodash/_Hash.js"),n=s("./node_modules/lodash/_ListCache.js"),i=s("./node_modules/lodash/_Map.js");t.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||n),string:new r}}},"./node_modules/lodash/_mapCacheDelete.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getMapData.js");t.exports=function(t){var e=r(this,t).delete(t);return this.size-=e?1:0,e}},"./node_modules/lodash/_mapCacheGet.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getMapData.js");t.exports=function(t){return r(this,t).get(t)}},"./node_modules/lodash/_mapCacheHas.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getMapData.js");t.exports=function(t){return r(this,t).has(t)}},"./node_modules/lodash/_mapCacheSet.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getMapData.js");t.exports=function(t,e){var s=r(this,t),n=s.size;return s.set(t,e),this.size+=s.size==n?0:1,this}},"./node_modules/lodash/_mapToArray.js":t=>{t.exports=function(t){var e=-1,s=Array(t.size);return t.forEach((function(t,r){s[++e]=[r,t]})),s}},"./node_modules/lodash/_matchesStrictComparable.js":t=>{t.exports=function(t,e){return function(s){return null!=s&&(s[t]===e&&(void 0!==e||t in Object(s)))}}},"./node_modules/lodash/_memoizeCapped.js":(t,e,s)=>{var r=s("./node_modules/lodash/memoize.js");t.exports=function(t){var e=r(t,(function(t){return 500===s.size&&s.clear(),t})),s=e.cache;return e}},"./node_modules/lodash/_nativeCreate.js":(t,e,s)=>{var r=s("./node_modules/lodash/_getNative.js")(Object,"create");t.exports=r},"./node_modules/lodash/_nativeKeys.js":(t,e,s)=>{var r=s("./node_modules/lodash/_overArg.js")(Object.keys,Object);t.exports=r},"./node_modules/lodash/_nodeUtil.js":(t,e,s)=>{t=s.nmd(t);var r=s("./node_modules/lodash/_freeGlobal.js"),n=e&&!e.nodeType&&e,i=n&&t&&!t.nodeType&&t,a=i&&i.exports===n&&r.process,o=function(){try{var t=i&&i.require&&i.require("util").types;return t||a&&a.binding&&a.binding("util")}catch(t){}}();t.exports=o},"./node_modules/lodash/_objectToString.js":t=>{var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},"./node_modules/lodash/_overArg.js":t=>{t.exports=function(t,e){return function(s){return t(e(s))}}},"./node_modules/lodash/_root.js":(t,e,s)=>{var r=s("./node_modules/lodash/_freeGlobal.js"),n="object"==typeof self&&self&&self.Object===Object&&self,i=r||n||Function("return this")();t.exports=i},"./node_modules/lodash/_setCacheAdd.js":t=>{t.exports=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this}},"./node_modules/lodash/_setCacheHas.js":t=>{t.exports=function(t){return this.__data__.has(t)}},"./node_modules/lodash/_setToArray.js":t=>{t.exports=function(t){var e=-1,s=Array(t.size);return t.forEach((function(t){s[++e]=t})),s}},"./node_modules/lodash/_stackClear.js":(t,e,s)=>{var r=s("./node_modules/lodash/_ListCache.js");t.exports=function(){this.__data__=new r,this.size=0}},"./node_modules/lodash/_stackDelete.js":t=>{t.exports=function(t){var e=this.__data__,s=e.delete(t);return this.size=e.size,s}},"./node_modules/lodash/_stackGet.js":t=>{t.exports=function(t){return this.__data__.get(t)}},"./node_modules/lodash/_stackHas.js":t=>{t.exports=function(t){return this.__data__.has(t)}},"./node_modules/lodash/_stackSet.js":(t,e,s)=>{var r=s("./node_modules/lodash/_ListCache.js"),n=s("./node_modules/lodash/_Map.js"),i=s("./node_modules/lodash/_MapCache.js");t.exports=function(t,e){var s=this.__data__;if(s instanceof r){var a=s.__data__;if(!n||a.length<199)return a.push([t,e]),this.size=++s.size,this;s=this.__data__=new i(a)}return s.set(t,e),this.size=s.size,this}},"./node_modules/lodash/_stringToPath.js":(t,e,s)=>{var r=s("./node_modules/lodash/_memoizeCapped.js"),n=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,a=r((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(n,(function(t,s,r,n){e.push(r?n.replace(i,"$1"):s||t)})),e}));t.exports=a},"./node_modules/lodash/_toKey.js":(t,e,s)=>{var r=s("./node_modules/lodash/isSymbol.js");t.exports=function(t){if("string"==typeof t||r(t))return t;var e=t+"";return"0"==e&&1/t==-Infinity?"-0":e}},"./node_modules/lodash/_toSource.js":t=>{var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},"./node_modules/lodash/each.js":(t,e,s)=>{t.exports=s("./node_modules/lodash/forEach.js")},"./node_modules/lodash/eq.js":t=>{t.exports=function(t,e){return t===e||t!=t&&e!=e}},"./node_modules/lodash/forEach.js":(t,e,s)=>{var r=s("./node_modules/lodash/_arrayEach.js"),n=s("./node_modules/lodash/_baseEach.js"),i=s("./node_modules/lodash/_castFunction.js"),a=s("./node_modules/lodash/isArray.js");t.exports=function(t,e){return(a(t)?r:n)(t,i(e))}},"./node_modules/lodash/get.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseGet.js");t.exports=function(t,e,s){var n=null==t?void 0:r(t,e);return void 0===n?s:n}},"./node_modules/lodash/hasIn.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseHasIn.js"),n=s("./node_modules/lodash/_hasPath.js");t.exports=function(t,e){return null!=t&&n(t,e,r)}},"./node_modules/lodash/identity.js":t=>{t.exports=function(t){return t}},"./node_modules/lodash/isArguments.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseIsArguments.js"),n=s("./node_modules/lodash/isObjectLike.js"),i=Object.prototype,a=i.hasOwnProperty,o=i.propertyIsEnumerable,h=r(function(){return arguments}())?r:function(t){return n(t)&&a.call(t,"callee")&&!o.call(t,"callee")};t.exports=h},"./node_modules/lodash/isArray.js":t=>{var e=Array.isArray;t.exports=e},"./node_modules/lodash/isArrayLike.js":(t,e,s)=>{var r=s("./node_modules/lodash/isFunction.js"),n=s("./node_modules/lodash/isLength.js");t.exports=function(t){return null!=t&&n(t.length)&&!r(t)}},"./node_modules/lodash/isBuffer.js":(t,e,s)=>{t=s.nmd(t);var r=s("./node_modules/lodash/_root.js"),n=s("./node_modules/lodash/stubFalse.js"),i=e&&!e.nodeType&&e,a=i&&t&&!t.nodeType&&t,o=a&&a.exports===i?r.Buffer:void 0,h=(o?o.isBuffer:void 0)||n;t.exports=h},"./node_modules/lodash/isFunction.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseGetTag.js"),n=s("./node_modules/lodash/isObject.js");t.exports=function(t){if(!n(t))return!1;var e=r(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},"./node_modules/lodash/isLength.js":t=>{t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},"./node_modules/lodash/isObject.js":t=>{t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},"./node_modules/lodash/isObjectLike.js":t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},"./node_modules/lodash/isSymbol.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseGetTag.js"),n=s("./node_modules/lodash/isObjectLike.js");t.exports=function(t){return"symbol"==typeof t||n(t)&&"[object Symbol]"==r(t)}},"./node_modules/lodash/isTypedArray.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseIsTypedArray.js"),n=s("./node_modules/lodash/_baseUnary.js"),i=s("./node_modules/lodash/_nodeUtil.js"),a=i&&i.isTypedArray,o=a?n(a):r;t.exports=o},"./node_modules/lodash/keys.js":(t,e,s)=>{var r=s("./node_modules/lodash/_arrayLikeKeys.js"),n=s("./node_modules/lodash/_baseKeys.js"),i=s("./node_modules/lodash/isArrayLike.js");t.exports=function(t){return i(t)?r(t):n(t)}},"./node_modules/lodash/map.js":(t,e,s)=>{var r=s("./node_modules/lodash/_arrayMap.js"),n=s("./node_modules/lodash/_baseIteratee.js"),i=s("./node_modules/lodash/_baseMap.js"),a=s("./node_modules/lodash/isArray.js");t.exports=function(t,e){return(a(t)?r:i)(t,n(e,3))}},"./node_modules/lodash/memoize.js":(t,e,s)=>{var r=s("./node_modules/lodash/_MapCache.js");function n(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var s=function(){var r=arguments,n=e?e.apply(this,r):r[0],i=s.cache;if(i.has(n))return i.get(n);var a=t.apply(this,r);return s.cache=i.set(n,a)||i,a};return s.cache=new(n.Cache||r),s}n.Cache=r,t.exports=n},"./node_modules/lodash/property.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseProperty.js"),n=s("./node_modules/lodash/_basePropertyDeep.js"),i=s("./node_modules/lodash/_isKey.js"),a=s("./node_modules/lodash/_toKey.js");t.exports=function(t){return i(t)?r(a(t)):n(t)}},"./node_modules/lodash/stubArray.js":t=>{t.exports=function(){return[]}},"./node_modules/lodash/stubFalse.js":t=>{t.exports=function(){return!1}},"./node_modules/lodash/toString.js":(t,e,s)=>{var r=s("./node_modules/lodash/_baseToString.js");t.exports=function(t){return null==t?"":r(t)}},"./node_modules/normalize-wheel/index.js":(t,e,s)=>{t.exports=s("./node_modules/normalize-wheel/src/normalizeWheel.js")},"./node_modules/normalize-wheel/src/ExecutionEnvironment.js":t=>{"use strict";var e=!("undefined"==typeof window||!window.document||!window.document.createElement),s={canUseDOM:e,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:e&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:e&&!!window.screen,isInWorker:!e};t.exports=s},"./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":t=>{var e,s,r,n,i,a,o,h,l,u,d,c,p,m,f,_=!1;function g(){if(!_){_=!0;var t=navigator.userAgent,g=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(t),v=/(Mac OS X)|(Windows)|(Linux)/.exec(t);if(c=/\b(iPhone|iP[ao]d)/.exec(t),p=/\b(iP[ao]d)/.exec(t),u=/Android/i.exec(t),m=/FBAN\/\w+;/i.exec(t),f=/Mobile/i.exec(t),d=!!/Win64/.exec(t),g){(e=g[1]?parseFloat(g[1]):g[5]?parseFloat(g[5]):NaN)&&document&&document.documentMode&&(e=document.documentMode);var y=/(?:Trident\/(\d+.\d+))/.exec(t);a=y?parseFloat(y[1])+4:e,s=g[2]?parseFloat(g[2]):NaN,r=g[3]?parseFloat(g[3]):NaN,(n=g[4]?parseFloat(g[4]):NaN)?(g=/(?:Chrome\/(\d+\.\d+))/.exec(t),i=g&&g[1]?parseFloat(g[1]):NaN):i=NaN}else e=s=r=i=n=NaN;if(v){if(v[1]){var x=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(t);o=!x||parseFloat(x[1].replace("_","."))}else o=!1;h=!!v[2],l=!!v[3]}else o=h=l=!1}}var v={ie:function(){return g()||e},ieCompatibilityMode:function(){return g()||a>e},ie64:function(){return v.ie()&&d},firefox:function(){return g()||s},opera:function(){return g()||r},webkit:function(){return g()||n},safari:function(){return v.webkit()},chrome:function(){return g()||i},windows:function(){return g()||h},osx:function(){return g()||o},linux:function(){return g()||l},iphone:function(){return g()||c},mobile:function(){return g()||c||p||u||f},nativeApp:function(){return g()||m},android:function(){return g()||u},ipad:function(){return g()||p}};t.exports=v},"./node_modules/normalize-wheel/src/isEventSupported.js":(t,e,s)=>{"use strict";var r,n=s("./node_modules/normalize-wheel/src/ExecutionEnvironment.js");n.canUseDOM&&(r=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),t.exports=function(t,e){if(!n.canUseDOM||e&&!("addEventListener"in document))return!1;var s="on"+t,i=s in document;if(!i){var a=document.createElement("div");a.setAttribute(s,"return;"),i="function"==typeof a[s]}return!i&&r&&"wheel"===t&&(i=document.implementation.hasFeature("Events.wheel","3.0")),i}},"./node_modules/normalize-wheel/src/normalizeWheel.js":(t,e,s)=>{"use strict";var r=s("./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"),n=s("./node_modules/normalize-wheel/src/isEventSupported.js");function i(t){var e=0,s=0,r=0,n=0;return"detail"in t&&(s=t.detail),"wheelDelta"in t&&(s=-t.wheelDelta/120),"wheelDeltaY"in t&&(s=-t.wheelDeltaY/120),"wheelDeltaX"in t&&(e=-t.wheelDeltaX/120),"axis"in t&&t.axis===t.HORIZONTAL_AXIS&&(e=s,s=0),r=10*e,n=10*s,"deltaY"in t&&(n=t.deltaY),"deltaX"in t&&(r=t.deltaX),(r||n)&&t.deltaMode&&(1==t.deltaMode?(r*=40,n*=40):(r*=800,n*=800)),r&&!e&&(e=r<1?-1:1),n&&!s&&(s=n<1?-1:1),{spinX:e,spinY:s,pixelX:r,pixelY:n}}i.getEventType=function(){return r.firefox()?"DOMMouseScroll":n("wheel")?"wheel":"mousewheel"},t.exports=i},"./node_modules/prefix/index.js":t=>{var e="undefined"!=typeof document?document.createElement("p").style:{},s=["O","ms","Moz","Webkit"],r=/([A-Z])/g,n={};function i(t){if(t=t.replace(/-([a-z])/g,(function(t,e){return e.toUpperCase()})),void 0!==e[t])return t;for(var r=t.charAt(0).toUpperCase()+t.slice(1),n=s.length;n--;){var i=s[n]+r;if(void 0!==e[i])return i}return t}t.exports=function(t){return t in n?n[t]:n[t]=i(t)},t.exports.dash=function(t){return t=i(t),r.test(t)&&(t="-"+t.replace(r,"-$1"),r.lastIndex=0),t.toLowerCase()}},"./app/shaders/plane-fragment.glsl":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>r});const r="precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n\n  gl_FragColor = texture;\n}\n"},"./app/shaders/plane-vertex.glsl":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>r});const r="#define GLSLIFY 1\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"},"./app/animations/Highlight.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>i});var r=s("./app/classes/Animation.js"),n=s("./node_modules/gsap/index.js");s("./node_modules/lodash/each.js"),s("./app/utils/text.js");class i extends r.default{constructor({element:t,elements:e}){super({element:t,elements:e})}animateIn(){this.timelineIn=n.default.timeline({delay:.5}),this.timelineIn.fromTo(this.element,{autoAlpha:0,scale:1.2},{autoAlpha:1,duration:1.5,ease:"expo.out",scale:1})}animateOut(){n.default.set(this.element,{autoAlpha:0})}}},"./app/animations/Label.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>o});var r=s("./app/classes/Animation.js"),n=s("./node_modules/gsap/index.js"),i=s("./node_modules/lodash/each.js"),a=s("./app/utils/text.js");class o extends r.default{constructor({element:t,elements:e}){super({element:t,elements:e}),(0,a.split)({element:this.element,append:!0}),(0,a.split)({element:this.element,append:!0}),this.elementLinesSpans=this.element.querySelectorAll("span span")}animateIn(){this.timelineIn=n.default.timeline({delay:.5}),this.timelineIn.set(this.element,{autoAlpha:1}),n.default.set(this.element,{autoAlpha:1}),i(this.elementsLines,((t,e)=>{n.default.fromTo(t,{autoAlpha:0,y:"100%"},{autoAlpha:1,delay:.2*e,duration:1.5,ease:"expo.out",y:"0%"})}),0)}animateOut(){n.default.set(this.element,{autoAlpha:0})}onResize(){this.elementsLines=(0,a.calculate)(this.elementLinesSpans)}}},"./app/animations/Paragraph.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>o});var r=s("./app/classes/Animation.js"),n=s("./node_modules/gsap/index.js"),i=s("./node_modules/lodash/each.js"),a=s("./app/utils/text.js");class o extends r.default{constructor({element:t,elements:e}){super({element:t,elements:e}),(0,a.split)({element:this.element,append:!0}),(0,a.split)({element:this.element,append:!0}),this.elementLinesSpans=this.element.querySelectorAll("span span")}animateIn(){this.timelineIn=n.default.timeline({delay:.5}),this.timelineIn.set(this.element,{autoAlpha:1}),n.default.set(this.element,{autoAlpha:1}),i(this.elementsLines,((t,e)=>{n.default.fromTo(t,{autoAlpha:0,y:"100%"},{autoAlpha:1,delay:.2*e,duration:1.5,ease:"expo.out",y:"0%"})}),0)}animateOut(){n.default.set(this.element,{autoAlpha:0})}onResize(){this.elementsLines=(0,a.calculate)(this.elementLinesSpans)}}},"./app/animations/Title.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>o});var r=s("./app/classes/Animation.js"),n=s("./node_modules/gsap/index.js"),i=s("./node_modules/lodash/each.js"),a=s("./app/utils/text.js");class o extends r.default{constructor({element:t,elements:e}){super({element:t,elements:e}),(0,a.split)({element:this.element,append:!0}),(0,a.split)({element:this.element,append:!0}),this.elementLinesSpans=this.element.querySelectorAll("span span")}animateIn(){this.timelineIn=n.default.timeline({delay:.5}),this.timelineIn.set(this.element,{autoAlpha:1}),n.default.set(this.element,{autoAlpha:1}),i(this.elementsLines,((t,e)=>{n.default.fromTo(t,{y:"100%"},{delay:.2*e,duration:1.5,ease:"expo.out",y:"0%"})}),0)}animateOut(){n.default.set(this.element,{autoAlpha:0})}onResize(){this.elementsLines=(0,a.calculate)(this.elementLinesSpans)}}},"./app/classes/Animation.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var r=s("./app/classes/Component.js");class n extends r.default{constructor({element:t,elements:e}){super({element:t,elements:e}),this.createObserver(),this.animateOut()}createObserver(){this.observer=new IntersectionObserver((t=>{t.forEach((t=>{t.isIntersecting?this.animateIn():this.animateOut()}))})),this.observer.observe(this.element)}animateOut(){}animateIn(){}onResize(){}}},"./app/classes/AsyncLoad.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var r=s("./app/classes/Component.js");class n extends r.default{constructor({element:t}){super({element:t}),this.createObserver()}createObserver(){this.observer=new window.IntersectionObserver((t=>{t.forEach((t=>{t.isIntersecting&&(this.element.src||(this.element.src=this.element.getAttribute("data-src"),this.element.onload=t=>{this.element.classList.add("loaded")}))}))})),this.observer.observe(this.element)}}},"./app/classes/Button.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>i});var r=s("./node_modules/gsap/index.js"),n=s("./app/classes/Component.js");class i extends n.default{constructor({element:t}){super({element:t}),this.path=t.querySelector("path:last-child"),this.pathLength=this.path.getTotalLength(),this.timeline=r.default.timeline({paused:!0}),this.timeline.fromTo(this.path,{strokeDashoffset:this.pathLength,strokeDasharray:`${this.pathLength} ${this.pathLength}`},{strokeDashoffset:0,strokeDasharray:`${this.pathLength} ${this.pathLength}`})}onMouseEnter(){this.timeline.play()}onMouseLeave(){this.timeline.reverse()}addEventListeners(){this.onMouseEnterEvent=this.onMouseEnter.bind(this),this.onMouseLeaveEvent=this.onMouseLeave.bind(this),this.element.addEventListener("mouseenter",this.onMouseEnterEvent),this.element.addEventListener("mouseleave",this.onMouseLeaveEvent)}removerEventListener(){this.element.removeEventListener("mouseenter",this.onMouseEnterEvent),this.element.removeEventListener("mouseleave",this.onMouseLeaveEvent)}}},"./app/classes/Colors.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{ColorsManager:()=>n});var r=s("./node_modules/gsap/index.js");const n=new class{change({backgroundColor:t,color:e}){r.default.to(document.documentElement,{backgroundColor:t,color:e,duration:1.5})}}},"./app/classes/Component.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>i});var r=s("./node_modules/events/events.js"),n=s("./node_modules/lodash/each.js");class i extends r{constructor({element:t,elements:e}){super(),this.selector=t,this.selectorChildren={...e},this.create(),this.addEventListeners()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},n(this.selectorChildren,((t,e)=>{t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=document.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=document.querySelector(t)))}))}addEventListeners(){}removeEventListeners(){}}},"./app/classes/Page.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>p});var r=s("./node_modules/lodash/each.js"),n=s("./node_modules/lodash/map.js"),i=s("./node_modules/gsap/index.js"),a=s("./node_modules/prefix/index.js"),o=s("./app/animations/Title.js"),h=s("./app/animations/Paragraph.js"),l=s("./app/animations/Label.js"),u=s("./app/animations/Highlight.js"),d=s("./app/classes/AsyncLoad.js"),c=s("./app/classes/Colors.js");class p{constructor({element:t,elements:e,id:s}){this.selector=t,this.selectorChildren={...e,animationsTitles:'[data-animation="title"]',animationsParagraphs:'[data-animation="paragraph"]',animationsLabel:'[data-animation="label"]',animationsHighlights:'[data-animation="highlight"]',preloaders:"[data-src]"},this.id=s,this.transformPrefix=a("transform")}create(){this.element=document.querySelector(this.selector),this.elements={},this.scroll={current:0,target:0,last:0,limit:0},r(this.selectorChildren,((t,e)=>{t instanceof window.HTMLElement||t instanceof window.NodeList||Array.isArray(t)?this.elements[e]=t:(this.elements[e]=document.querySelectorAll(t),0===this.elements[e].length?this.elements[e]=null:1===this.elements[e].length&&(this.elements[e]=document.querySelector(t)))})),this.createAnimations(),this.createPreloader()}createAnimations(){this.animations=[],this.animationsTitles=n(this.elements.animationsTitles,(t=>new o.default({element:t}))),this.animations.push(...this.animationsTitles),this.animationsParagraphs=n(this.elements.animationsParagraphs,(t=>new h.default({element:t}))),this.animations.push(...this.animationsParagraphs),this.animationsLabel=n(this.elements.animationsLabel,(t=>new l.default({element:t}))),this.animations.push(...this.animationsLabel),this.animationsHighlights=n(this.elements.animationsHighlights,(t=>new u.default({element:t}))),this.animations.push(...this.animationsHighlights)}createPreloader(){this.preloaders=n(this.elements.preloaders,(t=>new d.default({element:t})))}show(){return new Promise((t=>{c.ColorsManager.change({backgroundColor:this.element.getAttribute("data-background"),color:this.element.getAttribute("data-color")}),this.animationIn=i.default.timeline(),i.default.fromTo(this.element,{autoAlpha:0},{autoAlpha:1}),this.animationIn.call((e=>{this.addEventListeners(),t()}))}))}hide(){return new Promise((t=>{this.destroy(),this.animationOut=i.default.timeline(),i.default.to(this.element,{autoAlpha:0,onComplete:t})}))}onResize(){this.elements.wrapper&&(this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight),r(this.animations,(t=>t.onResize()))}onWheel({pixelY:t}){this.scroll.target+=t}update(){this.scroll.target=i.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=i.default.utils.interpolate(this.scroll.current,this.scroll.target,.1),this.scroll.current<.01&&(this.scroll.current=0),this.elements.wrapper&&(this.elements.wrapper.style[this.transformPrefix]=`translateY(-${this.scroll.current}px)`)}addEventListeners(){}removeEventListeners(){}destroy(){this.removeEventListeners()}}},"./app/components/Canvas/Home/Media.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>l});var r=s("./node_modules/ogl/src/core/Texture.js"),n=s("./node_modules/ogl/src/core/Program.js"),i=s("./node_modules/ogl/src/core/Mesh.js"),a=s("./node_modules/gsap/index.js"),o=s("./app/shaders/plane-fragment.glsl"),h=s("./app/shaders/plane-vertex.glsl");const l=class{constructor({element:t,geometry:e,gl:s,index:r,scene:n,sizes:i}){this.element=t,this.geometry=e,this.gl=s,this.scene=n,this.index=r,this.sizes=i,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){this.texture=new r.Texture(this.gl),this.image=new window.Image,this.image.crossOrigin="anonymous",this.image.src=this.element.getAttribute("data-src"),this.image.onload=t=>this.texture.image=this.image}createProgram(){this.program=new n.Program(this.gl,{fragment:o.default,vertex:h.default,uniforms:{tMap:{value:this.texture}}})}createMesh(){this.mesh=new i.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.rotation.z=a.default.utils.random(.03*-Math.PI,.03*Math.PI)}createBounds({sizes:t}){this.sizes=t,this.bounds=this.element.getBoundingClientRect(),this.updateScale(t),this.updateX(),this.updateY()}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(t=0){this.x=(this.bounds.left+t)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(t=0){this.y=(this.bounds.top+t)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(t){this.bounds&&(this.updateX(t.x),this.updateY(t.y))}onResize(t,e){this.createBounds(t),this.extra={x:0,y:0},this.updateX(e?e.x:0),this.updateY(e?e.y:0)}}},"./app/components/Canvas/Home/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>h});var r=s("./app/components/Canvas/Home/Media.js"),n=s("./node_modules/lodash/map.js"),i=s("./node_modules/gsap/index.js"),a=s("./node_modules/ogl/src/core/Transform.js"),o=s("./node_modules/ogl/src/extras/Plane.js");const h=class{constructor({gl:t,scene:e,sizes:s}){this.group=new a.Transform,this.gl=t,this.sizes=s,this.galleryElement=document.querySelector(".home__gallery"),this.mediasElements=document.querySelectorAll(".home__gallery__media__image"),this.createGeometry(),this.createGallery(),this.group.setParent(e),this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0}}createGeometry(){this.geometry=new o.Plane(this.gl)}createGallery(){this.medias=n(this.mediasElements,((t,e)=>new r.default({element:t,geometry:this.geometry,index:e,gl:this.gl,scene:this.group,sizes:this.sizes})))}onResize(t){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=t.sizes,this.gallerySizes={height:this.galleryBounds.height/window.innerHeight*this.sizes.height,width:this.galleryBounds.width/window.innerWidth*this.sizes.width},this.scroll.x=this.x.target=0,this.scroll.y=this.y.target=0,this.scroll&&n(this.medias,(e=>e.onResize(t,this.scroll)))}onTouchDown({x:t,y:e}){this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onTouchMove({x:t,y:e}){const s=t.start-t.end,r=e.start-e.end;this.x.target=this.scrollCurrent.x-s,this.y.target=this.scrollCurrent.y-r}onTouchUp({x:t,y:e}){}onWheel({pixelX:t,pixelY:e}){this.x.target+=t,this.y.target+=e}update(){this.galleryBounds&&(this.x.current=i.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=i.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="right":this.scroll.x>this.x.current&&(this.x.direction="left"),this.scroll.y<this.y.current?this.y.direction="top":this.scroll.y>this.y.current&&(this.y.direction="bottom"),this.scroll.x=this.x.current,this.scroll.y=this.y.current,n(this.medias,((t,e)=>{const s=t.mesh.scale.x/2,r=t.mesh.scale.y/2;if("left"===this.x.direction){t.mesh.position.x+s<-this.sizes.width/2&&(t.extra.x+=this.gallerySizes.width,t.mesh.rotation.z=i.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("right"===this.x.direction){t.mesh.position.x-s>this.sizes.width/2&&(t.extra.x-=this.gallerySizes.width,t.mesh.rotation.z=i.default.utils.random(.03*-Math.PI,.03*Math.PI))}if("top"===this.y.direction){t.mesh.position.y-r<-this.sizes.width/2&&(t.extra.y+=this.gallerySizes.height,t.mesh.rotation.z=i.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("bottom"===this.y.direction){t.mesh.position.y+r>this.sizes.width/2&&(t.extra.y-=this.gallerySizes.height,t.mesh.rotation.z=i.default.utils.random(.03*-Math.PI,.03*Math.PI))}t.update(this.scroll)})))}}},"./app/components/Canvas/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>o});var r=s("./node_modules/ogl/src/core/Renderer.js"),n=s("./node_modules/ogl/src/core/Camera.js"),i=s("./node_modules/ogl/src/core/Transform.js"),a=s("./app/components/Canvas/Home/index.js");class o{constructor({template:t}){this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize(),this.createHome()}createRenderer(){this.renderer=new r.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new n.Camera(this.gl),this.camera.position.z=5}createHome(){this.home=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}createScene(){this.scene=new i.Transform}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const t=this.camera.fov*(Math.PI/180),e=2*Math.tan(t/2)*this.camera.position.z,s=e*this.camera.aspect;this.sizes={height:e,width:s},this.home&&this.home.onResize({sizes:this.sizes})}onTouchDown(t){this.isDown=!0,this.x.start=t.touches?t.touches[0].clientX:t.clientX,this.y.start=t.touches?t.touches[0].clientY:t.clientY,this.home&&this.home.onTouchDown({x:this.x,y:this.y})}onTouchMove(t){if(!this.isDown)return;const e=t.touches?t.touches[0].clientX:t.clientX,s=t.touches?t.touches[0].clientY:t.clientY;this.x.end=e,this.y.end=s,this.home&&this.home.onTouchMove({x:this.x,y:this.y})}onTouchUp(t){this.isDown=!1;const e=t.touches?t.touches[0].clientX:t.clientX,s=t.touches?t.touches[0].clientY:t.clientY;this.x.end=e,this.y.end=s,this.home&&this.home.onTouchUp({x:this.x,y:this.y})}onWheel(t){this.home&&this.home.onWheel(t)}update(){this.home&&this.home.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/components/Navigation.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>a});var r=s("./node_modules/gsap/index.js"),n=s("./app/classes/Component.js"),i=s("./app/utils/colors.js");class a extends n.default{constructor({template:t}){super({element:".navigation",elements:{items:".navigation__list__item",links:".navigation__list__link"}}),this.onChange(t)}onChange(t){"about"===t?(r.default.to(this.element,{autoAlpha:1,color:i.COLOR_BRIGHT_GRAY,duration:1.5}),r.default.to(this.elements.items[0],{autoAlpha:1,delay:.75,duration:.75}),r.default.to(this.elements.items[1],{autoAlpha:0,duration:.75})):(r.default.to(this.element,{autoAlpha:1,color:i.COLOR_QUARTER_SPANISH_WHITE,duration:1.5}),r.default.to(this.elements.items[0],{autoAlpha:0,duration:.75}),r.default.to(this.elements.items[1],{autoAlpha:1,delay:.75,duration:.75}))}}},"./app/components/Preloader.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>o});var r=s("./app/classes/Component.js"),n=s("./node_modules/lodash/each.js"),i=s("./node_modules/gsap/index.js"),a=s("./app/utils/text.js");class o extends r.default{constructor(){super({element:".preloader",elements:{title:".preloader__text",number:".preloader__number",numberText:".preloader__number__text",images:document.querySelectorAll("img")}}),(0,a.split)({element:this.elements.title,expression:"<br>"}),(0,a.split)({element:this.elements.title,expression:"<br>"}),this.elements.titleSpans=this.elements.title.querySelectorAll("span span"),this.length=0,this.createLoader()}createLoader(){n(this.elements.images,(t=>{t.onload=e=>this.onAssetLoaded(t),t.src=t.getAttribute("data-src")}))}onAssetLoaded(t){this.length+=1;const e=this.length/this.elements.images.length;this.elements.numberText.innerHTML=`${Math.round(100*e)}%`,1===e&&this.onLoaded()}onLoaded(){return new Promise((t=>{this.animateOut=i.default.timeline({delay:1.5}),this.animateOut.to(this.elements.titleSpans,{duration:1.5,ease:"expo.out",stagger:.1,y:"100%"}),this.animateOut.to(this.elements.numberText,{autoAlpha:0,duration:1.5,ease:"expo.out",stagger:.1,y:50},"-=1.4"),this.animateOut.to(this.element,{duration:1.5,ease:"expo.out",scaleY:0,transformOrigin:"100% 100%"},"-=1"),this.animateOut.call((t=>{this.emit("completed")}))}))}destroy(){this.element.parentNode.removeChild(this.element)}}},"./app/index.js":(t,e,s)=>{"use strict";s.r(e);var r=s("./app/pages/About/index.js"),n=s("./app/pages/Collections/index.js"),i=s("./app/pages/Detail/index.js"),a=s("./app/pages/Home/index.js"),o=s("./node_modules/normalize-wheel/index.js"),h=s("./node_modules/lodash/each.js"),l=s("./app/components/Canvas/index.js"),u=s("./app/components/Preloader.js"),d=s("./app/components/Navigation.js"),c=s("./node_modules/console-browserify/index.js");new class{constructor(){this.createContent(),this.createPreloader(),this.createNavigation(),this.createCanvas(),this.createPages(),this.addEventListeners(),this.addLinkListeners(),this.update()}createNavigation(){this.navigation=new d.default({template:this.template})}createPreloader(){this.preloader=new u.default,this.preloader.once("completed",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new l.default({templ})}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new r.default,collections:new n.default,detail:new i.default,home:new a.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.preloader.destroy(),this.onResize(),this.page.show()}onPopState(){this.onChange(window.location.pathname)}async onChange(t){await this.page.hide();const e=await window.fetch(t);if(200===e.status){const s=await e.text(),r=document.createElement("div");window.history.pushState({},"",t),r.innerHTML=s;const n=r.querySelector(".content");this.template=n.getAttribute("data-template"),this.navigation.onChange(this.template),this.content.setAttribute("data-template",this.template),this.content.innerHTML=n.innerHTML,this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.addLinkListeners()}else c.log("Error",error)}onResize(){this.page&&this.page.onResize&&this.page.onResize(),window.requestAnimationFrame((t=>{this.canvas&&this.canvas.onResize&&this.canvas.onResize()}))}onTouchDown(t){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(t)}onTouchMove(t){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(t)}onTouchUp(t){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(t)}onWheel(t){const e=o(t);this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(e),this.page&&this.page.onWheel&&this.page.onWheel(e)}update(){this.canvas&&this.canvas.update&&this.canvas.update(),this.page&&this.page.update&&this.page.update(),this.frame=window.requestAnimationFrame(this.update.bind(this))}addLinkListeners(){const t=document.querySelectorAll("a");h(t,(t=>{t.onclick=e=>{e.preventDefault();const{href:s}=t;this.onChange(s)}}))}addEventListeners(){window.addEventListener("popstate",this.onPopState.bind(this)),window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchstart",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}}},"./app/pages/About/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var r=s("./app/classes/Page.js");class n extends r.default{constructor(){super({id:"about",element:".about",elements:{wrapper:".about__wrapper",navigation:document.querySelector(".navigation"),title:".about__title"}})}}},"./app/pages/Collections/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>n});var r=s("./app/classes/Page.js");class n extends r.default{constructor(){super({id:"collections",element:".collections"})}}},"./app/pages/Detail/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>i});var r=s("./app/classes/Page.js"),n=s("./app/classes/Button.js");class i extends r.default{constructor(){super({id:"detail",element:".detail",elements:{button:".detail__button"}})}create(){super.create(),this.link=new n.default({element:this.elements.button})}destroy(){super.destroy(),this.link.removerEventListener()}}},"./app/pages/Home/index.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>i});var r=s("./app/classes/Button.js"),n=s("./app/classes/Page.js");class i extends n.default{constructor(){super({id:"home",element:".home",elements:{navigator:document.querySelector(".navigation"),link:".home__link"}})}create(){super.create(),this.link=new r.default({element:this.elements.link})}destroy(){super.destroy(),this.link.removeEventListeners()}}},"./app/utils/colors.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{COLOR_BRIGHT_GRAY:()=>n,COLOR_QUARTER_SPANISH_WHITE:()=>r});const r="#f9f1e7",n="#37384c"},"./app/utils/text.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{calculate:()=>i,split:()=>n});var r=s("./node_modules/lodash/each.js");function n({element:t,expression:e=" ",append:s=!0}){const n=function(t,e){const s=t.split("<br>");let n=[];return r(s,((t,s)=>{s>0&&n.push("<br>"),n=n.concat(t.split(e));let i=!1,a="";const o=[];r(n,(t=>{i||!t.includes("<a")&&!t.includes("<strong")||(a="",i=!0),i&&(a+=` ${t}`),i&&(t.includes("/a>")||t.includes("/strong>"))&&(o.push(a),a=""),i||""!==a||o.push(t),i&&(t.includes("/a>")||t.includes("/strong>"))&&(i=!1)})),n=o})),n}(t.innerHTML.toString().trim(),e);let i="";r(n,(t=>{if(t.indexOf("<br>")>-1){const e=t.split("<br>");r(e,((t,e)=>{i+=e>0?"<br>"+a(t):a(t)}))}else i+=a(t)})),t.innerHTML=i;const o=t.querySelectorAll("span");return s&&r(o,(t=>{const e=1===t.textContent.length,s=""!==t.innerHTML.trim(),r="&"!==t.textContent,n="-"!==t.textContent;e&&s&&r&&n&&(t.innerHTML=`${t.textContent}&nbsp;`)})),o}function i(t){if(!t.length)return;const e=[];let s=[],n=t[0].offsetTop;return r(t,((r,i)=>{r.offsetTop===n&&s.push(r),r.offsetTop!==n&&(e.push(s),s=[],s.push(r),n=r.offsetTop),i+1===t.length&&e.push(s)})),e}function a(t){return""===(t=t.trim())||" "===t?t:"<br>"===t?"<br>":`<span>${t}</span>`+(t.length>1?" ":"")}},"./node_modules/ogl/src/core/Camera.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Camera:()=>l});var r=s("./node_modules/ogl/src/core/Transform.js"),n=s("./node_modules/ogl/src/math/Mat4.js"),i=s("./node_modules/ogl/src/math/Vec3.js");const a=new n.Mat4,o=new i.Vec3,h=new i.Vec3;class l extends r.Transform{constructor(t,{near:e=.1,far:s=100,fov:r=45,aspect:a=1,left:o,right:h,bottom:l,top:u,zoom:d=1}={}){super(),Object.assign(this,{near:e,far:s,fov:r,aspect:a,left:o,right:h,bottom:l,top:u,zoom:d}),this.projectionMatrix=new n.Mat4,this.viewMatrix=new n.Mat4,this.projectionViewMatrix=new n.Mat4,this.worldPosition=new i.Vec3,this.type=o||h?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:t=this.near,far:e=this.far,fov:s=this.fov,aspect:r=this.aspect}={}){return Object.assign(this,{near:t,far:e,fov:s,aspect:r}),this.projectionMatrix.fromPerspective({fov:s*(Math.PI/180),aspect:r,near:t,far:e}),this.type="perspective",this}orthographic({near:t=this.near,far:e=this.far,left:s=this.left,right:r=this.right,bottom:n=this.bottom,top:i=this.top,zoom:a=this.zoom}={}){return Object.assign(this,{near:t,far:e,left:s,right:r,bottom:n,top:i,zoom:a}),s/=a,r/=a,n/=a,i/=a,this.projectionMatrix.fromOrthogonal({left:s,right:r,bottom:n,top:i,near:t,far:e}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(t){return super.lookAt(t,!0),this}project(t){return t.applyMatrix4(this.viewMatrix),t.applyMatrix4(this.projectionMatrix),this}unproject(t){return t.applyMatrix4(a.inverse(this.projectionMatrix)),t.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3]);const t=this.projectionViewMatrix;this.frustum[0].set(t[3]-t[0],t[7]-t[4],t[11]-t[8]).constant=t[15]-t[12],this.frustum[1].set(t[3]+t[0],t[7]+t[4],t[11]+t[8]).constant=t[15]+t[12],this.frustum[2].set(t[3]+t[1],t[7]+t[5],t[11]+t[9]).constant=t[15]+t[13],this.frustum[3].set(t[3]-t[1],t[7]-t[5],t[11]-t[9]).constant=t[15]-t[13],this.frustum[4].set(t[3]-t[2],t[7]-t[6],t[11]-t[10]).constant=t[15]-t[14],this.frustum[5].set(t[3]+t[2],t[7]+t[6],t[11]+t[10]).constant=t[15]+t[14];for(let t=0;t<6;t++){const e=1/this.frustum[t].distance();this.frustum[t].multiply(e),this.frustum[t].constant*=e}}frustumIntersectsMesh(t){if(!t.geometry.attributes.position)return!0;if(t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere(),!t.geometry.bounds)return!0;const e=o;e.copy(t.geometry.bounds.center),e.applyMatrix4(t.worldMatrix);const s=t.geometry.bounds.radius*t.worldMatrix.getMaxScaleOnAxis();return this.frustumIntersectsSphere(e,s)}frustumIntersectsSphere(t,e){const s=h;for(let r=0;r<6;r++){const n=this.frustum[r];if(s.copy(n).dot(t)+n.constant<-e)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Geometry:()=>l});var r=s("./node_modules/ogl/src/math/Vec3.js"),n=s("./node_modules/console-browserify/index.js");const i=new r.Vec3;let a=1,o=1,h=!1;class l{constructor(t,e={}){t.canvas||n.error("gl not passed as first argument to Geometry"),this.gl=t,this.attributes=e,this.id=a++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let t in e)this.addAttribute(t,e[t])}addAttribute(t,e){if(this.attributes[t]=e,e.id=o++,e.size=e.size||1,e.type=e.type||(e.data.constructor===Float32Array?this.gl.FLOAT:e.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),e.target="index"===t?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,e.normalized=e.normalized||!1,e.stride=e.stride||0,e.offset=e.offset||0,e.count=e.count||(e.stride?e.data.byteLength/e.stride:e.data.length/e.size),e.divisor=e.instanced||0,e.needsUpdate=!1,e.usage=e.usage||this.gl.STATIC_DRAW,e.buffer||this.updateAttribute(e),e.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==e.count*e.divisor)return n.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,e.count*e.divisor);this.instancedCount=e.count*e.divisor}else"index"===t?this.drawRange.count=e.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,e.count))}updateAttribute(t){const e=!t.buffer;e&&(t.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==t.buffer&&(this.gl.bindBuffer(t.target,t.buffer),this.glState.boundBuffer=t.buffer),e?this.gl.bufferData(t.target,t.data,t.usage):this.gl.bufferSubData(t.target,0,t.data),t.needsUpdate=!1}setIndex(t){this.addAttribute("index",t)}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}setInstancedCount(t){this.instancedCount=t}createVAO(t){this.VAOs[t.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.bindAttributes(t)}bindAttributes(t){t.attributeLocations.forEach(((t,{name:e,type:s})=>{if(!this.attributes[e])return void n.warn(`active attribute ${e} not being supplied`);const r=this.attributes[e];this.gl.bindBuffer(r.target,r.buffer),this.glState.boundBuffer=r.buffer;let i=1;35674===s&&(i=2),35675===s&&(i=3),35676===s&&(i=4);const a=r.size/i,o=1===i?0:i*i*i,h=1===i?0:i*i;for(let e=0;e<i;e++)this.gl.vertexAttribPointer(t+e,a,r.type,r.normalized,r.stride+o,r.offset+e*h),this.gl.enableVertexAttribArray(t+e),this.gl.renderer.vertexAttribDivisor(t+e,r.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:t,mode:e=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${t.attributeOrder}`&&(this.VAOs[t.attributeOrder]||this.createVAO(t),this.gl.renderer.bindVertexArray(this.VAOs[t.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${t.attributeOrder}`),t.attributeLocations.forEach(((t,{name:e})=>{const s=this.attributes[e];s.needsUpdate&&this.updateAttribute(s)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(e,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(e,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(e,this.drawRange.start,this.drawRange.count)}getPosition(){const t=this.attributes.position;return t.data?t:h?void 0:(n.warn("No position buffer data found to compute bounds"),h=!0)}computeBoundingBox(t){t||(t=this.getPosition());const e=t.data,s=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||(this.bounds={min:new r.Vec3,max:new r.Vec3,center:new r.Vec3,scale:new r.Vec3,radius:1/0});const n=this.bounds.min,i=this.bounds.max,a=this.bounds.center,o=this.bounds.scale;n.set(1/0),i.set(-1/0);for(let t=0,r=e.length;t<r;t+=s){const s=e[t],r=e[t+1],a=e[t+2];n.x=Math.min(s,n.x),n.y=Math.min(r,n.y),n.z=Math.min(a,n.z),i.x=Math.max(s,i.x),i.y=Math.max(r,i.y),i.z=Math.max(a,i.z)}o.sub(i,n),a.add(n,i).divide(2)}computeBoundingSphere(t){t||(t=this.getPosition());const e=t.data,s=t.stride?t.stride/e.BYTES_PER_ELEMENT:t.size;this.bounds||this.computeBoundingBox(t);let r=0;for(let t=0,n=e.length;t<n;t+=s)i.fromArray(e,t),r=Math.max(r,this.bounds.center.squaredDistance(i));this.bounds.radius=Math.sqrt(r)}remove(){for(let t in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[t]),delete this.VAOs[t];for(let t in this.attributes)this.gl.deleteBuffer(this.attributes[t].buffer),delete this.attributes[t]}}},"./node_modules/ogl/src/core/Mesh.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Mesh:()=>h});var r=s("./node_modules/ogl/src/core/Transform.js"),n=s("./node_modules/ogl/src/math/Mat3.js"),i=s("./node_modules/ogl/src/math/Mat4.js"),a=s("./node_modules/console-browserify/index.js");let o=0;class h extends r.Transform{constructor(t,{geometry:e,program:s,mode:r=t.TRIANGLES,frustumCulled:h=!0,renderOrder:l=0}={}){super(),t.canvas||a.error("gl not passed as first argument to Mesh"),this.gl=t,this.id=o++,this.geometry=e,this.program=s,this.mode=r,this.frustumCulled=h,this.renderOrder=l,this.modelViewMatrix=new i.Mat4,this.normalMatrix=new n.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(t){return this.beforeRenderCallbacks.push(t),this}onAfterRender(t){return this.afterRenderCallbacks.push(t),this}draw({camera:t}={}){this.beforeRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t}))),t&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=t.projectionMatrix,this.program.uniforms.cameraPosition.value=t.worldPosition,this.program.uniforms.viewMatrix.value=t.viewMatrix,this.modelViewMatrix.multiply(t.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let e=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:e}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((e=>e&&e({mesh:this,camera:t})))}}},"./node_modules/ogl/src/core/Program.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Program:()=>a});var r=s("./node_modules/console-browserify/index.js");let n=1;const i={};class a{constructor(t,{vertex:e,fragment:s,uniforms:i={},transparent:a=!1,cullFace:o=t.BACK,frontFace:l=t.CCW,depthTest:u=!0,depthWrite:d=!0,depthFunc:c=t.LESS}={}){t.canvas||r.error("gl not passed as fist argument to Program"),this.gl=t,this.uniforms=i,this.id=n++,e||r.warn("vertex shader not supplied"),s||r.warn("fragment shader not supplied"),this.transparent=a,this.cullFace=o,this.frontFace=l,this.depthTest=u,this.depthWrite=d,this.depthFunc=c,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const p=t.createShader(t.VERTEX_SHADER);t.shaderSource(p,e),t.compileShader(p),""!==t.getShaderInfoLog(p)&&r.warn(`${t.getShaderInfoLog(p)}\nVertex Shader\n${h(e)}`);const m=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(m,s),t.compileShader(m),""!==t.getShaderInfoLog(m)&&r.warn(`${t.getShaderInfoLog(m)}\nFragment Shader\n${h(s)}`),this.program=t.createProgram(),t.attachShader(this.program,p),t.attachShader(this.program,m),t.linkProgram(this.program),!t.getProgramParameter(this.program,t.LINK_STATUS))return r.warn(t.getProgramInfoLog(this.program));t.deleteShader(p),t.deleteShader(m),this.uniformLocations=new Map;let f=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let e=0;e<f;e++){let s=t.getActiveUniform(this.program,e);this.uniformLocations.set(s,t.getUniformLocation(this.program,s.name));const r=s.name.match(/(\w+)/g);s.uniformName=r[0],3===r.length?(s.isStructArray=!0,s.structIndex=Number(r[1]),s.structProperty=r[2]):2===r.length&&isNaN(Number(r[1]))&&(s.isStruct=!0,s.structProperty=r[1])}this.attributeLocations=new Map;const _=[],g=t.getProgramParameter(this.program,t.ACTIVE_ATTRIBUTES);for(let e=0;e<g;e++){const s=t.getActiveAttrib(this.program,e),r=t.getAttribLocation(this.program,s.name);-1!==r&&(_[r]=s.name,this.attributeLocations.set(s,r))}this.attributeOrder=_.join("")}setBlendFunc(t,e,s,r){this.blendFunc.src=t,this.blendFunc.dst=e,this.blendFunc.srcAlpha=s,this.blendFunc.dstAlpha=r,t&&(this.transparent=!0)}setBlendEquation(t,e){this.blendEquation.modeRGB=t,this.blendEquation.modeAlpha=e}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:t=!1}={}){let e=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((t,s)=>{let r=s.uniformName,n=this.uniforms[r];if(s.isStruct&&(n=n[s.structProperty],r+=`.${s.structProperty}`),s.isStructArray&&(n=n[s.structIndex][s.structProperty],r+=`[${s.structIndex}].${s.structProperty}`),!n)return u(`Active uniform ${r} has not been supplied`);if(n&&void 0===n.value)return u(`${r} uniform is missing a value parameter`);if(n.value.texture)return e+=1,n.value.update(e),o(this.gl,s.type,t,e);if(n.value.length&&n.value[0].texture){const r=[];return n.value.forEach((t=>{e+=1,t.update(e),r.push(e)})),o(this.gl,s.type,t,r)}o(this.gl,s.type,t,n.value)})),this.applyState(),t&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function o(t,e,s,r){r=r.length?function(t){const e=t.length,s=t[0].length;if(void 0===s)return t;const r=e*s;let n=i[r];n||(i[r]=n=new Float32Array(r));for(let r=0;r<e;r++)n.set(t[r],r*s);return n}(r):r;const n=t.renderer.state.uniformLocations.get(s);if(r.length)if(void 0===n||n.length!==r.length)t.renderer.state.uniformLocations.set(s,r.slice(0));else{if(function(t,e){if(t.length!==e.length)return!1;for(let s=0,r=t.length;s<r;s++)if(t[s]!==e[s])return!1;return!0}(n,r))return;n.set?n.set(r):function(t,e){for(let s=0,r=t.length;s<r;s++)t[s]=e[s]}(n,r),t.renderer.state.uniformLocations.set(s,n)}else{if(n===r)return;t.renderer.state.uniformLocations.set(s,r)}switch(e){case 5126:return r.length?t.uniform1fv(s,r):t.uniform1f(s,r);case 35664:return t.uniform2fv(s,r);case 35665:return t.uniform3fv(s,r);case 35666:return t.uniform4fv(s,r);case 35670:case 5124:case 35678:case 35680:return r.length?t.uniform1iv(s,r):t.uniform1i(s,r);case 35671:case 35667:return t.uniform2iv(s,r);case 35672:case 35668:return t.uniform3iv(s,r);case 35673:case 35669:return t.uniform4iv(s,r);case 35674:return t.uniformMatrix2fv(s,!1,r);case 35675:return t.uniformMatrix3fv(s,!1,r);case 35676:return t.uniformMatrix4fv(s,!1,r)}}function h(t){let e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}let l=0;function u(t){l>100||(r.warn(t),l++,l>100&&r.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Renderer:()=>o});var r=s("./node_modules/ogl/src/math/Vec3.js"),n=s("./node_modules/console-browserify/index.js");const i=new r.Vec3;let a=1;class o{constructor({canvas:t=document.createElement("canvas"),width:e=300,height:s=150,dpr:r=1,alpha:i=!1,depth:o=!0,stencil:h=!1,antialias:l=!1,premultipliedAlpha:u=!1,preserveDrawingBuffer:d=!1,powerPreference:c="default",autoClear:p=!0,webgl:m=2}={}){const f={alpha:i,depth:o,stencil:h,antialias:l,premultipliedAlpha:u,preserveDrawingBuffer:d,powerPreference:c};this.dpr=r,this.alpha=i,this.color=!0,this.depth=o,this.stencil=h,this.premultipliedAlpha=u,this.autoClear=p,this.id=a++,2===m&&(this.gl=t.getContext("webgl2",f)),this.isWebgl2=!!this.gl,this.gl||(this.gl=t.getContext("webgl",f)),this.gl||n.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(e,s),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(t,e){this.width=t,this.height=e,this.gl.canvas.width=t*this.dpr,this.gl.canvas.height=e*this.dpr,Object.assign(this.gl.canvas.style,{width:t+"px",height:e+"px"})}setViewport(t,e,s=0,r=0){this.state.viewport.width===t&&this.state.viewport.height===e||(this.state.viewport.width=t,this.state.viewport.height=e,this.state.viewport.x=s,this.state.viewport.y=r,this.gl.viewport(s,r,t,e))}setScissor(t,e,s=0,r=0){this.gl.scissor(s,r,t,e)}enable(t){!0!==this.state[t]&&(this.gl.enable(t),this.state[t]=!0)}disable(t){!1!==this.state[t]&&(this.gl.disable(t),this.state[t]=!1)}setBlendFunc(t,e,s,r){this.state.blendFunc.src===t&&this.state.blendFunc.dst===e&&this.state.blendFunc.srcAlpha===s&&this.state.blendFunc.dstAlpha===r||(this.state.blendFunc.src=t,this.state.blendFunc.dst=e,this.state.blendFunc.srcAlpha=s,this.state.blendFunc.dstAlpha=r,void 0!==s?this.gl.blendFuncSeparate(t,e,s,r):this.gl.blendFunc(t,e))}setBlendEquation(t,e){t=t||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===t&&this.state.blendEquation.modeAlpha===e||(this.state.blendEquation.modeRGB=t,this.state.blendEquation.modeAlpha=e,void 0!==e?this.gl.blendEquationSeparate(t,e):this.gl.blendEquation(t))}setCullFace(t){this.state.cullFace!==t&&(this.state.cullFace=t,this.gl.cullFace(t))}setFrontFace(t){this.state.frontFace!==t&&(this.state.frontFace=t,this.gl.frontFace(t))}setDepthMask(t){this.state.depthMask!==t&&(this.state.depthMask=t,this.gl.depthMask(t))}setDepthFunc(t){this.state.depthFunc!==t&&(this.state.depthFunc=t,this.gl.depthFunc(t))}activeTexture(t){this.state.activeTextureUnit!==t&&(this.state.activeTextureUnit=t,this.gl.activeTexture(this.gl.TEXTURE0+t))}bindFramebuffer({target:t=this.gl.FRAMEBUFFER,buffer:e=null}={}){this.state.framebuffer!==e&&(this.state.framebuffer=e,this.gl.bindFramebuffer(t,e))}getExtension(t,e,s){return e&&this.gl[e]?this.gl[e].bind(this.gl):(this.extensions[t]||(this.extensions[t]=this.gl.getExtension(t)),e?this.extensions[t]?this.extensions[t][s].bind(this.extensions[t]):null:this.extensions[t])}sortOpaque(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:t.zDepth!==e.zDepth?t.zDepth-e.zDepth:e.id-t.id}sortTransparent(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.zDepth!==e.zDepth?e.zDepth-t.zDepth:e.id-t.id}sortUI(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:e.id-t.id}getRenderList({scene:t,camera:e,frustumCull:s,sort:r}){let n=[];if(e&&s&&e.updateFrustum(),t.traverse((t=>{if(!t.visible)return!0;t.draw&&(s&&t.frustumCulled&&e&&!e.frustumIntersectsMesh(t)||n.push(t))})),r){const t=[],s=[],r=[];n.forEach((n=>{n.program.transparent?n.program.depthTest?s.push(n):r.push(n):t.push(n),n.zDepth=0,0===n.renderOrder&&n.program.depthTest&&e&&(n.worldMatrix.getTranslation(i),i.applyMatrix4(e.projectionViewMatrix),n.zDepth=i.z)})),t.sort(this.sortOpaque),s.sort(this.sortTransparent),r.sort(this.sortUI),n=t.concat(s,r)}return n}render({scene:t,camera:e,target:s=null,update:r=!0,sort:n=!0,frustumCull:i=!0,clear:a}){null===s?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(s),this.setViewport(s.width,s.height)),(a||this.autoClear&&!1!==a)&&(!this.depth||s&&!s.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),r&&t.updateMatrixWorld(),e&&e.updateMatrixWorld();this.getRenderList({scene:t,camera:e,frustumCull:i,sort:n}).forEach((t=>{t.draw({camera:e})}))}}},"./node_modules/ogl/src/core/Texture.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Texture:()=>a});const r=new Uint8Array(4);function n(t){return 0==(t&t-1)}let i=1;class a{constructor(t,{image:e,target:s=t.TEXTURE_2D,type:r=t.UNSIGNED_BYTE,format:n=t.RGBA,internalFormat:a=n,wrapS:o=t.CLAMP_TO_EDGE,wrapT:h=t.CLAMP_TO_EDGE,generateMipmaps:l=!0,minFilter:u=(l?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:d=t.LINEAR,premultiplyAlpha:c=!1,unpackAlignment:p=4,flipY:m=s==t.TEXTURE_2D,anisotropy:f=0,level:_=0,width:g,height:v=g}={}){this.gl=t,this.id=i++,this.image=e,this.target=s,this.type=r,this.format=n,this.internalFormat=a,this.minFilter=u,this.magFilter=d,this.wrapS=o,this.wrapT=h,this.generateMipmaps=l,this.premultiplyAlpha=c,this.unpackAlignment=p,this.flipY=m,this.anisotropy=Math.min(f,this.gl.renderer.parameters.maxAnisotropy),this.level=_,this.width=g,this.height=v,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||n(this.image.width)&&n(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,r);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,r);this.store.image=this.image}}}},"./node_modules/ogl/src/core/Transform.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Transform:()=>o});var r=s("./node_modules/ogl/src/math/Vec3.js"),n=s("./node_modules/ogl/src/math/Quat.js"),i=s("./node_modules/ogl/src/math/Mat4.js"),a=s("./node_modules/ogl/src/math/Euler.js");class o{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new i.Mat4,this.worldMatrix=new i.Mat4,this.matrixAutoUpdate=!0,this.position=new r.Vec3,this.quaternion=new n.Quat,this.scale=new r.Vec3(1),this.rotation=new a.Euler,this.up=new r.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(t,e=!0){this.parent&&t!==this.parent&&this.parent.removeChild(this,!1),this.parent=t,e&&t&&t.addChild(this,!1)}addChild(t,e=!0){~this.children.indexOf(t)||this.children.push(t),e&&t.setParent(this,!1)}removeChild(t,e=!0){~this.children.indexOf(t)&&this.children.splice(this.children.indexOf(t),1),e&&t.setParent(null,!1)}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||t)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,t=!0);for(let e=0,s=this.children.length;e<s;e++)this.children[e].updateMatrixWorld(t)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(t){if(!t(this))for(let e=0,s=this.children.length;e<s;e++)this.children[e].traverse(t)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(t,e=!1){e?this.matrix.lookAt(this.position,t,this.up):this.matrix.lookAt(t,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Plane:()=>n});var r=s("./node_modules/ogl/src/core/Geometry.js");class n extends r.Geometry{constructor(t,{width:e=1,height:s=1,widthSegments:r=1,heightSegments:i=1,attributes:a={}}={}){const o=r,h=i,l=(o+1)*(h+1),u=o*h*6,d=new Float32Array(3*l),c=new Float32Array(3*l),p=new Float32Array(2*l),m=u>65536?new Uint32Array(u):new Uint16Array(u);n.buildPlane(d,c,p,m,e,s,0,o,h),Object.assign(a,{position:{size:3,data:d},normal:{size:3,data:c},uv:{size:2,data:p},index:{data:m}}),super(t,a)}static buildPlane(t,e,s,r,n,i,a,o,h,l=0,u=1,d=2,c=1,p=-1,m=0,f=0){const _=m,g=n/o,v=i/h;for(let y=0;y<=h;y++){let x=y*v-i/2;for(let i=0;i<=o;i++,m++){let v=i*g-n/2;if(t[3*m+l]=v*c,t[3*m+u]=x*p,t[3*m+d]=a/2,e[3*m+l]=0,e[3*m+u]=0,e[3*m+d]=a>=0?1:-1,s[2*m]=i/o,s[2*m+1]=1-y/h,y===h||i===o)continue;let b=_+i+y*(o+1),w=_+i+(y+1)*(o+1),j=_+i+(y+1)*(o+1)+1,M=_+i+y*(o+1)+1;r[6*f]=b,r[6*f+1]=w,r[6*f+2]=M,r[6*f+3]=w,r[6*f+4]=j,r[6*f+5]=M,f++}}}}},"./node_modules/ogl/src/math/Euler.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Euler:()=>i});var r=s("./node_modules/ogl/src/math/functions/EulerFunc.js");const n=new(s("./node_modules/ogl/src/math/Mat4.js").Mat4);class i extends Array{constructor(t=0,e=t,s=t,r="YXZ"){return super(t,e,s),this.order=r,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set(t,e=t,s=t){return t.length?this.copy(t):(this[0]=t,this[1]=e,this[2]=s,this.onChange(),this)}copy(t){return this[0]=t[0],this[1]=t[1],this[2]=t[2],this.onChange(),this}reorder(t){return this.order=t,this.onChange(),this}fromRotationMatrix(t,e=this.order){return r.fromRotationMatrix(this,t,e),this}fromQuaternion(t,e=this.order){return n.fromQuaternion(t),this.fromRotationMatrix(n,e)}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}}},"./node_modules/ogl/src/math/Mat3.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Mat3:()=>n});var r=s("./node_modules/ogl/src/math/functions/Mat3Func.js");class n extends Array{constructor(t=1,e=0,s=0,r=0,n=1,i=0,a=0,o=0,h=1){return super(t,e,s,r,n,i,a,o,h),this}set(t,e,s,n,i,a,o,h,l){return t.length?this.copy(t):(r.set(this,t,e,s,n,i,a,o,h,l),this)}translate(t,e=this){return r.translate(this,e,t),this}rotate(t,e=this){return r.rotate(this,e,t),this}scale(t,e=this){return r.scale(this,e,t),this}multiply(t,e){return e?r.multiply(this,t,e):r.multiply(this,this,t),this}identity(){return r.identity(this),this}copy(t){return r.copy(this,t),this}fromMatrix4(t){return r.fromMat4(this,t),this}fromQuaternion(t){return r.fromQuat(this,t),this}fromBasis(t,e,s){return this.set(t[0],t[1],t[2],e[0],e[1],e[2],s[0],s[1],s[2]),this}inverse(t=this){return r.invert(this,t),this}getNormalMatrix(t){return r.normalFromMat4(this,t),this}}},"./node_modules/ogl/src/math/Mat4.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Mat4:()=>n});var r=s("./node_modules/ogl/src/math/functions/Mat4Func.js");class n extends Array{constructor(t=1,e=0,s=0,r=0,n=0,i=1,a=0,o=0,h=0,l=0,u=1,d=0,c=0,p=0,m=0,f=1){return super(t,e,s,r,n,i,a,o,h,l,u,d,c,p,m,f),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(t){this[12]=t}set y(t){this[13]=t}set z(t){this[14]=t}set w(t){this[15]=t}set(t,e,s,n,i,a,o,h,l,u,d,c,p,m,f,_){return t.length?this.copy(t):(r.set(this,t,e,s,n,i,a,o,h,l,u,d,c,p,m,f,_),this)}translate(t,e=this){return r.translate(this,e,t),this}rotate(t,e,s=this){return r.rotate(this,s,t,e),this}scale(t,e=this){return r.scale(this,e,"number"==typeof t?[t,t,t]:t),this}multiply(t,e){return e?r.multiply(this,t,e):r.multiply(this,this,t),this}identity(){return r.identity(this),this}copy(t){return r.copy(this,t),this}fromPerspective({fov:t,aspect:e,near:s,far:n}={}){return r.perspective(this,t,e,s,n),this}fromOrthogonal({left:t,right:e,bottom:s,top:n,near:i,far:a}){return r.ortho(this,t,e,s,n,i,a),this}fromQuaternion(t){return r.fromQuat(this,t),this}setPosition(t){return this.x=t[0],this.y=t[1],this.z=t[2],this}inverse(t=this){return r.invert(this,t),this}compose(t,e,s){return r.fromRotationTranslationScale(this,t,e,s),this}getRotation(t){return r.getRotation(t,this),this}getTranslation(t){return r.getTranslation(t,this),this}getScaling(t){return r.getScaling(t,this),this}getMaxScaleOnAxis(){return r.getMaxScaleOnAxis(this)}lookAt(t,e,s){return r.targetTo(this,t,e,s),this}determinant(){return r.determinant(this)}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this[4]=t[e+4],this[5]=t[e+5],this[6]=t[e+6],this[7]=t[e+7],this[8]=t[e+8],this[9]=t[e+9],this[10]=t[e+10],this[11]=t[e+11],this[12]=t[e+12],this[13]=t[e+13],this[14]=t[e+14],this[15]=t[e+15],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t[e+4]=this[4],t[e+5]=this[5],t[e+6]=this[6],t[e+7]=this[7],t[e+8]=this[8],t[e+9]=this[9],t[e+10]=this[10],t[e+11]=this[11],t[e+12]=this[12],t[e+13]=this[13],t[e+14]=this[14],t[e+15]=this[15],t}}},"./node_modules/ogl/src/math/Quat.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Quat:()=>n});var r=s("./node_modules/ogl/src/math/functions/QuatFunc.js");class n extends Array{constructor(t=0,e=0,s=0,r=1){return super(t,e,s,r),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set w(t){this[3]=t,this.onChange()}identity(){return r.identity(this),this.onChange(),this}set(t,e,s,n){return t.length?this.copy(t):(r.set(this,t,e,s,n),this.onChange(),this)}rotateX(t){return r.rotateX(this,this,t),this.onChange(),this}rotateY(t){return r.rotateY(this,this,t),this.onChange(),this}rotateZ(t){return r.rotateZ(this,this,t),this.onChange(),this}inverse(t=this){return r.invert(this,t),this.onChange(),this}conjugate(t=this){return r.conjugate(this,t),this.onChange(),this}copy(t){return r.copy(this,t),this.onChange(),this}normalize(t=this){return r.normalize(this,t),this.onChange(),this}multiply(t,e){return e?r.multiply(this,t,e):r.multiply(this,this,t),this.onChange(),this}dot(t){return r.dot(this,t)}fromMatrix3(t){return r.fromMat3(this,t),this.onChange(),this}fromEuler(t){return r.fromEuler(this,t,t.order),this}fromAxisAngle(t,e){return r.setAxisAngle(this,t,e),this}slerp(t,e){return r.slerp(this,this,t,e),this}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}},"./node_modules/ogl/src/math/Vec3.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{Vec3:()=>n});var r=s("./node_modules/ogl/src/math/functions/Vec3Func.js");class n extends Array{constructor(t=0,e=t,s=t){return super(t,e,s),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,e=t,s=t){return t.length?this.copy(t):(r.set(this,t,e,s),this)}copy(t){return r.copy(this,t),this}add(t,e){return e?r.add(this,t,e):r.add(this,this,t),this}sub(t,e){return e?r.subtract(this,t,e):r.subtract(this,this,t),this}multiply(t){return t.length?r.multiply(this,this,t):r.scale(this,this,t),this}divide(t){return t.length?r.divide(this,this,t):r.scale(this,this,1/t),this}inverse(t=this){return r.inverse(this,t),this}len(){return r.length(this)}distance(t){return t?r.distance(this,t):r.length(this)}squaredLen(){return r.squaredLength(this)}squaredDistance(t){return t?r.squaredDistance(this,t):r.squaredLength(this)}negate(t=this){return r.negate(this,t),this}cross(t,e){return e?r.cross(this,t,e):r.cross(this,this,t),this}scale(t){return r.scale(this,this,t),this}normalize(){return r.normalize(this,this),this}dot(t){return r.dot(this,t)}equals(t){return r.exactEquals(this,t)}applyMatrix3(t){return r.transformMat3(this,this,t),this}applyMatrix4(t){return r.transformMat4(this,this,t),this}scaleRotateMatrix4(t){return r.scaleRotateMat4(this,this,t),this}applyQuaternion(t){return r.transformQuat(this,this,t),this}angle(t){return r.angle(this,t)}lerp(t,e){return r.lerp(this,this,t,e),this}clone(){return new n(this[0],this[1],this[2])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}transformDirection(t){const e=this[0],s=this[1],r=this[2];return this[0]=t[0]*e+t[4]*s+t[8]*r,this[1]=t[1]*e+t[5]*s+t[9]*r,this[2]=t[2]*e+t[6]*s+t[10]*r,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(t,e,s)=>{"use strict";function r(t,e,s="YXZ"){return"XYZ"===s?(t[1]=Math.asin(Math.min(Math.max(e[8],-1),1)),Math.abs(e[8])<.99999?(t[0]=Math.atan2(-e[9],e[10]),t[2]=Math.atan2(-e[4],e[0])):(t[0]=Math.atan2(e[6],e[5]),t[2]=0)):"YXZ"===s?(t[0]=Math.asin(-Math.min(Math.max(e[9],-1),1)),Math.abs(e[9])<.99999?(t[1]=Math.atan2(e[8],e[10]),t[2]=Math.atan2(e[1],e[5])):(t[1]=Math.atan2(-e[2],e[0]),t[2]=0)):"ZXY"===s?(t[0]=Math.asin(Math.min(Math.max(e[6],-1),1)),Math.abs(e[6])<.99999?(t[1]=Math.atan2(-e[2],e[10]),t[2]=Math.atan2(-e[4],e[5])):(t[1]=0,t[2]=Math.atan2(e[1],e[0]))):"ZYX"===s?(t[1]=Math.asin(-Math.min(Math.max(e[2],-1),1)),Math.abs(e[2])<.99999?(t[0]=Math.atan2(e[6],e[10]),t[2]=Math.atan2(e[1],e[0])):(t[0]=0,t[2]=Math.atan2(-e[4],e[5]))):"YZX"===s?(t[2]=Math.asin(Math.min(Math.max(e[1],-1),1)),Math.abs(e[1])<.99999?(t[0]=Math.atan2(-e[9],e[5]),t[1]=Math.atan2(-e[2],e[0])):(t[0]=0,t[1]=Math.atan2(e[8],e[10]))):"XZY"===s&&(t[2]=Math.asin(-Math.min(Math.max(e[4],-1),1)),Math.abs(e[4])<.99999?(t[0]=Math.atan2(e[6],e[5]),t[1]=Math.atan2(e[8],e[0])):(t[0]=Math.atan2(-e[9],e[10]),t[1]=0)),t}s.r(e),s.d(e,{fromRotationMatrix:()=>r})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{add:()=>g,copy:()=>i,determinant:()=>u,fromMat4:()=>r,fromQuat:()=>n,identity:()=>o,invert:()=>l,multiply:()=>d,multiplyScalar:()=>y,normalFromMat4:()=>f,projection:()=>_,rotate:()=>p,scale:()=>m,set:()=>a,subtract:()=>v,translate:()=>c,transpose:()=>h});function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function n(t,e){let s=e[0],r=e[1],n=e[2],i=e[3],a=s+s,o=r+r,h=n+n,l=s*a,u=r*a,d=r*o,c=n*a,p=n*o,m=n*h,f=i*a,_=i*o,g=i*h;return t[0]=1-d-m,t[3]=u-g,t[6]=c+_,t[1]=u+g,t[4]=1-l-m,t[7]=p-f,t[2]=c-_,t[5]=p+f,t[8]=1-l-d,t}function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function a(t,e,s,r,n,i,a,o,h,l){return t[0]=e,t[1]=s,t[2]=r,t[3]=n,t[4]=i,t[5]=a,t[6]=o,t[7]=h,t[8]=l,t}function o(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function h(t,e){if(t===e){let s=e[1],r=e[2],n=e[5];t[1]=e[3],t[2]=e[6],t[3]=s,t[5]=e[7],t[6]=r,t[7]=n}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function l(t,e){let s=e[0],r=e[1],n=e[2],i=e[3],a=e[4],o=e[5],h=e[6],l=e[7],u=e[8],d=u*a-o*l,c=-u*i+o*h,p=l*i-a*h,m=s*d+r*c+n*p;return m?(m=1/m,t[0]=d*m,t[1]=(-u*r+n*l)*m,t[2]=(o*r-n*a)*m,t[3]=c*m,t[4]=(u*s-n*h)*m,t[5]=(-o*s+n*i)*m,t[6]=p*m,t[7]=(-l*s+r*h)*m,t[8]=(a*s-r*i)*m,t):null}function u(t){let e=t[0],s=t[1],r=t[2],n=t[3],i=t[4],a=t[5],o=t[6],h=t[7],l=t[8];return e*(l*i-a*h)+s*(-l*n+a*o)+r*(h*n-i*o)}function d(t,e,s){let r=e[0],n=e[1],i=e[2],a=e[3],o=e[4],h=e[5],l=e[6],u=e[7],d=e[8],c=s[0],p=s[1],m=s[2],f=s[3],_=s[4],g=s[5],v=s[6],y=s[7],x=s[8];return t[0]=c*r+p*a+m*l,t[1]=c*n+p*o+m*u,t[2]=c*i+p*h+m*d,t[3]=f*r+_*a+g*l,t[4]=f*n+_*o+g*u,t[5]=f*i+_*h+g*d,t[6]=v*r+y*a+x*l,t[7]=v*n+y*o+x*u,t[8]=v*i+y*h+x*d,t}function c(t,e,s){let r=e[0],n=e[1],i=e[2],a=e[3],o=e[4],h=e[5],l=e[6],u=e[7],d=e[8],c=s[0],p=s[1];return t[0]=r,t[1]=n,t[2]=i,t[3]=a,t[4]=o,t[5]=h,t[6]=c*r+p*a+l,t[7]=c*n+p*o+u,t[8]=c*i+p*h+d,t}function p(t,e,s){let r=e[0],n=e[1],i=e[2],a=e[3],o=e[4],h=e[5],l=e[6],u=e[7],d=e[8],c=Math.sin(s),p=Math.cos(s);return t[0]=p*r+c*a,t[1]=p*n+c*o,t[2]=p*i+c*h,t[3]=p*a-c*r,t[4]=p*o-c*n,t[5]=p*h-c*i,t[6]=l,t[7]=u,t[8]=d,t}function m(t,e,s){let r=s[0],n=s[1];return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=n*e[3],t[4]=n*e[4],t[5]=n*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function f(t,e){let s=e[0],r=e[1],n=e[2],i=e[3],a=e[4],o=e[5],h=e[6],l=e[7],u=e[8],d=e[9],c=e[10],p=e[11],m=e[12],f=e[13],_=e[14],g=e[15],v=s*o-r*a,y=s*h-n*a,x=s*l-i*a,b=r*h-n*o,w=r*l-i*o,j=n*l-i*h,M=u*f-d*m,T=u*_-c*m,A=u*g-p*m,E=d*_-c*f,S=d*g-p*f,C=c*g-p*_,O=v*C-y*S+x*E+b*A-w*T+j*M;return O?(O=1/O,t[0]=(o*C-h*S+l*E)*O,t[1]=(h*A-a*C-l*T)*O,t[2]=(a*S-o*A+l*M)*O,t[3]=(n*S-r*C-i*E)*O,t[4]=(s*C-n*A+i*T)*O,t[5]=(r*A-s*S-i*M)*O,t[6]=(f*j-_*w+g*b)*O,t[7]=(_*x-m*j-g*y)*O,t[8]=(m*w-f*x+g*v)*O,t):null}function _(t,e,s){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/s,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function g(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t[4]=e[4]+s[4],t[5]=e[5]+s[5],t[6]=e[6]+s[6],t[7]=e[7]+s[7],t[8]=e[8]+s[8],t}function v(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t[3]=e[3]-s[3],t[4]=e[4]-s[4],t[5]=e[5]-s[5],t[6]=e[6]-s[6],t[7]=e[7]-s[7],t[8]=e[8]-s[8],t}function y(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*s,t}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{add:()=>w,copy:()=>r,determinant:()=>h,fromQuat:()=>v,fromRotationTranslationScale:()=>g,getMaxScaleOnAxis:()=>f,getRotation:()=>_,getScaling:()=>m,getTranslation:()=>p,identity:()=>i,invert:()=>o,multiply:()=>l,multiplyScalar:()=>M,ortho:()=>x,perspective:()=>y,rotate:()=>c,scale:()=>d,set:()=>n,subtract:()=>j,targetTo:()=>b,translate:()=>u,transpose:()=>a});function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function n(t,e,s,r,n,i,a,o,h,l,u,d,c,p,m,f,_){return t[0]=e,t[1]=s,t[2]=r,t[3]=n,t[4]=i,t[5]=a,t[6]=o,t[7]=h,t[8]=l,t[9]=u,t[10]=d,t[11]=c,t[12]=p,t[13]=m,t[14]=f,t[15]=_,t}function i(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function a(t,e){if(t===e){let s=e[1],r=e[2],n=e[3],i=e[6],a=e[7],o=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=s,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=i,t[11]=e[14],t[12]=n,t[13]=a,t[14]=o}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function o(t,e){let s=e[0],r=e[1],n=e[2],i=e[3],a=e[4],o=e[5],h=e[6],l=e[7],u=e[8],d=e[9],c=e[10],p=e[11],m=e[12],f=e[13],_=e[14],g=e[15],v=s*o-r*a,y=s*h-n*a,x=s*l-i*a,b=r*h-n*o,w=r*l-i*o,j=n*l-i*h,M=u*f-d*m,T=u*_-c*m,A=u*g-p*m,E=d*_-c*f,S=d*g-p*f,C=c*g-p*_,O=v*C-y*S+x*E+b*A-w*T+j*M;return O?(O=1/O,t[0]=(o*C-h*S+l*E)*O,t[1]=(n*S-r*C-i*E)*O,t[2]=(f*j-_*w+g*b)*O,t[3]=(c*w-d*j-p*b)*O,t[4]=(h*A-a*C-l*T)*O,t[5]=(s*C-n*A+i*T)*O,t[6]=(_*x-m*j-g*y)*O,t[7]=(u*j-c*x+p*y)*O,t[8]=(a*S-o*A+l*M)*O,t[9]=(r*A-s*S-i*M)*O,t[10]=(m*w-f*x+g*v)*O,t[11]=(d*x-u*w-p*v)*O,t[12]=(o*T-a*E-h*M)*O,t[13]=(s*E-r*T+n*M)*O,t[14]=(f*y-m*b-_*v)*O,t[15]=(u*b-d*y+c*v)*O,t):null}function h(t){let e=t[0],s=t[1],r=t[2],n=t[3],i=t[4],a=t[5],o=t[6],h=t[7],l=t[8],u=t[9],d=t[10],c=t[11],p=t[12],m=t[13],f=t[14],_=t[15];return(e*a-s*i)*(d*_-c*f)-(e*o-r*i)*(u*_-c*m)+(e*h-n*i)*(u*f-d*m)+(s*o-r*a)*(l*_-c*p)-(s*h-n*a)*(l*f-d*p)+(r*h-n*o)*(l*m-u*p)}function l(t,e,s){let r=e[0],n=e[1],i=e[2],a=e[3],o=e[4],h=e[5],l=e[6],u=e[7],d=e[8],c=e[9],p=e[10],m=e[11],f=e[12],_=e[13],g=e[14],v=e[15],y=s[0],x=s[1],b=s[2],w=s[3];return t[0]=y*r+x*o+b*d+w*f,t[1]=y*n+x*h+b*c+w*_,t[2]=y*i+x*l+b*p+w*g,t[3]=y*a+x*u+b*m+w*v,y=s[4],x=s[5],b=s[6],w=s[7],t[4]=y*r+x*o+b*d+w*f,t[5]=y*n+x*h+b*c+w*_,t[6]=y*i+x*l+b*p+w*g,t[7]=y*a+x*u+b*m+w*v,y=s[8],x=s[9],b=s[10],w=s[11],t[8]=y*r+x*o+b*d+w*f,t[9]=y*n+x*h+b*c+w*_,t[10]=y*i+x*l+b*p+w*g,t[11]=y*a+x*u+b*m+w*v,y=s[12],x=s[13],b=s[14],w=s[15],t[12]=y*r+x*o+b*d+w*f,t[13]=y*n+x*h+b*c+w*_,t[14]=y*i+x*l+b*p+w*g,t[15]=y*a+x*u+b*m+w*v,t}function u(t,e,s){let r,n,i,a,o,h,l,u,d,c,p,m,f=s[0],_=s[1],g=s[2];return e===t?(t[12]=e[0]*f+e[4]*_+e[8]*g+e[12],t[13]=e[1]*f+e[5]*_+e[9]*g+e[13],t[14]=e[2]*f+e[6]*_+e[10]*g+e[14],t[15]=e[3]*f+e[7]*_+e[11]*g+e[15]):(r=e[0],n=e[1],i=e[2],a=e[3],o=e[4],h=e[5],l=e[6],u=e[7],d=e[8],c=e[9],p=e[10],m=e[11],t[0]=r,t[1]=n,t[2]=i,t[3]=a,t[4]=o,t[5]=h,t[6]=l,t[7]=u,t[8]=d,t[9]=c,t[10]=p,t[11]=m,t[12]=r*f+o*_+d*g+e[12],t[13]=n*f+h*_+c*g+e[13],t[14]=i*f+l*_+p*g+e[14],t[15]=a*f+u*_+m*g+e[15]),t}function d(t,e,s){let r=s[0],n=s[1],i=s[2];return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*i,t[9]=e[9]*i,t[10]=e[10]*i,t[11]=e[11]*i,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function c(t,e,s,r){let n,i,a,o,h,l,u,d,c,p,m,f,_,g,v,y,x,b,w,j,M,T,A,E,S=r[0],C=r[1],O=r[2],P=Math.hypot(S,C,O);return Math.abs(P)<1e-6?null:(P=1/P,S*=P,C*=P,O*=P,n=Math.sin(s),i=Math.cos(s),a=1-i,o=e[0],h=e[1],l=e[2],u=e[3],d=e[4],c=e[5],p=e[6],m=e[7],f=e[8],_=e[9],g=e[10],v=e[11],y=S*S*a+i,x=C*S*a+O*n,b=O*S*a-C*n,w=S*C*a-O*n,j=C*C*a+i,M=O*C*a+S*n,T=S*O*a+C*n,A=C*O*a-S*n,E=O*O*a+i,t[0]=o*y+d*x+f*b,t[1]=h*y+c*x+_*b,t[2]=l*y+p*x+g*b,t[3]=u*y+m*x+v*b,t[4]=o*w+d*j+f*M,t[5]=h*w+c*j+_*M,t[6]=l*w+p*j+g*M,t[7]=u*w+m*j+v*M,t[8]=o*T+d*A+f*E,t[9]=h*T+c*A+_*E,t[10]=l*T+p*A+g*E,t[11]=u*T+m*A+v*E,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function p(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function m(t,e){let s=e[0],r=e[1],n=e[2],i=e[4],a=e[5],o=e[6],h=e[8],l=e[9],u=e[10];return t[0]=Math.hypot(s,r,n),t[1]=Math.hypot(i,a,o),t[2]=Math.hypot(h,l,u),t}function f(t){let e=t[0],s=t[1],r=t[2],n=t[4],i=t[5],a=t[6],o=t[8],h=t[9],l=t[10];const u=e*e+s*s+r*r,d=n*n+i*i+a*a,c=o*o+h*h+l*l;return Math.sqrt(Math.max(u,d,c))}const _=function(){const t=[0,0,0];return function(e,s){let r=t;m(r,s);let n=1/r[0],i=1/r[1],a=1/r[2],o=s[0]*n,h=s[1]*i,l=s[2]*a,u=s[4]*n,d=s[5]*i,c=s[6]*a,p=s[8]*n,f=s[9]*i,_=s[10]*a,g=o+d+_,v=0;return g>0?(v=2*Math.sqrt(g+1),e[3]=.25*v,e[0]=(c-f)/v,e[1]=(p-l)/v,e[2]=(h-u)/v):o>d&&o>_?(v=2*Math.sqrt(1+o-d-_),e[3]=(c-f)/v,e[0]=.25*v,e[1]=(h+u)/v,e[2]=(p+l)/v):d>_?(v=2*Math.sqrt(1+d-o-_),e[3]=(p-l)/v,e[0]=(h+u)/v,e[1]=.25*v,e[2]=(c+f)/v):(v=2*Math.sqrt(1+_-o-d),e[3]=(h-u)/v,e[0]=(p+l)/v,e[1]=(c+f)/v,e[2]=.25*v),e}}();function g(t,e,s,r){let n=e[0],i=e[1],a=e[2],o=e[3],h=n+n,l=i+i,u=a+a,d=n*h,c=n*l,p=n*u,m=i*l,f=i*u,_=a*u,g=o*h,v=o*l,y=o*u,x=r[0],b=r[1],w=r[2];return t[0]=(1-(m+_))*x,t[1]=(c+y)*x,t[2]=(p-v)*x,t[3]=0,t[4]=(c-y)*b,t[5]=(1-(d+_))*b,t[6]=(f+g)*b,t[7]=0,t[8]=(p+v)*w,t[9]=(f-g)*w,t[10]=(1-(d+m))*w,t[11]=0,t[12]=s[0],t[13]=s[1],t[14]=s[2],t[15]=1,t}function v(t,e){let s=e[0],r=e[1],n=e[2],i=e[3],a=s+s,o=r+r,h=n+n,l=s*a,u=r*a,d=r*o,c=n*a,p=n*o,m=n*h,f=i*a,_=i*o,g=i*h;return t[0]=1-d-m,t[1]=u+g,t[2]=c-_,t[3]=0,t[4]=u-g,t[5]=1-l-m,t[6]=p+f,t[7]=0,t[8]=c+_,t[9]=p-f,t[10]=1-l-d,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function y(t,e,s,r,n){let i=1/Math.tan(e/2),a=1/(r-n);return t[0]=i/s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=i,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(n+r)*a,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*n*r*a,t[15]=0,t}function x(t,e,s,r,n,i,a){let o=1/(e-s),h=1/(r-n),l=1/(i-a);return t[0]=-2*o,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*h,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*l,t[11]=0,t[12]=(e+s)*o,t[13]=(n+r)*h,t[14]=(a+i)*l,t[15]=1,t}function b(t,e,s,r){let n=e[0],i=e[1],a=e[2],o=r[0],h=r[1],l=r[2],u=n-s[0],d=i-s[1],c=a-s[2],p=u*u+d*d+c*c;0===p?c=1:(p=1/Math.sqrt(p),u*=p,d*=p,c*=p);let m=h*c-l*d,f=l*u-o*c,_=o*d-h*u;return p=m*m+f*f+_*_,0===p&&(l?o+=1e-6:h?l+=1e-6:h+=1e-6,m=h*c-l*d,f=l*u-o*c,_=o*d-h*u,p=m*m+f*f+_*_),p=1/Math.sqrt(p),m*=p,f*=p,_*=p,t[0]=m,t[1]=f,t[2]=_,t[3]=0,t[4]=d*_-c*f,t[5]=c*m-u*_,t[6]=u*f-d*m,t[7]=0,t[8]=u,t[9]=d,t[10]=c,t[11]=0,t[12]=n,t[13]=i,t[14]=a,t[15]=1,t}function w(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t[4]=e[4]+s[4],t[5]=e[5]+s[5],t[6]=e[6]+s[6],t[7]=e[7]+s[7],t[8]=e[8]+s[8],t[9]=e[9]+s[9],t[10]=e[10]+s[10],t[11]=e[11]+s[11],t[12]=e[12]+s[12],t[13]=e[13]+s[13],t[14]=e[14]+s[14],t[15]=e[15]+s[15],t}function j(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t[3]=e[3]-s[3],t[4]=e[4]-s[4],t[5]=e[5]-s[5],t[6]=e[6]-s[6],t[7]=e[7]-s[7],t[8]=e[8]-s[8],t[9]=e[9]-s[9],t[10]=e[10]-s[10],t[11]=e[11]-s[11],t[12]=e[12]-s[12],t[13]=e[13]-s[13],t[14]=e[14]-s[14],t[15]=e[15]-s[15],t}function M(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*s,t[9]=e[9]*s,t[10]=e[10]*s,t[11]=e[11]*s,t[12]=e[12]*s,t[13]=e[13]*s,t[14]=e[14]*s,t[15]=e[15]*s,t}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{add:()=>g,conjugate:()=>c,copy:()=>f,dot:()=>y,fromEuler:()=>m,fromMat3:()=>p,identity:()=>n,invert:()=>d,length:()=>b,lerp:()=>x,multiply:()=>a,normalize:()=>w,rotateX:()=>o,rotateY:()=>h,rotateZ:()=>l,scale:()=>v,set:()=>_,setAxisAngle:()=>i,slerp:()=>u});var r=s("./node_modules/ogl/src/math/functions/Vec4Func.js");function n(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function i(t,e,s){s*=.5;let r=Math.sin(s);return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=Math.cos(s),t}function a(t,e,s){let r=e[0],n=e[1],i=e[2],a=e[3],o=s[0],h=s[1],l=s[2],u=s[3];return t[0]=r*u+a*o+n*l-i*h,t[1]=n*u+a*h+i*o-r*l,t[2]=i*u+a*l+r*h-n*o,t[3]=a*u-r*o-n*h-i*l,t}function o(t,e,s){s*=.5;let r=e[0],n=e[1],i=e[2],a=e[3],o=Math.sin(s),h=Math.cos(s);return t[0]=r*h+a*o,t[1]=n*h+i*o,t[2]=i*h-n*o,t[3]=a*h-r*o,t}function h(t,e,s){s*=.5;let r=e[0],n=e[1],i=e[2],a=e[3],o=Math.sin(s),h=Math.cos(s);return t[0]=r*h-i*o,t[1]=n*h+a*o,t[2]=i*h+r*o,t[3]=a*h-n*o,t}function l(t,e,s){s*=.5;let r=e[0],n=e[1],i=e[2],a=e[3],o=Math.sin(s),h=Math.cos(s);return t[0]=r*h+n*o,t[1]=n*h-r*o,t[2]=i*h+a*o,t[3]=a*h-i*o,t}function u(t,e,s,r){let n,i,a,o,h,l=e[0],u=e[1],d=e[2],c=e[3],p=s[0],m=s[1],f=s[2],_=s[3];return i=l*p+u*m+d*f+c*_,i<0&&(i=-i,p=-p,m=-m,f=-f,_=-_),1-i>1e-6?(n=Math.acos(i),a=Math.sin(n),o=Math.sin((1-r)*n)/a,h=Math.sin(r*n)/a):(o=1-r,h=r),t[0]=o*l+h*p,t[1]=o*u+h*m,t[2]=o*d+h*f,t[3]=o*c+h*_,t}function d(t,e){let s=e[0],r=e[1],n=e[2],i=e[3],a=s*s+r*r+n*n+i*i,o=a?1/a:0;return t[0]=-s*o,t[1]=-r*o,t[2]=-n*o,t[3]=i*o,t}function c(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function p(t,e){let s,r=e[0]+e[4]+e[8];if(r>0)s=Math.sqrt(r+1),t[3]=.5*s,s=.5/s,t[0]=(e[5]-e[7])*s,t[1]=(e[6]-e[2])*s,t[2]=(e[1]-e[3])*s;else{let r=0;e[4]>e[0]&&(r=1),e[8]>e[3*r+r]&&(r=2);let n=(r+1)%3,i=(r+2)%3;s=Math.sqrt(e[3*r+r]-e[3*n+n]-e[3*i+i]+1),t[r]=.5*s,s=.5/s,t[3]=(e[3*n+i]-e[3*i+n])*s,t[n]=(e[3*n+r]+e[3*r+n])*s,t[i]=(e[3*i+r]+e[3*r+i])*s}return t}function m(t,e,s="YXZ"){let r=Math.sin(.5*e[0]),n=Math.cos(.5*e[0]),i=Math.sin(.5*e[1]),a=Math.cos(.5*e[1]),o=Math.sin(.5*e[2]),h=Math.cos(.5*e[2]);return"XYZ"===s?(t[0]=r*a*h+n*i*o,t[1]=n*i*h-r*a*o,t[2]=n*a*o+r*i*h,t[3]=n*a*h-r*i*o):"YXZ"===s?(t[0]=r*a*h+n*i*o,t[1]=n*i*h-r*a*o,t[2]=n*a*o-r*i*h,t[3]=n*a*h+r*i*o):"ZXY"===s?(t[0]=r*a*h-n*i*o,t[1]=n*i*h+r*a*o,t[2]=n*a*o+r*i*h,t[3]=n*a*h-r*i*o):"ZYX"===s?(t[0]=r*a*h-n*i*o,t[1]=n*i*h+r*a*o,t[2]=n*a*o-r*i*h,t[3]=n*a*h+r*i*o):"YZX"===s?(t[0]=r*a*h+n*i*o,t[1]=n*i*h+r*a*o,t[2]=n*a*o-r*i*h,t[3]=n*a*h-r*i*o):"XZY"===s&&(t[0]=r*a*h-n*i*o,t[1]=n*i*h-r*a*o,t[2]=n*a*o+r*i*h,t[3]=n*a*h+r*i*o),t}const f=r.copy,_=r.set,g=r.add,v=r.scale,y=r.dot,x=r.lerp,b=r.length,w=r.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{add:()=>a,angle:()=>M,copy:()=>n,cross:()=>v,distance:()=>d,divide:()=>l,dot:()=>g,exactEquals:()=>T,inverse:()=>f,length:()=>r,lerp:()=>y,multiply:()=>h,negate:()=>m,normalize:()=>_,scale:()=>u,scaleRotateMat4:()=>b,set:()=>i,squaredDistance:()=>c,squaredLength:()=>p,subtract:()=>o,transformMat3:()=>w,transformMat4:()=>x,transformQuat:()=>j});function r(t){let e=t[0],s=t[1],r=t[2];return Math.sqrt(e*e+s*s+r*r)}function n(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function i(t,e,s,r){return t[0]=e,t[1]=s,t[2]=r,t}function a(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t}function o(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t}function h(t,e,s){return t[0]=e[0]*s[0],t[1]=e[1]*s[1],t[2]=e[2]*s[2],t}function l(t,e,s){return t[0]=e[0]/s[0],t[1]=e[1]/s[1],t[2]=e[2]/s[2],t}function u(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}function d(t,e){let s=e[0]-t[0],r=e[1]-t[1],n=e[2]-t[2];return Math.sqrt(s*s+r*r+n*n)}function c(t,e){let s=e[0]-t[0],r=e[1]-t[1],n=e[2]-t[2];return s*s+r*r+n*n}function p(t){let e=t[0],s=t[1],r=t[2];return e*e+s*s+r*r}function m(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function f(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function _(t,e){let s=e[0],r=e[1],n=e[2],i=s*s+r*r+n*n;return i>0&&(i=1/Math.sqrt(i)),t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t}function g(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function v(t,e,s){let r=e[0],n=e[1],i=e[2],a=s[0],o=s[1],h=s[2];return t[0]=n*h-i*o,t[1]=i*a-r*h,t[2]=r*o-n*a,t}function y(t,e,s,r){let n=e[0],i=e[1],a=e[2];return t[0]=n+r*(s[0]-n),t[1]=i+r*(s[1]-i),t[2]=a+r*(s[2]-a),t}function x(t,e,s){let r=e[0],n=e[1],i=e[2],a=s[3]*r+s[7]*n+s[11]*i+s[15];return a=a||1,t[0]=(s[0]*r+s[4]*n+s[8]*i+s[12])/a,t[1]=(s[1]*r+s[5]*n+s[9]*i+s[13])/a,t[2]=(s[2]*r+s[6]*n+s[10]*i+s[14])/a,t}function b(t,e,s){let r=e[0],n=e[1],i=e[2],a=s[3]*r+s[7]*n+s[11]*i+s[15];return a=a||1,t[0]=(s[0]*r+s[4]*n+s[8]*i)/a,t[1]=(s[1]*r+s[5]*n+s[9]*i)/a,t[2]=(s[2]*r+s[6]*n+s[10]*i)/a,t}function w(t,e,s){let r=e[0],n=e[1],i=e[2];return t[0]=r*s[0]+n*s[3]+i*s[6],t[1]=r*s[1]+n*s[4]+i*s[7],t[2]=r*s[2]+n*s[5]+i*s[8],t}function j(t,e,s){let r=e[0],n=e[1],i=e[2],a=s[0],o=s[1],h=s[2],l=o*i-h*n,u=h*r-a*i,d=a*n-o*r,c=o*d-h*u,p=h*l-a*d,m=a*u-o*l,f=2*s[3];return l*=f,u*=f,d*=f,c*=2,p*=2,m*=2,t[0]=r+l+c,t[1]=n+u+p,t[2]=i+d+m,t}const M=function(){const t=[0,0,0],e=[0,0,0];return function(s,r){n(t,s),n(e,r),_(t,t),_(e,e);let i=g(t,e);return i>1?0:i<-1?Math.PI:Math.acos(i)}}();function T(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(t,e,s)=>{"use strict";s.r(e),s.d(e,{add:()=>i,copy:()=>r,dot:()=>l,length:()=>o,lerp:()=>u,normalize:()=>h,scale:()=>a,set:()=>n});function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function n(t,e,s,r,n){return t[0]=e,t[1]=s,t[2]=r,t[3]=n,t}function i(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t}function a(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t}function o(t){let e=t[0],s=t[1],r=t[2],n=t[3];return Math.sqrt(e*e+s*s+r*r+n*n)}function h(t,e){let s=e[0],r=e[1],n=e[2],i=e[3],a=s*s+r*r+n*n+i*i;return a>0&&(a=1/Math.sqrt(a)),t[0]=s*a,t[1]=r*a,t[2]=n*a,t[3]=i*a,t}function l(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function u(t,e,s,r){let n=e[0],i=e[1],a=e[2],o=e[3];return t[0]=n+r*(s[0]-n),t[1]=i+r*(s[1]-i),t[2]=a+r*(s[2]-a),t[3]=o+r*(s[3]-o),t}}},(function(t){t.h=()=>"00e81abad2b9795bc3de",t.nmd=t=>(t.paths=[],t.children||(t.children=[]),t)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUUsR0FBSzdCLEVBQUUsR0FDbEJvOEQsRUFBSSxHQUFLdjZELEVBQUUsR0FBSzdCLEVBQUUsR0FDbEJvOEQsRUFBSSxHQUFLdjZELEVBQUUsR0FBSzdCLEVBQUUsR0FDbEJvOEQsRUFBSSxHQUFLdjZELEVBQUUsR0FBSzdCLEVBQUUsR0FDbEJvOEQsRUFBSSxHQUFLdjZELEVBQUUsR0FBSzdCLEVBQUUsR0FDbEJvOEQsRUFBSSxHQUFLdjZELEVBQUUsR0FBSzdCLEVBQUUsR0FDbEJvOEQsRUFBSSxJQUFNdjZELEVBQUUsSUFBTTdCLEVBQUUsSUFDcEJvOEQsRUFBSSxJQUFNdjZELEVBQUUsSUFBTTdCLEVBQUUsSUFDcEJvOEQsRUFBSSxJQUFNdjZELEVBQUUsSUFBTTdCLEVBQUUsSUFDcEJvOEQsRUFBSSxJQUFNdjZELEVBQUUsSUFBTTdCLEVBQUUsSUFDcEJvOEQsRUFBSSxJQUFNdjZELEVBQUUsSUFBTTdCLEVBQUUsSUFDcEJvOEQsRUFBSSxJQUFNdjZELEVBQUUsSUFBTTdCLEVBQUUsSUFDYm84RCxDQUNWLENBVU0sU0FBUzJDLEVBQVMzQyxFQUFLdjZELEVBQUc3QixHQWlCN0IsT0FoQkFvOEQsRUFBSSxHQUFLdjZELEVBQUUsR0FBSzdCLEVBQUUsR0FDbEJvOEQsRUFBSSxHQUFLdjZELEVBQUUsR0FBSzdCLEVBQUUsR0FDbEJvOEQsRUFBSSxHQUFLdjZELEVBQUUsR0FBSzdCLEVBQUUsR0FDbEJvOEQsRUFBSSxHQUFLdjZELEVBQUUsR0FBSzdCLEVBQUUsR0FDbEJvOEQsRUFBSSxHQUFLdjZELEVBQUUsR0FBSzdCLEVBQUUsR0FDbEJvOEQsRUFBSSxHQUFLdjZELEVBQUUsR0FBSzdCLEVBQUUsR0FDbEJvOEQsRUFBSSxHQUFLdjZELEVBQUUsR0FBSzdCLEVBQUUsR0FDbEJvOEQsRUFBSSxHQUFLdjZELEVBQUUsR0FBSzdCLEVBQUUsR0FDbEJvOEQsRUFBSSxHQUFLdjZELEVBQUUsR0FBSzdCLEVBQUUsR0FDbEJvOEQsRUFBSSxHQUFLdjZELEVBQUUsR0FBSzdCLEVBQUUsR0FDbEJvOEQs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QUtTLEVBQUUsR0FBSytoRSxHQUMxQjNGLEVBQUksR0FBSzRGLEVBQUt6aUUsR0FBS1MsRUFBRSxHQUFLZ2lFLEdBQzFCNUYsRUFBSSxHQUFLNkYsRUFBSzFpRSxHQUFLUyxFQUFFLEdBQUtpaUUsR0FDbkI3RixDQUNWLGlCQ3RJRHNJLEVBQW9CeDdDLEVBQUksSUFBTSx1QkNBOUJ3N0MsRUFBb0JDLElBQU8xakMsSUFDMUJBLEVBQU8yakMsTUFBUSxHQUNWM2pDLEVBQU9wTSxXQUFVb00sRUFBT3BNLFNBQVcsSUFDakNvTSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2dzYXAvQ1NTUGx1Z2luLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2dzYXAvZ3NhcC1jb3JlLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2dzYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19EYXRhVmlldy5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0hhc2guanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXAuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXBDYWNoZS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXQuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXRDYWNoZS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N0YWNrLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fVWludDhBcnJheS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1dlYWtNYXAuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUVhY2guanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUZpbHRlci5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TGlrZUtleXMuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheU1hcC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5UHVzaC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5U29tZS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VFYWNoLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZvci5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3JPd24uanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0LmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUhhc0luLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzQXJndW1lbnRzLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNFcXVhbERlZXAuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNNYXRjaC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXRlcmF0ZWUuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXAuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWF0Y2hlcy5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXRjaGVzUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHlEZWVwLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRpbWVzLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRvU3RyaW5nLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVVuYXJ5LmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0UGF0aC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVCYXNlRWFjaC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUJhc2VGb3IuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEFycmF5cy5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsQnlUYWcuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbE9iamVjdHMuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hcERhdGEuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXRjaERhdGEuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXROYXRpdmUuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRTeW1ib2xzLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VGFnLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNQYXRoLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaENsZWFyLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaERlbGV0ZS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoSGFzLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaFNldC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzSW5kZXguanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5YWJsZS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzTWFza2VkLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlR2V0LmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21lbW9pemVDYXBwZWQuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJBcmcuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVBZGQuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0NsZWFyLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tEZWxldGUuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0dldC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrSGFzLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tTZXQuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdHJpbmdUb1BhdGguanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL190b0tleS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lYWNoLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lcS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZm9yRWFjaC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZ2V0LmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9oYXNJbi5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTGVuZ3RoLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9tYXAuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3Byb3BlcnR5LmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViQXJyYXkuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJGYWxzZS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL2luZGV4LmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9zcmMvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9Vc2VyQWdlbnRfREVQUkVDQVRFRC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtd2hlZWwvc3JjL2lzRXZlbnRTdXBwb3J0ZWQuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9ub3JtYWxpemVXaGVlbC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9wcmVmaXgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9hcHAvc2hhZGVycy9wbGFuZS1mcmFnbWVudC5nbHNsIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vYXBwL3NoYWRlcnMvcGxhbmUtdmVydGV4Lmdsc2wiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9hcHAvYW5pbWF0aW9ucy9IaWdobGlnaHQuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9hcHAvYW5pbWF0aW9ucy9MYWJlbC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL2FwcC9hbmltYXRpb25zL1BhcmFncmFwaC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL2FwcC9hbmltYXRpb25zL1RpdGxlLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vYXBwL2NsYXNzZXMvQW5pbWF0aW9uLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vYXBwL2NsYXNzZXMvQXN5bmNMb2FkLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vYXBwL2NsYXNzZXMvQnV0dG9uLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vYXBwL2NsYXNzZXMvQ29sb3JzLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vYXBwL2NsYXNzZXMvQ29tcG9uZW50LmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vYXBwL2NsYXNzZXMvUGFnZS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL2FwcC9jb21wb25lbnRzL0NhbnZhcy9Ib21lL01lZGlhLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL0hvbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9hcHAvY29tcG9uZW50cy9OYXZpZ2F0aW9uLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vYXBwL2NvbXBvbmVudHMvUHJlbG9hZGVyLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vYXBwL2luZGV4LmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vYXBwL3BhZ2VzL0Fib3V0L2luZGV4LmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vYXBwL3BhZ2VzL0NvbGxlY3Rpb25zL2luZGV4LmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vYXBwL3BhZ2VzL0RldGFpbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL2FwcC9wYWdlcy9Ib21lL2luZGV4LmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vYXBwL3V0aWxzL2NvbG9ycy5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL2FwcC91dGlscy90ZXh0LmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvY29yZS9DYW1lcmEuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9jb3JlL0dlb21ldHJ5LmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvY29yZS9NZXNoLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvY29yZS9Qcm9ncmFtLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvY29yZS9SZW5kZXJlci5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvVGV4dHVyZS5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL2NvcmUvVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvZXh0cmFzL1BsYW5lLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9FdWxlci5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvTWF0My5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvTWF0NC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvUXVhdC5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvVmVjMy5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL0V1bGVyRnVuYy5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL01hdDNGdW5jLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvTWF0NEZ1bmMuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvLi9ub2RlX21vZHVsZXMvb2dsL3NyYy9tYXRoL2Z1bmN0aW9ucy9RdWF0RnVuYy5qcyIsIndlYnBhY2s6Ly9pbW1lcnNpdmUtd2Vic2l0ZS8uL25vZGVfbW9kdWxlcy9vZ2wvc3JjL21hdGgvZnVuY3Rpb25zL1ZlYzNGdW5jLmpzIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlLy4vbm9kZV9tb2R1bGVzL29nbC9zcmMvbWF0aC9mdW5jdGlvbnMvVmVjNEZ1bmMuanMiLCJ3ZWJwYWNrOi8vaW1tZXJzaXZlLXdlYnNpdGUvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIiwid2VicGFjazovL2ltbWVyc2l2ZS13ZWJzaXRlL3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBDU1NQbHVnaW4gMy4xMS4wXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBDb3B5cmlnaHQgMjAwOC0yMDIyLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgZ3NhcCwgX2dldFByb3BlcnR5LCBfbnVtRXhwLCBfbnVtV2l0aFVuaXRFeHAsIGdldFVuaXQsIF9pc1N0cmluZywgX2lzVW5kZWZpbmVkLCBfcmVuZGVyQ29tcGxleFN0cmluZywgX3JlbEV4cCwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9jaGVja1BsdWdpbiwgX3JlcGxhY2VSYW5kb20sIF9wbHVnaW5zLCBHU0NhY2hlLCBQcm9wVHdlZW4sIF9jb25maWcsIF90aWNrZXIsIF9yb3VuZCwgX21pc3NpbmdQbHVnaW4sIF9nZXRTZXR0ZXIsIF9nZXRDYWNoZSwgX2NvbG9yRXhwLCBfcGFyc2VSZWxhdGl2ZSwgX3NldERlZmF1bHRzLCBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0gLy9mb3IgdGhlIGNvbW1lbnRlZC1vdXQgY2xhc3NOYW1lIGZlYXR1cmUuXG59IGZyb20gXCIuL2dzYXAtY29yZS5qc1wiO1xuXG52YXIgX3dpbixcbiAgICBfZG9jLFxuICAgIF9kb2NFbGVtZW50LFxuICAgIF9wbHVnaW5Jbml0dGVkLFxuICAgIF90ZW1wRGl2LFxuICAgIF90ZW1wRGl2U3R5bGVyLFxuICAgIF9yZWNlbnRTZXR0ZXJQbHVnaW4sXG4gICAgX3JldmVydGluZyxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF90cmFuc2Zvcm1Qcm9wcyA9IHt9LFxuICAgIF9SQUQyREVHID0gMTgwIC8gTWF0aC5QSSxcbiAgICBfREVHMlJBRCA9IE1hdGguUEkgLyAxODAsXG4gICAgX2F0YW4yID0gTWF0aC5hdGFuMixcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF9jYXBzRXhwID0gLyhbQS1aXSkvZyxcbiAgICBfaG9yaXpvbnRhbEV4cCA9IC8obGVmdHxyaWdodHx3aWR0aHxtYXJnaW58cGFkZGluZ3x4KS9pLFxuICAgIF9jb21wbGV4RXhwID0gL1tcXHMsXFwoXVxcUy8sXG4gICAgX3Byb3BlcnR5QWxpYXNlcyA9IHtcbiAgYXV0b0FscGhhOiBcIm9wYWNpdHksdmlzaWJpbGl0eVwiLFxuICBzY2FsZTogXCJzY2FsZVgsc2NhbGVZXCIsXG4gIGFscGhhOiBcIm9wYWNpdHlcIlxufSxcbiAgICBfcmVuZGVyQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyUHJvcFdpdGhFbmQgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFdpdGhFbmQocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA9PT0gMSA/IGRhdGEuZSA6IE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nID0gZnVuY3Rpb24gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSA6IGRhdGEuYiwgZGF0YSk7XG59LFxuICAgIC8vaWYgdW5pdHMgY2hhbmdlLCB3ZSBuZWVkIGEgd2F5IHRvIHJlbmRlciB0aGUgb3JpZ2luYWwgdW5pdC92YWx1ZSB3aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZyAocmF0aW86MClcbl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJSb3VuZGVkQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICB2YXIgdmFsdWUgPSBkYXRhLnMgKyBkYXRhLmMgKiByYXRpbztcbiAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIH5+KHZhbHVlICsgKHZhbHVlIDwgMCA/IC0uNSA6IC41KSkgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gIT09IDEgPyBkYXRhLmIgOiBkYXRhLmUsIGRhdGEpO1xufSxcbiAgICBfc2V0dGVyQ1NTU3R5bGUgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTU3R5bGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlckNTU1Byb3AgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTUHJvcCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXBbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZSA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwLnNjYWxlWCA9IHRhcmdldC5fZ3NhcC5zY2FsZVkgPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlclNjYWxlV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEsIHJhdGlvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgY2FjaGUuc2NhbGVYID0gY2FjaGUuc2NhbGVZID0gdmFsdWU7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybShyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3RyYW5zZm9ybVByb3AgPSBcInRyYW5zZm9ybVwiLFxuICAgIF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX3RyYW5zZm9ybVByb3AgKyBcIk9yaWdpblwiLFxuICAgIF9zYXZlU3R5bGUgPSBmdW5jdGlvbiBfc2F2ZVN0eWxlKHByb3BlcnR5KSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHRhcmdldCA9IHRoaXMudGFyZ2V0LFxuICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGU7XG5cbiAgaWYgKHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcykge1xuICAgIHRoaXMudGZtID0gdGhpcy50Zm0gfHwge307XG5cbiAgICBpZiAocHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgIHByb3BlcnR5ID0gX3Byb3BlcnR5QWxpYXNlc1twcm9wZXJ0eV0gfHwgcHJvcGVydHk7XG4gICAgICB+cHJvcGVydHkuaW5kZXhPZihcIixcIikgPyBwcm9wZXJ0eS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gX3RoaXMudGZtW2FdID0gX2dldCh0YXJnZXQsIGEpO1xuICAgICAgfSkgOiB0aGlzLnRmbVtwcm9wZXJ0eV0gPSB0YXJnZXQuX2dzYXAueCA/IHRhcmdldC5fZ3NhcFtwcm9wZXJ0eV0gOiBfZ2V0KHRhcmdldCwgcHJvcGVydHkpOyAvLyBub3RlOiBzY2FsZSB3b3VsZCBtYXAgdG8gXCJzY2FsZVgsc2NhbGVZXCIsIHRodXMgd2UgbG9vcCBhbmQgYXBwbHkgdGhlbSBib3RoLlxuICAgIH1cblxuICAgIHRhcmdldC5fZ3NhcC5zdmcgJiYgKHRoaXMuc3ZnID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShwcm9wZXJ0eSkgfHwgXCJcIik7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5pbmRleE9mKF90cmFuc2Zvcm1Qcm9wKSA+PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJvcGVydHkgPSBfdHJhbnNmb3JtUHJvcDtcbiAgfVxuXG4gIHN0eWxlICYmIHRoaXMucHJvcHMucHVzaChwcm9wZXJ0eSwgc3R5bGVbcHJvcGVydHldKTtcbn0sXG4gICAgX3JlbW92ZUluZGVwZW5kZW50VHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMoc3R5bGUpIHtcbiAgaWYgKHN0eWxlLnRyYW5zbGF0ZSkge1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwidHJhbnNsYXRlXCIpO1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KFwic2NhbGVcIik7XG4gICAgc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJyb3RhdGVcIik7XG4gIH1cbn0sXG4gICAgX3JldmVydFN0eWxlID0gZnVuY3Rpb24gX3JldmVydFN0eWxlKCkge1xuICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgdGFyZ2V0ID0gdGhpcy50YXJnZXQsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgaSxcbiAgICAgIHA7XG5cbiAgZm9yIChpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcHJvcHNbaSArIDFdID8gc3R5bGVbcHJvcHNbaV1dID0gcHJvcHNbaSArIDFdIDogc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcHNbaV0ucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG4gIH1cblxuICBpZiAodGhpcy50Zm0pIHtcbiAgICBjYWNoZS5zdmcgJiYgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0aGlzLnN2ZyB8fCBcIlwiKTtcblxuICAgIGZvciAocCBpbiB0aGlzLnRmbSkge1xuICAgICAgY2FjaGVbcF0gPSB0aGlzLnRmbVtwXTtcbiAgICB9XG5cbiAgICBpID0gX3JldmVydGluZygpO1xuXG4gICAgaWYgKGkgJiYgIWkuaXNTdGFydCAmJiAhc3R5bGVbX3RyYW5zZm9ybVByb3BdKSB7XG4gICAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKTtcblxuICAgICAgY2FjaGUudW5jYWNoZSA9IDE7IC8vIGlmIGl0J3MgYSBzdGFydEF0IHRoYXQncyBiZWluZyByZXZlcnRlZCBpbiB0aGUgX2luaXRUd2VlbigpIG9mIHRoZSBjb3JlLCB3ZSBkb24ndCBuZWVkIHRvIHVuY2FjaGUgdHJhbnNmb3Jtcy4gVGhpcyBpcyBwdXJlbHkgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24uXG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRTdHlsZVNhdmVyID0gZnVuY3Rpb24gX2dldFN0eWxlU2F2ZXIodGFyZ2V0LCBwcm9wZXJ0aWVzKSB7XG4gIHZhciBzYXZlciA9IHtcbiAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICBwcm9wczogW10sXG4gICAgcmV2ZXJ0OiBfcmV2ZXJ0U3R5bGUsXG4gICAgc2F2ZTogX3NhdmVTdHlsZVxuICB9O1xuICBwcm9wZXJ0aWVzICYmIHByb3BlcnRpZXMuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gc2F2ZXIuc2F2ZShwKTtcbiAgfSk7XG4gIHJldHVybiBzYXZlcjtcbn0sXG4gICAgX3N1cHBvcnRzM0QsXG4gICAgX2NyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiBfY3JlYXRlRWxlbWVudCh0eXBlLCBucykge1xuICB2YXIgZSA9IF9kb2MuY3JlYXRlRWxlbWVudE5TID8gX2RvYy5jcmVhdGVFbGVtZW50TlMoKG5zIHx8IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiKS5yZXBsYWNlKC9eaHR0cHMvLCBcImh0dHBcIiksIHR5cGUpIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgc2VydmVycyBzd2FwIGluIGh0dHBzIGZvciBodHRwIGluIHRoZSBuYW1lc3BhY2Ugd2hpY2ggY2FuIGJyZWFrIHRoaW5ncywgbWFraW5nIFwic3R5bGVcIiBpbmFjY2Vzc2libGUuXG5cbiAgcmV0dXJuIGUuc3R5bGUgPyBlIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgZW52aXJvbm1lbnRzIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgZWxlbWVudCdzIHN0eWxlIHdoZW4gY3JlYXRlZCB3aXRoIGEgbmFtZXNwYWNlIGluIHdoaWNoIGNhc2Ugd2UgZGVmYXVsdCB0byB0aGUgc3RhbmRhcmQgY3JlYXRlRWxlbWVudCgpIHRvIHdvcmsgYXJvdW5kIHRoZSBpc3N1ZS4gQWxzbyBub3RlIHRoYXQgd2hlbiBHU0FQIGlzIGVtYmVkZGVkIGRpcmVjdGx5IGluc2lkZSBhbiBTVkcgZmlsZSwgY3JlYXRlRWxlbWVudCgpIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgc3R5bGUgb2JqZWN0IGluIEZpcmVmb3ggKHNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzIwMjE1LXByb2JsZW0tdXNpbmctdHdlZW5tYXgtaW4tc3RhbmRhbG9uZS1zZWxmLWNvbnRhaW5pbmctc3ZnLWZpbGUtZXJyLWNhbm5vdC1zZXQtcHJvcGVydHktY3NzdGV4dC1vZi11bmRlZmluZWQvKS5cbn0sXG4gICAgX2dldENvbXB1dGVkUHJvcGVydHkgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBza2lwUHJlZml4RmFsbGJhY2spIHtcbiAgdmFyIGNzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xuICByZXR1cm4gY3NbcHJvcGVydHldIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSkgfHwgY3MuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkgfHwgIXNraXBQcmVmaXhGYWxsYmFjayAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHkpIHx8IHByb3BlcnR5LCAxKSB8fCBcIlwiOyAvL2NzcyB2YXJpYWJsZXMgbWF5IG5vdCBuZWVkIGNhcHMgc3dhcHBlZCBvdXQgZm9yIGRhc2hlcyBhbmQgbG93ZXJjYXNlLlxufSxcbiAgICBfcHJlZml4ZXMgPSBcIk8sTW96LG1zLE1zLFdlYmtpdFwiLnNwbGl0KFwiLFwiKSxcbiAgICBfY2hlY2tQcm9wUHJlZml4ID0gZnVuY3Rpb24gX2NoZWNrUHJvcFByZWZpeChwcm9wZXJ0eSwgZWxlbWVudCwgcHJlZmVyUHJlZml4KSB7XG4gIHZhciBlID0gZWxlbWVudCB8fCBfdGVtcERpdixcbiAgICAgIHMgPSBlLnN0eWxlLFxuICAgICAgaSA9IDU7XG5cbiAgaWYgKHByb3BlcnR5IGluIHMgJiYgIXByZWZlclByZWZpeCkge1xuICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgfVxuXG4gIHByb3BlcnR5ID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zdWJzdHIoMSk7XG5cbiAgd2hpbGUgKGktLSAmJiAhKF9wcmVmaXhlc1tpXSArIHByb3BlcnR5IGluIHMpKSB7fVxuXG4gIHJldHVybiBpIDwgMCA/IG51bGwgOiAoaSA9PT0gMyA/IFwibXNcIiA6IGkgPj0gMCA/IF9wcmVmaXhlc1tpXSA6IFwiXCIpICsgcHJvcGVydHk7XG59LFxuICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZSgpIHtcbiAgaWYgKF93aW5kb3dFeGlzdHMoKSAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICBfd2luID0gd2luZG93O1xuICAgIF9kb2MgPSBfd2luLmRvY3VtZW50O1xuICAgIF9kb2NFbGVtZW50ID0gX2RvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgX3RlbXBEaXYgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKSB8fCB7XG4gICAgICBzdHlsZToge31cbiAgICB9O1xuICAgIF90ZW1wRGl2U3R5bGVyID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgX3RyYW5zZm9ybVByb3AgPSBfY2hlY2tQcm9wUHJlZml4KF90cmFuc2Zvcm1Qcm9wKTtcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF90cmFuc2Zvcm1Qcm9wICsgXCJPcmlnaW5cIjtcbiAgICBfdGVtcERpdi5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXItd2lkdGg6MDtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOmFic29sdXRlO3BhZGRpbmc6MFwiOyAvL21ha2Ugc3VyZSB0byBvdmVycmlkZSBjZXJ0YWluIHByb3BlcnRpZXMgdGhhdCBtYXkgY29udGFtaW5hdGUgbWVhc3VyZW1lbnRzLCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBvdmVycmVhY2hpbmcgc3R5bGUgc2hlZXRzLlxuXG4gICAgX3N1cHBvcnRzM0QgPSAhIV9jaGVja1Byb3BQcmVmaXgoXCJwZXJzcGVjdGl2ZVwiKTtcbiAgICBfcmV2ZXJ0aW5nID0gZ3NhcC5jb3JlLnJldmVydGluZztcbiAgICBfcGx1Z2luSW5pdHRlZCA9IDE7XG4gIH1cbn0sXG4gICAgX2dldEJCb3hIYWNrID0gZnVuY3Rpb24gX2dldEJCb3hIYWNrKHN3YXBJZlBvc3NpYmxlKSB7XG4gIC8vd29ya3MgYXJvdW5kIGlzc3VlcyBpbiBzb21lIGJyb3dzZXJzIChsaWtlIEZpcmVmb3gpIHRoYXQgZG9uJ3QgY29ycmVjdGx5IHJlcG9ydCBnZXRCQm94KCkgb24gU1ZHIGVsZW1lbnRzIGluc2lkZSBhIDxkZWZzPiBlbGVtZW50IGFuZC9vciA8bWFzaz4uIFdlIHRyeSBjcmVhdGluZyBhbiBTVkcsIGFkZGluZyBpdCB0byB0aGUgZG9jdW1lbnRFbGVtZW50IGFuZCB0b3NzIHRoZSBlbGVtZW50IGluIHRoZXJlIHNvIHRoYXQgaXQncyBkZWZpbml0ZWx5IHBhcnQgb2YgdGhlIHJlbmRlcmluZyB0cmVlLCB0aGVuIGdyYWIgdGhlIGJib3ggYW5kIGlmIGl0IHdvcmtzLCB3ZSBhY3R1YWxseSBzd2FwIG91dCB0aGUgb3JpZ2luYWwgZ2V0QkJveCgpIG1ldGhvZCBmb3Igb3VyIG93biB0aGF0IGRvZXMgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbmV2ZXIgZ2V0QkJveCBpcyBuZWVkZWQuIFRoaXMgaGVscHMgZW5zdXJlIHRoYXQgcGVyZm9ybWFuY2UgaXMgb3B0aW1hbCAob25seSBkbyBhbGwgdGhlc2UgZXh0cmEgc3RlcHMgd2hlbiBhYnNvbHV0ZWx5IG5lY2Vzc2FyeS4uLm1vc3QgZWxlbWVudHMgZG9uJ3QgbmVlZCBpdCkuXG4gIHZhciBzdmcgPSBfY3JlYXRlRWxlbWVudChcInN2Z1wiLCB0aGlzLm93bmVyU1ZHRWxlbWVudCAmJiB0aGlzLm93bmVyU1ZHRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ4bWxuc1wiKSB8fCBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpLFxuICAgICAgb2xkUGFyZW50ID0gdGhpcy5wYXJlbnROb2RlLFxuICAgICAgb2xkU2libGluZyA9IHRoaXMubmV4dFNpYmxpbmcsXG4gICAgICBvbGRDU1MgPSB0aGlzLnN0eWxlLmNzc1RleHQsXG4gICAgICBiYm94O1xuXG4gIF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKHN2Zyk7XG5cbiAgc3ZnLmFwcGVuZENoaWxkKHRoaXMpO1xuICB0aGlzLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgaWYgKHN3YXBJZlBvc3NpYmxlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGJib3ggPSB0aGlzLmdldEJCb3goKTtcbiAgICAgIHRoaXMuX2dzYXBCQm94ID0gdGhpcy5nZXRCQm94OyAvL3N0b3JlIHRoZSBvcmlnaW5hbFxuXG4gICAgICB0aGlzLmdldEJCb3ggPSBfZ2V0QkJveEhhY2s7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfSBlbHNlIGlmICh0aGlzLl9nc2FwQkJveCkge1xuICAgIGJib3ggPSB0aGlzLl9nc2FwQkJveCgpO1xuICB9XG5cbiAgaWYgKG9sZFBhcmVudCkge1xuICAgIGlmIChvbGRTaWJsaW5nKSB7XG4gICAgICBvbGRQYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMsIG9sZFNpYmxpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbGRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgX2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQoc3ZnKTtcblxuICB0aGlzLnN0eWxlLmNzc1RleHQgPSBvbGRDU1M7XG4gIHJldHVybiBiYm94O1xufSxcbiAgICBfZ2V0QXR0cmlidXRlRmFsbGJhY2tzID0gZnVuY3Rpb24gX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIGF0dHJpYnV0ZXNBcnJheSkge1xuICB2YXIgaSA9IGF0dHJpYnV0ZXNBcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmICh0YXJnZXQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSkpIHtcbiAgICAgIHJldHVybiB0YXJnZXQuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZXNBcnJheVtpXSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9nZXRCQm94ID0gZnVuY3Rpb24gX2dldEJCb3godGFyZ2V0KSB7XG4gIHZhciBib3VuZHM7XG5cbiAgdHJ5IHtcbiAgICBib3VuZHMgPSB0YXJnZXQuZ2V0QkJveCgpOyAvL0ZpcmVmb3ggdGhyb3dzIGVycm9ycyBpZiB5b3UgdHJ5IGNhbGxpbmcgZ2V0QkJveCgpIG9uIGFuIFNWRyBlbGVtZW50IHRoYXQncyBub3QgcmVuZGVyZWQgKGxpa2UgaW4gYSA8c3ltYm9sPiBvciA8ZGVmcz4pLiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02MTIxMThcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBib3VuZHMgPSBfZ2V0QkJveEhhY2suY2FsbCh0YXJnZXQsIHRydWUpO1xuICB9XG5cbiAgYm91bmRzICYmIChib3VuZHMud2lkdGggfHwgYm91bmRzLmhlaWdodCkgfHwgdGFyZ2V0LmdldEJCb3ggPT09IF9nZXRCQm94SGFjayB8fCAoYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKSk7IC8vc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSBtaXNyZXBvcnQgdGhlIGJvdW5kcyBpZiB0aGUgZWxlbWVudCBoYXMgemVybyB3aWR0aCBhbmQgaGVpZ2h0IChpdCBqdXN0IGFzc3VtZXMgaXQncyBhdCB4OjAsIHk6MCksIHRodXMgd2UgbmVlZCB0byBtYW51YWxseSBncmFiIHRoZSBwb3NpdGlvbiBpbiB0aGF0IGNhc2UuXG5cbiAgcmV0dXJuIGJvdW5kcyAmJiAhYm91bmRzLndpZHRoICYmICFib3VuZHMueCAmJiAhYm91bmRzLnkgPyB7XG4gICAgeDogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ4XCIsIFwiY3hcIiwgXCJ4MVwiXSkgfHwgMCxcbiAgICB5OiArX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyh0YXJnZXQsIFtcInlcIiwgXCJjeVwiLCBcInkxXCJdKSB8fCAwLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMFxuICB9IDogYm91bmRzO1xufSxcbiAgICBfaXNTVkcgPSBmdW5jdGlvbiBfaXNTVkcoZSkge1xuICByZXR1cm4gISEoZS5nZXRDVE0gJiYgKCFlLnBhcmVudE5vZGUgfHwgZS5vd25lclNWR0VsZW1lbnQpICYmIF9nZXRCQm94KGUpKTtcbn0sXG4gICAgLy9yZXBvcnRzIGlmIHRoZSBlbGVtZW50IGlzIGFuIFNWRyBvbiB3aGljaCBnZXRCQm94KCkgYWN0dWFsbHkgd29ya3Ncbl9yZW1vdmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGlmIChwcm9wZXJ0eSkge1xuICAgIHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZTtcblxuICAgIGlmIChwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgcHJvcGVydHkgIT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSB7XG4gICAgICBwcm9wZXJ0eSA9IF90cmFuc2Zvcm1Qcm9wO1xuICAgIH1cblxuICAgIGlmIChzdHlsZS5yZW1vdmVQcm9wZXJ0eSkge1xuICAgICAgaWYgKHByb3BlcnR5LnN1YnN0cigwLCAyKSA9PT0gXCJtc1wiIHx8IHByb3BlcnR5LnN1YnN0cigwLCA2KSA9PT0gXCJ3ZWJraXRcIikge1xuICAgICAgICAvL01pY3Jvc29mdCBhbmQgc29tZSBXZWJraXQgYnJvd3NlcnMgZG9uJ3QgY29uZm9ybSB0byB0aGUgc3RhbmRhcmQgb2YgY2FwaXRhbGl6aW5nIHRoZSBmaXJzdCBwcmVmaXggY2hhcmFjdGVyLCBzbyB3ZSBhZGp1c3Qgc28gdGhhdCB3aGVuIHdlIHByZWZpeCB0aGUgY2FwcyB3aXRoIGEgZGFzaCwgaXQncyBjb3JyZWN0IChvdGhlcndpc2UgaXQnZCBiZSBcIm1zLXRyYW5zZm9ybVwiIGluc3RlYWQgb2YgXCItbXMtdHJhbnNmb3JtXCIgZm9yIElFOSwgZm9yIGV4YW1wbGUpXG4gICAgICAgIHByb3BlcnR5ID0gXCItXCIgKyBwcm9wZXJ0eTtcbiAgICAgIH1cblxuICAgICAgc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcGVydHkucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vbm90ZTogb2xkIHZlcnNpb25zIG9mIElFIHVzZSBcInJlbW92ZUF0dHJpYnV0ZSgpXCIgaW5zdGVhZCBvZiBcInJlbW92ZVByb3BlcnR5KClcIlxuICAgICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKHByb3BlcnR5KTtcbiAgICB9XG4gIH1cbn0sXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQgPSBmdW5jdGlvbiBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGJlZ2lubmluZywgZW5kLCBvbmx5U2V0QXRFbmQpIHtcbiAgdmFyIHB0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAxLCBvbmx5U2V0QXRFbmQgPyBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA6IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKTtcbiAgcGx1Z2luLl9wdCA9IHB0O1xuICBwdC5iID0gYmVnaW5uaW5nO1xuICBwdC5lID0gZW5kO1xuXG4gIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfbm9uQ29udmVydGlibGVVbml0cyA9IHtcbiAgZGVnOiAxLFxuICByYWQ6IDEsXG4gIHR1cm46IDFcbn0sXG4gICAgX25vblN0YW5kYXJkTGF5b3V0cyA9IHtcbiAgZ3JpZDogMSxcbiAgZmxleDogMVxufSxcbiAgICAvL3Rha2VzIGEgc2luZ2xlIHZhbHVlIGxpa2UgMjBweCBhbmQgY29udmVydHMgaXQgdG8gdGhlIHVuaXQgc3BlY2lmaWVkLCBsaWtlIFwiJVwiLCByZXR1cm5pbmcgb25seSB0aGUgbnVtZXJpYyBhbW91bnQuXG5fY29udmVydFRvVW5pdCA9IGZ1bmN0aW9uIF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCB1bml0KSB7XG4gIHZhciBjdXJWYWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpIHx8IDAsXG4gICAgICBjdXJVbml0ID0gKHZhbHVlICsgXCJcIikudHJpbSgpLnN1YnN0cigoY3VyVmFsdWUgKyBcIlwiKS5sZW5ndGgpIHx8IFwicHhcIixcbiAgICAgIC8vIHNvbWUgYnJvd3NlcnMgbGVhdmUgZXh0cmEgd2hpdGVzcGFjZSBhdCB0aGUgYmVnaW5uaW5nIG9mIENTUyB2YXJpYWJsZXMsIGhlbmNlIHRoZSBuZWVkIHRvIHRyaW0oKVxuICBzdHlsZSA9IF90ZW1wRGl2LnN0eWxlLFxuICAgICAgaG9yaXpvbnRhbCA9IF9ob3Jpem9udGFsRXhwLnRlc3QocHJvcGVydHkpLFxuICAgICAgaXNSb290U1ZHID0gdGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJzdmdcIixcbiAgICAgIG1lYXN1cmVQcm9wZXJ0eSA9IChpc1Jvb3RTVkcgPyBcImNsaWVudFwiIDogXCJvZmZzZXRcIikgKyAoaG9yaXpvbnRhbCA/IFwiV2lkdGhcIiA6IFwiSGVpZ2h0XCIpLFxuICAgICAgYW1vdW50ID0gMTAwLFxuICAgICAgdG9QaXhlbHMgPSB1bml0ID09PSBcInB4XCIsXG4gICAgICB0b1BlcmNlbnQgPSB1bml0ID09PSBcIiVcIixcbiAgICAgIHB4LFxuICAgICAgcGFyZW50LFxuICAgICAgY2FjaGUsXG4gICAgICBpc1NWRztcblxuICBpZiAodW5pdCA9PT0gY3VyVW5pdCB8fCAhY3VyVmFsdWUgfHwgX25vbkNvbnZlcnRpYmxlVW5pdHNbdW5pdF0gfHwgX25vbkNvbnZlcnRpYmxlVW5pdHNbY3VyVW5pdF0pIHtcbiAgICByZXR1cm4gY3VyVmFsdWU7XG4gIH1cblxuICBjdXJVbml0ICE9PSBcInB4XCIgJiYgIXRvUGl4ZWxzICYmIChjdXJWYWx1ZSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBcInB4XCIpKTtcbiAgaXNTVkcgPSB0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpO1xuXG4gIGlmICgodG9QZXJjZW50IHx8IGN1clVuaXQgPT09IFwiJVwiKSAmJiAoX3RyYW5zZm9ybVByb3BzW3Byb3BlcnR5XSB8fCB+cHJvcGVydHkuaW5kZXhPZihcImFkaXVzXCIpKSkge1xuICAgIHB4ID0gaXNTVkcgPyB0YXJnZXQuZ2V0QkJveCgpW2hvcml6b250YWwgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiXSA6IHRhcmdldFttZWFzdXJlUHJvcGVydHldO1xuICAgIHJldHVybiBfcm91bmQodG9QZXJjZW50ID8gY3VyVmFsdWUgLyBweCAqIGFtb3VudCA6IGN1clZhbHVlIC8gMTAwICogcHgpO1xuICB9XG5cbiAgc3R5bGVbaG9yaXpvbnRhbCA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdID0gYW1vdW50ICsgKHRvUGl4ZWxzID8gY3VyVW5pdCA6IHVuaXQpO1xuICBwYXJlbnQgPSB+cHJvcGVydHkuaW5kZXhPZihcImFkaXVzXCIpIHx8IHVuaXQgPT09IFwiZW1cIiAmJiB0YXJnZXQuYXBwZW5kQ2hpbGQgJiYgIWlzUm9vdFNWRyA/IHRhcmdldCA6IHRhcmdldC5wYXJlbnROb2RlO1xuXG4gIGlmIChpc1NWRykge1xuICAgIHBhcmVudCA9ICh0YXJnZXQub3duZXJTVkdFbGVtZW50IHx8IHt9KS5wYXJlbnROb2RlO1xuICB9XG5cbiAgaWYgKCFwYXJlbnQgfHwgcGFyZW50ID09PSBfZG9jIHx8ICFwYXJlbnQuYXBwZW5kQ2hpbGQpIHtcbiAgICBwYXJlbnQgPSBfZG9jLmJvZHk7XG4gIH1cblxuICBjYWNoZSA9IHBhcmVudC5fZ3NhcDtcblxuICBpZiAoY2FjaGUgJiYgdG9QZXJjZW50ICYmIGNhY2hlLndpZHRoICYmIGhvcml6b250YWwgJiYgY2FjaGUudGltZSA9PT0gX3RpY2tlci50aW1lICYmICFjYWNoZS51bmNhY2hlKSB7XG4gICAgcmV0dXJuIF9yb3VuZChjdXJWYWx1ZSAvIGNhY2hlLndpZHRoICogYW1vdW50KTtcbiAgfSBlbHNlIHtcbiAgICAodG9QZXJjZW50IHx8IGN1clVuaXQgPT09IFwiJVwiKSAmJiAhX25vblN0YW5kYXJkTGF5b3V0c1tfZ2V0Q29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQsIFwiZGlzcGxheVwiKV0gJiYgKHN0eWxlLnBvc2l0aW9uID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBcInBvc2l0aW9uXCIpKTtcbiAgICBwYXJlbnQgPT09IHRhcmdldCAmJiAoc3R5bGUucG9zaXRpb24gPSBcInN0YXRpY1wiKTsgLy8gbGlrZSBmb3IgYm9yZGVyUmFkaXVzLCBpZiBpdCdzIGEgJSB3ZSBtdXN0IGhhdmUgaXQgcmVsYXRpdmUgdG8gdGhlIHRhcmdldCBpdHNlbGYgYnV0IHRoYXQgbWF5IG5vdCBoYXZlIHBvc2l0aW9uOiByZWxhdGl2ZSBvciBwb3NpdGlvbjogYWJzb2x1dGUgaW4gd2hpY2ggY2FzZSBpdCdkIGdvIHVwIHRoZSBjaGFpbiB1bnRpbCBpdCBmaW5kcyBpdHMgb2Zmc2V0UGFyZW50IChiYWQpLiBwb3NpdGlvbjogc3RhdGljIHByb3RlY3RzIGFnYWluc3QgdGhhdC5cblxuICAgIHBhcmVudC5hcHBlbmRDaGlsZChfdGVtcERpdik7XG4gICAgcHggPSBfdGVtcERpdlttZWFzdXJlUHJvcGVydHldO1xuICAgIHBhcmVudC5yZW1vdmVDaGlsZChfdGVtcERpdik7XG4gICAgc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cbiAgICBpZiAoaG9yaXpvbnRhbCAmJiB0b1BlcmNlbnQpIHtcbiAgICAgIGNhY2hlID0gX2dldENhY2hlKHBhcmVudCk7XG4gICAgICBjYWNoZS50aW1lID0gX3RpY2tlci50aW1lO1xuICAgICAgY2FjaGUud2lkdGggPSBwYXJlbnRbbWVhc3VyZVByb3BlcnR5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX3JvdW5kKHRvUGl4ZWxzID8gcHggKiBjdXJWYWx1ZSAvIGFtb3VudCA6IHB4ICYmIGN1clZhbHVlID8gYW1vdW50IC8gcHggKiBjdXJWYWx1ZSA6IDApO1xufSxcbiAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gIHZhciB2YWx1ZTtcbiAgX3BsdWdpbkluaXR0ZWQgfHwgX2luaXRDb3JlKCk7XG5cbiAgaWYgKHByb3BlcnR5IGluIF9wcm9wZXJ0eUFsaWFzZXMgJiYgcHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICBwcm9wZXJ0eSA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuXG4gICAgaWYgKH5wcm9wZXJ0eS5pbmRleE9mKFwiLFwiKSkge1xuICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0eS5zcGxpdChcIixcIilbMF07XG4gICAgfVxuICB9XG5cbiAgaWYgKF90cmFuc2Zvcm1Qcm9wc1twcm9wZXJ0eV0gJiYgcHJvcGVydHkgIT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICB2YWx1ZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHVuY2FjaGUpO1xuICAgIHZhbHVlID0gcHJvcGVydHkgIT09IFwidHJhbnNmb3JtT3JpZ2luXCIgPyB2YWx1ZVtwcm9wZXJ0eV0gOiB2YWx1ZS5zdmcgPyB2YWx1ZS5vcmlnaW4gOiBfZmlyc3RUd29Pbmx5KF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApKSArIFwiIFwiICsgdmFsdWUuek9yaWdpbiArIFwicHhcIjtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IHRhcmdldC5zdHlsZVtwcm9wZXJ0eV07XG5cbiAgICBpZiAoIXZhbHVlIHx8IHZhbHVlID09PSBcImF1dG9cIiB8fCB1bmNhY2hlIHx8IH4odmFsdWUgKyBcIlwiKS5pbmRleE9mKFwiY2FsYyhcIikpIHtcbiAgICAgIHZhbHVlID0gX3NwZWNpYWxQcm9wc1twcm9wZXJ0eV0gJiYgX3NwZWNpYWxQcm9wc1twcm9wZXJ0eV0odGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCkgfHwgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkgfHwgX2dldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IChwcm9wZXJ0eSA9PT0gXCJvcGFjaXR5XCIgPyAxIDogMCk7IC8vIG5vdGU6IHNvbWUgYnJvd3NlcnMsIGxpa2UgRmlyZWZveCwgZG9uJ3QgcmVwb3J0IGJvcmRlclJhZGl1cyBjb3JyZWN0bHkhIEluc3RlYWQsIGl0IG9ubHkgcmVwb3J0cyBldmVyeSBjb3JuZXIgbGlrZSAgYm9yZGVyVG9wTGVmdFJhZGl1c1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bml0ICYmICF+KHZhbHVlICsgXCJcIikudHJpbSgpLmluZGV4T2YoXCIgXCIpID8gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpICsgdW5pdCA6IHZhbHVlO1xufSxcbiAgICBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nID0gZnVuY3Rpb24gX3R3ZWVuQ29tcGxleENTU1N0cmluZyh0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQpIHtcbiAgLy8gbm90ZTogd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA9PT0gXCJub25lXCIpIHtcbiAgICAvLyBzb21lIGJyb3dzZXJzIGxpa2UgU2FmYXJpIGFjdHVhbGx5IFBSRUZFUiB0aGUgcHJlZml4ZWQgcHJvcGVydHkgYW5kIG1pcy1yZXBvcnQgdGhlIHVucHJlZml4ZWQgdmFsdWUgbGlrZSBjbGlwUGF0aCAoQlVHKS4gSW4gb3RoZXIgd29yZHMsIGV2ZW4gdGhvdWdoIGNsaXBQYXRoIGV4aXN0cyBpbiB0aGUgc3R5bGUgKFwiY2xpcFBhdGhcIiBpbiB0YXJnZXQuc3R5bGUpIGFuZCBpdCdzIHNldCBpbiB0aGUgQ1NTIHByb3Blcmx5IChhbG9uZyB3aXRoIC13ZWJraXQtY2xpcC1wYXRoKSwgU2FmYXJpIHJlcG9ydHMgY2xpcFBhdGggYXMgXCJub25lXCIgd2hlcmVhcyBXZWJraXRDbGlwUGF0aCByZXBvcnRzIGFjY3VyYXRlbHkgbGlrZSBcImVsbGlwc2UoMTAwJSAwJSBhdCA1MCUgMCUpXCIsIHNvIGluIHRoaXMgY2FzZSB3ZSBtdXN0IFNXSVRDSCB0byB1c2luZyB0aGUgcHJlZml4ZWQgcHJvcGVydHkgaW5zdGVhZC4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMTgzMTAtY2xpcHBhdGgtZG9lc250LXdvcmstb24taW9zL1xuICAgIHZhciBwID0gX2NoZWNrUHJvcFByZWZpeChwcm9wLCB0YXJnZXQsIDEpLFxuICAgICAgICBzID0gcCAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHAsIDEpO1xuXG4gICAgaWYgKHMgJiYgcyAhPT0gc3RhcnQpIHtcbiAgICAgIHByb3AgPSBwO1xuICAgICAgc3RhcnQgPSBzO1xuICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gXCJib3JkZXJDb2xvclwiKSB7XG4gICAgICBzdGFydCA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgXCJib3JkZXJUb3BDb2xvclwiKTsgLy8gRmlyZWZveCBidWc6IGFsd2F5cyByZXBvcnRzIFwiYm9yZGVyQ29sb3JcIiBhcyBcIlwiLCBzbyB3ZSBtdXN0IGZhbGwgYmFjayB0byBib3JkZXJUb3BDb2xvci4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjQ1ODMtaG93LXRvLXJldHVybi1jb2xvcnMtdGhhdC1pLWhhZC1hZnRlci1yZXZlcnNlL1xuICAgIH1cbiAgfVxuXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldC5zdHlsZSwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcpLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgbWF0Y2hJbmRleCA9IDAsXG4gICAgICBhLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhcnRWYWx1ZXMsXG4gICAgICBzdGFydE51bSxcbiAgICAgIGNvbG9yLFxuICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgIGVuZFZhbHVlLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBlbmRVbml0LFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVmFsdWVzO1xuICBwdC5iID0gc3RhcnQ7XG4gIHB0LmUgPSBlbmQ7XG4gIHN0YXJ0ICs9IFwiXCI7IC8vIGVuc3VyZSB2YWx1ZXMgYXJlIHN0cmluZ3NcblxuICBlbmQgKz0gXCJcIjtcblxuICBpZiAoZW5kID09PSBcImF1dG9cIikge1xuICAgIHRhcmdldC5zdHlsZVtwcm9wXSA9IGVuZDtcbiAgICBlbmQgPSBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHByb3ApIHx8IGVuZDtcbiAgICB0YXJnZXQuc3R5bGVbcHJvcF0gPSBzdGFydDtcbiAgfVxuXG4gIGEgPSBbc3RhcnQsIGVuZF07XG5cbiAgX2NvbG9yU3RyaW5nRmlsdGVyKGEpOyAvLyBwYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLiBJZiBjb2xvcnMgYXJlIGZvdW5kLCBpdCByZXR1cm5zIHRydWUgYW5kIHRoZW4gd2UgbXVzdCBtYXRjaCB3aGVyZSB0aGUgY29sb3Igc2hvd3MgdXAgb3JkZXItd2lzZSBiZWNhdXNlIGZvciB0aGluZ3MgbGlrZSBib3hTaGFkb3csIHNvbWV0aW1lcyB0aGUgYnJvd3NlciBwcm92aWRlcyB0aGUgY29tcHV0ZWQgdmFsdWVzIHdpdGggdGhlIGNvbG9yIEZJUlNULCBidXQgdGhlIHVzZXIgcHJvdmlkZXMgaXQgd2l0aCB0aGUgY29sb3IgTEFTVCwgc28gZmxpcCB0aGVtIGlmIG5lY2Vzc2FyeS4gU2FtZSBmb3IgZHJvcC1zaGFkb3coKS5cblxuXG4gIHN0YXJ0ID0gYVswXTtcbiAgZW5kID0gYVsxXTtcbiAgc3RhcnRWYWx1ZXMgPSBzdGFydC5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICBlbmRWYWx1ZXMgPSBlbmQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcblxuICBpZiAoZW5kVmFsdWVzLmxlbmd0aCkge1xuICAgIHdoaWxlIChyZXN1bHQgPSBfbnVtV2l0aFVuaXRFeHAuZXhlYyhlbmQpKSB7XG4gICAgICBlbmRWYWx1ZSA9IHJlc3VsdFswXTtcbiAgICAgIGNodW5rID0gZW5kLnN1YnN0cmluZyhpbmRleCwgcmVzdWx0LmluZGV4KTtcblxuICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgICAgfSBlbHNlIGlmIChjaHVuay5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIgfHwgY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJoc2xhKFwiKSB7XG4gICAgICAgIGNvbG9yID0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZFZhbHVlICE9PSAoc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWVzW21hdGNoSW5kZXgrK10gfHwgXCJcIikpIHtcbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpIHx8IDA7XG4gICAgICAgIHN0YXJ0VW5pdCA9IHN0YXJ0VmFsdWUuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgIGVuZFZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgJiYgKGVuZFZhbHVlID0gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZFZhbHVlKSArIHN0YXJ0VW5pdCk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgICBlbmRVbml0ID0gZW5kVmFsdWUuc3Vic3RyKChlbmROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBpbmRleCA9IF9udW1XaXRoVW5pdEV4cC5sYXN0SW5kZXggLSBlbmRVbml0Lmxlbmd0aDtcblxuICAgICAgICBpZiAoIWVuZFVuaXQpIHtcbiAgICAgICAgICAvL2lmIHNvbWV0aGluZyBsaWtlIFwicGVyc3BlY3RpdmU6MzAwXCIgaXMgcGFzc2VkIGluIGFuZCB3ZSBtdXN0IGFkZCBhIHVuaXQgdG8gdGhlIGVuZFxuICAgICAgICAgIGVuZFVuaXQgPSBlbmRVbml0IHx8IF9jb25maWcudW5pdHNbcHJvcF0gfHwgc3RhcnRVbml0O1xuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSBlbmQubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbmQgKz0gZW5kVW5pdDtcbiAgICAgICAgICAgIHB0LmUgKz0gZW5kVW5pdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0KSB7XG4gICAgICAgICAgc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3AsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIHx8IDA7XG4gICAgICAgIH0gLy8gdGhlc2UgbmVzdGVkIFByb3BUd2VlbnMgYXJlIGhhbmRsZWQgaW4gYSBzcGVjaWFsIHdheSAtIHdlJ2xsIG5ldmVyIGFjdHVhbGx5IGNhbGwgYSByZW5kZXIgb3Igc2V0dGVyIG1ldGhvZCBvbiB0aGVtLiBXZSdsbCBqdXN0IGxvb3AgdGhyb3VnaCB0aGVtIGluIHRoZSBwYXJlbnQgY29tcGxleCBzdHJpbmcgUHJvcFR3ZWVuJ3MgcmVuZGVyIG1ldGhvZC5cblxuXG4gICAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgICBfbmV4dDogcHQuX3B0LFxuICAgICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAgIC8vbm90ZTogU1ZHIHNwZWMgYWxsb3dzIG9taXNzaW9uIG9mIGNvbW1hL3NwYWNlIHdoZW4gYSBuZWdhdGl2ZSBzaWduIGlzIHdlZGdlZCBiZXR3ZWVuIHR3byBudW1iZXJzLCBsaWtlIDIuNS01LjMgaW5zdGVhZCBvZiAyLjUsLTUuMyBidXQgd2hlbiB0d2VlbmluZywgdGhlIG5lZ2F0aXZlIHZhbHVlIG1heSBzd2l0Y2ggdG8gcG9zaXRpdmUsIHNvIHdlIGluc2VydCB0aGUgY29tbWEganVzdCBpbiBjYXNlLlxuICAgICAgICAgIHM6IHN0YXJ0TnVtLFxuICAgICAgICAgIGM6IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgICAgIG06IGNvbG9yICYmIGNvbG9yIDwgNCB8fCBwcm9wID09PSBcInpJbmRleFwiID8gTWF0aC5yb3VuZCA6IDBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdC5jID0gaW5kZXggPCBlbmQubGVuZ3RoID8gZW5kLnN1YnN0cmluZyhpbmRleCwgZW5kLmxlbmd0aCkgOiBcIlwiOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgcGFydCBvZiB0aGUgc3RyaW5nIChhZnRlciB0aGUgbGFzdCBudW1iZXIpXG4gIH0gZWxzZSB7XG4gICAgcHQuciA9IHByb3AgPT09IFwiZGlzcGxheVwiICYmIGVuZCA9PT0gXCJub25lXCIgPyBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA6IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlO1xuICB9XG5cbiAgX3JlbEV4cC50ZXN0KGVuZCkgJiYgKHB0LmUgPSAwKTsgLy9pZiB0aGUgZW5kIHN0cmluZyBjb250YWlucyByZWxhdGl2ZSB2YWx1ZXMgb3IgZHluYW1pYyByYW5kb20oLi4uKSB2YWx1ZXMsIGRlbGV0ZSB0aGUgZW5kIGl0IHNvIHRoYXQgb24gdGhlIGZpbmFsIHJlbmRlciB3ZSBkb24ndCBhY3R1YWxseSBzZXQgaXQgdG8gdGhlIHN0cmluZyB3aXRoICs9IG9yIC09IGNoYXJhY3RlcnMgKGZvcmNlcyBpdCB0byB1c2UgdGhlIGNhbGN1bGF0ZWQgdmFsdWUpLlxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhbm90aGVyIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9rZXl3b3JkVG9QZXJjZW50ID0ge1xuICB0b3A6IFwiMCVcIixcbiAgYm90dG9tOiBcIjEwMCVcIixcbiAgbGVmdDogXCIwJVwiLFxuICByaWdodDogXCIxMDAlXCIsXG4gIGNlbnRlcjogXCI1MCVcIlxufSxcbiAgICBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyA9IGZ1bmN0aW9uIF9jb252ZXJ0S2V5d29yZHNUb1BlcmNlbnRhZ2VzKHZhbHVlKSB7XG4gIHZhciBzcGxpdCA9IHZhbHVlLnNwbGl0KFwiIFwiKSxcbiAgICAgIHggPSBzcGxpdFswXSxcbiAgICAgIHkgPSBzcGxpdFsxXSB8fCBcIjUwJVwiO1xuXG4gIGlmICh4ID09PSBcInRvcFwiIHx8IHggPT09IFwiYm90dG9tXCIgfHwgeSA9PT0gXCJsZWZ0XCIgfHwgeSA9PT0gXCJyaWdodFwiKSB7XG4gICAgLy90aGUgdXNlciBwcm92aWRlZCB0aGVtIGluIHRoZSB3cm9uZyBvcmRlciwgc28gZmxpcCB0aGVtXG4gICAgdmFsdWUgPSB4O1xuICAgIHggPSB5O1xuICAgIHkgPSB2YWx1ZTtcbiAgfVxuXG4gIHNwbGl0WzBdID0gX2tleXdvcmRUb1BlcmNlbnRbeF0gfHwgeDtcbiAgc3BsaXRbMV0gPSBfa2V5d29yZFRvUGVyY2VudFt5XSB8fCB5O1xuICByZXR1cm4gc3BsaXQuam9pbihcIiBcIik7XG59LFxuICAgIF9yZW5kZXJDbGVhclByb3BzID0gZnVuY3Rpb24gX3JlbmRlckNsZWFyUHJvcHMocmF0aW8sIGRhdGEpIHtcbiAgaWYgKGRhdGEudHdlZW4gJiYgZGF0YS50d2Vlbi5fdGltZSA9PT0gZGF0YS50d2Vlbi5fZHVyKSB7XG4gICAgdmFyIHRhcmdldCA9IGRhdGEudCxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIHByb3BzID0gZGF0YS51LFxuICAgICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgICAgcHJvcCxcbiAgICAgICAgY2xlYXJUcmFuc2Zvcm1zLFxuICAgICAgICBpO1xuXG4gICAgaWYgKHByb3BzID09PSBcImFsbFwiIHx8IHByb3BzID09PSB0cnVlKSB7XG4gICAgICBzdHlsZS5jc3NUZXh0ID0gXCJcIjtcbiAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzID0gcHJvcHMuc3BsaXQoXCIsXCIpO1xuICAgICAgaSA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICAgIHByb3AgPSBwcm9wc1tpXTtcblxuICAgICAgICBpZiAoX3RyYW5zZm9ybVByb3BzW3Byb3BdKSB7XG4gICAgICAgICAgY2xlYXJUcmFuc2Zvcm1zID0gMTtcbiAgICAgICAgICBwcm9wID0gcHJvcCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIiA/IF90cmFuc2Zvcm1PcmlnaW5Qcm9wIDogX3RyYW5zZm9ybVByb3A7XG4gICAgICAgIH1cblxuICAgICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xlYXJUcmFuc2Zvcm1zKSB7XG4gICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICBjYWNoZS5zdmcgJiYgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcblxuICAgICAgICBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTsgLy8gZm9yY2UgYWxsIHRoZSBjYWNoZWQgdmFsdWVzIGJhY2sgdG8gXCJub3JtYWxcIi9pZGVudGl0eSwgb3RoZXJ3aXNlIGlmIHRoZXJlJ3MgYW5vdGhlciB0d2VlbiB0aGF0J3MgYWxyZWFkeSBzZXQgdG8gcmVuZGVyIHRyYW5zZm9ybXMgb24gdGhpcyBlbGVtZW50LCBpdCBjb3VsZCBkaXNwbGF5IHRoZSB3cm9uZyB2YWx1ZXMuXG5cblxuICAgICAgICBjYWNoZS51bmNhY2hlID0gMTtcblxuICAgICAgICBfcmVtb3ZlSW5kZXBlbmRlbnRUcmFuc2Zvcm1zKHN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgLy8gbm90ZTogc3BlY2lhbFByb3BzIHNob3VsZCByZXR1cm4gMSBpZiAoYW5kIG9ubHkgaWYpIHRoZXkgaGF2ZSBhIG5vbi16ZXJvIHByaW9yaXR5LiBJdCBpbmRpY2F0ZXMgd2UgbmVlZCB0byBzb3J0IHRoZSBsaW5rZWQgbGlzdC5cbl9zcGVjaWFsUHJvcHMgPSB7XG4gIGNsZWFyUHJvcHM6IGZ1bmN0aW9uIGNsZWFyUHJvcHMocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBlbmRWYWx1ZSwgdHdlZW4pIHtcbiAgICBpZiAodHdlZW4uZGF0YSAhPT0gXCJpc0Zyb21TdGFydFwiKSB7XG4gICAgICB2YXIgcHQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAwLCBfcmVuZGVyQ2xlYXJQcm9wcyk7XG4gICAgICBwdC51ID0gZW5kVmFsdWU7XG4gICAgICBwdC5wciA9IC0xMDtcbiAgICAgIHB0LnR3ZWVuID0gdHdlZW47XG5cbiAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxuICAvKiBjbGFzc05hbWUgZmVhdHVyZSAoYWJvdXQgMC40a2IgZ3ppcHBlZCkuXG4gICwgY2xhc3NOYW1lKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gIFx0bGV0IF9yZW5kZXJDbGFzc05hbWUgPSAocmF0aW8sIGRhdGEpID0+IHtcbiAgXHRcdFx0ZGF0YS5jc3MucmVuZGVyKHJhdGlvLCBkYXRhLmNzcyk7XG4gIFx0XHRcdGlmICghcmF0aW8gfHwgcmF0aW8gPT09IDEpIHtcbiAgXHRcdFx0XHRsZXQgaW5saW5lID0gZGF0YS5ybXYsXG4gIFx0XHRcdFx0XHR0YXJnZXQgPSBkYXRhLnQsXG4gIFx0XHRcdFx0XHRwO1xuICBcdFx0XHRcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCByYXRpbyA/IGRhdGEuZSA6IGRhdGEuYik7XG4gIFx0XHRcdFx0Zm9yIChwIGluIGlubGluZSkge1xuICBcdFx0XHRcdFx0X3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcCk7XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHR9LFxuICBcdFx0X2dldEFsbFN0eWxlcyA9ICh0YXJnZXQpID0+IHtcbiAgXHRcdFx0bGV0IHN0eWxlcyA9IHt9LFxuICBcdFx0XHRcdGNvbXB1dGVkID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLFxuICBcdFx0XHRcdHA7XG4gIFx0XHRcdGZvciAocCBpbiBjb21wdXRlZCkge1xuICBcdFx0XHRcdGlmIChpc05hTihwKSAmJiBwICE9PSBcImNzc1RleHRcIiAmJiBwICE9PSBcImxlbmd0aFwiKSB7XG4gIFx0XHRcdFx0XHRzdHlsZXNbcF0gPSBjb21wdXRlZFtwXTtcbiAgXHRcdFx0XHR9XG4gIFx0XHRcdH1cbiAgXHRcdFx0X3NldERlZmF1bHRzKHN0eWxlcywgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSkpO1xuICBcdFx0XHRyZXR1cm4gc3R5bGVzO1xuICBcdFx0fSxcbiAgXHRcdHN0YXJ0Q2xhc3NMaXN0ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpLFxuICBcdFx0c3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gIFx0XHRjc3NUZXh0ID0gc3R5bGUuY3NzVGV4dCxcbiAgXHRcdGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICBcdFx0Y2xhc3NQVCA9IGNhY2hlLmNsYXNzUFQsXG4gIFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kID0ge30sXG4gIFx0XHRkYXRhID0ge3Q6dGFyZ2V0LCBwbHVnaW46cGx1Z2luLCBybXY6aW5saW5lVG9SZW1vdmVBdEVuZCwgYjpzdGFydENsYXNzTGlzdCwgZTooZW5kVmFsdWUuY2hhckF0KDEpICE9PSBcIj1cIikgPyBlbmRWYWx1ZSA6IHN0YXJ0Q2xhc3NMaXN0LnJlcGxhY2UobmV3IFJlZ0V4cChcIig/OlxcXFxzfF4pXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgKyBcIig/IVtcXFxcdy1dKVwiKSwgXCJcIikgKyAoKGVuZFZhbHVlLmNoYXJBdCgwKSA9PT0gXCIrXCIpID8gXCIgXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgOiBcIlwiKX0sXG4gIFx0XHRjaGFuZ2luZ1ZhcnMgPSB7fSxcbiAgXHRcdHN0YXJ0VmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0KSxcbiAgXHRcdHRyYW5zZm9ybVJlbGF0ZWQgPSAvKHRyYW5zZm9ybXxwZXJzcGVjdGl2ZSkvaSxcbiAgXHRcdGVuZFZhcnMsIHA7XG4gIFx0aWYgKGNsYXNzUFQpIHtcbiAgXHRcdGNsYXNzUFQucigxLCBjbGFzc1BULmQpO1xuICBcdFx0X3JlbW92ZUxpbmtlZExpc3RJdGVtKGNsYXNzUFQuZC5wbHVnaW4sIGNsYXNzUFQsIFwiX3B0XCIpO1xuICBcdH1cbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgZGF0YS5lKTtcbiAgXHRlbmRWYXJzID0gX2dldEFsbFN0eWxlcyh0YXJnZXQsIHRydWUpO1xuICBcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBzdGFydENsYXNzTGlzdCk7XG4gIFx0Zm9yIChwIGluIGVuZFZhcnMpIHtcbiAgXHRcdGlmIChlbmRWYXJzW3BdICE9PSBzdGFydFZhcnNbcF0gJiYgIXRyYW5zZm9ybVJlbGF0ZWQudGVzdChwKSkge1xuICBcdFx0XHRjaGFuZ2luZ1ZhcnNbcF0gPSBlbmRWYXJzW3BdO1xuICBcdFx0XHRpZiAoIXN0eWxlW3BdICYmIHN0eWxlW3BdICE9PSBcIjBcIikge1xuICBcdFx0XHRcdGlubGluZVRvUmVtb3ZlQXRFbmRbcF0gPSAxO1xuICBcdFx0XHR9XG4gIFx0XHR9XG4gIFx0fVxuICBcdGNhY2hlLmNsYXNzUFQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIFwiY2xhc3NOYW1lXCIsIDAsIDAsIF9yZW5kZXJDbGFzc05hbWUsIGRhdGEsIDAsIC0xMSk7XG4gIFx0aWYgKHN0eWxlLmNzc1RleHQgIT09IGNzc1RleHQpIHsgLy9vbmx5IGFwcGx5IGlmIHRoaW5ncyBjaGFuZ2UuIE90aGVyd2lzZSwgaW4gY2FzZXMgbGlrZSBhIGJhY2tncm91bmQtaW1hZ2UgdGhhdCdzIHB1bGxlZCBkeW5hbWljYWxseSwgaXQgY291bGQgY2F1c2UgYSByZWZyZXNoLiBTZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMDM2OC1wb3NzaWJsZS1nc2FwLWJ1Zy1zd2l0Y2hpbmctY2xhc3NuYW1lcy1pbi1jaHJvbWUvLlxuICBcdFx0c3R5bGUuY3NzVGV4dCA9IGNzc1RleHQ7IC8vd2UgcmVjb3JkZWQgY3NzVGV4dCBiZWZvcmUgd2Ugc3dhcHBlZCBjbGFzc2VzIGFuZCByYW4gX2dldEFsbFN0eWxlcygpIGJlY2F1c2UgaW4gY2FzZXMgd2hlbiBhIGNsYXNzTmFtZSB0d2VlbiBpcyBvdmVyd3JpdHRlbiwgd2UgcmVtb3ZlIGFsbCB0aGUgcmVsYXRlZCB0d2VlbmluZyBwcm9wZXJ0aWVzIGZyb20gdGhhdCBjbGFzcyBjaGFuZ2UgKG90aGVyd2lzZSBjbGFzcy1zcGVjaWZpYyBzdHVmZiBjYW4ndCBvdmVycmlkZSBwcm9wZXJ0aWVzIHdlJ3ZlIGRpcmVjdGx5IHNldCBvbiB0aGUgdGFyZ2V0J3Mgc3R5bGUgb2JqZWN0IGR1ZSB0byBzcGVjaWZpY2l0eSkuXG4gIFx0fVxuICBcdF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHRydWUpOyAvL3RvIGNsZWFyIHRoZSBjYWNoaW5nIG9mIHRyYW5zZm9ybXNcbiAgXHRkYXRhLmNzcyA9IG5ldyBnc2FwLnBsdWdpbnMuY3NzKCk7XG4gIFx0ZGF0YS5jc3MuaW5pdCh0YXJnZXQsIGNoYW5naW5nVmFycywgdHdlZW4pO1xuICBcdHBsdWdpbi5fcHJvcHMucHVzaCguLi5kYXRhLmNzcy5fcHJvcHMpO1xuICBcdHJldHVybiAxO1xuICB9XG4gICovXG5cbn0sXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVFJBTlNGT1JNU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuX2lkZW50aXR5MkRNYXRyaXggPSBbMSwgMCwgMCwgMSwgMCwgMF0sXG4gICAgX3JvdGF0aW9uYWxQcm9wZXJ0aWVzID0ge30sXG4gICAgX2lzTnVsbFRyYW5zZm9ybSA9IGZ1bmN0aW9uIF9pc051bGxUcmFuc2Zvcm0odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBcIm1hdHJpeCgxLCAwLCAwLCAxLCAwLCAwKVwiIHx8IHZhbHVlID09PSBcIm5vbmVcIiB8fCAhdmFsdWU7XG59LFxuICAgIF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCkge1xuICB2YXIgbWF0cml4U3RyaW5nID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgcmV0dXJuIF9pc051bGxUcmFuc2Zvcm0obWF0cml4U3RyaW5nKSA/IF9pZGVudGl0eTJETWF0cml4IDogbWF0cml4U3RyaW5nLnN1YnN0cig3KS5tYXRjaChfbnVtRXhwKS5tYXAoX3JvdW5kKTtcbn0sXG4gICAgX2dldE1hdHJpeCA9IGZ1bmN0aW9uIF9nZXRNYXRyaXgodGFyZ2V0LCBmb3JjZTJEKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCB8fCBfZ2V0Q2FjaGUodGFyZ2V0KSxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgbWF0cml4ID0gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpLFxuICAgICAgcGFyZW50LFxuICAgICAgbmV4dFNpYmxpbmcsXG4gICAgICB0ZW1wLFxuICAgICAgYWRkZWRUb0RPTTtcblxuICBpZiAoY2FjaGUuc3ZnICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIikpIHtcbiAgICB0ZW1wID0gdGFyZ2V0LnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkubWF0cml4OyAvL2Vuc3VyZXMgdGhhdCBldmVuIGNvbXBsZXggdmFsdWVzIGxpa2UgXCJ0cmFuc2xhdGUoNTAsNjApIHJvdGF0ZSgxMzUsMCwwKVwiIGFyZSBwYXJzZWQgYmVjYXVzZSBpdCBtYXNoZXMgaXQgaW50byBhIG1hdHJpeC5cblxuICAgIG1hdHJpeCA9IFt0ZW1wLmEsIHRlbXAuYiwgdGVtcC5jLCB0ZW1wLmQsIHRlbXAuZSwgdGVtcC5mXTtcbiAgICByZXR1cm4gbWF0cml4LmpvaW4oXCIsXCIpID09PSBcIjEsMCwwLDEsMCwwXCIgPyBfaWRlbnRpdHkyRE1hdHJpeCA6IG1hdHJpeDtcbiAgfSBlbHNlIGlmIChtYXRyaXggPT09IF9pZGVudGl0eTJETWF0cml4ICYmICF0YXJnZXQub2Zmc2V0UGFyZW50ICYmIHRhcmdldCAhPT0gX2RvY0VsZW1lbnQgJiYgIWNhY2hlLnN2Zykge1xuICAgIC8vbm90ZTogaWYgb2Zmc2V0UGFyZW50IGlzIG51bGwsIHRoYXQgbWVhbnMgdGhlIGVsZW1lbnQgaXNuJ3QgaW4gdGhlIG5vcm1hbCBkb2N1bWVudCBmbG93LCBsaWtlIGlmIGl0IGhhcyBkaXNwbGF5Om5vbmUgb3Igb25lIG9mIGl0cyBhbmNlc3RvcnMgaGFzIGRpc3BsYXk6bm9uZSkuIEZpcmVmb3ggcmV0dXJucyBudWxsIGZvciBnZXRDb21wdXRlZFN0eWxlKCkgaWYgdGhlIGVsZW1lbnQgaXMgaW4gYW4gaWZyYW1lIHRoYXQgaGFzIGRpc3BsYXk6bm9uZS4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTQ4Mzk3XG4gICAgLy9icm93c2VycyBkb24ndCByZXBvcnQgdHJhbnNmb3JtcyBhY2N1cmF0ZWx5IHVubGVzcyB0aGUgZWxlbWVudCBpcyBpbiB0aGUgRE9NIGFuZCBoYXMgYSBkaXNwbGF5IHZhbHVlIHRoYXQncyBub3QgXCJub25lXCIuIEZpcmVmb3ggYW5kIE1pY3Jvc29mdCBicm93c2VycyBoYXZlIGEgcGFydGlhbCBidWcgd2hlcmUgdGhleSdsbCByZXBvcnQgdHJhbnNmb3JtcyBldmVuIGlmIGRpc3BsYXk6bm9uZSBCVVQgbm90IGFueSBwZXJjZW50YWdlLWJhc2VkIHZhbHVlcyBsaWtlIHRyYW5zbGF0ZSgtNTAlLCA4cHgpIHdpbGwgYmUgcmVwb3J0ZWQgYXMgaWYgaXQncyB0cmFuc2xhdGUoMCwgOHB4KS5cbiAgICB0ZW1wID0gc3R5bGUuZGlzcGxheTtcbiAgICBzdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIHBhcmVudCA9IHRhcmdldC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKCFwYXJlbnQgfHwgIXRhcmdldC5vZmZzZXRQYXJlbnQpIHtcbiAgICAgIC8vIG5vdGU6IGluIDMuMy4wIHdlIHN3aXRjaGVkIHRhcmdldC5vZmZzZXRQYXJlbnQgdG8gX2RvYy5ib2R5LmNvbnRhaW5zKHRhcmdldCkgdG8gYXZvaWQgW3NvbWV0aW1lcyB1bm5lY2Vzc2FyeV0gTXV0YXRpb25PYnNlcnZlciBjYWxscyBidXQgdGhhdCB3YXNuJ3QgYWRlcXVhdGUgYmVjYXVzZSB0aGVyZSBhcmUgZWRnZSBjYXNlcyB3aGVyZSBuZXN0ZWQgcG9zaXRpb246IGZpeGVkIGVsZW1lbnRzIG5lZWQgdG8gZ2V0IHJlcGFyZW50ZWQgdG8gYWNjdXJhdGVseSBzZW5zZSB0cmFuc2Zvcm1zLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuc29jay9HU0FQL2lzc3Vlcy8zODggYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzc1XG4gICAgICBhZGRlZFRvRE9NID0gMTsgLy9mbGFnXG5cbiAgICAgIG5leHRTaWJsaW5nID0gdGFyZ2V0Lm5leHRFbGVtZW50U2libGluZztcblxuICAgICAgX2RvY0VsZW1lbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KTsgLy93ZSBtdXN0IGFkZCBpdCB0byB0aGUgRE9NIGluIG9yZGVyIHRvIGdldCB2YWx1ZXMgcHJvcGVybHlcblxuICAgIH1cblxuICAgIG1hdHJpeCA9IF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkodGFyZ2V0KTtcbiAgICB0ZW1wID8gc3R5bGUuZGlzcGxheSA9IHRlbXAgOiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBcImRpc3BsYXlcIik7XG5cbiAgICBpZiAoYWRkZWRUb0RPTSkge1xuICAgICAgbmV4dFNpYmxpbmcgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRhcmdldCwgbmV4dFNpYmxpbmcpIDogcGFyZW50ID8gcGFyZW50LmFwcGVuZENoaWxkKHRhcmdldCkgOiBfZG9jRWxlbWVudC5yZW1vdmVDaGlsZCh0YXJnZXQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmb3JjZTJEICYmIG1hdHJpeC5sZW5ndGggPiA2ID8gW21hdHJpeFswXSwgbWF0cml4WzFdLCBtYXRyaXhbNF0sIG1hdHJpeFs1XSwgbWF0cml4WzEyXSwgbWF0cml4WzEzXV0gOiBtYXRyaXg7XG59LFxuICAgIF9hcHBseVNWR09yaWdpbiA9IGZ1bmN0aW9uIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIG9yaWdpbiwgb3JpZ2luSXNBYnNvbHV0ZSwgc21vb3RoLCBtYXRyaXhBcnJheSwgcGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8pIHtcbiAgdmFyIGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICAgICAgbWF0cml4ID0gbWF0cml4QXJyYXkgfHwgX2dldE1hdHJpeCh0YXJnZXQsIHRydWUpLFxuICAgICAgeE9yaWdpbk9sZCA9IGNhY2hlLnhPcmlnaW4gfHwgMCxcbiAgICAgIHlPcmlnaW5PbGQgPSBjYWNoZS55T3JpZ2luIHx8IDAsXG4gICAgICB4T2Zmc2V0T2xkID0gY2FjaGUueE9mZnNldCB8fCAwLFxuICAgICAgeU9mZnNldE9sZCA9IGNhY2hlLnlPZmZzZXQgfHwgMCxcbiAgICAgIGEgPSBtYXRyaXhbMF0sXG4gICAgICBiID0gbWF0cml4WzFdLFxuICAgICAgYyA9IG1hdHJpeFsyXSxcbiAgICAgIGQgPSBtYXRyaXhbM10sXG4gICAgICB0eCA9IG1hdHJpeFs0XSxcbiAgICAgIHR5ID0gbWF0cml4WzVdLFxuICAgICAgb3JpZ2luU3BsaXQgPSBvcmlnaW4uc3BsaXQoXCIgXCIpLFxuICAgICAgeE9yaWdpbiA9IHBhcnNlRmxvYXQob3JpZ2luU3BsaXRbMF0pIHx8IDAsXG4gICAgICB5T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW5TcGxpdFsxXSkgfHwgMCxcbiAgICAgIGJvdW5kcyxcbiAgICAgIGRldGVybWluYW50LFxuICAgICAgeCxcbiAgICAgIHk7XG5cbiAgaWYgKCFvcmlnaW5Jc0Fic29sdXRlKSB7XG4gICAgYm91bmRzID0gX2dldEJCb3godGFyZ2V0KTtcbiAgICB4T3JpZ2luID0gYm91bmRzLnggKyAofm9yaWdpblNwbGl0WzBdLmluZGV4T2YoXCIlXCIpID8geE9yaWdpbiAvIDEwMCAqIGJvdW5kcy53aWR0aCA6IHhPcmlnaW4pO1xuICAgIHlPcmlnaW4gPSBib3VuZHMueSArICh+KG9yaWdpblNwbGl0WzFdIHx8IG9yaWdpblNwbGl0WzBdKS5pbmRleE9mKFwiJVwiKSA/IHlPcmlnaW4gLyAxMDAgKiBib3VuZHMuaGVpZ2h0IDogeU9yaWdpbik7XG4gIH0gZWxzZSBpZiAobWF0cml4ICE9PSBfaWRlbnRpdHkyRE1hdHJpeCAmJiAoZGV0ZXJtaW5hbnQgPSBhICogZCAtIGIgKiBjKSkge1xuICAgIC8vaWYgaXQncyB6ZXJvIChsaWtlIGlmIHNjYWxlWCBhbmQgc2NhbGVZIGFyZSB6ZXJvKSwgc2tpcCBpdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBkaXZpZGluZyBieSB6ZXJvLlxuICAgIHggPSB4T3JpZ2luICogKGQgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKC1jIC8gZGV0ZXJtaW5hbnQpICsgKGMgKiB0eSAtIGQgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICB5ID0geE9yaWdpbiAqICgtYiAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoYSAvIGRldGVybWluYW50KSAtIChhICogdHkgLSBiICogdHgpIC8gZGV0ZXJtaW5hbnQ7XG4gICAgeE9yaWdpbiA9IHg7XG4gICAgeU9yaWdpbiA9IHk7XG4gIH1cblxuICBpZiAoc21vb3RoIHx8IHNtb290aCAhPT0gZmFsc2UgJiYgY2FjaGUuc21vb3RoKSB7XG4gICAgdHggPSB4T3JpZ2luIC0geE9yaWdpbk9sZDtcbiAgICB0eSA9IHlPcmlnaW4gLSB5T3JpZ2luT2xkO1xuICAgIGNhY2hlLnhPZmZzZXQgPSB4T2Zmc2V0T2xkICsgKHR4ICogYSArIHR5ICogYykgLSB0eDtcbiAgICBjYWNoZS55T2Zmc2V0ID0geU9mZnNldE9sZCArICh0eCAqIGIgKyB0eSAqIGQpIC0gdHk7XG4gIH0gZWxzZSB7XG4gICAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICB9XG5cbiAgY2FjaGUueE9yaWdpbiA9IHhPcmlnaW47XG4gIGNhY2hlLnlPcmlnaW4gPSB5T3JpZ2luO1xuICBjYWNoZS5zbW9vdGggPSAhIXNtb290aDtcbiAgY2FjaGUub3JpZ2luID0gb3JpZ2luO1xuICBjYWNoZS5vcmlnaW5Jc0Fic29sdXRlID0gISFvcmlnaW5Jc0Fic29sdXRlO1xuICB0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gXCIwcHggMHB4XCI7IC8vb3RoZXJ3aXNlLCBpZiBzb21lb25lIHNldHMgIGFuIG9yaWdpbiB2aWEgQ1NTLCBpdCB3aWxsIGxpa2VseSBpbnRlcmZlcmUgd2l0aCB0aGUgU1ZHIHRyYW5zZm9ybSBhdHRyaWJ1dGUgb25lcyAoYmVjYXVzZSByZW1lbWJlciwgd2UncmUgYmFraW5nIHRoZSBvcmlnaW4gaW50byB0aGUgbWF0cml4KCkgdmFsdWUpLlxuXG4gIGlmIChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T3JpZ2luXCIsIHhPcmlnaW5PbGQsIHhPcmlnaW4pO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPcmlnaW5cIiwgeU9yaWdpbk9sZCwgeU9yaWdpbik7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieE9mZnNldFwiLCB4T2Zmc2V0T2xkLCBjYWNoZS54T2Zmc2V0KTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ5T2Zmc2V0XCIsIHlPZmZzZXRPbGQsIGNhY2hlLnlPZmZzZXQpO1xuICB9XG5cbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB4T3JpZ2luICsgXCIgXCIgKyB5T3JpZ2luKTtcbn0sXG4gICAgX3BhcnNlVHJhbnNmb3JtID0gZnVuY3Rpb24gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdW5jYWNoZSkge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAgfHwgbmV3IEdTQ2FjaGUodGFyZ2V0KTtcblxuICBpZiAoXCJ4XCIgaW4gY2FjaGUgJiYgIXVuY2FjaGUgJiYgIWNhY2hlLnVuY2FjaGUpIHtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cblxuICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICBpbnZlcnRlZFNjYWxlWCA9IGNhY2hlLnNjYWxlWCA8IDAsXG4gICAgICBweCA9IFwicHhcIixcbiAgICAgIGRlZyA9IFwiZGVnXCIsXG4gICAgICBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KSxcbiAgICAgIG9yaWdpbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApIHx8IFwiMFwiLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB6LFxuICAgICAgc2NhbGVYLFxuICAgICAgc2NhbGVZLFxuICAgICAgcm90YXRpb24sXG4gICAgICByb3RhdGlvblgsXG4gICAgICByb3RhdGlvblksXG4gICAgICBza2V3WCxcbiAgICAgIHNrZXdZLFxuICAgICAgcGVyc3BlY3RpdmUsXG4gICAgICB4T3JpZ2luLFxuICAgICAgeU9yaWdpbixcbiAgICAgIG1hdHJpeCxcbiAgICAgIGFuZ2xlLFxuICAgICAgY29zLFxuICAgICAgc2luLFxuICAgICAgYSxcbiAgICAgIGIsXG4gICAgICBjLFxuICAgICAgZCxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHQxLFxuICAgICAgdDIsXG4gICAgICB0MyxcbiAgICAgIGExMyxcbiAgICAgIGEyMyxcbiAgICAgIGEzMyxcbiAgICAgIGE0MixcbiAgICAgIGE0MyxcbiAgICAgIGEzMjtcbiAgeCA9IHkgPSB6ID0gcm90YXRpb24gPSByb3RhdGlvblggPSByb3RhdGlvblkgPSBza2V3WCA9IHNrZXdZID0gcGVyc3BlY3RpdmUgPSAwO1xuICBzY2FsZVggPSBzY2FsZVkgPSAxO1xuICBjYWNoZS5zdmcgPSAhISh0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpKTtcblxuICBpZiAoY3MudHJhbnNsYXRlKSB7XG4gICAgLy8gYWNjb21tb2RhdGUgaW5kZXBlbmRlbnQgdHJhbnNmb3JtcyBieSBjb21iaW5pbmcgdGhlbSBpbnRvIG5vcm1hbCBvbmVzLlxuICAgIGlmIChjcy50cmFuc2xhdGUgIT09IFwibm9uZVwiIHx8IGNzLnNjYWxlICE9PSBcIm5vbmVcIiB8fCBjcy5yb3RhdGUgIT09IFwibm9uZVwiKSB7XG4gICAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSAoY3MudHJhbnNsYXRlICE9PSBcIm5vbmVcIiA/IFwidHJhbnNsYXRlM2QoXCIgKyAoY3MudHJhbnNsYXRlICsgXCIgMCAwXCIpLnNwbGl0KFwiIFwiKS5zbGljZSgwLCAzKS5qb2luKFwiLCBcIikgKyBcIikgXCIgOiBcIlwiKSArIChjcy5yb3RhdGUgIT09IFwibm9uZVwiID8gXCJyb3RhdGUoXCIgKyBjcy5yb3RhdGUgKyBcIikgXCIgOiBcIlwiKSArIChjcy5zY2FsZSAhPT0gXCJub25lXCIgPyBcInNjYWxlKFwiICsgY3Muc2NhbGUuc3BsaXQoXCIgXCIpLmpvaW4oXCIsXCIpICsgXCIpIFwiIDogXCJcIikgKyBjc1tfdHJhbnNmb3JtUHJvcF07XG4gICAgfVxuXG4gICAgc3R5bGUuc2NhbGUgPSBzdHlsZS5yb3RhdGUgPSBzdHlsZS50cmFuc2xhdGUgPSBcIm5vbmVcIjtcbiAgfVxuXG4gIG1hdHJpeCA9IF9nZXRNYXRyaXgodGFyZ2V0LCBjYWNoZS5zdmcpO1xuXG4gIGlmIChjYWNoZS5zdmcpIHtcbiAgICB0MSA9ICghY2FjaGUudW5jYWNoZSB8fCBvcmlnaW4gPT09IFwiMHB4IDBweFwiKSAmJiAhdW5jYWNoZSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpOyAvLyBpZiBvcmlnaW4gaXMgMCwwIGFuZCBjYWNoZS51bmNhY2hlIGlzIHRydWUsIGxldCB0aGUgcmVjb3JkZWQgZGF0YS1zdmctb3JpZ2luIHN0YXkuIE90aGVyd2lzZSwgd2hlbmV2ZXIgd2Ugc2V0IGNhY2hlLnVuY2FjaGUgdG8gdHJ1ZSwgd2UnZCBuZWVkIHRvIHNldCBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IChjYWNoZS54T3JpZ2luIC0gYmJveC54KSArIFwicHggXCIgKyAoY2FjaGUueU9yaWdpbiAtIGJib3gueSkgKyBcInB4XCIuIFJlbWVtYmVyLCB0byB3b3JrIGFyb3VuZCBicm93c2VyIGluY29uc2lzdGVuY2llcyB3ZSBhbHdheXMgZm9yY2UgU1ZHIGVsZW1lbnRzJyB0cmFuc2Zvcm1PcmlnaW4gdG8gMCwwIGFuZCBvZmZzZXQgdGhlIHRyYW5zbGF0aW9uIGFjY29yZGluZ2x5LlxuXG4gICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgdDEgfHwgb3JpZ2luLCAhIXQxIHx8IGNhY2hlLm9yaWdpbklzQWJzb2x1dGUsIGNhY2hlLnNtb290aCAhPT0gZmFsc2UsIG1hdHJpeCk7XG4gIH1cblxuICB4T3JpZ2luID0gY2FjaGUueE9yaWdpbiB8fCAwO1xuICB5T3JpZ2luID0gY2FjaGUueU9yaWdpbiB8fCAwO1xuXG4gIGlmIChtYXRyaXggIT09IF9pZGVudGl0eTJETWF0cml4KSB7XG4gICAgYSA9IG1hdHJpeFswXTsgLy9hMTFcblxuICAgIGIgPSBtYXRyaXhbMV07IC8vYTIxXG5cbiAgICBjID0gbWF0cml4WzJdOyAvL2EzMVxuXG4gICAgZCA9IG1hdHJpeFszXTsgLy9hNDFcblxuICAgIHggPSBhMTIgPSBtYXRyaXhbNF07XG4gICAgeSA9IGEyMiA9IG1hdHJpeFs1XTsgLy8yRCBtYXRyaXhcblxuICAgIGlmIChtYXRyaXgubGVuZ3RoID09PSA2KSB7XG4gICAgICBzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gICAgICBzY2FsZVkgPSBNYXRoLnNxcnQoZCAqIGQgKyBjICogYyk7XG4gICAgICByb3RhdGlvbiA9IGEgfHwgYiA/IF9hdGFuMihiLCBhKSAqIF9SQUQyREVHIDogMDsgLy9ub3RlOiBpZiBzY2FsZVggaXMgMCwgd2UgY2Fubm90IGFjY3VyYXRlbHkgbWVhc3VyZSByb3RhdGlvbi4gU2FtZSBmb3Igc2tld1ggd2l0aCBhIHNjYWxlWSBvZiAwLiBUaGVyZWZvcmUsIHdlIGRlZmF1bHQgdG8gdGhlIHByZXZpb3VzbHkgcmVjb3JkZWQgdmFsdWUgKG9yIHplcm8gaWYgdGhhdCBkb2Vzbid0IGV4aXN0KS5cblxuICAgICAgc2tld1ggPSBjIHx8IGQgPyBfYXRhbjIoYywgZCkgKiBfUkFEMkRFRyArIHJvdGF0aW9uIDogMDtcbiAgICAgIHNrZXdYICYmIChzY2FsZVkgKj0gTWF0aC5hYnMoTWF0aC5jb3Moc2tld1ggKiBfREVHMlJBRCkpKTtcblxuICAgICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgICB4IC09IHhPcmlnaW4gLSAoeE9yaWdpbiAqIGEgKyB5T3JpZ2luICogYyk7XG4gICAgICAgIHkgLT0geU9yaWdpbiAtICh4T3JpZ2luICogYiArIHlPcmlnaW4gKiBkKTtcbiAgICAgIH0gLy8zRCBtYXRyaXhcblxuICAgIH0gZWxzZSB7XG4gICAgICBhMzIgPSBtYXRyaXhbNl07XG4gICAgICBhNDIgPSBtYXRyaXhbN107XG4gICAgICBhMTMgPSBtYXRyaXhbOF07XG4gICAgICBhMjMgPSBtYXRyaXhbOV07XG4gICAgICBhMzMgPSBtYXRyaXhbMTBdO1xuICAgICAgYTQzID0gbWF0cml4WzExXTtcbiAgICAgIHggPSBtYXRyaXhbMTJdO1xuICAgICAgeSA9IG1hdHJpeFsxM107XG4gICAgICB6ID0gbWF0cml4WzE0XTtcbiAgICAgIGFuZ2xlID0gX2F0YW4yKGEzMiwgYTMzKTtcbiAgICAgIHJvdGF0aW9uWCA9IGFuZ2xlICogX1JBRDJERUc7IC8vcm90YXRpb25YXG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuICAgICAgICBzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuICAgICAgICB0MSA9IGExMiAqIGNvcyArIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBhMjIgKiBjb3MgKyBhMjMgKiBzaW47XG4gICAgICAgIHQzID0gYTMyICogY29zICsgYTMzICogc2luO1xuICAgICAgICBhMTMgPSBhMTIgKiAtc2luICsgYTEzICogY29zO1xuICAgICAgICBhMjMgPSBhMjIgKiAtc2luICsgYTIzICogY29zO1xuICAgICAgICBhMzMgPSBhMzIgKiAtc2luICsgYTMzICogY29zO1xuICAgICAgICBhNDMgPSBhNDIgKiAtc2luICsgYTQzICogY29zO1xuICAgICAgICBhMTIgPSB0MTtcbiAgICAgICAgYTIyID0gdDI7XG4gICAgICAgIGEzMiA9IHQzO1xuICAgICAgfSAvL3JvdGF0aW9uWVxuXG5cbiAgICAgIGFuZ2xlID0gX2F0YW4yKC1jLCBhMzMpO1xuICAgICAgcm90YXRpb25ZID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgIHQxID0gYSAqIGNvcyAtIGExMyAqIHNpbjtcbiAgICAgICAgdDIgPSBiICogY29zIC0gYTIzICogc2luO1xuICAgICAgICB0MyA9IGMgKiBjb3MgLSBhMzMgKiBzaW47XG4gICAgICAgIGE0MyA9IGQgKiBzaW4gKyBhNDMgKiBjb3M7XG4gICAgICAgIGEgPSB0MTtcbiAgICAgICAgYiA9IHQyO1xuICAgICAgICBjID0gdDM7XG4gICAgICB9IC8vcm90YXRpb25aXG5cblxuICAgICAgYW5nbGUgPSBfYXRhbjIoYiwgYSk7XG4gICAgICByb3RhdGlvbiA9IGFuZ2xlICogX1JBRDJERUc7XG5cbiAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgdDEgPSBhICogY29zICsgYiAqIHNpbjtcbiAgICAgICAgdDIgPSBhMTIgKiBjb3MgKyBhMjIgKiBzaW47XG4gICAgICAgIGIgPSBiICogY29zIC0gYSAqIHNpbjtcbiAgICAgICAgYTIyID0gYTIyICogY29zIC0gYTEyICogc2luO1xuICAgICAgICBhID0gdDE7XG4gICAgICAgIGExMiA9IHQyO1xuICAgICAgfVxuXG4gICAgICBpZiAocm90YXRpb25YICYmIE1hdGguYWJzKHJvdGF0aW9uWCkgKyBNYXRoLmFicyhyb3RhdGlvbikgPiAzNTkuOSkge1xuICAgICAgICAvL3doZW4gcm90YXRpb25ZIGlzIHNldCwgaXQgd2lsbCBvZnRlbiBiZSBwYXJzZWQgYXMgMTgwIGRlZ3JlZXMgZGlmZmVyZW50IHRoYW4gaXQgc2hvdWxkIGJlLCBhbmQgcm90YXRpb25YIGFuZCByb3RhdGlvbiBib3RoIGJlaW5nIDE4MCAoaXQgbG9va3MgdGhlIHNhbWUpLCBzbyB3ZSBhZGp1c3QgZm9yIHRoYXQgaGVyZS5cbiAgICAgICAgcm90YXRpb25YID0gcm90YXRpb24gPSAwO1xuICAgICAgICByb3RhdGlvblkgPSAxODAgLSByb3RhdGlvblk7XG4gICAgICB9XG5cbiAgICAgIHNjYWxlWCA9IF9yb3VuZChNYXRoLnNxcnQoYSAqIGEgKyBiICogYiArIGMgKiBjKSk7XG4gICAgICBzY2FsZVkgPSBfcm91bmQoTWF0aC5zcXJ0KGEyMiAqIGEyMiArIGEzMiAqIGEzMikpO1xuICAgICAgYW5nbGUgPSBfYXRhbjIoYTEyLCBhMjIpO1xuICAgICAgc2tld1ggPSBNYXRoLmFicyhhbmdsZSkgPiAwLjAwMDIgPyBhbmdsZSAqIF9SQUQyREVHIDogMDtcbiAgICAgIHBlcnNwZWN0aXZlID0gYTQzID8gMSAvIChhNDMgPCAwID8gLWE0MyA6IGE0MykgOiAwO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgIC8vc2Vuc2UgaWYgdGhlcmUgYXJlIENTUyB0cmFuc2Zvcm1zIGFwcGxpZWQgb24gYW4gU1ZHIGVsZW1lbnQgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHdoZW4gcmVuZGVyaW5nLiBUaGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSBpcyBtb3JlIHJlbGlhYmxlIGNyb3NzLWJyb3dzZXIsIGJ1dCB3ZSBjYW4ndCBqdXN0IHJlbW92ZSB0aGUgQ1NTIG9uZXMgYmVjYXVzZSB0aGV5IG1heSBiZSBhcHBsaWVkIGluIGEgQ1NTIHJ1bGUgc29tZXdoZXJlIChub3QganVzdCBpbmxpbmUpLlxuICAgICAgdDEgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgICAgY2FjaGUuZm9yY2VDU1MgPSB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpIHx8ICFfaXNOdWxsVHJhbnNmb3JtKF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApKTtcbiAgICAgIHQxICYmIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdDEpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChNYXRoLmFicyhza2V3WCkgPiA5MCAmJiBNYXRoLmFicyhza2V3WCkgPCAyNzApIHtcbiAgICBpZiAoaW52ZXJ0ZWRTY2FsZVgpIHtcbiAgICAgIHNjYWxlWCAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHJvdGF0aW9uIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgICAgcm90YXRpb24gKz0gcm90YXRpb24gPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYWxlWSAqPSAtMTtcbiAgICAgIHNrZXdYICs9IHNrZXdYIDw9IDAgPyAxODAgOiAtMTgwO1xuICAgIH1cbiAgfVxuXG4gIHVuY2FjaGUgPSB1bmNhY2hlIHx8IGNhY2hlLnVuY2FjaGU7XG4gIGNhY2hlLnggPSB4IC0gKChjYWNoZS54UGVyY2VudCA9IHggJiYgKCF1bmNhY2hlICYmIGNhY2hlLnhQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRXaWR0aCAvIDIpID09PSBNYXRoLnJvdW5kKC14KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0V2lkdGggKiBjYWNoZS54UGVyY2VudCAvIDEwMCA6IDApICsgcHg7XG4gIGNhY2hlLnkgPSB5IC0gKChjYWNoZS55UGVyY2VudCA9IHkgJiYgKCF1bmNhY2hlICYmIGNhY2hlLnlQZXJjZW50IHx8IChNYXRoLnJvdW5kKHRhcmdldC5vZmZzZXRIZWlnaHQgLyAyKSA9PT0gTWF0aC5yb3VuZCgteSkgPyAtNTAgOiAwKSkpID8gdGFyZ2V0Lm9mZnNldEhlaWdodCAqIGNhY2hlLnlQZXJjZW50IC8gMTAwIDogMCkgKyBweDtcbiAgY2FjaGUueiA9IHogKyBweDtcbiAgY2FjaGUuc2NhbGVYID0gX3JvdW5kKHNjYWxlWCk7XG4gIGNhY2hlLnNjYWxlWSA9IF9yb3VuZChzY2FsZVkpO1xuICBjYWNoZS5yb3RhdGlvbiA9IF9yb3VuZChyb3RhdGlvbikgKyBkZWc7XG4gIGNhY2hlLnJvdGF0aW9uWCA9IF9yb3VuZChyb3RhdGlvblgpICsgZGVnO1xuICBjYWNoZS5yb3RhdGlvblkgPSBfcm91bmQocm90YXRpb25ZKSArIGRlZztcbiAgY2FjaGUuc2tld1ggPSBza2V3WCArIGRlZztcbiAgY2FjaGUuc2tld1kgPSBza2V3WSArIGRlZztcbiAgY2FjaGUudHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZSArIHB4O1xuXG4gIGlmIChjYWNoZS56T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW4uc3BsaXQoXCIgXCIpWzJdKSB8fCAwKSB7XG4gICAgc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gX2ZpcnN0VHdvT25seShvcmlnaW4pO1xuICB9XG5cbiAgY2FjaGUueE9mZnNldCA9IGNhY2hlLnlPZmZzZXQgPSAwO1xuICBjYWNoZS5mb3JjZTNEID0gX2NvbmZpZy5mb3JjZTNEO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gPSBjYWNoZS5zdmcgPyBfcmVuZGVyU1ZHVHJhbnNmb3JtcyA6IF9zdXBwb3J0czNEID8gX3JlbmRlckNTU1RyYW5zZm9ybXMgOiBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zO1xuICBjYWNoZS51bmNhY2hlID0gMDtcbiAgcmV0dXJuIGNhY2hlO1xufSxcbiAgICBfZmlyc3RUd29Pbmx5ID0gZnVuY3Rpb24gX2ZpcnN0VHdvT25seSh2YWx1ZSkge1xuICByZXR1cm4gKHZhbHVlID0gdmFsdWUuc3BsaXQoXCIgXCIpKVswXSArIFwiIFwiICsgdmFsdWVbMV07XG59LFxuICAgIC8vZm9yIGhhbmRsaW5nIHRyYW5zZm9ybU9yaWdpbiB2YWx1ZXMsIHN0cmlwcGluZyBvdXQgdGhlIDNyZCBkaW1lbnNpb25cbl9hZGRQeFRyYW5zbGF0ZSA9IGZ1bmN0aW9uIF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHN0YXJ0LCB2YWx1ZSkge1xuICB2YXIgdW5pdCA9IGdldFVuaXQoc3RhcnQpO1xuICByZXR1cm4gX3JvdW5kKHBhcnNlRmxvYXQoc3RhcnQpICsgcGFyc2VGbG9hdChfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieFwiLCB2YWx1ZSArIFwicHhcIiwgdW5pdCkpKSArIHVuaXQ7XG59LFxuICAgIF9yZW5kZXJOb24zRFRyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyTm9uM0RUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSkge1xuICBjYWNoZS56ID0gXCIwcHhcIjtcbiAgY2FjaGUucm90YXRpb25ZID0gY2FjaGUucm90YXRpb25YID0gXCIwZGVnXCI7XG4gIGNhY2hlLmZvcmNlM0QgPSAwO1xuXG4gIF9yZW5kZXJDU1NUcmFuc2Zvcm1zKHJhdGlvLCBjYWNoZSk7XG59LFxuICAgIF96ZXJvRGVnID0gXCIwZGVnXCIsXG4gICAgX3plcm9QeCA9IFwiMHB4XCIsXG4gICAgX2VuZFBhcmVudGhlc2lzID0gXCIpIFwiLFxuICAgIF9yZW5kZXJDU1NUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIHZhciBfcmVmID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgIHhQZXJjZW50ID0gX3JlZi54UGVyY2VudCxcbiAgICAgIHlQZXJjZW50ID0gX3JlZi55UGVyY2VudCxcbiAgICAgIHggPSBfcmVmLngsXG4gICAgICB5ID0gX3JlZi55LFxuICAgICAgeiA9IF9yZWYueixcbiAgICAgIHJvdGF0aW9uID0gX3JlZi5yb3RhdGlvbixcbiAgICAgIHJvdGF0aW9uWSA9IF9yZWYucm90YXRpb25ZLFxuICAgICAgcm90YXRpb25YID0gX3JlZi5yb3RhdGlvblgsXG4gICAgICBza2V3WCA9IF9yZWYuc2tld1gsXG4gICAgICBza2V3WSA9IF9yZWYuc2tld1ksXG4gICAgICBzY2FsZVggPSBfcmVmLnNjYWxlWCxcbiAgICAgIHNjYWxlWSA9IF9yZWYuc2NhbGVZLFxuICAgICAgdHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBfcmVmLnRyYW5zZm9ybVBlcnNwZWN0aXZlLFxuICAgICAgZm9yY2UzRCA9IF9yZWYuZm9yY2UzRCxcbiAgICAgIHRhcmdldCA9IF9yZWYudGFyZ2V0LFxuICAgICAgek9yaWdpbiA9IF9yZWYuek9yaWdpbixcbiAgICAgIHRyYW5zZm9ybXMgPSBcIlwiLFxuICAgICAgdXNlM0QgPSBmb3JjZTNEID09PSBcImF1dG9cIiAmJiByYXRpbyAmJiByYXRpbyAhPT0gMSB8fCBmb3JjZTNEID09PSB0cnVlOyAvLyBTYWZhcmkgaGFzIGEgYnVnIHRoYXQgY2F1c2VzIGl0IG5vdCB0byByZW5kZXIgM0QgdHJhbnNmb3JtLW9yaWdpbiB2YWx1ZXMgcHJvcGVybHksIHNvIHdlIGZvcmNlIHRoZSB6IG9yaWdpbiB0byAwLCByZWNvcmQgaXQgaW4gdGhlIGNhY2hlLCBhbmQgdGhlbiBkbyB0aGUgbWF0aCBoZXJlIHRvIG9mZnNldCB0aGUgdHJhbnNsYXRlIHZhbHVlcyBhY2NvcmRpbmdseSAoYmFzaWNhbGx5IGRvIHRoZSAzRCB0cmFuc2Zvcm0tb3JpZ2luIHBhcnQgbWFudWFsbHkpXG5cblxuICBpZiAoek9yaWdpbiAmJiAocm90YXRpb25YICE9PSBfemVyb0RlZyB8fCByb3RhdGlvblkgIT09IF96ZXJvRGVnKSkge1xuICAgIHZhciBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25ZKSAqIF9ERUcyUkFELFxuICAgICAgICBhMTMgPSBNYXRoLnNpbihhbmdsZSksXG4gICAgICAgIGEzMyA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgY29zO1xuXG4gICAgYW5nbGUgPSBwYXJzZUZsb2F0KHJvdGF0aW9uWCkgKiBfREVHMlJBRDtcbiAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgeCA9IF9hZGRQeFRyYW5zbGF0ZSh0YXJnZXQsIHgsIGExMyAqIGNvcyAqIC16T3JpZ2luKTtcbiAgICB5ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeSwgLU1hdGguc2luKGFuZ2xlKSAqIC16T3JpZ2luKTtcbiAgICB6ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeiwgYTMzICogY29zICogLXpPcmlnaW4gKyB6T3JpZ2luKTtcbiAgfVxuXG4gIGlmICh0cmFuc2Zvcm1QZXJzcGVjdGl2ZSAhPT0gX3plcm9QeCkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJwZXJzcGVjdGl2ZShcIiArIHRyYW5zZm9ybVBlcnNwZWN0aXZlICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHhQZXJjZW50IHx8IHlQZXJjZW50KSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInRyYW5zbGF0ZShcIiArIHhQZXJjZW50ICsgXCIlLCBcIiArIHlQZXJjZW50ICsgXCIlKSBcIjtcbiAgfVxuXG4gIGlmICh1c2UzRCB8fCB4ICE9PSBfemVyb1B4IHx8IHkgIT09IF96ZXJvUHggfHwgeiAhPT0gX3plcm9QeCkge1xuICAgIHRyYW5zZm9ybXMgKz0geiAhPT0gX3plcm9QeCB8fCB1c2UzRCA/IFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCIsIFwiICsgeSArIFwiLCBcIiArIHogKyBcIikgXCIgOiBcInRyYW5zbGF0ZShcIiArIHggKyBcIiwgXCIgKyB5ICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGUoXCIgKyByb3RhdGlvbiArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvblkgIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZVkoXCIgKyByb3RhdGlvblkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb25YICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJyb3RhdGVYKFwiICsgcm90YXRpb25YICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHNrZXdYICE9PSBfemVyb0RlZyB8fCBza2V3WSAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwic2tldyhcIiArIHNrZXdYICsgXCIsIFwiICsgc2tld1kgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoc2NhbGVYICE9PSAxIHx8IHNjYWxlWSAhPT0gMSkge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJzY2FsZShcIiArIHNjYWxlWCArIFwiLCBcIiArIHNjYWxlWSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1zIHx8IFwidHJhbnNsYXRlKDAsIDApXCI7XG59LFxuICAgIF9yZW5kZXJTVkdUcmFuc2Zvcm1zID0gZnVuY3Rpb24gX3JlbmRlclNWR1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIHZhciBfcmVmMiA9IGNhY2hlIHx8IHRoaXMsXG4gICAgICB4UGVyY2VudCA9IF9yZWYyLnhQZXJjZW50LFxuICAgICAgeVBlcmNlbnQgPSBfcmVmMi55UGVyY2VudCxcbiAgICAgIHggPSBfcmVmMi54LFxuICAgICAgeSA9IF9yZWYyLnksXG4gICAgICByb3RhdGlvbiA9IF9yZWYyLnJvdGF0aW9uLFxuICAgICAgc2tld1ggPSBfcmVmMi5za2V3WCxcbiAgICAgIHNrZXdZID0gX3JlZjIuc2tld1ksXG4gICAgICBzY2FsZVggPSBfcmVmMi5zY2FsZVgsXG4gICAgICBzY2FsZVkgPSBfcmVmMi5zY2FsZVksXG4gICAgICB0YXJnZXQgPSBfcmVmMi50YXJnZXQsXG4gICAgICB4T3JpZ2luID0gX3JlZjIueE9yaWdpbixcbiAgICAgIHlPcmlnaW4gPSBfcmVmMi55T3JpZ2luLFxuICAgICAgeE9mZnNldCA9IF9yZWYyLnhPZmZzZXQsXG4gICAgICB5T2Zmc2V0ID0gX3JlZjIueU9mZnNldCxcbiAgICAgIGZvcmNlQ1NTID0gX3JlZjIuZm9yY2VDU1MsXG4gICAgICB0eCA9IHBhcnNlRmxvYXQoeCksXG4gICAgICB0eSA9IHBhcnNlRmxvYXQoeSksXG4gICAgICBhMTEsXG4gICAgICBhMjEsXG4gICAgICBhMTIsXG4gICAgICBhMjIsXG4gICAgICB0ZW1wO1xuXG4gIHJvdGF0aW9uID0gcGFyc2VGbG9hdChyb3RhdGlvbik7XG4gIHNrZXdYID0gcGFyc2VGbG9hdChza2V3WCk7XG4gIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG5cbiAgaWYgKHNrZXdZKSB7XG4gICAgLy9mb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgY29tYmluZSBhbGwgc2tld2luZyBpbnRvIHRoZSBza2V3WCBhbmQgcm90YXRpb24gdmFsdWVzLiBSZW1lbWJlciwgYSBza2V3WSBvZiAxMCBkZWdyZWVzIGxvb2tzIHRoZSBzYW1lIGFzIGEgcm90YXRpb24gb2YgMTAgZGVncmVlcyBwbHVzIGEgc2tld1ggb2YgMTAgZGVncmVlcy5cbiAgICBza2V3WSA9IHBhcnNlRmxvYXQoc2tld1kpO1xuICAgIHNrZXdYICs9IHNrZXdZO1xuICAgIHJvdGF0aW9uICs9IHNrZXdZO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uIHx8IHNrZXdYKSB7XG4gICAgcm90YXRpb24gKj0gX0RFRzJSQUQ7XG4gICAgc2tld1ggKj0gX0RFRzJSQUQ7XG4gICAgYTExID0gTWF0aC5jb3Mocm90YXRpb24pICogc2NhbGVYO1xuICAgIGEyMSA9IE1hdGguc2luKHJvdGF0aW9uKSAqIHNjYWxlWDtcbiAgICBhMTIgPSBNYXRoLnNpbihyb3RhdGlvbiAtIHNrZXdYKSAqIC1zY2FsZVk7XG4gICAgYTIyID0gTWF0aC5jb3Mocm90YXRpb24gLSBza2V3WCkgKiBzY2FsZVk7XG5cbiAgICBpZiAoc2tld1gpIHtcbiAgICAgIHNrZXdZICo9IF9ERUcyUkFEO1xuICAgICAgdGVtcCA9IE1hdGgudGFuKHNrZXdYIC0gc2tld1kpO1xuICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgYTEyICo9IHRlbXA7XG4gICAgICBhMjIgKj0gdGVtcDtcblxuICAgICAgaWYgKHNrZXdZKSB7XG4gICAgICAgIHRlbXAgPSBNYXRoLnRhbihza2V3WSk7XG4gICAgICAgIHRlbXAgPSBNYXRoLnNxcnQoMSArIHRlbXAgKiB0ZW1wKTtcbiAgICAgICAgYTExICo9IHRlbXA7XG4gICAgICAgIGEyMSAqPSB0ZW1wO1xuICAgICAgfVxuICAgIH1cblxuICAgIGExMSA9IF9yb3VuZChhMTEpO1xuICAgIGEyMSA9IF9yb3VuZChhMjEpO1xuICAgIGExMiA9IF9yb3VuZChhMTIpO1xuICAgIGEyMiA9IF9yb3VuZChhMjIpO1xuICB9IGVsc2Uge1xuICAgIGExMSA9IHNjYWxlWDtcbiAgICBhMjIgPSBzY2FsZVk7XG4gICAgYTIxID0gYTEyID0gMDtcbiAgfVxuXG4gIGlmICh0eCAmJiAhfih4ICsgXCJcIikuaW5kZXhPZihcInB4XCIpIHx8IHR5ICYmICF+KHkgKyBcIlwiKS5pbmRleE9mKFwicHhcIikpIHtcbiAgICB0eCA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ4XCIsIHgsIFwicHhcIik7XG4gICAgdHkgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIFwieVwiLCB5LCBcInB4XCIpO1xuICB9XG5cbiAgaWYgKHhPcmlnaW4gfHwgeU9yaWdpbiB8fCB4T2Zmc2V0IHx8IHlPZmZzZXQpIHtcbiAgICB0eCA9IF9yb3VuZCh0eCArIHhPcmlnaW4gLSAoeE9yaWdpbiAqIGExMSArIHlPcmlnaW4gKiBhMTIpICsgeE9mZnNldCk7XG4gICAgdHkgPSBfcm91bmQodHkgKyB5T3JpZ2luIC0gKHhPcmlnaW4gKiBhMjEgKyB5T3JpZ2luICogYTIyKSArIHlPZmZzZXQpO1xuICB9XG5cbiAgaWYgKHhQZXJjZW50IHx8IHlQZXJjZW50KSB7XG4gICAgLy9UaGUgU1ZHIHNwZWMgZG9lc24ndCBzdXBwb3J0IHBlcmNlbnRhZ2UtYmFzZWQgdHJhbnNsYXRpb24gaW4gdGhlIFwidHJhbnNmb3JtXCIgYXR0cmlidXRlLCBzbyB3ZSBtZXJnZSBpdCBpbnRvIHRoZSB0cmFuc2xhdGlvbiB0byBzaW11bGF0ZSBpdC5cbiAgICB0ZW1wID0gdGFyZ2V0LmdldEJCb3goKTtcbiAgICB0eCA9IF9yb3VuZCh0eCArIHhQZXJjZW50IC8gMTAwICogdGVtcC53aWR0aCk7XG4gICAgdHkgPSBfcm91bmQodHkgKyB5UGVyY2VudCAvIDEwMCAqIHRlbXAuaGVpZ2h0KTtcbiAgfVxuXG4gIHRlbXAgPSBcIm1hdHJpeChcIiArIGExMSArIFwiLFwiICsgYTIxICsgXCIsXCIgKyBhMTIgKyBcIixcIiArIGEyMiArIFwiLFwiICsgdHggKyBcIixcIiArIHR5ICsgXCIpXCI7XG4gIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdGVtcCk7XG4gIGZvcmNlQ1NTICYmICh0YXJnZXQuc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdGVtcCk7IC8vc29tZSBicm93c2VycyBwcmlvcml0aXplIENTUyB0cmFuc2Zvcm1zIG92ZXIgdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUuIFdoZW4gd2Ugc2Vuc2UgdGhhdCB0aGUgdXNlciBoYXMgQ1NTIHRyYW5zZm9ybXMgYXBwbGllZCwgd2UgbXVzdCBvdmVyd3JpdGUgdGhlbSB0aGlzIHdheSAob3RoZXJ3aXNlIHNvbWUgYnJvd3NlciBzaW1wbHkgd29uJ3QgcmVuZGVyIHRoZSAgdHJhbnNmb3JtIGF0dHJpYnV0ZSBjaGFuZ2VzISlcbn0sXG4gICAgX2FkZFJvdGF0aW9uYWxQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUm90YXRpb25hbFByb3BUd2VlbihwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIHN0YXJ0TnVtLCBlbmRWYWx1ZSkge1xuICB2YXIgY2FwID0gMzYwLFxuICAgICAgaXNTdHJpbmcgPSBfaXNTdHJpbmcoZW5kVmFsdWUpLFxuICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSkgKiAoaXNTdHJpbmcgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYWRcIikgPyBfUkFEMkRFRyA6IDEpLFxuICAgICAgY2hhbmdlID0gZW5kTnVtIC0gc3RhcnROdW0sXG4gICAgICBmaW5hbFZhbHVlID0gc3RhcnROdW0gKyBjaGFuZ2UgKyBcImRlZ1wiLFxuICAgICAgZGlyZWN0aW9uLFxuICAgICAgcHQ7XG5cbiAgaWYgKGlzU3RyaW5nKSB7XG4gICAgZGlyZWN0aW9uID0gZW5kVmFsdWUuc3BsaXQoXCJfXCIpWzFdO1xuXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJzaG9ydFwiKSB7XG4gICAgICBjaGFuZ2UgJT0gY2FwO1xuXG4gICAgICBpZiAoY2hhbmdlICE9PSBjaGFuZ2UgJSAoY2FwIC8gMikpIHtcbiAgICAgICAgY2hhbmdlICs9IGNoYW5nZSA8IDAgPyBjYXAgOiAtY2FwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwiY3dcIiAmJiBjaGFuZ2UgPCAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlICsgY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSBcImNjd1wiICYmIGNoYW5nZSA+IDApIHtcbiAgICAgIGNoYW5nZSA9IChjaGFuZ2UgLSBjYXAgKiBfYmlnTnVtKSAlIGNhcCAtIH5+KGNoYW5nZSAvIGNhcCkgKiBjYXA7XG4gICAgfVxuICB9XG5cbiAgcGx1Z2luLl9wdCA9IHB0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCBzdGFydE51bSwgY2hhbmdlLCBfcmVuZGVyUHJvcFdpdGhFbmQpO1xuICBwdC5lID0gZmluYWxWYWx1ZTtcbiAgcHQudSA9IFwiZGVnXCI7XG5cbiAgcGx1Z2luLl9wcm9wcy5wdXNoKHByb3BlcnR5KTtcblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hc3NpZ24gPSBmdW5jdGlvbiBfYXNzaWduKHRhcmdldCwgc291cmNlKSB7XG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGRvZXNuJ3QgaGF2ZSBPYmplY3QuYXNzaWduKCksIHNvIHdlIHJlY3JlYXRlIGl0IGhlcmUuXG4gIGZvciAodmFyIHAgaW4gc291cmNlKSB7XG4gICAgdGFyZ2V0W3BdID0gc291cmNlW3BdO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0sXG4gICAgX2FkZFJhd1RyYW5zZm9ybVBUcyA9IGZ1bmN0aW9uIF9hZGRSYXdUcmFuc2Zvcm1QVHMocGx1Z2luLCB0cmFuc2Zvcm1zLCB0YXJnZXQpIHtcbiAgLy9mb3IgaGFuZGxpbmcgY2FzZXMgd2hlcmUgc29tZW9uZSBwYXNzZXMgaW4gYSB3aG9sZSB0cmFuc2Zvcm0gc3RyaW5nLCBsaWtlIHRyYW5zZm9ybTogXCJzY2FsZSgyLCAzKSByb3RhdGUoMjBkZWcpIHRyYW5zbGF0ZVkoMzBlbSlcIlxuICB2YXIgc3RhcnRDYWNoZSA9IF9hc3NpZ24oe30sIHRhcmdldC5fZ3NhcCksXG4gICAgICBleGNsdWRlID0gXCJwZXJzcGVjdGl2ZSxmb3JjZTNELHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW5cIixcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgZW5kQ2FjaGUsXG4gICAgICBwLFxuICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgIGVuZFZhbHVlLFxuICAgICAgc3RhcnROdW0sXG4gICAgICBlbmROdW0sXG4gICAgICBzdGFydFVuaXQsXG4gICAgICBlbmRVbml0O1xuXG4gIGlmIChzdGFydENhY2hlLnN2Zykge1xuICAgIHN0YXJ0VmFsdWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJcIik7XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuXG4gICAgX3JlbW92ZVByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybVByb3ApO1xuXG4gICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBzdGFydFZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdGFydFZhbHVlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpW190cmFuc2Zvcm1Qcm9wXTtcbiAgICBzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1zO1xuICAgIGVuZENhY2hlID0gX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSk7XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gc3RhcnRWYWx1ZTtcbiAgfVxuXG4gIGZvciAocCBpbiBfdHJhbnNmb3JtUHJvcHMpIHtcbiAgICBzdGFydFZhbHVlID0gc3RhcnRDYWNoZVtwXTtcbiAgICBlbmRWYWx1ZSA9IGVuZENhY2hlW3BdO1xuXG4gICAgaWYgKHN0YXJ0VmFsdWUgIT09IGVuZFZhbHVlICYmIGV4Y2x1ZGUuaW5kZXhPZihwKSA8IDApIHtcbiAgICAgIC8vdHdlZW5pbmcgdG8gbm8gcGVyc3BlY3RpdmUgZ2l2ZXMgdmVyeSB1bmludHVpdGl2ZSByZXN1bHRzIC0ganVzdCBrZWVwIHRoZSBzYW1lIHBlcnNwZWN0aXZlIGluIHRoYXQgY2FzZS5cbiAgICAgIHN0YXJ0VW5pdCA9IGdldFVuaXQoc3RhcnRWYWx1ZSk7XG4gICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSk7XG4gICAgICBzdGFydE51bSA9IHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgZW5kVW5pdCkgOiBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSk7XG4gICAgICBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCBlbmRDYWNoZSwgcCwgc3RhcnROdW0sIGVuZE51bSAtIHN0YXJ0TnVtLCBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICBwbHVnaW4uX3B0LnUgPSBlbmRVbml0IHx8IDA7XG5cbiAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH1cblxuICBfYXNzaWduKGVuZENhY2hlLCBzdGFydENhY2hlKTtcbn07IC8vIGhhbmRsZSBzcGxpdHRpbmcgYXBhcnQgcGFkZGluZywgbWFyZ2luLCBib3JkZXJXaWR0aCwgYW5kIGJvcmRlclJhZGl1cyBpbnRvIHRoZWlyIDQgY29tcG9uZW50cy4gRmlyZWZveCwgZm9yIGV4YW1wbGUsIHdvbid0IHJlcG9ydCBib3JkZXJSYWRpdXMgY29ycmVjdGx5IC0gaXQgd2lsbCBvbmx5IGRvIGJvcmRlclRvcExlZnRSYWRpdXMgYW5kIHRoZSBvdGhlciBjb3JuZXJzLiBXZSBhbHNvIHdhbnQgdG8gaGFuZGxlIHBhZGRpbmdUb3AsIG1hcmdpbkxlZnQsIGJvcmRlclJpZ2h0V2lkdGgsIGV0Yy5cblxuXG5fZm9yRWFjaE5hbWUoXCJwYWRkaW5nLG1hcmdpbixXaWR0aCxSYWRpdXNcIiwgZnVuY3Rpb24gKG5hbWUsIGluZGV4KSB7XG4gIHZhciB0ID0gXCJUb3BcIixcbiAgICAgIHIgPSBcIlJpZ2h0XCIsXG4gICAgICBiID0gXCJCb3R0b21cIixcbiAgICAgIGwgPSBcIkxlZnRcIixcbiAgICAgIHByb3BzID0gKGluZGV4IDwgMyA/IFt0LCByLCBiLCBsXSA6IFt0ICsgbCwgdCArIHIsIGIgKyByLCBiICsgbF0pLm1hcChmdW5jdGlvbiAoc2lkZSkge1xuICAgIHJldHVybiBpbmRleCA8IDIgPyBuYW1lICsgc2lkZSA6IFwiYm9yZGVyXCIgKyBzaWRlICsgbmFtZTtcbiAgfSk7XG5cbiAgX3NwZWNpYWxQcm9wc1tpbmRleCA+IDEgPyBcImJvcmRlclwiICsgbmFtZSA6IG5hbWVdID0gZnVuY3Rpb24gKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gICAgdmFyIGEsIHZhcnM7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDQpIHtcbiAgICAgIC8vIGdldHRlciwgcGFzc2VkIHRhcmdldCwgcHJvcGVydHksIGFuZCB1bml0IChmcm9tIF9nZXQoKSlcbiAgICAgIGEgPSBwcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIF9nZXQocGx1Z2luLCBwcm9wLCBwcm9wZXJ0eSk7XG4gICAgICB9KTtcbiAgICAgIHZhcnMgPSBhLmpvaW4oXCIgXCIpO1xuICAgICAgcmV0dXJuIHZhcnMuc3BsaXQoYVswXSkubGVuZ3RoID09PSA1ID8gYVswXSA6IHZhcnM7XG4gICAgfVxuXG4gICAgYSA9IChlbmRWYWx1ZSArIFwiXCIpLnNwbGl0KFwiIFwiKTtcbiAgICB2YXJzID0ge307XG4gICAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCwgaSkge1xuICAgICAgcmV0dXJuIHZhcnNbcHJvcF0gPSBhW2ldID0gYVtpXSB8fCBhWyhpIC0gMSkgLyAyIHwgMF07XG4gICAgfSk7XG4gICAgcGx1Z2luLmluaXQodGFyZ2V0LCB2YXJzLCB0d2Vlbik7XG4gIH07XG59KTtcblxuZXhwb3J0IHZhciBDU1NQbHVnaW4gPSB7XG4gIG5hbWU6IFwiY3NzXCIsXG4gIHJlZ2lzdGVyOiBfaW5pdENvcmUsXG4gIHRhcmdldFRlc3Q6IGZ1bmN0aW9uIHRhcmdldFRlc3QodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRhcmdldC5zdHlsZSAmJiB0YXJnZXQubm9kZVR5cGU7XG4gIH0sXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9wcm9wcyxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIHN0YXJ0QXQgPSB0d2Vlbi52YXJzLnN0YXJ0QXQsXG4gICAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICAgIGVuZFZhbHVlLFxuICAgICAgICBlbmROdW0sXG4gICAgICAgIHN0YXJ0TnVtLFxuICAgICAgICB0eXBlLFxuICAgICAgICBzcGVjaWFsUHJvcCxcbiAgICAgICAgcCxcbiAgICAgICAgc3RhcnRVbml0LFxuICAgICAgICBlbmRVbml0LFxuICAgICAgICByZWxhdGl2ZSxcbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkLFxuICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4sXG4gICAgICAgIGNhY2hlLFxuICAgICAgICBzbW9vdGgsXG4gICAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgICBpbmxpbmVQcm9wcztcbiAgICBfcGx1Z2luSW5pdHRlZCB8fCBfaW5pdENvcmUoKTsgLy8gd2UgbWF5IGNhbGwgaW5pdCgpIG11bHRpcGxlIHRpbWVzIG9uIHRoZSBzYW1lIHBsdWdpbiBpbnN0YW5jZSwgbGlrZSB3aGVuIGFkZGluZyBzcGVjaWFsIHByb3BlcnRpZXMsIHNvIG1ha2Ugc3VyZSB3ZSBkb24ndCBvdmVyd3JpdGUgdGhlIHJldmVydCBkYXRhIG9yIGlubGluZVByb3BzXG5cbiAgICB0aGlzLnN0eWxlcyA9IHRoaXMuc3R5bGVzIHx8IF9nZXRTdHlsZVNhdmVyKHRhcmdldCk7XG4gICAgaW5saW5lUHJvcHMgPSB0aGlzLnN0eWxlcy5wcm9wcztcbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgaWYgKHAgPT09IFwiYXV0b1JvdW5kXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGVuZFZhbHVlID0gdmFyc1twXTtcblxuICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIF9jaGVja1BsdWdpbihwLCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykpIHtcbiAgICAgICAgLy8gcGx1Z2luc1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdHlwZSA9IHR5cGVvZiBlbmRWYWx1ZTtcbiAgICAgIHNwZWNpYWxQcm9wID0gX3NwZWNpYWxQcm9wc1twXTtcblxuICAgICAgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBlbmRWYWx1ZSA9IGVuZFZhbHVlLmNhbGwodHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpO1xuICAgICAgICB0eXBlID0gdHlwZW9mIGVuZFZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gXCJzdHJpbmdcIiAmJiB+ZW5kVmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICAgICAgZW5kVmFsdWUgPSBfcmVwbGFjZVJhbmRvbShlbmRWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcGVjaWFsUHJvcCkge1xuICAgICAgICBzcGVjaWFsUHJvcCh0aGlzLCB0YXJnZXQsIHAsIGVuZFZhbHVlLCB0d2VlbikgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9IGVsc2UgaWYgKHAuc3Vic3RyKDAsIDIpID09PSBcIi0tXCIpIHtcbiAgICAgICAgLy9DU1MgdmFyaWFibGVcbiAgICAgICAgc3RhcnRWYWx1ZSA9IChnZXRDb21wdXRlZFN0eWxlKHRhcmdldCkuZ2V0UHJvcGVydHlWYWx1ZShwKSArIFwiXCIpLnRyaW0oKTtcbiAgICAgICAgZW5kVmFsdWUgKz0gXCJcIjtcbiAgICAgICAgX2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cbiAgICAgICAgaWYgKCFfY29sb3JFeHAudGVzdChzdGFydFZhbHVlKSkge1xuICAgICAgICAgIC8vIGNvbG9ycyBkb24ndCBoYXZlIHVuaXRzXG4gICAgICAgICAgc3RhcnRVbml0ID0gZ2V0VW5pdChzdGFydFZhbHVlKTtcbiAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbmRVbml0ID8gc3RhcnRVbml0ICE9PSBlbmRVbml0ICYmIChzdGFydFZhbHVlID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRVbml0KSArIGVuZFVuaXQpIDogc3RhcnRVbml0ICYmIChlbmRWYWx1ZSArPSBzdGFydFVuaXQpO1xuICAgICAgICB0aGlzLmFkZChzdHlsZSwgXCJzZXRQcm9wZXJ0eVwiLCBzdGFydFZhbHVlLCBlbmRWYWx1ZSwgaW5kZXgsIHRhcmdldHMsIDAsIDAsIHApO1xuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKHAsIHN0eWxlW3BdKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAoc3RhcnRBdCAmJiBwIGluIHN0YXJ0QXQpIHtcbiAgICAgICAgICAvLyBpbiBjYXNlIHNvbWVvbmUgaGFyZC1jb2RlcyBhIGNvbXBsZXggdmFsdWUgYXMgdGhlIHN0YXJ0LCBsaWtlIHRvcDogXCJjYWxjKDJ2aCAvIDIpXCIuIFdpdGhvdXQgdGhpcywgaXQnZCB1c2UgdGhlIGNvbXB1dGVkIHZhbHVlIChhbHdheXMgaW4gcHgpXG4gICAgICAgICAgc3RhcnRWYWx1ZSA9IHR5cGVvZiBzdGFydEF0W3BdID09PSBcImZ1bmN0aW9uXCIgPyBzdGFydEF0W3BdLmNhbGwodHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogc3RhcnRBdFtwXTtcbiAgICAgICAgICBfaXNTdHJpbmcoc3RhcnRWYWx1ZSkgJiYgfnN0YXJ0VmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikgJiYgKHN0YXJ0VmFsdWUgPSBfcmVwbGFjZVJhbmRvbShzdGFydFZhbHVlKSk7XG4gICAgICAgICAgZ2V0VW5pdChzdGFydFZhbHVlICsgXCJcIikgfHwgKHN0YXJ0VmFsdWUgKz0gX2NvbmZpZy51bml0c1twXSB8fCBnZXRVbml0KF9nZXQodGFyZ2V0LCBwKSkgfHwgXCJcIik7IC8vIGZvciBjYXNlcyB3aGVuIHNvbWVvbmUgcGFzc2VzIGluIGEgdW5pdGxlc3MgdmFsdWUgbGlrZSB7eDogMTAwfTsgaWYgd2UgdHJ5IHNldHRpbmcgdHJhbnNsYXRlKDEwMCwgMHB4KSBpdCB3b24ndCB3b3JrLlxuXG4gICAgICAgICAgKHN0YXJ0VmFsdWUgKyBcIlwiKS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIChzdGFydFZhbHVlID0gX2dldCh0YXJnZXQsIHApKTsgLy8gY2FuJ3Qgd29yayB3aXRoIHJlbGF0aXZlIHZhbHVlc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXJ0VmFsdWUgPSBfZ2V0KHRhcmdldCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnRWYWx1ZSk7XG4gICAgICAgIHJlbGF0aXZlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBlbmRWYWx1ZS5jaGFyQXQoMSkgPT09IFwiPVwiICYmIGVuZFZhbHVlLnN1YnN0cigwLCAyKTtcbiAgICAgICAgcmVsYXRpdmUgJiYgKGVuZFZhbHVlID0gZW5kVmFsdWUuc3Vic3RyKDIpKTtcbiAgICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSk7XG5cbiAgICAgICAgaWYgKHAgaW4gX3Byb3BlcnR5QWxpYXNlcykge1xuICAgICAgICAgIGlmIChwID09PSBcImF1dG9BbHBoYVwiKSB7XG4gICAgICAgICAgICAvL3NwZWNpYWwgY2FzZSB3aGVyZSB3ZSBjb250cm9sIHRoZSB2aXNpYmlsaXR5IGFsb25nIHdpdGggb3BhY2l0eS4gV2Ugc3RpbGwgYWxsb3cgdGhlIG9wYWNpdHkgdmFsdWUgdG8gcGFzcyB0aHJvdWdoIGFuZCBnZXQgdHdlZW5lZC5cbiAgICAgICAgICAgIGlmIChzdGFydE51bSA9PT0gMSAmJiBfZ2V0KHRhcmdldCwgXCJ2aXNpYmlsaXR5XCIpID09PSBcImhpZGRlblwiICYmIGVuZE51bSkge1xuICAgICAgICAgICAgICAvL2lmIHZpc2liaWxpdHkgaXMgaW5pdGlhbGx5IHNldCB0byBcImhpZGRlblwiLCB3ZSBzaG91bGQgaW50ZXJwcmV0IHRoYXQgYXMgaW50ZW50IHRvIG1ha2Ugb3BhY2l0eSAwIChhIGNvbnZlbmllbmNlKVxuICAgICAgICAgICAgICBzdGFydE51bSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlubGluZVByb3BzLnB1c2goXCJ2aXNpYmlsaXR5XCIsIHN0eWxlLnZpc2liaWxpdHkpO1xuXG4gICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgXCJ2aXNpYmlsaXR5XCIsIHN0YXJ0TnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCBlbmROdW0gPyBcImluaGVyaXRcIiA6IFwiaGlkZGVuXCIsICFlbmROdW0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwICE9PSBcInNjYWxlXCIgJiYgcCAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcF07XG4gICAgICAgICAgICB+cC5pbmRleE9mKFwiLFwiKSAmJiAocCA9IHAuc3BsaXQoXCIsXCIpWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpc1RyYW5zZm9ybVJlbGF0ZWQgPSBwIGluIF90cmFuc2Zvcm1Qcm9wczsgLy8tLS0gVFJBTlNGT1JNLVJFTEFURUQgLS0tXG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCkge1xuICAgICAgICAgIHRoaXMuc3R5bGVzLnNhdmUocCk7XG5cbiAgICAgICAgICBpZiAoIXRyYW5zZm9ybVByb3BUd2Vlbikge1xuICAgICAgICAgICAgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gICAgICAgICAgICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gJiYgIXZhcnMucGFyc2VUcmFuc2Zvcm0gfHwgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgdmFycy5wYXJzZVRyYW5zZm9ybSk7IC8vIGlmLCBmb3IgZXhhbXBsZSwgZ3NhcC5zZXQoLi4uIHt0cmFuc2Zvcm06XCJ0cmFuc2xhdGVYKDUwdncpXCJ9KSwgdGhlIF9nZXQoKSBjYWxsIGRvZXNuJ3QgcGFyc2UgdGhlIHRyYW5zZm9ybSwgdGh1cyBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0gd29uJ3QgYmUgc2V0IHlldCBzbyBmb3JjZSB0aGUgcGFyc2luZyBvZiB0aGUgdHJhbnNmb3JtIGhlcmUuXG5cbiAgICAgICAgICAgIHNtb290aCA9IHZhcnMuc21vb3RoT3JpZ2luICE9PSBmYWxzZSAmJiBjYWNoZS5zbW9vdGg7XG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4gPSB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHN0eWxlLCBfdHJhbnNmb3JtUHJvcCwgMCwgMSwgY2FjaGUucmVuZGVyVHJhbnNmb3JtLCBjYWNoZSwgMCwgLTEpOyAvL3RoZSBmaXJzdCB0aW1lIHRocm91Z2gsIGNyZWF0ZSB0aGUgcmVuZGVyaW5nIFByb3BUd2VlbiBzbyB0aGF0IGl0IHJ1bnMgTEFTVCAoaW4gdGhlIGxpbmtlZCBsaXN0LCB3ZSBrZWVwIGFkZGluZyB0byB0aGUgYmVnaW5uaW5nKVxuXG4gICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wVHdlZW4uZGVwID0gMTsgLy9mbGFnIGl0IGFzIGRlcGVuZGVudCBzbyB0aGF0IGlmIHRoaW5ncyBnZXQga2lsbGVkL292ZXJ3cml0dGVuIGFuZCB0aGlzIGlzIHRoZSBvbmx5IFByb3BUd2VlbiBsZWZ0LCB3ZSBjYW4gc2FmZWx5IGtpbGwgdGhlIHdob2xlIHR3ZWVuLlxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwID09PSBcInNjYWxlXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3B0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgY2FjaGUsIFwic2NhbGVZXCIsIGNhY2hlLnNjYWxlWSwgKHJlbGF0aXZlID8gX3BhcnNlUmVsYXRpdmUoY2FjaGUuc2NhbGVZLCByZWxhdGl2ZSArIGVuZE51bSkgOiBlbmROdW0pIC0gY2FjaGUuc2NhbGVZIHx8IDAsIF9yZW5kZXJDU1NQcm9wKTtcbiAgICAgICAgICAgIHRoaXMuX3B0LnUgPSAwO1xuICAgICAgICAgICAgcHJvcHMucHVzaChcInNjYWxlWVwiLCBwKTtcbiAgICAgICAgICAgIHAgKz0gXCJYXCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInRyYW5zZm9ybU9yaWdpblwiKSB7XG4gICAgICAgICAgICBpbmxpbmVQcm9wcy5wdXNoKF90cmFuc2Zvcm1PcmlnaW5Qcm9wLCBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0pO1xuICAgICAgICAgICAgZW5kVmFsdWUgPSBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyhlbmRWYWx1ZSk7IC8vaW4gY2FzZSBzb21ldGhpbmcgbGlrZSBcImxlZnQgdG9wXCIgb3IgXCJib3R0b20gcmlnaHRcIiBpcyBwYXNzZWQgaW4uIENvbnZlcnQgdG8gcGVyY2VudGFnZXMuXG5cbiAgICAgICAgICAgIGlmIChjYWNoZS5zdmcpIHtcbiAgICAgICAgICAgICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgZW5kVmFsdWUsIDAsIHNtb290aCwgMCwgdGhpcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbmRVbml0ID0gcGFyc2VGbG9hdChlbmRWYWx1ZS5zcGxpdChcIiBcIilbMl0pIHx8IDA7IC8vaGFuZGxlIHRoZSB6T3JpZ2luIHNlcGFyYXRlbHkhXG5cbiAgICAgICAgICAgICAgZW5kVW5pdCAhPT0gY2FjaGUuek9yaWdpbiAmJiBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBjYWNoZSwgXCJ6T3JpZ2luXCIsIGNhY2hlLnpPcmlnaW4sIGVuZFVuaXQpO1xuXG4gICAgICAgICAgICAgIF9hZGROb25Ud2VlbmluZ1BUKHRoaXMsIHN0eWxlLCBwLCBfZmlyc3RUd29Pbmx5KHN0YXJ0VmFsdWUpLCBfZmlyc3RUd29Pbmx5KGVuZFZhbHVlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzdmdPcmlnaW5cIikge1xuICAgICAgICAgICAgX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgZW5kVmFsdWUsIDEsIHNtb290aCwgMCwgdGhpcyk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCBpbiBfcm90YXRpb25hbFByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuKHRoaXMsIGNhY2hlLCBwLCBzdGFydE51bSwgcmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgcmVsYXRpdmUgKyBlbmRWYWx1ZSkgOiBlbmRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzbW9vdGhPcmlnaW5cIikge1xuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwic21vb3RoXCIsIGNhY2hlLnNtb290aCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwiZm9yY2UzRFwiKSB7XG4gICAgICAgICAgICBjYWNoZVtwXSA9IGVuZFZhbHVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICBfYWRkUmF3VHJhbnNmb3JtUFRzKHRoaXMsIGVuZFZhbHVlLCB0YXJnZXQpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIHAgPSBfY2hlY2tQcm9wUHJlZml4KHApIHx8IHA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IChlbmROdW0gfHwgZW5kTnVtID09PSAwKSAmJiAoc3RhcnROdW0gfHwgc3RhcnROdW0gPT09IDApICYmICFfY29tcGxleEV4cC50ZXN0KGVuZFZhbHVlKSAmJiBwIGluIHN0eWxlKSB7XG4gICAgICAgICAgc3RhcnRVbml0ID0gKHN0YXJ0VmFsdWUgKyBcIlwiKS5zdWJzdHIoKHN0YXJ0TnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgICBlbmROdW0gfHwgKGVuZE51bSA9IDApOyAvLyBwcm90ZWN0IGFnYWluc3QgTmFOXG5cbiAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSkgfHwgKHAgaW4gX2NvbmZpZy51bml0cyA/IF9jb25maWcudW5pdHNbcF0gOiBzdGFydFVuaXQpO1xuICAgICAgICAgIHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpKTtcbiAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGlzVHJhbnNmb3JtUmVsYXRlZCA/IGNhY2hlIDogc3R5bGUsIHAsIHN0YXJ0TnVtLCAocmVsYXRpdmUgPyBfcGFyc2VSZWxhdGl2ZShzdGFydE51bSwgcmVsYXRpdmUgKyBlbmROdW0pIDogZW5kTnVtKSAtIHN0YXJ0TnVtLCAhaXNUcmFuc2Zvcm1SZWxhdGVkICYmIChlbmRVbml0ID09PSBcInB4XCIgfHwgcCA9PT0gXCJ6SW5kZXhcIikgJiYgdmFycy5hdXRvUm91bmQgIT09IGZhbHNlID8gX3JlbmRlclJvdW5kZWRDU1NQcm9wIDogX3JlbmRlckNTU1Byb3ApO1xuICAgICAgICAgIHRoaXMuX3B0LnUgPSBlbmRVbml0IHx8IDA7XG5cbiAgICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0ICYmIGVuZFVuaXQgIT09IFwiJVwiKSB7XG4gICAgICAgICAgICAvL3doZW4gdGhlIHR3ZWVuIGdvZXMgYWxsIHRoZSB3YXkgYmFjayB0byB0aGUgYmVnaW5uaW5nLCB3ZSBuZWVkIHRvIHJldmVydCBpdCB0byB0aGUgT0xEL09SSUdJTkFMIHZhbHVlICh3aXRoIHRob3NlIHVuaXRzKS4gV2UgcmVjb3JkIHRoYXQgYXMgYSBcImJcIiAoYmVnaW5uaW5nKSBwcm9wZXJ0eSBhbmQgcG9pbnQgdG8gYSByZW5kZXIgbWV0aG9kIHRoYXQgaGFuZGxlcyB0aGF0LiAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uKVxuICAgICAgICAgICAgdGhpcy5fcHQuYiA9IHN0YXJ0VmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9wdC5yID0gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghKHAgaW4gc3R5bGUpKSB7XG4gICAgICAgICAgaWYgKHAgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgICAvL21heWJlIGl0J3Mgbm90IGEgc3R5bGUgLSBpdCBjb3VsZCBiZSBhIHByb3BlcnR5IGFkZGVkIGRpcmVjdGx5IHRvIGFuIGVsZW1lbnQgaW4gd2hpY2ggY2FzZSB3ZSdsbCB0cnkgdG8gYW5pbWF0ZSB0aGF0LlxuICAgICAgICAgICAgdGhpcy5hZGQodGFyZ2V0LCBwLCBzdGFydFZhbHVlIHx8IHRhcmdldFtwXSwgcmVsYXRpdmUgPyByZWxhdGl2ZSArIGVuZFZhbHVlIDogZW5kVmFsdWUsIGluZGV4LCB0YXJnZXRzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX21pc3NpbmdQbHVnaW4ocCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3R3ZWVuQ29tcGxleENTU1N0cmluZy5jYWxsKHRoaXMsIHRhcmdldCwgcCwgc3RhcnRWYWx1ZSwgcmVsYXRpdmUgPyByZWxhdGl2ZSArIGVuZFZhbHVlIDogZW5kVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IGlubGluZVByb3BzLnB1c2gocCwgc3R5bGVbcF0pO1xuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodGhpcyk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgaWYgKGRhdGEudHdlZW4uX3RpbWUgfHwgIV9yZXZlcnRpbmcoKSkge1xuICAgICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICAgIHdoaWxlIChwdCkge1xuICAgICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgICAgcHQgPSBwdC5fbmV4dDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5zdHlsZXMucmV2ZXJ0KCk7XG4gICAgfVxuICB9LFxuICBnZXQ6IF9nZXQsXG4gIGFsaWFzZXM6IF9wcm9wZXJ0eUFsaWFzZXMsXG4gIGdldFNldHRlcjogZnVuY3Rpb24gZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHBsdWdpbikge1xuICAgIC8vcmV0dXJucyBhIHNldHRlciBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUgYW5kIGFwcGxpZXMgaXQgYWNjb3JkaW5nbHkuIFJlbWVtYmVyLCBwcm9wZXJ0aWVzIGxpa2UgXCJ4XCIgYXJlbid0IGFzIHNpbXBsZSBhcyB0YXJnZXQuc3R5bGUucHJvcGVydHkgPSB2YWx1ZSBiZWNhdXNlIHRoZXkndmUgZ290IHRvIGJlIGFwcGxpZWQgdG8gYSBwcm94eSBvYmplY3QgYW5kIHRoZW4gbWVyZ2VkIGludG8gYSB0cmFuc2Zvcm0gc3RyaW5nIGluIGEgcmVuZGVyZXIuXG4gICAgdmFyIHAgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcbiAgICBwICYmIHAuaW5kZXhPZihcIixcIikgPCAwICYmIChwcm9wZXJ0eSA9IHApO1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiBfdHJhbnNmb3JtUHJvcHMgJiYgcHJvcGVydHkgIT09IF90cmFuc2Zvcm1PcmlnaW5Qcm9wICYmICh0YXJnZXQuX2dzYXAueCB8fCBfZ2V0KHRhcmdldCwgXCJ4XCIpKSA/IHBsdWdpbiAmJiBfcmVjZW50U2V0dGVyUGx1Z2luID09PSBwbHVnaW4gPyBwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlIDogX3NldHRlclRyYW5zZm9ybSA6IChfcmVjZW50U2V0dGVyUGx1Z2luID0gcGx1Z2luIHx8IHt9KSAmJiAocHJvcGVydHkgPT09IFwic2NhbGVcIiA/IF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIgOiBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlcikgOiB0YXJnZXQuc3R5bGUgJiYgIV9pc1VuZGVmaW5lZCh0YXJnZXQuc3R5bGVbcHJvcGVydHldKSA/IF9zZXR0ZXJDU1NTdHlsZSA6IH5wcm9wZXJ0eS5pbmRleE9mKFwiLVwiKSA/IF9zZXR0ZXJDU1NQcm9wIDogX2dldFNldHRlcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgfSxcbiAgY29yZToge1xuICAgIF9yZW1vdmVQcm9wZXJ0eTogX3JlbW92ZVByb3BlcnR5LFxuICAgIF9nZXRNYXRyaXg6IF9nZXRNYXRyaXhcbiAgfVxufTtcbmdzYXAudXRpbHMuY2hlY2tQcmVmaXggPSBfY2hlY2tQcm9wUHJlZml4O1xuZ3NhcC5jb3JlLmdldFN0eWxlU2F2ZXIgPSBfZ2V0U3R5bGVTYXZlcjtcblxuKGZ1bmN0aW9uIChwb3NpdGlvbkFuZFNjYWxlLCByb3RhdGlvbiwgb3RoZXJzLCBhbGlhc2VzKSB7XG4gIHZhciBhbGwgPSBfZm9yRWFjaE5hbWUocG9zaXRpb25BbmRTY2FsZSArIFwiLFwiICsgcm90YXRpb24gKyBcIixcIiArIG90aGVycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBfdHJhbnNmb3JtUHJvcHNbbmFtZV0gPSAxO1xuICB9KTtcblxuICBfZm9yRWFjaE5hbWUocm90YXRpb24sIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwiZGVnXCI7XG4gICAgX3JvdGF0aW9uYWxQcm9wZXJ0aWVzW25hbWVdID0gMTtcbiAgfSk7XG5cbiAgX3Byb3BlcnR5QWxpYXNlc1thbGxbMTNdXSA9IHBvc2l0aW9uQW5kU2NhbGUgKyBcIixcIiArIHJvdGF0aW9uO1xuXG4gIF9mb3JFYWNoTmFtZShhbGlhc2VzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzcGxpdCA9IG5hbWUuc3BsaXQoXCI6XCIpO1xuICAgIF9wcm9wZXJ0eUFsaWFzZXNbc3BsaXRbMV1dID0gYWxsW3NwbGl0WzBdXTtcbiAgfSk7XG59KShcIngseSx6LHNjYWxlLHNjYWxlWCxzY2FsZVkseFBlcmNlbnQseVBlcmNlbnRcIiwgXCJyb3RhdGlvbixyb3RhdGlvblgscm90YXRpb25ZLHNrZXdYLHNrZXdZXCIsIFwidHJhbnNmb3JtLHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW4sZm9yY2UzRCxzbW9vdGhPcmlnaW4sdHJhbnNmb3JtUGVyc3BlY3RpdmVcIiwgXCIwOnRyYW5zbGF0ZVgsMTp0cmFuc2xhdGVZLDI6dHJhbnNsYXRlWiw4OnJvdGF0ZSw4OnJvdGF0aW9uWiw4OnJvdGF0ZVosOTpyb3RhdGVYLDEwOnJvdGF0ZVlcIik7XG5cbl9mb3JFYWNoTmFtZShcIngseSx6LHRvcCxyaWdodCxib3R0b20sbGVmdCx3aWR0aCxoZWlnaHQsZm9udFNpemUscGFkZGluZyxtYXJnaW4scGVyc3BlY3RpdmVcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgX2NvbmZpZy51bml0c1tuYW1lXSA9IFwicHhcIjtcbn0pO1xuXG5nc2FwLnJlZ2lzdGVyUGx1Z2luKENTU1BsdWdpbik7XG5leHBvcnQgeyBDU1NQbHVnaW4gYXMgZGVmYXVsdCwgX2dldEJCb3gsIF9jcmVhdGVFbGVtZW50LCBfY2hlY2tQcm9wUHJlZml4IGFzIGNoZWNrUHJlZml4IH07IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKiFcbiAqIEdTQVAgMy4xMS4wXG4gKiBodHRwczovL2dyZWVuc29jay5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAwOC0yMDIyLCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwczovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBhZ3JlZW1lbnQgaXNzdWVkIHdpdGggdGhhdCBtZW1iZXJzaGlwLlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4qL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xudmFyIF9jb25maWcgPSB7XG4gIGF1dG9TbGVlcDogMTIwLFxuICBmb3JjZTNEOiBcImF1dG9cIixcbiAgbnVsbFRhcmdldFdhcm46IDEsXG4gIHVuaXRzOiB7XG4gICAgbGluZUhlaWdodDogXCJcIlxuICB9XG59LFxuICAgIF9kZWZhdWx0cyA9IHtcbiAgZHVyYXRpb246IC41LFxuICBvdmVyd3JpdGU6IGZhbHNlLFxuICBkZWxheTogMFxufSxcbiAgICBfc3VwcHJlc3NPdmVyd3JpdGVzLFxuICAgIF9yZXZlcnRpbmcsXG4gICAgX2NvbnRleHQsXG4gICAgX2JpZ051bSA9IDFlOCxcbiAgICBfdGlueU51bSA9IDEgLyBfYmlnTnVtLFxuICAgIF8yUEkgPSBNYXRoLlBJICogMixcbiAgICBfSEFMRl9QSSA9IF8yUEkgLyA0LFxuICAgIF9nc0lEID0gMCxcbiAgICBfc3FydCA9IE1hdGguc3FydCxcbiAgICBfY29zID0gTWF0aC5jb3MsXG4gICAgX3NpbiA9IE1hdGguc2luLFxuICAgIF9pc1N0cmluZyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xufSxcbiAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn0sXG4gICAgX2lzTnVtYmVyID0gZnVuY3Rpb24gX2lzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG59LFxuICAgIF9pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uIF9pc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfaXNPYmplY3QgPSBmdW5jdGlvbiBfaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn0sXG4gICAgX2lzTm90RmFsc2UgPSBmdW5jdGlvbiBfaXNOb3RGYWxzZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IGZhbHNlO1xufSxcbiAgICBfd2luZG93RXhpc3RzID0gZnVuY3Rpb24gX3dpbmRvd0V4aXN0cygpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9pc0Z1bmNPclN0cmluZyA9IGZ1bmN0aW9uIF9pc0Z1bmNPclN0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odmFsdWUpIHx8IF9pc1N0cmluZyh2YWx1ZSk7XG59LFxuICAgIF9pc1R5cGVkQXJyYXkgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIiAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcgfHwgZnVuY3Rpb24gKCkge30sXG4gICAgLy8gbm90ZTogSUUxMCBoYXMgQXJyYXlCdWZmZXIsIGJ1dCBOT1QgQXJyYXlCdWZmZXIuaXNWaWV3KCkuXG5faXNBcnJheSA9IEFycmF5LmlzQXJyYXksXG4gICAgX3N0cmljdE51bUV4cCA9IC8oPzotP1xcLj9cXGR8XFwuKSsvZ2ksXG4gICAgLy9vbmx5IG51bWJlcnMgKGluY2x1ZGluZyBuZWdhdGl2ZXMgYW5kIGRlY2ltYWxzKSBidXQgTk9UIHJlbGF0aXZlIHZhbHVlcy5cbl9udW1FeHAgPSAvWy0rPS5dKlxcZCtbLmVcXC0rXSpcXGQqW2VcXC0rXSpcXGQqL2csXG4gICAgLy9maW5kcyBhbnkgbnVtYmVycywgaW5jbHVkaW5nIG9uZXMgdGhhdCBzdGFydCB3aXRoICs9IG9yIC09LCBuZWdhdGl2ZSBudW1iZXJzLCBhbmQgb25lcyBpbiBzY2llbnRpZmljIG5vdGF0aW9uIGxpa2UgMWUtOC5cbl9udW1XaXRoVW5pdEV4cCA9IC9bLSs9Ll0qXFxkK1suZS1dKlxcZCpbYS16JV0qL2csXG4gICAgX2NvbXBsZXhTdHJpbmdOdW1FeHAgPSAvWy0rPS5dKlxcZCtcXC4/XFxkKig/OmUtfGVcXCspP1xcZCovZ2ksXG4gICAgLy9kdXBsaWNhdGUgc28gdGhhdCB3aGlsZSB3ZSdyZSBsb29waW5nIHRocm91Z2ggbWF0Y2hlcyBmcm9tIGV4ZWMoKSwgaXQgZG9lc24ndCBjb250YW1pbmF0ZSB0aGUgbGFzdEluZGV4IG9mIF9udW1FeHAgd2hpY2ggd2UgdXNlIHRvIHNlYXJjaCBmb3IgY29sb3JzIHRvby5cbl9yZWxFeHAgPSAvWystXT0tP1suXFxkXSsvLFxuICAgIF9kZWxpbWl0ZWRWYWx1ZUV4cCA9IC9bXiwnXCJcXFtcXF1cXHNdKy9naSxcbiAgICAvLyBwcmV2aW91c2x5IC9bI1xcLSsuXSpcXGJbYS16XFxkXFwtPSslLl0rL2dpIGJ1dCBkaWRuJ3QgY2F0Y2ggc3BlY2lhbCBjaGFyYWN0ZXJzLlxuX3VuaXRFeHAgPSAvXlsrXFwtPWVcXHNcXGRdKlxcZCtbLlxcZF0qKFthLXpdKnwlKVxccyokL2ksXG4gICAgX2dsb2JhbFRpbWVsaW5lLFxuICAgIF93aW4sXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF9kb2MsXG4gICAgX2dsb2JhbHMgPSB7fSxcbiAgICBfaW5zdGFsbFNjb3BlID0ge30sXG4gICAgX2NvcmVSZWFkeSxcbiAgICBfaW5zdGFsbCA9IGZ1bmN0aW9uIF9pbnN0YWxsKHNjb3BlKSB7XG4gIHJldHVybiAoX2luc3RhbGxTY29wZSA9IF9tZXJnZShzY29wZSwgX2dsb2JhbHMpKSAmJiBnc2FwO1xufSxcbiAgICBfbWlzc2luZ1BsdWdpbiA9IGZ1bmN0aW9uIF9taXNzaW5nUGx1Z2luKHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gY29uc29sZS53YXJuKFwiSW52YWxpZCBwcm9wZXJ0eVwiLCBwcm9wZXJ0eSwgXCJzZXQgdG9cIiwgdmFsdWUsIFwiTWlzc2luZyBwbHVnaW4/IGdzYXAucmVnaXN0ZXJQbHVnaW4oKVwiKTtcbn0sXG4gICAgX3dhcm4gPSBmdW5jdGlvbiBfd2FybihtZXNzYWdlLCBzdXBwcmVzcykge1xuICByZXR1cm4gIXN1cHByZXNzICYmIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbn0sXG4gICAgX2FkZEdsb2JhbCA9IGZ1bmN0aW9uIF9hZGRHbG9iYWwobmFtZSwgb2JqKSB7XG4gIHJldHVybiBuYW1lICYmIChfZ2xvYmFsc1tuYW1lXSA9IG9iaikgJiYgX2luc3RhbGxTY29wZSAmJiAoX2luc3RhbGxTY29wZVtuYW1lXSA9IG9iaikgfHwgX2dsb2JhbHM7XG59LFxuICAgIF9lbXB0eUZ1bmMgPSBmdW5jdGlvbiBfZW1wdHlGdW5jKCkge1xuICByZXR1cm4gMDtcbn0sXG4gICAgX3N0YXJ0QXRSZXZlcnRDb25maWcgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlLFxuICBpc1N0YXJ0OiB0cnVlXG59LFxuICAgIF9yZXZlcnRDb25maWcgPSB7XG4gIHN1cHByZXNzRXZlbnRzOiB0cnVlXG59LFxuICAgIF9yZXNlcnZlZFByb3BzID0ge30sXG4gICAgX2xhenlUd2VlbnMgPSBbXSxcbiAgICBfbGF6eUxvb2t1cCA9IHt9LFxuICAgIF9sYXN0UmVuZGVyZWRGcmFtZSxcbiAgICBfcGx1Z2lucyA9IHt9LFxuICAgIF9lZmZlY3RzID0ge30sXG4gICAgX25leHRHQ0ZyYW1lID0gMzAsXG4gICAgX2hhcm5lc3NQbHVnaW5zID0gW10sXG4gICAgX2NhbGxiYWNrTmFtZXMgPSBcIlwiLFxuICAgIF9oYXJuZXNzID0gZnVuY3Rpb24gX2hhcm5lc3ModGFyZ2V0cykge1xuICB2YXIgdGFyZ2V0ID0gdGFyZ2V0c1swXSxcbiAgICAgIGhhcm5lc3NQbHVnaW4sXG4gICAgICBpO1xuICBfaXNPYmplY3QodGFyZ2V0KSB8fCBfaXNGdW5jdGlvbih0YXJnZXQpIHx8ICh0YXJnZXRzID0gW3RhcmdldHNdKTtcblxuICBpZiAoIShoYXJuZXNzUGx1Z2luID0gKHRhcmdldC5fZ3NhcCB8fCB7fSkuaGFybmVzcykpIHtcbiAgICAvLyBmaW5kIHRoZSBmaXJzdCB0YXJnZXQgd2l0aCBhIGhhcm5lc3MuIFdlIGFzc3VtZSB0YXJnZXRzIHBhc3NlZCBpbnRvIGFuIGFuaW1hdGlvbiB3aWxsIGJlIG9mIHNpbWlsYXIgdHlwZSwgbWVhbmluZyB0aGUgc2FtZSBraW5kIG9mIGhhcm5lc3MgY2FuIGJlIHVzZWQgZm9yIHRoZW0gYWxsIChwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24pXG4gICAgaSA9IF9oYXJuZXNzUGx1Z2lucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tICYmICFfaGFybmVzc1BsdWdpbnNbaV0udGFyZ2V0VGVzdCh0YXJnZXQpKSB7fVxuXG4gICAgaGFybmVzc1BsdWdpbiA9IF9oYXJuZXNzUGx1Z2luc1tpXTtcbiAgfVxuXG4gIGkgPSB0YXJnZXRzLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgdGFyZ2V0c1tpXSAmJiAodGFyZ2V0c1tpXS5fZ3NhcCB8fCAodGFyZ2V0c1tpXS5fZ3NhcCA9IG5ldyBHU0NhY2hlKHRhcmdldHNbaV0sIGhhcm5lc3NQbHVnaW4pKSkgfHwgdGFyZ2V0cy5zcGxpY2UoaSwgMSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0cztcbn0sXG4gICAgX2dldENhY2hlID0gZnVuY3Rpb24gX2dldENhY2hlKHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRvQXJyYXkodGFyZ2V0KSlbMF0uX2dzYXA7XG59LFxuICAgIF9nZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB2KSB7XG4gIHJldHVybiAodiA9IHRhcmdldFtwcm9wZXJ0eV0pICYmIF9pc0Z1bmN0aW9uKHYpID8gdGFyZ2V0W3Byb3BlcnR5XSgpIDogX2lzVW5kZWZpbmVkKHYpICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShwcm9wZXJ0eSkgfHwgdjtcbn0sXG4gICAgX2ZvckVhY2hOYW1lID0gZnVuY3Rpb24gX2ZvckVhY2hOYW1lKG5hbWVzLCBmdW5jKSB7XG4gIHJldHVybiAobmFtZXMgPSBuYW1lcy5zcGxpdChcIixcIikpLmZvckVhY2goZnVuYykgfHwgbmFtZXM7XG59LFxuICAgIC8vc3BsaXQgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBuYW1lcyBpbnRvIGFuIGFycmF5LCB0aGVuIHJ1biBhIGZvckVhY2goKSBmdW5jdGlvbiBhbmQgcmV0dXJuIHRoZSBzcGxpdCBhcnJheSAodGhpcyBpcyBqdXN0IGEgd2F5IHRvIGNvbnNvbGlkYXRlL3Nob3J0ZW4gc29tZSBjb2RlKS5cbl9yb3VuZCA9IGZ1bmN0aW9uIF9yb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMCkgLyAxMDAwMDAgfHwgMDtcbn0sXG4gICAgX3JvdW5kUHJlY2lzZSA9IGZ1bmN0aW9uIF9yb3VuZFByZWNpc2UodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDAwMCkgLyAxMDAwMDAwMCB8fCAwO1xufSxcbiAgICAvLyBpbmNyZWFzZWQgcHJlY2lzaW9uIG1vc3RseSBmb3IgdGltaW5nIHZhbHVlcy5cbl9wYXJzZVJlbGF0aXZlID0gZnVuY3Rpb24gX3BhcnNlUmVsYXRpdmUoc3RhcnQsIHZhbHVlKSB7XG4gIHZhciBvcGVyYXRvciA9IHZhbHVlLmNoYXJBdCgwKSxcbiAgICAgIGVuZCA9IHBhcnNlRmxvYXQodmFsdWUuc3Vic3RyKDIpKTtcbiAgc3RhcnQgPSBwYXJzZUZsb2F0KHN0YXJ0KTtcbiAgcmV0dXJuIG9wZXJhdG9yID09PSBcIitcIiA/IHN0YXJ0ICsgZW5kIDogb3BlcmF0b3IgPT09IFwiLVwiID8gc3RhcnQgLSBlbmQgOiBvcGVyYXRvciA9PT0gXCIqXCIgPyBzdGFydCAqIGVuZCA6IHN0YXJ0IC8gZW5kO1xufSxcbiAgICBfYXJyYXlDb250YWluc0FueSA9IGZ1bmN0aW9uIF9hcnJheUNvbnRhaW5zQW55KHRvU2VhcmNoLCB0b0ZpbmQpIHtcbiAgLy9zZWFyY2hlcyBvbmUgYXJyYXkgdG8gZmluZCBtYXRjaGVzIGZvciBhbnkgb2YgdGhlIGl0ZW1zIGluIHRoZSB0b0ZpbmQgYXJyYXkuIEFzIHNvb24gYXMgb25lIGlzIGZvdW5kLCBpdCByZXR1cm5zIHRydWUuIEl0IGRvZXMgTk9UIHJldHVybiBhbGwgdGhlIG1hdGNoZXM7IGl0J3Mgc2ltcGx5IGEgYm9vbGVhbiBzZWFyY2guXG4gIHZhciBsID0gdG9GaW5kLmxlbmd0aCxcbiAgICAgIGkgPSAwO1xuXG4gIGZvciAoOyB0b1NlYXJjaC5pbmRleE9mKHRvRmluZFtpXSkgPCAwICYmICsraSA8IGw7KSB7fVxuXG4gIHJldHVybiBpIDwgbDtcbn0sXG4gICAgX2xhenlSZW5kZXIgPSBmdW5jdGlvbiBfbGF6eVJlbmRlcigpIHtcbiAgdmFyIGwgPSBfbGF6eVR3ZWVucy5sZW5ndGgsXG4gICAgICBhID0gX2xhenlUd2VlbnMuc2xpY2UoMCksXG4gICAgICBpLFxuICAgICAgdHdlZW47XG5cbiAgX2xhenlMb29rdXAgPSB7fTtcbiAgX2xhenlUd2VlbnMubGVuZ3RoID0gMDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgdHdlZW4gPSBhW2ldO1xuICAgIHR3ZWVuICYmIHR3ZWVuLl9sYXp5ICYmICh0d2Vlbi5yZW5kZXIodHdlZW4uX2xhenlbMF0sIHR3ZWVuLl9sYXp5WzFdLCB0cnVlKS5fbGF6eSA9IDApO1xuICB9XG59LFxuICAgIF9sYXp5U2FmZVJlbmRlciA9IGZ1bmN0aW9uIF9sYXp5U2FmZVJlbmRlcihhbmltYXRpb24sIHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuICBfbGF6eVR3ZWVucy5sZW5ndGggJiYgX2xhenlSZW5kZXIoKTtcbiAgYW5pbWF0aW9uLnJlbmRlcih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UgfHwgX3JldmVydGluZyk7XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gc29tZW9uZSBjYWxscyBzZWVrKCkgb3IgdGltZSgpIG9yIHByb2dyZXNzKCksIHRoZXkgZXhwZWN0IGFuIGltbWVkaWF0ZSByZW5kZXIuXG59LFxuICAgIF9udW1lcmljSWZQb3NzaWJsZSA9IGZ1bmN0aW9uIF9udW1lcmljSWZQb3NzaWJsZSh2YWx1ZSkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICByZXR1cm4gKG4gfHwgbiA9PT0gMCkgJiYgKHZhbHVlICsgXCJcIikubWF0Y2goX2RlbGltaXRlZFZhbHVlRXhwKS5sZW5ndGggPCAyID8gbiA6IF9pc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcbn0sXG4gICAgX3Bhc3NUaHJvdWdoID0gZnVuY3Rpb24gX3Bhc3NUaHJvdWdoKHApIHtcbiAgcmV0dXJuIHA7XG59LFxuICAgIF9zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXREZWZhdWx0cyhvYmosIGRlZmF1bHRzKSB7XG4gIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICBwIGluIG9iaiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3NldEtleWZyYW1lRGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhleGNsdWRlRHVyYXRpb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIGRlZmF1bHRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgICAgcCBpbiBvYmogfHwgcCA9PT0gXCJkdXJhdGlvblwiICYmIGV4Y2x1ZGVEdXJhdGlvbiB8fCBwID09PSBcImVhc2VcIiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICAgIH1cbiAgfTtcbn0sXG4gICAgX21lcmdlID0gZnVuY3Rpb24gX21lcmdlKGJhc2UsIHRvTWVyZ2UpIHtcbiAgZm9yICh2YXIgcCBpbiB0b01lcmdlKSB7XG4gICAgYmFzZVtwXSA9IHRvTWVyZ2VbcF07XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX21lcmdlRGVlcCA9IGZ1bmN0aW9uIF9tZXJnZURlZXAoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBwICE9PSBcIl9fcHJvdG9fX1wiICYmIHAgIT09IFwiY29uc3RydWN0b3JcIiAmJiBwICE9PSBcInByb3RvdHlwZVwiICYmIChiYXNlW3BdID0gX2lzT2JqZWN0KHRvTWVyZ2VbcF0pID8gX21lcmdlRGVlcChiYXNlW3BdIHx8IChiYXNlW3BdID0ge30pLCB0b01lcmdlW3BdKSA6IHRvTWVyZ2VbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGJhc2U7XG59LFxuICAgIF9jb3B5RXhjbHVkaW5nID0gZnVuY3Rpb24gX2NvcHlFeGNsdWRpbmcob2JqLCBleGNsdWRpbmcpIHtcbiAgdmFyIGNvcHkgPSB7fSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIG9iaikge1xuICAgIHAgaW4gZXhjbHVkaW5nIHx8IChjb3B5W3BdID0gb2JqW3BdKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICBfaW5oZXJpdERlZmF1bHRzID0gZnVuY3Rpb24gX2luaGVyaXREZWZhdWx0cyh2YXJzKSB7XG4gIHZhciBwYXJlbnQgPSB2YXJzLnBhcmVudCB8fCBfZ2xvYmFsVGltZWxpbmUsXG4gICAgICBmdW5jID0gdmFycy5rZXlmcmFtZXMgPyBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhfaXNBcnJheSh2YXJzLmtleWZyYW1lcykpIDogX3NldERlZmF1bHRzO1xuXG4gIGlmIChfaXNOb3RGYWxzZSh2YXJzLmluaGVyaXQpKSB7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgZnVuYyh2YXJzLCBwYXJlbnQudmFycy5kZWZhdWx0cyk7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50IHx8IHBhcmVudC5fZHA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhcnM7XG59LFxuICAgIF9hcnJheXNNYXRjaCA9IGZ1bmN0aW9uIF9hcnJheXNNYXRjaChhMSwgYTIpIHtcbiAgdmFyIGkgPSBhMS5sZW5ndGgsXG4gICAgICBtYXRjaCA9IGkgPT09IGEyLmxlbmd0aDtcblxuICB3aGlsZSAobWF0Y2ggJiYgaS0tICYmIGExW2ldID09PSBhMltpXSkge31cblxuICByZXR1cm4gaSA8IDA7XG59LFxuICAgIF9hZGRMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9hZGRMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wLCBzb3J0QnkpIHtcbiAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgZmlyc3RQcm9wID0gXCJfZmlyc3RcIjtcbiAgfVxuXG4gIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFByb3AgPSBcIl9sYXN0XCI7XG4gIH1cblxuICB2YXIgcHJldiA9IHBhcmVudFtsYXN0UHJvcF0sXG4gICAgICB0O1xuXG4gIGlmIChzb3J0QnkpIHtcbiAgICB0ID0gY2hpbGRbc29ydEJ5XTtcblxuICAgIHdoaWxlIChwcmV2ICYmIHByZXZbc29ydEJ5XSA+IHQpIHtcbiAgICAgIHByZXYgPSBwcmV2Ll9wcmV2O1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcmV2KSB7XG4gICAgY2hpbGQuX25leHQgPSBwcmV2Ll9uZXh0O1xuICAgIHByZXYuX25leHQgPSBjaGlsZDtcbiAgfSBlbHNlIHtcbiAgICBjaGlsZC5fbmV4dCA9IHBhcmVudFtmaXJzdFByb3BdO1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gY2hpbGQ7XG4gIH1cblxuICBpZiAoY2hpbGQuX25leHQpIHtcbiAgICBjaGlsZC5fbmV4dC5fcHJldiA9IGNoaWxkO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudFtsYXN0UHJvcF0gPSBjaGlsZDtcbiAgfVxuXG4gIGNoaWxkLl9wcmV2ID0gcHJldjtcbiAgY2hpbGQucGFyZW50ID0gY2hpbGQuX2RwID0gcGFyZW50O1xuICByZXR1cm4gY2hpbGQ7XG59LFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9yZW1vdmVMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wKSB7XG4gIGlmIChmaXJzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gIH1cblxuICBpZiAobGFzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICB9XG5cbiAgdmFyIHByZXYgPSBjaGlsZC5fcHJldixcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICBpZiAocHJldikge1xuICAgIHByZXYuX25leHQgPSBuZXh0O1xuICB9IGVsc2UgaWYgKHBhcmVudFtmaXJzdFByb3BdID09PSBjaGlsZCkge1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gbmV4dDtcbiAgfVxuXG4gIGlmIChuZXh0KSB7XG4gICAgbmV4dC5fcHJldiA9IHByZXY7XG4gIH0gZWxzZSBpZiAocGFyZW50W2xhc3RQcm9wXSA9PT0gY2hpbGQpIHtcbiAgICBwYXJlbnRbbGFzdFByb3BdID0gcHJldjtcbiAgfVxuXG4gIGNoaWxkLl9uZXh0ID0gY2hpbGQuX3ByZXYgPSBjaGlsZC5wYXJlbnQgPSBudWxsOyAvLyBkb24ndCBkZWxldGUgdGhlIF9kcCBqdXN0IHNvIHdlIGNhbiByZXZlcnQgaWYgbmVjZXNzYXJ5LiBCdXQgcGFyZW50IHNob3VsZCBiZSBudWxsIHRvIGluZGljYXRlIHRoZSBpdGVtIGlzbid0IGluIGEgbGlua2VkIGxpc3QuXG59LFxuICAgIF9yZW1vdmVGcm9tUGFyZW50ID0gZnVuY3Rpb24gX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQsIG9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUpIHtcbiAgY2hpbGQucGFyZW50ICYmICghb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSB8fCBjaGlsZC5wYXJlbnQuYXV0b1JlbW92ZUNoaWxkcmVuKSAmJiBjaGlsZC5wYXJlbnQucmVtb3ZlKGNoaWxkKTtcbiAgY2hpbGQuX2FjdCA9IDA7XG59LFxuICAgIF91bmNhY2hlID0gZnVuY3Rpb24gX3VuY2FjaGUoYW5pbWF0aW9uLCBjaGlsZCkge1xuICBpZiAoYW5pbWF0aW9uICYmICghY2hpbGQgfHwgY2hpbGQuX2VuZCA+IGFuaW1hdGlvbi5fZHVyIHx8IGNoaWxkLl9zdGFydCA8IDApKSB7XG4gICAgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uOiBpZiBhIGNoaWxkIGFuaW1hdGlvbiBpcyBwYXNzZWQgaW4gd2Ugc2hvdWxkIG9ubHkgdW5jYWNoZSBpZiB0aGF0IGNoaWxkIEVYVEVORFMgdGhlIGFuaW1hdGlvbiAoaXRzIGVuZCB0aW1lIGlzIGJleW9uZCB0aGUgZW5kKVxuICAgIHZhciBhID0gYW5pbWF0aW9uO1xuXG4gICAgd2hpbGUgKGEpIHtcbiAgICAgIGEuX2RpcnR5ID0gMTtcbiAgICAgIGEgPSBhLnBhcmVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcmVjYWNoZUFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9yZWNhY2hlQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICB2YXIgcGFyZW50ID0gYW5pbWF0aW9uLnBhcmVudDtcblxuICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAvL3NvbWV0aW1lcyB3ZSBtdXN0IGZvcmNlIGEgcmUtc29ydCBvZiBhbGwgY2hpbGRyZW4gYW5kIHVwZGF0ZSB0aGUgZHVyYXRpb24vdG90YWxEdXJhdGlvbiBvZiBhbGwgYW5jZXN0b3IgdGltZWxpbmVzIGltbWVkaWF0ZWx5IGluIGNhc2UsIGZvciBleGFtcGxlLCBpbiB0aGUgbWlkZGxlIG9mIGEgcmVuZGVyIGxvb3AsIG9uZSB0d2VlbiBhbHRlcnMgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSB3aGljaCBzaG92ZXMgaXRzIHN0YXJ0VGltZSBiZWZvcmUgMCwgZm9yY2luZyB0aGUgcGFyZW50IHRpbWVsaW5lIHRvIHNoaWZ0IGFyb3VuZCBhbmQgc2hpZnRDaGlsZHJlbigpIHdoaWNoIGNvdWxkIGFmZmVjdCB0aGF0IG5leHQgdHdlZW4ncyByZW5kZXIgKHN0YXJ0VGltZSkuIERvZXNuJ3QgbWF0dGVyIGZvciB0aGUgcm9vdCB0aW1lbGluZSB0aG91Z2guXG4gICAgcGFyZW50Ll9kaXJ0eSA9IDE7XG4gICAgcGFyZW50LnRvdGFsRHVyYXRpb24oKTtcbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX3Jld2luZFN0YXJ0QXQgPSBmdW5jdGlvbiBfcmV3aW5kU3RhcnRBdCh0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgcmV0dXJuIHR3ZWVuLl9zdGFydEF0ICYmIChfcmV2ZXJ0aW5nID8gdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWcpIDogdHdlZW4udmFycy5pbW1lZGlhdGVSZW5kZXIgJiYgIXR3ZWVuLnZhcnMuYXV0b1JldmVydCB8fCB0d2Vlbi5fc3RhcnRBdC5yZW5kZXIodG90YWxUaW1lLCB0cnVlLCBmb3JjZSkpO1xufSxcbiAgICBfaGFzTm9QYXVzZWRBbmNlc3RvcnMgPSBmdW5jdGlvbiBfaGFzTm9QYXVzZWRBbmNlc3RvcnMoYW5pbWF0aW9uKSB7XG4gIHJldHVybiAhYW5pbWF0aW9uIHx8IGFuaW1hdGlvbi5fdHMgJiYgX2hhc05vUGF1c2VkQW5jZXN0b3JzKGFuaW1hdGlvbi5wYXJlbnQpO1xufSxcbiAgICBfZWxhcHNlZEN5Y2xlRHVyYXRpb24gPSBmdW5jdGlvbiBfZWxhcHNlZEN5Y2xlRHVyYXRpb24oYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24uX3JlcGVhdCA/IF9hbmltYXRpb25DeWNsZShhbmltYXRpb24uX3RUaW1lLCBhbmltYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24oKSArIGFuaW1hdGlvbi5fckRlbGF5KSAqIGFuaW1hdGlvbiA6IDA7XG59LFxuICAgIC8vIGZlZWQgaW4gdGhlIHRvdGFsVGltZSBhbmQgY3ljbGVEdXJhdGlvbiBhbmQgaXQnbGwgcmV0dXJuIHRoZSBjeWNsZSAoaXRlcmF0aW9uIG1pbnVzIDEpIGFuZCBpZiB0aGUgcGxheWhlYWQgaXMgZXhhY3RseSBhdCB0aGUgdmVyeSBFTkQsIGl0IHdpbGwgTk9UIGJ1bXAgdXAgdG8gdGhlIG5leHQgY3ljbGUuXG5fYW5pbWF0aW9uQ3ljbGUgPSBmdW5jdGlvbiBfYW5pbWF0aW9uQ3ljbGUodFRpbWUsIGN5Y2xlRHVyYXRpb24pIHtcbiAgdmFyIHdob2xlID0gTWF0aC5mbG9vcih0VGltZSAvPSBjeWNsZUR1cmF0aW9uKTtcbiAgcmV0dXJuIHRUaW1lICYmIHdob2xlID09PSB0VGltZSA/IHdob2xlIC0gMSA6IHdob2xlO1xufSxcbiAgICBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSA9IGZ1bmN0aW9uIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudFRpbWUsIGNoaWxkKSB7XG4gIHJldHVybiAocGFyZW50VGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgKyAoY2hpbGQuX3RzID49IDAgPyAwIDogY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpO1xufSxcbiAgICBfc2V0RW5kID0gZnVuY3Rpb24gX3NldEVuZChhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbi5fZW5kID0gX3JvdW5kUHJlY2lzZShhbmltYXRpb24uX3N0YXJ0ICsgKGFuaW1hdGlvbi5fdER1ciAvIE1hdGguYWJzKGFuaW1hdGlvbi5fdHMgfHwgYW5pbWF0aW9uLl9ydHMgfHwgX3RpbnlOdW0pIHx8IDApKTtcbn0sXG4gICAgX2FsaWduUGxheWhlYWQgPSBmdW5jdGlvbiBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIHRvdGFsVGltZSkge1xuICAvLyBhZGp1c3RzIHRoZSBhbmltYXRpb24ncyBfc3RhcnQgYW5kIF9lbmQgYWNjb3JkaW5nIHRvIHRoZSBwcm92aWRlZCB0b3RhbFRpbWUgKG9ubHkgaWYgdGhlIHBhcmVudCdzIHNtb290aENoaWxkVGltaW5nIGlzIHRydWUgYW5kIHRoZSBhbmltYXRpb24gaXNuJ3QgcGF1c2VkKS4gSXQgZG9lc24ndCBkbyBhbnkgcmVuZGVyaW5nIG9yIGZvcmNpbmcgdGhpbmdzIGJhY2sgaW50byBwYXJlbnQgdGltZWxpbmVzLCBldGMuIC0gdGhhdCdzIHdoYXQgdG90YWxUaW1lKCkgaXMgZm9yLlxuICB2YXIgcGFyZW50ID0gYW5pbWF0aW9uLl9kcDtcblxuICBpZiAocGFyZW50ICYmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyAmJiBhbmltYXRpb24uX3RzKSB7XG4gICAgYW5pbWF0aW9uLl9zdGFydCA9IF9yb3VuZFByZWNpc2UocGFyZW50Ll90aW1lIC0gKGFuaW1hdGlvbi5fdHMgPiAwID8gdG90YWxUaW1lIC8gYW5pbWF0aW9uLl90cyA6ICgoYW5pbWF0aW9uLl9kaXJ0eSA/IGFuaW1hdGlvbi50b3RhbER1cmF0aW9uKCkgOiBhbmltYXRpb24uX3REdXIpIC0gdG90YWxUaW1lKSAvIC1hbmltYXRpb24uX3RzKSk7XG5cbiAgICBfc2V0RW5kKGFuaW1hdGlvbik7XG5cbiAgICBwYXJlbnQuX2RpcnR5IHx8IF91bmNhY2hlKHBhcmVudCwgYW5pbWF0aW9uKTsgLy9mb3IgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnQuIElmIHRoZSBwYXJlbnQncyBjYWNoZSBpcyBhbHJlYWR5IGRpcnR5LCBpdCBhbHJlYWR5IHRvb2sgY2FyZSBvZiBtYXJraW5nIHRoZSBhbmNlc3RvcnMgYXMgZGlydHkgdG9vLCBzbyBza2lwIHRoZSBmdW5jdGlvbiBjYWxsIGhlcmUuXG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcblxuLypcbl90b3RhbFRpbWVUb1RpbWUgPSAoY2xhbXBlZFRvdGFsVGltZSwgZHVyYXRpb24sIHJlcGVhdCwgcmVwZWF0RGVsYXksIHlveW8pID0+IHtcblx0bGV0IGN5Y2xlRHVyYXRpb24gPSBkdXJhdGlvbiArIHJlcGVhdERlbGF5LFxuXHRcdHRpbWUgPSBfcm91bmQoY2xhbXBlZFRvdGFsVGltZSAlIGN5Y2xlRHVyYXRpb24pO1xuXHRpZiAodGltZSA+IGR1cmF0aW9uKSB7XG5cdFx0dGltZSA9IGR1cmF0aW9uO1xuXHR9XG5cdHJldHVybiAoeW95byAmJiAofn4oY2xhbXBlZFRvdGFsVGltZSAvIGN5Y2xlRHVyYXRpb24pICYgMSkpID8gZHVyYXRpb24gLSB0aW1lIDogdGltZTtcbn0sXG4qL1xuX3Bvc3RBZGRDaGVja3MgPSBmdW5jdGlvbiBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpIHtcbiAgdmFyIHQ7XG5cbiAgaWYgKGNoaWxkLl90aW1lIHx8IGNoaWxkLl9pbml0dGVkICYmICFjaGlsZC5fZHVyKSB7XG4gICAgLy9pbiBjYXNlLCBmb3IgZXhhbXBsZSwgdGhlIF9zdGFydCBpcyBtb3ZlZCBvbiBhIHR3ZWVuIHRoYXQgaGFzIGFscmVhZHkgcmVuZGVyZWQuIEltYWdpbmUgaXQncyBhdCBpdHMgZW5kIHN0YXRlLCB0aGVuIHRoZSBzdGFydFRpbWUgaXMgbW92ZWQgV0FZIGxhdGVyIChhZnRlciB0aGUgZW5kIG9mIHRoaXMgdGltZWxpbmUpLCBpdCBzaG91bGQgcmVuZGVyIGF0IGl0cyBiZWdpbm5pbmcuXG4gICAgdCA9IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWVsaW5lLnJhd1RpbWUoKSwgY2hpbGQpO1xuXG4gICAgaWYgKCFjaGlsZC5fZHVyIHx8IF9jbGFtcCgwLCBjaGlsZC50b3RhbER1cmF0aW9uKCksIHQpIC0gY2hpbGQuX3RUaW1lID4gX3RpbnlOdW0pIHtcbiAgICAgIGNoaWxkLnJlbmRlcih0LCB0cnVlKTtcbiAgICB9XG4gIH0gLy9pZiB0aGUgdGltZWxpbmUgaGFzIGFscmVhZHkgZW5kZWQgYnV0IHRoZSBpbnNlcnRlZCB0d2Vlbi90aW1lbGluZSBleHRlbmRzIHRoZSBkdXJhdGlvbiwgd2Ugc2hvdWxkIGVuYWJsZSB0aGlzIHRpbWVsaW5lIGFnYWluIHNvIHRoYXQgaXQgcmVuZGVycyBwcm9wZXJseS4gV2Ugc2hvdWxkIGFsc28gYWxpZ24gdGhlIHBsYXloZWFkIHdpdGggdGhlIHBhcmVudCB0aW1lbGluZSdzIHdoZW4gYXBwcm9wcmlhdGUuXG5cblxuICBpZiAoX3VuY2FjaGUodGltZWxpbmUsIGNoaWxkKS5fZHAgJiYgdGltZWxpbmUuX2luaXR0ZWQgJiYgdGltZWxpbmUuX3RpbWUgPj0gdGltZWxpbmUuX2R1ciAmJiB0aW1lbGluZS5fdHMpIHtcbiAgICAvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvcnMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLi4uXG4gICAgaWYgKHRpbWVsaW5lLl9kdXIgPCB0aW1lbGluZS5kdXJhdGlvbigpKSB7XG4gICAgICB0ID0gdGltZWxpbmU7XG5cbiAgICAgIHdoaWxlICh0Ll9kcCkge1xuICAgICAgICB0LnJhd1RpbWUoKSA+PSAwICYmIHQudG90YWxUaW1lKHQuX3RUaW1lKTsgLy9tb3ZlcyB0aGUgdGltZWxpbmUgKHNoaWZ0cyBpdHMgc3RhcnRUaW1lKSBpZiBuZWNlc3NhcnksIGFuZCBhbHNvIGVuYWJsZXMgaXQuIElmIGl0J3MgY3VycmVudGx5IHplcm8sIHRob3VnaCwgaXQgbWF5IG5vdCBiZSBzY2hlZHVsZWQgdG8gcmVuZGVyIHVudGlsIGxhdGVyIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSBpdCB0byBhbGlnbiB3aXRoIHRoZSBjdXJyZW50IHBsYXloZWFkIHBvc2l0aW9uLiBPbmx5IG1vdmUgdG8gY2F0Y2ggdXAgd2l0aCB0aGUgcGxheWhlYWQuXG5cbiAgICAgICAgdCA9IHQuX2RwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRpbWVsaW5lLl96VGltZSA9IC1fdGlueU51bTsgLy8gaGVscHMgZW5zdXJlIHRoYXQgdGhlIG5leHQgcmVuZGVyKCkgd2lsbCBiZSBmb3JjZWQgKGNyb3NzaW5nU3RhcnQgPSB0cnVlIGluIHJlbmRlcigpKSwgZXZlbiBpZiB0aGUgZHVyYXRpb24gaGFzbid0IGNoYW5nZWQgKHdlJ3JlIGFkZGluZyBhIGNoaWxkIHdoaWNoIHdvdWxkIG5lZWQgdG8gZ2V0IHJlbmRlcmVkKS4gRGVmaW5pdGVseSBhbiBlZGdlIGNhc2UuIE5vdGU6IHdlIE1VU1QgZG8gdGhpcyBBRlRFUiB0aGUgbG9vcCBhYm92ZSB3aGVyZSB0aGUgdG90YWxUaW1lKCkgbWlnaHQgdHJpZ2dlciBhIHJlbmRlcigpIGJlY2F1c2UgdGhpcyBfYWRkVG9UaW1lbGluZSgpIG1ldGhvZCBnZXRzIGNhbGxlZCBmcm9tIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIEJFRk9SRSB0d2VlbnMgZXZlbiByZWNvcmQgdGhlaXIgdGFyZ2V0cywgZXRjLiBzbyB3ZSB3b3VsZG4ndCB3YW50IHRoaW5ncyB0byBnZXQgdHJpZ2dlcmVkIGluIHRoZSB3cm9uZyBvcmRlci5cbiAgfVxufSxcbiAgICBfYWRkVG9UaW1lbGluZSA9IGZ1bmN0aW9uIF9hZGRUb1RpbWVsaW5lKHRpbWVsaW5lLCBjaGlsZCwgcG9zaXRpb24sIHNraXBDaGVja3MpIHtcbiAgY2hpbGQucGFyZW50ICYmIF9yZW1vdmVGcm9tUGFyZW50KGNoaWxkKTtcbiAgY2hpbGQuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZSgoX2lzTnVtYmVyKHBvc2l0aW9uKSA/IHBvc2l0aW9uIDogcG9zaXRpb24gfHwgdGltZWxpbmUgIT09IF9nbG9iYWxUaW1lbGluZSA/IF9wYXJzZVBvc2l0aW9uKHRpbWVsaW5lLCBwb3NpdGlvbiwgY2hpbGQpIDogdGltZWxpbmUuX3RpbWUpICsgY2hpbGQuX2RlbGF5KTtcbiAgY2hpbGQuX2VuZCA9IF9yb3VuZFByZWNpc2UoY2hpbGQuX3N0YXJ0ICsgKGNoaWxkLnRvdGFsRHVyYXRpb24oKSAvIE1hdGguYWJzKGNoaWxkLnRpbWVTY2FsZSgpKSB8fCAwKSk7XG5cbiAgX2FkZExpbmtlZExpc3RJdGVtKHRpbWVsaW5lLCBjaGlsZCwgXCJfZmlyc3RcIiwgXCJfbGFzdFwiLCB0aW1lbGluZS5fc29ydCA/IFwiX3N0YXJ0XCIgOiAwKTtcblxuICBfaXNGcm9tT3JGcm9tU3RhcnQoY2hpbGQpIHx8ICh0aW1lbGluZS5fcmVjZW50ID0gY2hpbGQpO1xuICBza2lwQ2hlY2tzIHx8IF9wb3N0QWRkQ2hlY2tzKHRpbWVsaW5lLCBjaGlsZCk7XG4gIHRpbWVsaW5lLl90cyA8IDAgJiYgX2FsaWduUGxheWhlYWQodGltZWxpbmUsIHRpbWVsaW5lLl90VGltZSk7IC8vIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIG5ldyBjaGlsZCBtYWtlcyBpdCBsb25nZXIsIHdlIG1heSBuZWVkIHRvIGFkanVzdCB0aGUgcGFyZW50J3MgX3N0YXJ0IChwdXNoIGl0IGJhY2spXG5cbiAgcmV0dXJuIHRpbWVsaW5lO1xufSxcbiAgICBfc2Nyb2xsVHJpZ2dlciA9IGZ1bmN0aW9uIF9zY3JvbGxUcmlnZ2VyKGFuaW1hdGlvbiwgdHJpZ2dlcikge1xuICByZXR1cm4gKF9nbG9iYWxzLlNjcm9sbFRyaWdnZXIgfHwgX21pc3NpbmdQbHVnaW4oXCJzY3JvbGxUcmlnZ2VyXCIsIHRyaWdnZXIpKSAmJiBfZ2xvYmFscy5TY3JvbGxUcmlnZ2VyLmNyZWF0ZSh0cmlnZ2VyLCBhbmltYXRpb24pO1xufSxcbiAgICBfYXR0ZW1wdEluaXRUd2VlbiA9IGZ1bmN0aW9uIF9hdHRlbXB0SW5pdFR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cykge1xuICBfaW5pdFR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUpO1xuXG4gIGlmICghdHdlZW4uX2luaXR0ZWQpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIGlmICghZm9yY2UgJiYgdHdlZW4uX3B0ICYmICh0d2Vlbi5fZHVyICYmIHR3ZWVuLnZhcnMubGF6eSAhPT0gZmFsc2UgfHwgIXR3ZWVuLl9kdXIgJiYgdHdlZW4udmFycy5sYXp5KSAmJiBfbGFzdFJlbmRlcmVkRnJhbWUgIT09IF90aWNrZXIuZnJhbWUpIHtcbiAgICBfbGF6eVR3ZWVucy5wdXNoKHR3ZWVuKTtcblxuICAgIHR3ZWVuLl9sYXp5ID0gW3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHNdO1xuICAgIHJldHVybiAxO1xuICB9XG59LFxuICAgIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQgPSBmdW5jdGlvbiBfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0KF9yZWYpIHtcbiAgdmFyIHBhcmVudCA9IF9yZWYucGFyZW50O1xuICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5fdHMgJiYgcGFyZW50Ll9pbml0dGVkICYmICFwYXJlbnQuX2xvY2sgJiYgKHBhcmVudC5yYXdUaW1lKCkgPCAwIHx8IF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQocGFyZW50KSk7XG59LFxuICAgIC8vIGNoZWNrIHBhcmVudCdzIF9sb2NrIGJlY2F1c2Ugd2hlbiBhIHRpbWVsaW5lIHJlcGVhdHMveW95b3MgYW5kIGRvZXMgaXRzIGFydGlmaWNpYWwgd3JhcHBpbmcsIHdlIHNob3VsZG4ndCBmb3JjZSB0aGUgcmF0aW8gYmFjayB0byAwXG5faXNGcm9tT3JGcm9tU3RhcnQgPSBmdW5jdGlvbiBfaXNGcm9tT3JGcm9tU3RhcnQoX3JlZjIpIHtcbiAgdmFyIGRhdGEgPSBfcmVmMi5kYXRhO1xuICByZXR1cm4gZGF0YSA9PT0gXCJpc0Zyb21TdGFydFwiIHx8IGRhdGEgPT09IFwiaXNTdGFydFwiO1xufSxcbiAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4gPSBmdW5jdGlvbiBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIHZhciBwcmV2UmF0aW8gPSB0d2Vlbi5yYXRpbyxcbiAgICAgIHJhdGlvID0gdG90YWxUaW1lIDwgMCB8fCAhdG90YWxUaW1lICYmICghdHdlZW4uX3N0YXJ0ICYmIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQodHdlZW4pICYmICEoIXR3ZWVuLl9pbml0dGVkICYmIF9pc0Zyb21PckZyb21TdGFydCh0d2VlbikpIHx8ICh0d2Vlbi5fdHMgPCAwIHx8IHR3ZWVuLl9kcC5fdHMgPCAwKSAmJiAhX2lzRnJvbU9yRnJvbVN0YXJ0KHR3ZWVuKSkgPyAwIDogMSxcbiAgICAgIC8vIGlmIHRoZSB0d2VlbiBvciBpdHMgcGFyZW50IGlzIHJldmVyc2VkIGFuZCB0aGUgdG90YWxUaW1lIGlzIDAsIHdlIHNob3VsZCBnbyB0byBhIHJhdGlvIG9mIDAuIEVkZ2UgY2FzZTogaWYgYSBmcm9tKCkgb3IgZnJvbVRvKCkgc3RhZ2dlciB0d2VlbiBpcyBwbGFjZWQgbGF0ZXIgaW4gYSB0aW1lbGluZSwgdGhlIFwic3RhcnRBdFwiIHplcm8tZHVyYXRpb24gdHdlZW4gY291bGQgaW5pdGlhbGx5IHJlbmRlciBhdCBhIHRpbWUgd2hlbiB0aGUgcGFyZW50IHRpbWVsaW5lJ3MgcGxheWhlYWQgaXMgdGVjaG5pY2FsbHkgQkVGT1JFIHdoZXJlIHRoaXMgdHdlZW4gaXMsIHNvIG1ha2Ugc3VyZSB0aGF0IGFueSBcImZyb21cIiBhbmQgXCJmcm9tVG9cIiBzdGFydEF0IHR3ZWVucyBhcmUgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUgYXQgYSByYXRpbyBvZiAxLlxuICByZXBlYXREZWxheSA9IHR3ZWVuLl9yRGVsYXksXG4gICAgICB0VGltZSA9IDAsXG4gICAgICBwdCxcbiAgICAgIGl0ZXJhdGlvbixcbiAgICAgIHByZXZJdGVyYXRpb247XG5cbiAgaWYgKHJlcGVhdERlbGF5ICYmIHR3ZWVuLl9yZXBlYXQpIHtcbiAgICAvLyBpbiBjYXNlIHRoZXJlJ3MgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIHRoYXQgaGFzIGEgcmVwZWF0IHdpdGggYSByZXBlYXREZWxheVxuICAgIHRUaW1lID0gX2NsYW1wKDAsIHR3ZWVuLl90RHVyLCB0b3RhbFRpbWUpO1xuICAgIGl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0VGltZSwgcmVwZWF0RGVsYXkpO1xuICAgIHR3ZWVuLl95b3lvICYmIGl0ZXJhdGlvbiAmIDEgJiYgKHJhdGlvID0gMSAtIHJhdGlvKTtcblxuICAgIGlmIChpdGVyYXRpb24gIT09IF9hbmltYXRpb25DeWNsZSh0d2Vlbi5fdFRpbWUsIHJlcGVhdERlbGF5KSkge1xuICAgICAgLy8gaWYgaXRlcmF0aW9uIGNoYW5nZWRcbiAgICAgIHByZXZSYXRpbyA9IDEgLSByYXRpbztcbiAgICAgIHR3ZWVuLnZhcnMucmVwZWF0UmVmcmVzaCAmJiB0d2Vlbi5faW5pdHRlZCAmJiB0d2Vlbi5pbnZhbGlkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJhdGlvICE9PSBwcmV2UmF0aW8gfHwgX3JldmVydGluZyB8fCBmb3JjZSB8fCB0d2Vlbi5felRpbWUgPT09IF90aW55TnVtIHx8ICF0b3RhbFRpbWUgJiYgdHdlZW4uX3pUaW1lKSB7XG4gICAgaWYgKCF0d2Vlbi5faW5pdHRlZCAmJiBfYXR0ZW1wdEluaXRUd2Vlbih0d2VlbiwgdG90YWxUaW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMpKSB7XG4gICAgICAvLyBpZiB3ZSByZW5kZXIgdGhlIHZlcnkgYmVnaW5uaW5nICh0aW1lID09IDApIG9mIGEgZnJvbVRvKCksIHdlIG11c3QgZm9yY2UgdGhlIHJlbmRlciAobm9ybWFsIHR3ZWVucyB3b3VsZG4ndCBuZWVkIHRvIHJlbmRlciBhdCBhIHRpbWUgb2YgMCB3aGVuIHRoZSBwcmV2VGltZSB3YXMgYWxzbyAwKS4gVGhpcyBpcyBhbHNvIG1hbmRhdG9yeSB0byBtYWtlIHN1cmUgb3ZlcndyaXRpbmcga2lja3MgaW4gaW1tZWRpYXRlbHkuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJldkl0ZXJhdGlvbiA9IHR3ZWVuLl96VGltZTtcbiAgICB0d2Vlbi5felRpbWUgPSB0b3RhbFRpbWUgfHwgKHN1cHByZXNzRXZlbnRzID8gX3RpbnlOdW0gOiAwKTsgLy8gd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuXG5cbiAgICBzdXBwcmVzc0V2ZW50cyB8fCAoc3VwcHJlc3NFdmVudHMgPSB0b3RhbFRpbWUgJiYgIXByZXZJdGVyYXRpb24pOyAvLyBpZiBpdCB3YXMgcmVuZGVyZWQgcHJldmlvdXNseSBhdCBleGFjdGx5IDAgKF96VGltZSkgYW5kIG5vdyB0aGUgcGxheWhlYWQgaXMgbW92aW5nIGF3YXksIERPTidUIGZpcmUgY2FsbGJhY2tzIG90aGVyd2lzZSB0aGV5J2xsIHNlZW0gbGlrZSBkdXBsaWNhdGVzLlxuXG4gICAgdHdlZW4ucmF0aW8gPSByYXRpbztcbiAgICB0d2Vlbi5fZnJvbSAmJiAocmF0aW8gPSAxIC0gcmF0aW8pO1xuICAgIHR3ZWVuLl90aW1lID0gMDtcbiAgICB0d2Vlbi5fdFRpbWUgPSB0VGltZTtcbiAgICBwdCA9IHR3ZWVuLl9wdDtcblxuICAgIHdoaWxlIChwdCkge1xuICAgICAgcHQucihyYXRpbywgcHQuZCk7XG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHRvdGFsVGltZSA8IDAgJiYgX3Jld2luZFN0YXJ0QXQodHdlZW4sIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIHRydWUpO1xuICAgIHR3ZWVuLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uVXBkYXRlXCIpO1xuICAgIHRUaW1lICYmIHR3ZWVuLl9yZXBlYXQgJiYgIXN1cHByZXNzRXZlbnRzICYmIHR3ZWVuLnBhcmVudCAmJiBfY2FsbGJhY2sodHdlZW4sIFwib25SZXBlYXRcIik7XG5cbiAgICBpZiAoKHRvdGFsVGltZSA+PSB0d2Vlbi5fdER1ciB8fCB0b3RhbFRpbWUgPCAwKSAmJiB0d2Vlbi5yYXRpbyA9PT0gcmF0aW8pIHtcbiAgICAgIHJhdGlvICYmIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLCAxKTtcblxuICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cykge1xuICAgICAgICBfY2FsbGJhY2sodHdlZW4sIHJhdGlvID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgIHR3ZWVuLl9wcm9tICYmIHR3ZWVuLl9wcm9tKCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKCF0d2Vlbi5felRpbWUpIHtcbiAgICB0d2Vlbi5felRpbWUgPSB0b3RhbFRpbWU7XG4gIH1cbn0sXG4gICAgX2ZpbmROZXh0UGF1c2VUd2VlbiA9IGZ1bmN0aW9uIF9maW5kTmV4dFBhdXNlVHdlZW4oYW5pbWF0aW9uLCBwcmV2VGltZSwgdGltZSkge1xuICB2YXIgY2hpbGQ7XG5cbiAgaWYgKHRpbWUgPiBwcmV2VGltZSkge1xuICAgIGNoaWxkID0gYW5pbWF0aW9uLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCAmJiBjaGlsZC5fc3RhcnQgPD0gdGltZSkge1xuICAgICAgaWYgKGNoaWxkLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmIGNoaWxkLl9zdGFydCA+IHByZXZUaW1lKSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY2hpbGQgPSBhbmltYXRpb24uX2xhc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQuX3N0YXJ0ID49IHRpbWUpIHtcbiAgICAgIGlmIChjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIiAmJiBjaGlsZC5fc3RhcnQgPCBwcmV2VGltZSkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX3ByZXY7XG4gICAgfVxuICB9XG59LFxuICAgIF9zZXREdXJhdGlvbiA9IGZ1bmN0aW9uIF9zZXREdXJhdGlvbihhbmltYXRpb24sIGR1cmF0aW9uLCBza2lwVW5jYWNoZSwgbGVhdmVQbGF5aGVhZCkge1xuICB2YXIgcmVwZWF0ID0gYW5pbWF0aW9uLl9yZXBlYXQsXG4gICAgICBkdXIgPSBfcm91bmRQcmVjaXNlKGR1cmF0aW9uKSB8fCAwLFxuICAgICAgdG90YWxQcm9ncmVzcyA9IGFuaW1hdGlvbi5fdFRpbWUgLyBhbmltYXRpb24uX3REdXI7XG4gIHRvdGFsUHJvZ3Jlc3MgJiYgIWxlYXZlUGxheWhlYWQgJiYgKGFuaW1hdGlvbi5fdGltZSAqPSBkdXIgLyBhbmltYXRpb24uX2R1cik7XG4gIGFuaW1hdGlvbi5fZHVyID0gZHVyO1xuICBhbmltYXRpb24uX3REdXIgPSAhcmVwZWF0ID8gZHVyIDogcmVwZWF0IDwgMCA/IDFlMTAgOiBfcm91bmRQcmVjaXNlKGR1ciAqIChyZXBlYXQgKyAxKSArIGFuaW1hdGlvbi5fckRlbGF5ICogcmVwZWF0KTtcbiAgdG90YWxQcm9ncmVzcyA+IDAgJiYgIWxlYXZlUGxheWhlYWQgPyBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIGFuaW1hdGlvbi5fdFRpbWUgPSBhbmltYXRpb24uX3REdXIgKiB0b3RhbFByb2dyZXNzKSA6IGFuaW1hdGlvbi5wYXJlbnQgJiYgX3NldEVuZChhbmltYXRpb24pO1xuICBza2lwVW5jYWNoZSB8fCBfdW5jYWNoZShhbmltYXRpb24ucGFyZW50LCBhbmltYXRpb24pO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uID0gZnVuY3Rpb24gX29uVXBkYXRlVG90YWxEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbiBpbnN0YW5jZW9mIFRpbWVsaW5lID8gX3VuY2FjaGUoYW5pbWF0aW9uKSA6IF9zZXREdXJhdGlvbihhbmltYXRpb24sIGFuaW1hdGlvbi5fZHVyKTtcbn0sXG4gICAgX3plcm9Qb3NpdGlvbiA9IHtcbiAgX3N0YXJ0OiAwLFxuICBlbmRUaW1lOiBfZW1wdHlGdW5jLFxuICB0b3RhbER1cmF0aW9uOiBfZW1wdHlGdW5jXG59LFxuICAgIF9wYXJzZVBvc2l0aW9uID0gZnVuY3Rpb24gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbiwgcGVyY2VudEFuaW1hdGlvbikge1xuICB2YXIgbGFiZWxzID0gYW5pbWF0aW9uLmxhYmVscyxcbiAgICAgIHJlY2VudCA9IGFuaW1hdGlvbi5fcmVjZW50IHx8IF96ZXJvUG9zaXRpb24sXG4gICAgICBjbGlwcGVkRHVyYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24oKSA+PSBfYmlnTnVtID8gcmVjZW50LmVuZFRpbWUoZmFsc2UpIDogYW5pbWF0aW9uLl9kdXIsXG4gICAgICAvL2luIGNhc2UgdGhlcmUncyBhIGNoaWxkIHRoYXQgaW5maW5pdGVseSByZXBlYXRzLCB1c2VycyBhbG1vc3QgbmV2ZXIgaW50ZW5kIGZvciB0aGUgaW5zZXJ0aW9uIHBvaW50IG9mIGEgbmV3IGNoaWxkIHRvIGJlIGJhc2VkIG9uIGEgU1VQRVIgbG9uZyB2YWx1ZSBsaWtlIHRoYXQgc28gd2UgY2xpcCBpdCBhbmQgYXNzdW1lIHRoZSBtb3N0IHJlY2VudGx5LWFkZGVkIGNoaWxkJ3MgZW5kVGltZSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICBpLFxuICAgICAgb2Zmc2V0LFxuICAgICAgaXNQZXJjZW50O1xuXG4gIGlmIChfaXNTdHJpbmcocG9zaXRpb24pICYmIChpc05hTihwb3NpdGlvbikgfHwgcG9zaXRpb24gaW4gbGFiZWxzKSkge1xuICAgIC8vaWYgdGhlIHN0cmluZyBpcyBhIG51bWJlciBsaWtlIFwiMVwiLCBjaGVjayB0byBzZWUgaWYgdGhlcmUncyBhIGxhYmVsIHdpdGggdGhhdCBuYW1lLCBvdGhlcndpc2UgaW50ZXJwcmV0IGl0IGFzIGEgbnVtYmVyIChhYnNvbHV0ZSB2YWx1ZSkuXG4gICAgb2Zmc2V0ID0gcG9zaXRpb24uY2hhckF0KDApO1xuICAgIGlzUGVyY2VudCA9IHBvc2l0aW9uLnN1YnN0cigtMSkgPT09IFwiJVwiO1xuICAgIGkgPSBwb3NpdGlvbi5pbmRleE9mKFwiPVwiKTtcblxuICAgIGlmIChvZmZzZXQgPT09IFwiPFwiIHx8IG9mZnNldCA9PT0gXCI+XCIpIHtcbiAgICAgIGkgPj0gMCAmJiAocG9zaXRpb24gPSBwb3NpdGlvbi5yZXBsYWNlKC89LywgXCJcIikpO1xuICAgICAgcmV0dXJuIChvZmZzZXQgPT09IFwiPFwiID8gcmVjZW50Ll9zdGFydCA6IHJlY2VudC5lbmRUaW1lKHJlY2VudC5fcmVwZWF0ID49IDApKSArIChwYXJzZUZsb2F0KHBvc2l0aW9uLnN1YnN0cigxKSkgfHwgMCkgKiAoaXNQZXJjZW50ID8gKGkgPCAwID8gcmVjZW50IDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpIC8gMTAwIDogMSk7XG4gICAgfVxuXG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICBwb3NpdGlvbiBpbiBsYWJlbHMgfHwgKGxhYmVsc1twb3NpdGlvbl0gPSBjbGlwcGVkRHVyYXRpb24pO1xuICAgICAgcmV0dXJuIGxhYmVsc1twb3NpdGlvbl07XG4gICAgfVxuXG4gICAgb2Zmc2V0ID0gcGFyc2VGbG9hdChwb3NpdGlvbi5jaGFyQXQoaSAtIDEpICsgcG9zaXRpb24uc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoaXNQZXJjZW50ICYmIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCAvIDEwMCAqIChfaXNBcnJheShwZXJjZW50QW5pbWF0aW9uKSA/IHBlcmNlbnRBbmltYXRpb25bMF0gOiBwZXJjZW50QW5pbWF0aW9uKS50b3RhbER1cmF0aW9uKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGkgPiAxID8gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbi5zdWJzdHIoMCwgaSAtIDEpLCBwZXJjZW50QW5pbWF0aW9uKSArIG9mZnNldCA6IGNsaXBwZWREdXJhdGlvbiArIG9mZnNldDtcbiAgfVxuXG4gIHJldHVybiBwb3NpdGlvbiA9PSBudWxsID8gY2xpcHBlZER1cmF0aW9uIDogK3Bvc2l0aW9uO1xufSxcbiAgICBfY3JlYXRlVHdlZW5UeXBlID0gZnVuY3Rpb24gX2NyZWF0ZVR3ZWVuVHlwZSh0eXBlLCBwYXJhbXMsIHRpbWVsaW5lKSB7XG4gIHZhciBpc0xlZ2FjeSA9IF9pc051bWJlcihwYXJhbXNbMV0pLFxuICAgICAgdmFyc0luZGV4ID0gKGlzTGVnYWN5ID8gMiA6IDEpICsgKHR5cGUgPCAyID8gMCA6IDEpLFxuICAgICAgdmFycyA9IHBhcmFtc1t2YXJzSW5kZXhdLFxuICAgICAgaXJWYXJzLFxuICAgICAgcGFyZW50O1xuXG4gIGlzTGVnYWN5ICYmICh2YXJzLmR1cmF0aW9uID0gcGFyYW1zWzFdKTtcbiAgdmFycy5wYXJlbnQgPSB0aW1lbGluZTtcblxuICBpZiAodHlwZSkge1xuICAgIGlyVmFycyA9IHZhcnM7XG4gICAgcGFyZW50ID0gdGltZWxpbmU7XG5cbiAgICB3aGlsZSAocGFyZW50ICYmICEoXCJpbW1lZGlhdGVSZW5kZXJcIiBpbiBpclZhcnMpKSB7XG4gICAgICAvLyBpbmhlcml0YW5jZSBoYXNuJ3QgaGFwcGVuZWQgeWV0LCBidXQgc29tZW9uZSBtYXkgaGF2ZSBzZXQgYSBkZWZhdWx0IGluIGFuIGFuY2VzdG9yIHRpbWVsaW5lLiBXZSBjb3VsZCBkbyB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKF9pbmhlcml0RGVmYXVsdHModmFycykuaW1tZWRpYXRlUmVuZGVyKSBidXQgdGhhdCdkIGV4YWN0IGEgc2xpZ2h0IHBlcmZvcm1hbmNlIHBlbmFsdHkgYmVjYXVzZSBfaW5oZXJpdERlZmF1bHRzKCkgYWxzbyBydW5zIGluIHRoZSBUd2VlbiBjb25zdHJ1Y3Rvci4gV2UncmUgcGF5aW5nIGEgc21hbGwga2IgcHJpY2UgaGVyZSB0byBnYWluIHNwZWVkLlxuICAgICAgaXJWYXJzID0gcGFyZW50LnZhcnMuZGVmYXVsdHMgfHwge307XG4gICAgICBwYXJlbnQgPSBfaXNOb3RGYWxzZShwYXJlbnQudmFycy5pbmhlcml0KSAmJiBwYXJlbnQucGFyZW50O1xuICAgIH1cblxuICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UoaXJWYXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgdHlwZSA8IDIgPyB2YXJzLnJ1bkJhY2t3YXJkcyA9IDEgOiB2YXJzLnN0YXJ0QXQgPSBwYXJhbXNbdmFyc0luZGV4IC0gMV07IC8vIFwiZnJvbVwiIHZhcnNcbiAgfVxuXG4gIHJldHVybiBuZXcgVHdlZW4ocGFyYW1zWzBdLCB2YXJzLCBwYXJhbXNbdmFyc0luZGV4ICsgMV0pO1xufSxcbiAgICBfY29uZGl0aW9uYWxSZXR1cm4gPSBmdW5jdGlvbiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmMpIHtcbiAgcmV0dXJuIHZhbHVlIHx8IHZhbHVlID09PSAwID8gZnVuYyh2YWx1ZSkgOiBmdW5jO1xufSxcbiAgICBfY2xhbXAgPSBmdW5jdGlvbiBfY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8IG1pbiA/IG1pbiA6IHZhbHVlID4gbWF4ID8gbWF4IDogdmFsdWU7XG59LFxuICAgIGdldFVuaXQgPSBmdW5jdGlvbiBnZXRVbml0KHZhbHVlLCB2KSB7XG4gIHJldHVybiAhX2lzU3RyaW5nKHZhbHVlKSB8fCAhKHYgPSBfdW5pdEV4cC5leGVjKHZhbHVlKSkgPyBcIlwiIDogdlsxXTtcbn0sXG4gICAgLy8gbm90ZTogcHJvdGVjdCBhZ2FpbnN0IHBhZGRlZCBudW1iZXJzIGFzIHN0cmluZ3MsIGxpa2UgXCIxMDAuMTAwXCIuIFRoYXQgc2hvdWxkbid0IHJldHVybiBcIjAwXCIgYXMgdGhlIHVuaXQuIElmIGl0J3MgbnVtZXJpYywgcmV0dXJuIG5vIHVuaXQuXG5jbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBfY2xhbXAobWluLCBtYXgsIHYpO1xuICB9KTtcbn0sXG4gICAgX3NsaWNlID0gW10uc2xpY2UsXG4gICAgX2lzQXJyYXlMaWtlID0gZnVuY3Rpb24gX2lzQXJyYXlMaWtlKHZhbHVlLCBub25FbXB0eSkge1xuICByZXR1cm4gdmFsdWUgJiYgX2lzT2JqZWN0KHZhbHVlKSAmJiBcImxlbmd0aFwiIGluIHZhbHVlICYmICghbm9uRW1wdHkgJiYgIXZhbHVlLmxlbmd0aCB8fCB2YWx1ZS5sZW5ndGggLSAxIGluIHZhbHVlICYmIF9pc09iamVjdCh2YWx1ZVswXSkpICYmICF2YWx1ZS5ub2RlVHlwZSAmJiB2YWx1ZSAhPT0gX3dpbjtcbn0sXG4gICAgX2ZsYXR0ZW4gPSBmdW5jdGlvbiBfZmxhdHRlbihhciwgbGVhdmVTdHJpbmdzLCBhY2N1bXVsYXRvcikge1xuICBpZiAoYWNjdW11bGF0b3IgPT09IHZvaWQgMCkge1xuICAgIGFjY3VtdWxhdG9yID0gW107XG4gIH1cblxuICByZXR1cm4gYXIuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgX2FjY3VtdWxhdG9yO1xuXG4gICAgcmV0dXJuIF9pc1N0cmluZyh2YWx1ZSkgJiYgIWxlYXZlU3RyaW5ncyB8fCBfaXNBcnJheUxpa2UodmFsdWUsIDEpID8gKF9hY2N1bXVsYXRvciA9IGFjY3VtdWxhdG9yKS5wdXNoLmFwcGx5KF9hY2N1bXVsYXRvciwgdG9BcnJheSh2YWx1ZSkpIDogYWNjdW11bGF0b3IucHVzaCh2YWx1ZSk7XG4gIH0pIHx8IGFjY3VtdWxhdG9yO1xufSxcbiAgICAvL3Rha2VzIGFueSB2YWx1ZSBhbmQgcmV0dXJucyBhbiBhcnJheS4gSWYgaXQncyBhIHN0cmluZyAoYW5kIGxlYXZlU3RyaW5ncyBpc24ndCB0cnVlKSwgaXQnbGwgdXNlIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoKSBhbmQgY29udmVydCB0aGF0IHRvIGFuIGFycmF5LiBJdCdsbCBhbHNvIGFjY2VwdCBpdGVyYWJsZXMgbGlrZSBqUXVlcnkgb2JqZWN0cy5cbnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5KHZhbHVlLCBzY29wZSwgbGVhdmVTdHJpbmdzKSB7XG4gIHJldHVybiBfY29udGV4dCAmJiAhc2NvcGUgJiYgX2NvbnRleHQuc2VsZWN0b3IgPyBfY29udGV4dC5zZWxlY3Rvcih2YWx1ZSkgOiBfaXNTdHJpbmcodmFsdWUpICYmICFsZWF2ZVN0cmluZ3MgJiYgKF9jb3JlSW5pdHRlZCB8fCAhX3dha2UoKSkgPyBfc2xpY2UuY2FsbCgoc2NvcGUgfHwgX2RvYykucXVlcnlTZWxlY3RvckFsbCh2YWx1ZSksIDApIDogX2lzQXJyYXkodmFsdWUpID8gX2ZsYXR0ZW4odmFsdWUsIGxlYXZlU3RyaW5ncykgOiBfaXNBcnJheUxpa2UodmFsdWUpID8gX3NsaWNlLmNhbGwodmFsdWUsIDApIDogdmFsdWUgPyBbdmFsdWVdIDogW107XG59LFxuICAgIHNlbGVjdG9yID0gZnVuY3Rpb24gc2VsZWN0b3IodmFsdWUpIHtcbiAgdmFsdWUgPSB0b0FycmF5KHZhbHVlKVswXSB8fCBfd2FybihcIkludmFsaWQgc2NvcGVcIikgfHwge307XG4gIHJldHVybiBmdW5jdGlvbiAodikge1xuICAgIHZhciBlbCA9IHZhbHVlLmN1cnJlbnQgfHwgdmFsdWUubmF0aXZlRWxlbWVudCB8fCB2YWx1ZTtcbiAgICByZXR1cm4gdG9BcnJheSh2LCBlbC5xdWVyeVNlbGVjdG9yQWxsID8gZWwgOiBlbCA9PT0gdmFsdWUgPyBfd2FybihcIkludmFsaWQgc2NvcGVcIikgfHwgX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIDogdmFsdWUpO1xuICB9O1xufSxcbiAgICBzaHVmZmxlID0gZnVuY3Rpb24gc2h1ZmZsZShhKSB7XG4gIHJldHVybiBhLnNvcnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAuNSAtIE1hdGgucmFuZG9tKCk7XG4gIH0pO1xufSxcbiAgICAvLyBhbHRlcm5hdGl2ZSB0aGF0J3MgYSBiaXQgZmFzdGVyIGFuZCBtb3JlIHJlbGlhYmx5IGRpdmVyc2UgYnV0IGJpZ2dlcjogICBmb3IgKGxldCBqLCB2LCBpID0gYS5sZW5ndGg7IGk7IGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBpKSwgdiA9IGFbLS1pXSwgYVtpXSA9IGFbal0sIGFbal0gPSB2KTsgcmV0dXJuIGE7XG4vL2ZvciBkaXN0cmlidXRpbmcgdmFsdWVzIGFjcm9zcyBhbiBhcnJheS4gQ2FuIGFjY2VwdCBhIG51bWJlciwgYSBmdW5jdGlvbiBvciAobW9zdCBjb21tb25seSkgYSBmdW5jdGlvbiB3aGljaCBjYW4gY29udGFpbiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6IHtiYXNlLCBhbW91bnQsIGZyb20sIGVhc2UsIGdyaWQsIGF4aXMsIGxlbmd0aCwgZWFjaH0uIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGV4cGVjdHMgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOiBpbmRleCwgdGFyZ2V0LCBhcnJheS4gUmVjb2duaXplcyB0aGUgZm9sbG93aW5nXG5kaXN0cmlidXRlID0gZnVuY3Rpb24gZGlzdHJpYnV0ZSh2KSB7XG4gIGlmIChfaXNGdW5jdGlvbih2KSkge1xuICAgIHJldHVybiB2O1xuICB9XG5cbiAgdmFyIHZhcnMgPSBfaXNPYmplY3QodikgPyB2IDoge1xuICAgIGVhY2g6IHZcbiAgfSxcbiAgICAgIC8vbjoxIGlzIGp1c3QgdG8gaW5kaWNhdGUgdiB3YXMgYSBudW1iZXI7IHdlIGxldmVyYWdlIHRoYXQgbGF0ZXIgdG8gc2V0IHYgYWNjb3JkaW5nIHRvIHRoZSBsZW5ndGggd2UgZ2V0LiBJZiBhIG51bWJlciBpcyBwYXNzZWQgaW4sIHdlIHRyZWF0IGl0IGxpa2UgdGhlIG9sZCBzdGFnZ2VyIHZhbHVlIHdoZXJlIDAuMSwgZm9yIGV4YW1wbGUsIHdvdWxkIG1lYW4gdGhhdCB0aGluZ3Mgd291bGQgYmUgZGlzdHJpYnV0ZWQgd2l0aCAwLjEgYmV0d2VlbiBlYWNoIGVsZW1lbnQgaW4gdGhlIGFycmF5IHJhdGhlciB0aGFuIGEgdG90YWwgXCJhbW91bnRcIiB0aGF0J3MgY2h1bmtlZCBvdXQgYW1vbmcgdGhlbSBhbGwuXG4gIGVhc2UgPSBfcGFyc2VFYXNlKHZhcnMuZWFzZSksXG4gICAgICBmcm9tID0gdmFycy5mcm9tIHx8IDAsXG4gICAgICBiYXNlID0gcGFyc2VGbG9hdCh2YXJzLmJhc2UpIHx8IDAsXG4gICAgICBjYWNoZSA9IHt9LFxuICAgICAgaXNEZWNpbWFsID0gZnJvbSA+IDAgJiYgZnJvbSA8IDEsXG4gICAgICByYXRpb3MgPSBpc05hTihmcm9tKSB8fCBpc0RlY2ltYWwsXG4gICAgICBheGlzID0gdmFycy5heGlzLFxuICAgICAgcmF0aW9YID0gZnJvbSxcbiAgICAgIHJhdGlvWSA9IGZyb207XG5cbiAgaWYgKF9pc1N0cmluZyhmcm9tKSkge1xuICAgIHJhdGlvWCA9IHJhdGlvWSA9IHtcbiAgICAgIGNlbnRlcjogLjUsXG4gICAgICBlZGdlczogLjUsXG4gICAgICBlbmQ6IDFcbiAgICB9W2Zyb21dIHx8IDA7XG4gIH0gZWxzZSBpZiAoIWlzRGVjaW1hbCAmJiByYXRpb3MpIHtcbiAgICByYXRpb1ggPSBmcm9tWzBdO1xuICAgIHJhdGlvWSA9IGZyb21bMV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGksIHRhcmdldCwgYSkge1xuICAgIHZhciBsID0gKGEgfHwgdmFycykubGVuZ3RoLFxuICAgICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSxcbiAgICAgICAgb3JpZ2luWCxcbiAgICAgICAgb3JpZ2luWSxcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgZCxcbiAgICAgICAgaixcbiAgICAgICAgbWF4LFxuICAgICAgICBtaW4sXG4gICAgICAgIHdyYXBBdDtcblxuICAgIGlmICghZGlzdGFuY2VzKSB7XG4gICAgICB3cmFwQXQgPSB2YXJzLmdyaWQgPT09IFwiYXV0b1wiID8gMCA6ICh2YXJzLmdyaWQgfHwgWzEsIF9iaWdOdW1dKVsxXTtcblxuICAgICAgaWYgKCF3cmFwQXQpIHtcbiAgICAgICAgbWF4ID0gLV9iaWdOdW07XG5cbiAgICAgICAgd2hpbGUgKG1heCA8IChtYXggPSBhW3dyYXBBdCsrXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KSAmJiB3cmFwQXQgPCBsKSB7fVxuXG4gICAgICAgIHdyYXBBdC0tO1xuICAgICAgfVxuXG4gICAgICBkaXN0YW5jZXMgPSBjYWNoZVtsXSA9IFtdO1xuICAgICAgb3JpZ2luWCA9IHJhdGlvcyA/IE1hdGgubWluKHdyYXBBdCwgbCkgKiByYXRpb1ggLSAuNSA6IGZyb20gJSB3cmFwQXQ7XG4gICAgICBvcmlnaW5ZID0gd3JhcEF0ID09PSBfYmlnTnVtID8gMCA6IHJhdGlvcyA/IGwgKiByYXRpb1kgLyB3cmFwQXQgLSAuNSA6IGZyb20gLyB3cmFwQXQgfCAwO1xuICAgICAgbWF4ID0gMDtcbiAgICAgIG1pbiA9IF9iaWdOdW07XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICAgICAgeCA9IGogJSB3cmFwQXQgLSBvcmlnaW5YO1xuICAgICAgICB5ID0gb3JpZ2luWSAtIChqIC8gd3JhcEF0IHwgMCk7XG4gICAgICAgIGRpc3RhbmNlc1tqXSA9IGQgPSAhYXhpcyA/IF9zcXJ0KHggKiB4ICsgeSAqIHkpIDogTWF0aC5hYnMoYXhpcyA9PT0gXCJ5XCIgPyB5IDogeCk7XG4gICAgICAgIGQgPiBtYXggJiYgKG1heCA9IGQpO1xuICAgICAgICBkIDwgbWluICYmIChtaW4gPSBkKTtcbiAgICAgIH1cblxuICAgICAgZnJvbSA9PT0gXCJyYW5kb21cIiAmJiBzaHVmZmxlKGRpc3RhbmNlcyk7XG4gICAgICBkaXN0YW5jZXMubWF4ID0gbWF4IC0gbWluO1xuICAgICAgZGlzdGFuY2VzLm1pbiA9IG1pbjtcbiAgICAgIGRpc3RhbmNlcy52ID0gbCA9IChwYXJzZUZsb2F0KHZhcnMuYW1vdW50KSB8fCBwYXJzZUZsb2F0KHZhcnMuZWFjaCkgKiAod3JhcEF0ID4gbCA/IGwgLSAxIDogIWF4aXMgPyBNYXRoLm1heCh3cmFwQXQsIGwgLyB3cmFwQXQpIDogYXhpcyA9PT0gXCJ5XCIgPyBsIC8gd3JhcEF0IDogd3JhcEF0KSB8fCAwKSAqIChmcm9tID09PSBcImVkZ2VzXCIgPyAtMSA6IDEpO1xuICAgICAgZGlzdGFuY2VzLmIgPSBsIDwgMCA/IGJhc2UgLSBsIDogYmFzZTtcbiAgICAgIGRpc3RhbmNlcy51ID0gZ2V0VW5pdCh2YXJzLmFtb3VudCB8fCB2YXJzLmVhY2gpIHx8IDA7IC8vdW5pdFxuXG4gICAgICBlYXNlID0gZWFzZSAmJiBsIDwgMCA/IF9pbnZlcnRFYXNlKGVhc2UpIDogZWFzZTtcbiAgICB9XG5cbiAgICBsID0gKGRpc3RhbmNlc1tpXSAtIGRpc3RhbmNlcy5taW4pIC8gZGlzdGFuY2VzLm1heCB8fCAwO1xuICAgIHJldHVybiBfcm91bmRQcmVjaXNlKGRpc3RhbmNlcy5iICsgKGVhc2UgPyBlYXNlKGwpIDogbCkgKiBkaXN0YW5jZXMudikgKyBkaXN0YW5jZXMudTsgLy9yb3VuZCBpbiBvcmRlciB0byB3b3JrIGFyb3VuZCBmbG9hdGluZyBwb2ludCBlcnJvcnNcbiAgfTtcbn0sXG4gICAgX3JvdW5kTW9kaWZpZXIgPSBmdW5jdGlvbiBfcm91bmRNb2RpZmllcih2KSB7XG4gIC8vcGFzcyBpbiAwLjEgZ2V0IGEgZnVuY3Rpb24gdGhhdCdsbCByb3VuZCB0byB0aGUgbmVhcmVzdCB0ZW50aCwgb3IgNSB0byByb3VuZCB0byB0aGUgY2xvc2VzdCA1LCBvciAwLjAwMSB0byB0aGUgY2xvc2VzdCAxMDAwdGgsIGV0Yy5cbiAgdmFyIHAgPSBNYXRoLnBvdygxMCwgKCh2ICsgXCJcIikuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aCk7IC8vdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGxpa2UgMjQgKiAwLjEgPT0gMi40MDAwMDAwMDAwMDAwMDA0KSwgd2UgY2hvcCBvZmYgYXQgYSBzcGVjaWZpYyBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgKG11Y2ggZmFzdGVyIHRoYW4gdG9GaXhlZCgpKVxuXG4gIHJldHVybiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIG4gPSBfcm91bmRQcmVjaXNlKE1hdGgucm91bmQocGFyc2VGbG9hdChyYXcpIC8gdikgKiB2ICogcCk7XG5cbiAgICByZXR1cm4gKG4gLSBuICUgMSkgLyBwICsgKF9pc051bWJlcihyYXcpID8gMCA6IGdldFVuaXQocmF3KSk7IC8vIG4gLSBuICUgMSByZXBsYWNlcyBNYXRoLmZsb29yKCkgaW4gb3JkZXIgdG8gaGFuZGxlIG5lZ2F0aXZlIHZhbHVlcyBwcm9wZXJseS4gRm9yIGV4YW1wbGUsIE1hdGguZmxvb3IoLTE1MC4wMDAwMDAwMDAwMDAwMykgaXMgMTUxIVxuICB9O1xufSxcbiAgICBzbmFwID0gZnVuY3Rpb24gc25hcChzbmFwVG8sIHZhbHVlKSB7XG4gIHZhciBpc0FycmF5ID0gX2lzQXJyYXkoc25hcFRvKSxcbiAgICAgIHJhZGl1cyxcbiAgICAgIGlzMkQ7XG5cbiAgaWYgKCFpc0FycmF5ICYmIF9pc09iamVjdChzbmFwVG8pKSB7XG4gICAgcmFkaXVzID0gaXNBcnJheSA9IHNuYXBUby5yYWRpdXMgfHwgX2JpZ051bTtcblxuICAgIGlmIChzbmFwVG8udmFsdWVzKSB7XG4gICAgICBzbmFwVG8gPSB0b0FycmF5KHNuYXBUby52YWx1ZXMpO1xuXG4gICAgICBpZiAoaXMyRCA9ICFfaXNOdW1iZXIoc25hcFRvWzBdKSkge1xuICAgICAgICByYWRpdXMgKj0gcmFkaXVzOyAvL3BlcmZvcm1hbmNlIG9wdGltaXphdGlvbiBzbyB3ZSBkb24ndCBoYXZlIHRvIE1hdGguc3FydCgpIGluIHRoZSBsb29wLlxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzbmFwVG8gPSBfcm91bmRNb2RpZmllcihzbmFwVG8uaW5jcmVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCAhaXNBcnJheSA/IF9yb3VuZE1vZGlmaWVyKHNuYXBUbykgOiBfaXNGdW5jdGlvbihzbmFwVG8pID8gZnVuY3Rpb24gKHJhdykge1xuICAgIGlzMkQgPSBzbmFwVG8ocmF3KTtcbiAgICByZXR1cm4gTWF0aC5hYnMoaXMyRCAtIHJhdykgPD0gcmFkaXVzID8gaXMyRCA6IHJhdztcbiAgfSA6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICB2YXIgeCA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy54IDogcmF3KSxcbiAgICAgICAgeSA9IHBhcnNlRmxvYXQoaXMyRCA/IHJhdy55IDogMCksXG4gICAgICAgIG1pbiA9IF9iaWdOdW0sXG4gICAgICAgIGNsb3Nlc3QgPSAwLFxuICAgICAgICBpID0gc25hcFRvLmxlbmd0aCxcbiAgICAgICAgZHgsXG4gICAgICAgIGR5O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKGlzMkQpIHtcbiAgICAgICAgZHggPSBzbmFwVG9baV0ueCAtIHg7XG4gICAgICAgIGR5ID0gc25hcFRvW2ldLnkgLSB5O1xuICAgICAgICBkeCA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHggPSBNYXRoLmFicyhzbmFwVG9baV0gLSB4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGR4IDwgbWluKSB7XG4gICAgICAgIG1pbiA9IGR4O1xuICAgICAgICBjbG9zZXN0ID0gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZXN0ID0gIXJhZGl1cyB8fCBtaW4gPD0gcmFkaXVzID8gc25hcFRvW2Nsb3Nlc3RdIDogcmF3O1xuICAgIHJldHVybiBpczJEIHx8IGNsb3Nlc3QgPT09IHJhdyB8fCBfaXNOdW1iZXIocmF3KSA/IGNsb3Nlc3QgOiBjbG9zZXN0ICsgZ2V0VW5pdChyYXcpO1xuICB9KTtcbn0sXG4gICAgcmFuZG9tID0gZnVuY3Rpb24gcmFuZG9tKG1pbiwgbWF4LCByb3VuZGluZ0luY3JlbWVudCwgcmV0dXJuRnVuY3Rpb24pIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybihfaXNBcnJheShtaW4pID8gIW1heCA6IHJvdW5kaW5nSW5jcmVtZW50ID09PSB0cnVlID8gISEocm91bmRpbmdJbmNyZW1lbnQgPSAwKSA6ICFyZXR1cm5GdW5jdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfaXNBcnJheShtaW4pID8gbWluW35+KE1hdGgucmFuZG9tKCkgKiBtaW4ubGVuZ3RoKV0gOiAocm91bmRpbmdJbmNyZW1lbnQgPSByb3VuZGluZ0luY3JlbWVudCB8fCAxZS01KSAmJiAocmV0dXJuRnVuY3Rpb24gPSByb3VuZGluZ0luY3JlbWVudCA8IDEgPyBNYXRoLnBvdygxMCwgKHJvdW5kaW5nSW5jcmVtZW50ICsgXCJcIikubGVuZ3RoIC0gMikgOiAxKSAmJiBNYXRoLmZsb29yKE1hdGgucm91bmQoKG1pbiAtIHJvdW5kaW5nSW5jcmVtZW50IC8gMiArIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgcm91bmRpbmdJbmNyZW1lbnQgKiAuOTkpKSAvIHJvdW5kaW5nSW5jcmVtZW50KSAqIHJvdW5kaW5nSW5jcmVtZW50ICogcmV0dXJuRnVuY3Rpb24pIC8gcmV0dXJuRnVuY3Rpb247XG4gIH0pO1xufSxcbiAgICBwaXBlID0gZnVuY3Rpb24gcGlwZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmN0aW9ucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jdGlvbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHYsIGYpIHtcbiAgICAgIHJldHVybiBmKHYpO1xuICAgIH0sIHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgdW5pdGl6ZSA9IGZ1bmN0aW9uIHVuaXRpemUoZnVuYywgdW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmMocGFyc2VGbG9hdCh2YWx1ZSkpICsgKHVuaXQgfHwgZ2V0VW5pdCh2YWx1ZSkpO1xuICB9O1xufSxcbiAgICBub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiBtYXBSYW5nZShtaW4sIG1heCwgMCwgMSwgdmFsdWUpO1xufSxcbiAgICBfd3JhcEFycmF5ID0gZnVuY3Rpb24gX3dyYXBBcnJheShhLCB3cmFwcGVyLCB2YWx1ZSkge1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gYVt+fndyYXBwZXIoaW5kZXgpXTtcbiAgfSk7XG59LFxuICAgIHdyYXAgPSBmdW5jdGlvbiB3cmFwKG1pbiwgbWF4LCB2YWx1ZSkge1xuICAvLyBOT1RFOiB3cmFwKCkgQ0FOTk9UIGJlIGFuIGFycm93IGZ1bmN0aW9uISBBIHZlcnkgb2RkIGNvbXBpbGluZyBidWcgY2F1c2VzIHByb2JsZW1zICh1bnJlbGF0ZWQgdG8gR1NBUCkuXG4gIHZhciByYW5nZSA9IG1heCAtIG1pbjtcbiAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcCgwLCBtaW4ubGVuZ3RoKSwgbWF4KSA6IF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIChyYW5nZSArICh2YWx1ZSAtIG1pbikgJSByYW5nZSkgJSByYW5nZSArIG1pbjtcbiAgfSk7XG59LFxuICAgIHdyYXBZb3lvID0gZnVuY3Rpb24gd3JhcFlveW8obWluLCBtYXgsIHZhbHVlKSB7XG4gIHZhciByYW5nZSA9IG1heCAtIG1pbixcbiAgICAgIHRvdGFsID0gcmFuZ2UgKiAyO1xuICByZXR1cm4gX2lzQXJyYXkobWluKSA/IF93cmFwQXJyYXkobWluLCB3cmFwWW95bygwLCBtaW4ubGVuZ3RoIC0gMSksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhbHVlID0gKHRvdGFsICsgKHZhbHVlIC0gbWluKSAlIHRvdGFsKSAlIHRvdGFsIHx8IDA7XG4gICAgcmV0dXJuIG1pbiArICh2YWx1ZSA+IHJhbmdlID8gdG90YWwgLSB2YWx1ZSA6IHZhbHVlKTtcbiAgfSk7XG59LFxuICAgIF9yZXBsYWNlUmFuZG9tID0gZnVuY3Rpb24gX3JlcGxhY2VSYW5kb20odmFsdWUpIHtcbiAgLy9yZXBsYWNlcyBhbGwgb2NjdXJyZW5jZXMgb2YgcmFuZG9tKC4uLikgaW4gYSBzdHJpbmcgd2l0aCB0aGUgY2FsY3VsYXRlZCByYW5kb20gdmFsdWUuIGNhbiBiZSBhIHJhbmdlIGxpa2UgcmFuZG9tKC0xMDAsIDEwMCwgNSkgb3IgYW4gYXJyYXkgbGlrZSByYW5kb20oWzAsIDEwMCwgNTAwXSlcbiAgdmFyIHByZXYgPSAwLFxuICAgICAgcyA9IFwiXCIsXG4gICAgICBpLFxuICAgICAgbnVtcyxcbiAgICAgIGVuZCxcbiAgICAgIGlzQXJyYXk7XG5cbiAgd2hpbGUgKH4oaSA9IHZhbHVlLmluZGV4T2YoXCJyYW5kb20oXCIsIHByZXYpKSkge1xuICAgIGVuZCA9IHZhbHVlLmluZGV4T2YoXCIpXCIsIGkpO1xuICAgIGlzQXJyYXkgPSB2YWx1ZS5jaGFyQXQoaSArIDcpID09PSBcIltcIjtcbiAgICBudW1zID0gdmFsdWUuc3Vic3RyKGkgKyA3LCBlbmQgLSBpIC0gNykubWF0Y2goaXNBcnJheSA/IF9kZWxpbWl0ZWRWYWx1ZUV4cCA6IF9zdHJpY3ROdW1FeHApO1xuICAgIHMgKz0gdmFsdWUuc3Vic3RyKHByZXYsIGkgLSBwcmV2KSArIHJhbmRvbShpc0FycmF5ID8gbnVtcyA6ICtudW1zWzBdLCBpc0FycmF5ID8gMCA6ICtudW1zWzFdLCArbnVtc1syXSB8fCAxZS01KTtcbiAgICBwcmV2ID0gZW5kICsgMTtcbiAgfVxuXG4gIHJldHVybiBzICsgdmFsdWUuc3Vic3RyKHByZXYsIHZhbHVlLmxlbmd0aCAtIHByZXYpO1xufSxcbiAgICBtYXBSYW5nZSA9IGZ1bmN0aW9uIG1hcFJhbmdlKGluTWluLCBpbk1heCwgb3V0TWluLCBvdXRNYXgsIHZhbHVlKSB7XG4gIHZhciBpblJhbmdlID0gaW5NYXggLSBpbk1pbixcbiAgICAgIG91dFJhbmdlID0gb3V0TWF4IC0gb3V0TWluO1xuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gb3V0TWluICsgKCh2YWx1ZSAtIGluTWluKSAvIGluUmFuZ2UgKiBvdXRSYW5nZSB8fCAwKTtcbiAgfSk7XG59LFxuICAgIGludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoc3RhcnQsIGVuZCwgcHJvZ3Jlc3MsIG11dGF0ZSkge1xuICB2YXIgZnVuYyA9IGlzTmFOKHN0YXJ0ICsgZW5kKSA/IDAgOiBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAoMSAtIHApICogc3RhcnQgKyBwICogZW5kO1xuICB9O1xuXG4gIGlmICghZnVuYykge1xuICAgIHZhciBpc1N0cmluZyA9IF9pc1N0cmluZyhzdGFydCksXG4gICAgICAgIG1hc3RlciA9IHt9LFxuICAgICAgICBwLFxuICAgICAgICBpLFxuICAgICAgICBpbnRlcnBvbGF0b3JzLFxuICAgICAgICBsLFxuICAgICAgICBpbDtcblxuICAgIHByb2dyZXNzID09PSB0cnVlICYmIChtdXRhdGUgPSAxKSAmJiAocHJvZ3Jlc3MgPSBudWxsKTtcblxuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgc3RhcnQgPSB7XG4gICAgICAgIHA6IHN0YXJ0XG4gICAgICB9O1xuICAgICAgZW5kID0ge1xuICAgICAgICBwOiBlbmRcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChfaXNBcnJheShzdGFydCkgJiYgIV9pc0FycmF5KGVuZCkpIHtcbiAgICAgIGludGVycG9sYXRvcnMgPSBbXTtcbiAgICAgIGwgPSBzdGFydC5sZW5ndGg7XG4gICAgICBpbCA9IGwgLSAyO1xuXG4gICAgICBmb3IgKGkgPSAxOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludGVycG9sYXRvcnMucHVzaChpbnRlcnBvbGF0ZShzdGFydFtpIC0gMV0sIHN0YXJ0W2ldKSk7IC8vYnVpbGQgdGhlIGludGVycG9sYXRvcnMgdXAgZnJvbnQgYXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gdGhhdCB3aGVuIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgbWFueSB0aW1lcywgaXQgY2FuIGp1c3QgcmV1c2UgdGhlbS5cbiAgICAgIH1cblxuICAgICAgbC0tO1xuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHAgKj0gbDtcbiAgICAgICAgdmFyIGkgPSBNYXRoLm1pbihpbCwgfn5wKTtcbiAgICAgICAgcmV0dXJuIGludGVycG9sYXRvcnNbaV0ocCAtIGkpO1xuICAgICAgfTtcblxuICAgICAgcHJvZ3Jlc3MgPSBlbmQ7XG4gICAgfSBlbHNlIGlmICghbXV0YXRlKSB7XG4gICAgICBzdGFydCA9IF9tZXJnZShfaXNBcnJheShzdGFydCkgPyBbXSA6IHt9LCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKCFpbnRlcnBvbGF0b3JzKSB7XG4gICAgICBmb3IgKHAgaW4gZW5kKSB7XG4gICAgICAgIF9hZGRQcm9wVHdlZW4uY2FsbChtYXN0ZXIsIHN0YXJ0LCBwLCBcImdldFwiLCBlbmRbcF0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhwKSB7XG4gICAgICAgIHJldHVybiBfcmVuZGVyUHJvcFR3ZWVucyhwLCBtYXN0ZXIpIHx8IChpc1N0cmluZyA/IHN0YXJ0LnAgOiBzdGFydCk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4ocHJvZ3Jlc3MsIGZ1bmMpO1xufSxcbiAgICBfZ2V0TGFiZWxJbkRpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRpbWVsaW5lLCBmcm9tVGltZSwgYmFja3dhcmQpIHtcbiAgLy91c2VkIGZvciBuZXh0TGFiZWwoKSBhbmQgcHJldmlvdXNMYWJlbCgpXG4gIHZhciBsYWJlbHMgPSB0aW1lbGluZS5sYWJlbHMsXG4gICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgcCxcbiAgICAgIGRpc3RhbmNlLFxuICAgICAgbGFiZWw7XG5cbiAgZm9yIChwIGluIGxhYmVscykge1xuICAgIGRpc3RhbmNlID0gbGFiZWxzW3BdIC0gZnJvbVRpbWU7XG5cbiAgICBpZiAoZGlzdGFuY2UgPCAwID09PSAhIWJhY2t3YXJkICYmIGRpc3RhbmNlICYmIG1pbiA+IChkaXN0YW5jZSA9IE1hdGguYWJzKGRpc3RhbmNlKSkpIHtcbiAgICAgIGxhYmVsID0gcDtcbiAgICAgIG1pbiA9IGRpc3RhbmNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsYWJlbDtcbn0sXG4gICAgX2NhbGxiYWNrID0gZnVuY3Rpb24gX2NhbGxiYWNrKGFuaW1hdGlvbiwgdHlwZSwgZXhlY3V0ZUxhenlGaXJzdCkge1xuICB2YXIgdiA9IGFuaW1hdGlvbi52YXJzLFxuICAgICAgY2FsbGJhY2sgPSB2W3R5cGVdLFxuICAgICAgcHJldkNvbnRleHQgPSBfY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBhbmltYXRpb24uX2N0eCxcbiAgICAgIHBhcmFtcyxcbiAgICAgIHNjb3BlLFxuICAgICAgcmVzdWx0O1xuXG4gIGlmICghY2FsbGJhY2spIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwYXJhbXMgPSB2W3R5cGUgKyBcIlBhcmFtc1wiXTtcbiAgc2NvcGUgPSB2LmNhbGxiYWNrU2NvcGUgfHwgYW5pbWF0aW9uO1xuICBleGVjdXRlTGF6eUZpcnN0ICYmIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gYSB0aW1lbGluZSBmaW5pc2hlcywgdXNlcnMgZXhwZWN0IHRoaW5ncyB0byBoYXZlIHJlbmRlcmVkIGZ1bGx5LiBJbWFnaW5lIGFuIG9uVXBkYXRlIG9uIGEgdGltZWxpbmUgdGhhdCByZXBvcnRzL2NoZWNrcyB0d2VlbmVkIHZhbHVlcy5cblxuICBjb250ZXh0ICYmIChfY29udGV4dCA9IGNvbnRleHQpO1xuICByZXN1bHQgPSBwYXJhbXMgPyBjYWxsYmFjay5hcHBseShzY29wZSwgcGFyYW1zKSA6IGNhbGxiYWNrLmNhbGwoc2NvcGUpO1xuICBfY29udGV4dCA9IHByZXZDb250ZXh0O1xuICByZXR1cm4gcmVzdWx0O1xufSxcbiAgICBfaW50ZXJydXB0ID0gZnVuY3Rpb24gX2ludGVycnVwdChhbmltYXRpb24pIHtcbiAgX3JlbW92ZUZyb21QYXJlbnQoYW5pbWF0aW9uKTtcblxuICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciAmJiBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlci5raWxsKGZhbHNlKTtcbiAgYW5pbWF0aW9uLnByb2dyZXNzKCkgPCAxICYmIF9jYWxsYmFjayhhbmltYXRpb24sIFwib25JbnRlcnJ1cHRcIik7XG4gIHJldHVybiBhbmltYXRpb247XG59LFxuICAgIF9xdWlja1R3ZWVuLFxuICAgIF9jcmVhdGVQbHVnaW4gPSBmdW5jdGlvbiBfY3JlYXRlUGx1Z2luKGNvbmZpZykge1xuICBjb25maWcgPSAhY29uZmlnLm5hbWUgJiYgY29uZmlnW1wiZGVmYXVsdFwiXSB8fCBjb25maWc7IC8vVU1EIHBhY2thZ2luZyB3cmFwcyB0aGluZ3Mgb2RkbHksIHNvIGZvciBleGFtcGxlIE1vdGlvblBhdGhIZWxwZXIgYmVjb21lcyB7TW90aW9uUGF0aEhlbHBlcjpNb3Rpb25QYXRoSGVscGVyLCBkZWZhdWx0Ok1vdGlvblBhdGhIZWxwZXJ9LlxuXG4gIHZhciBuYW1lID0gY29uZmlnLm5hbWUsXG4gICAgICBpc0Z1bmMgPSBfaXNGdW5jdGlvbihjb25maWcpLFxuICAgICAgUGx1Z2luID0gbmFtZSAmJiAhaXNGdW5jICYmIGNvbmZpZy5pbml0ID8gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3Byb3BzID0gW107XG4gIH0gOiBjb25maWcsXG4gICAgICAvL2luIGNhc2Ugc29tZW9uZSBwYXNzZXMgaW4gYW4gb2JqZWN0IHRoYXQncyBub3QgYSBwbHVnaW4sIGxpa2UgQ3VzdG9tRWFzZVxuICBpbnN0YW5jZURlZmF1bHRzID0ge1xuICAgIGluaXQ6IF9lbXB0eUZ1bmMsXG4gICAgcmVuZGVyOiBfcmVuZGVyUHJvcFR3ZWVucyxcbiAgICBhZGQ6IF9hZGRQcm9wVHdlZW4sXG4gICAga2lsbDogX2tpbGxQcm9wVHdlZW5zT2YsXG4gICAgbW9kaWZpZXI6IF9hZGRQbHVnaW5Nb2RpZmllcixcbiAgICByYXdWYXJzOiAwXG4gIH0sXG4gICAgICBzdGF0aWNzID0ge1xuICAgIHRhcmdldFRlc3Q6IDAsXG4gICAgZ2V0OiAwLFxuICAgIGdldFNldHRlcjogX2dldFNldHRlcixcbiAgICBhbGlhc2VzOiB7fSxcbiAgICByZWdpc3RlcjogMFxuICB9O1xuXG4gIF93YWtlKCk7XG5cbiAgaWYgKGNvbmZpZyAhPT0gUGx1Z2luKSB7XG4gICAgaWYgKF9wbHVnaW5zW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX3NldERlZmF1bHRzKFBsdWdpbiwgX3NldERlZmF1bHRzKF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgaW5zdGFuY2VEZWZhdWx0cyksIHN0YXRpY3MpKTsgLy9zdGF0aWMgbWV0aG9kc1xuXG5cbiAgICBfbWVyZ2UoUGx1Z2luLnByb3RvdHlwZSwgX21lcmdlKGluc3RhbmNlRGVmYXVsdHMsIF9jb3B5RXhjbHVkaW5nKGNvbmZpZywgc3RhdGljcykpKTsgLy9pbnN0YW5jZSBtZXRob2RzXG5cblxuICAgIF9wbHVnaW5zW1BsdWdpbi5wcm9wID0gbmFtZV0gPSBQbHVnaW47XG5cbiAgICBpZiAoY29uZmlnLnRhcmdldFRlc3QpIHtcbiAgICAgIF9oYXJuZXNzUGx1Z2lucy5wdXNoKFBsdWdpbik7XG5cbiAgICAgIF9yZXNlcnZlZFByb3BzW25hbWVdID0gMTtcbiAgICB9XG5cbiAgICBuYW1lID0gKG5hbWUgPT09IFwiY3NzXCIgPyBcIkNTU1wiIDogbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyKDEpKSArIFwiUGx1Z2luXCI7IC8vZm9yIHRoZSBnbG9iYWwgbmFtZS4gXCJtb3Rpb25QYXRoXCIgc2hvdWxkIGJlY29tZSBNb3Rpb25QYXRoUGx1Z2luXG4gIH1cblxuICBfYWRkR2xvYmFsKG5hbWUsIFBsdWdpbik7XG5cbiAgY29uZmlnLnJlZ2lzdGVyICYmIGNvbmZpZy5yZWdpc3Rlcihnc2FwLCBQbHVnaW4sIFByb3BUd2Vlbik7XG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENPTE9SU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXzI1NSA9IDI1NSxcbiAgICBfY29sb3JMb29rdXAgPSB7XG4gIGFxdWE6IFswLCBfMjU1LCBfMjU1XSxcbiAgbGltZTogWzAsIF8yNTUsIDBdLFxuICBzaWx2ZXI6IFsxOTIsIDE5MiwgMTkyXSxcbiAgYmxhY2s6IFswLCAwLCAwXSxcbiAgbWFyb29uOiBbMTI4LCAwLCAwXSxcbiAgdGVhbDogWzAsIDEyOCwgMTI4XSxcbiAgYmx1ZTogWzAsIDAsIF8yNTVdLFxuICBuYXZ5OiBbMCwgMCwgMTI4XSxcbiAgd2hpdGU6IFtfMjU1LCBfMjU1LCBfMjU1XSxcbiAgb2xpdmU6IFsxMjgsIDEyOCwgMF0sXG4gIHllbGxvdzogW18yNTUsIF8yNTUsIDBdLFxuICBvcmFuZ2U6IFtfMjU1LCAxNjUsIDBdLFxuICBncmF5OiBbMTI4LCAxMjgsIDEyOF0sXG4gIHB1cnBsZTogWzEyOCwgMCwgMTI4XSxcbiAgZ3JlZW46IFswLCAxMjgsIDBdLFxuICByZWQ6IFtfMjU1LCAwLCAwXSxcbiAgcGluazogW18yNTUsIDE5MiwgMjAzXSxcbiAgY3lhbjogWzAsIF8yNTUsIF8yNTVdLFxuICB0cmFuc3BhcmVudDogW18yNTUsIF8yNTUsIF8yNTUsIDBdXG59LFxuICAgIC8vIHBvc3NpYmxlIGZ1dHVyZSBpZGVhIHRvIHJlcGxhY2UgdGhlIGhhcmQtY29kZWQgY29sb3IgbmFtZSB2YWx1ZXMgLSBwdXQgdGhpcyBpbiB0aGUgdGlja2VyLndha2UoKSB3aGVyZSB3ZSBzZXQgdGhlIF9kb2M6XG4vLyBsZXQgY3R4ID0gX2RvYy5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLmdldENvbnRleHQoXCIyZFwiKTtcbi8vIF9mb3JFYWNoTmFtZShcImFxdWEsbGltZSxzaWx2ZXIsYmxhY2ssbWFyb29uLHRlYWwsYmx1ZSxuYXZ5LHdoaXRlLG9saXZlLHllbGxvdyxvcmFuZ2UsZ3JheSxwdXJwbGUsZ3JlZW4scmVkLHBpbmssY3lhblwiLCBjb2xvciA9PiB7Y3R4LmZpbGxTdHlsZSA9IGNvbG9yOyBfY29sb3JMb29rdXBbY29sb3JdID0gc3BsaXRDb2xvcihjdHguZmlsbFN0eWxlKX0pO1xuX2h1ZSA9IGZ1bmN0aW9uIF9odWUoaCwgbTEsIG0yKSB7XG4gIGggKz0gaCA8IDAgPyAxIDogaCA+IDEgPyAtMSA6IDA7XG4gIHJldHVybiAoaCAqIDYgPCAxID8gbTEgKyAobTIgLSBtMSkgKiBoICogNiA6IGggPCAuNSA/IG0yIDogaCAqIDMgPCAyID8gbTEgKyAobTIgLSBtMSkgKiAoMiAvIDMgLSBoKSAqIDYgOiBtMSkgKiBfMjU1ICsgLjUgfCAwO1xufSxcbiAgICBzcGxpdENvbG9yID0gZnVuY3Rpb24gc3BsaXRDb2xvcih2LCB0b0hTTCwgZm9yY2VBbHBoYSkge1xuICB2YXIgYSA9ICF2ID8gX2NvbG9yTG9va3VwLmJsYWNrIDogX2lzTnVtYmVyKHYpID8gW3YgPj4gMTYsIHYgPj4gOCAmIF8yNTUsIHYgJiBfMjU1XSA6IDAsXG4gICAgICByLFxuICAgICAgZyxcbiAgICAgIGIsXG4gICAgICBoLFxuICAgICAgcyxcbiAgICAgIGwsXG4gICAgICBtYXgsXG4gICAgICBtaW4sXG4gICAgICBkLFxuICAgICAgd2FzSFNMO1xuXG4gIGlmICghYSkge1xuICAgIGlmICh2LnN1YnN0cigtMSkgPT09IFwiLFwiKSB7XG4gICAgICAvL3NvbWV0aW1lcyBhIHRyYWlsaW5nIGNvbW1hIGlzIGluY2x1ZGVkIGFuZCB3ZSBzaG91bGQgY2hvcCBpdCBvZmYgKHR5cGljYWxseSBmcm9tIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgdmFsdWVzIGxpa2UgYSB0ZXh0U2hhZG93OlwiMnB4IDJweCAycHggYmx1ZSwgNXB4IDVweCA1cHggcmdiKDI1NSwwLDApXCIgLSBpbiB0aGlzIGV4YW1wbGUgXCJibHVlLFwiIGhhcyBhIHRyYWlsaW5nIGNvbW1hLiBXZSBjb3VsZCBzdHJpcCBpdCBvdXQgaW5zaWRlIHBhcnNlQ29tcGxleCgpIGJ1dCB3ZSdkIG5lZWQgdG8gZG8gaXQgdG8gdGhlIGJlZ2lubmluZyBhbmQgZW5kaW5nIHZhbHVlcyBwbHVzIGl0IHdvdWxkbid0IHByb3ZpZGUgcHJvdGVjdGlvbiBmcm9tIG90aGVyIHBvdGVudGlhbCBzY2VuYXJpb3MgbGlrZSBpZiB0aGUgdXNlciBwYXNzZXMgaW4gYSBzaW1pbGFyIHZhbHVlLlxuICAgICAgdiA9IHYuc3Vic3RyKDAsIHYubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgaWYgKF9jb2xvckxvb2t1cFt2XSkge1xuICAgICAgYSA9IF9jb2xvckxvb2t1cFt2XTtcbiAgICB9IGVsc2UgaWYgKHYuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgaWYgKHYubGVuZ3RoIDwgNikge1xuICAgICAgICAvL2ZvciBzaG9ydGhhbmQgbGlrZSAjOUYwIG9yICM5RjBGIChjb3VsZCBoYXZlIGFscGhhKVxuICAgICAgICByID0gdi5jaGFyQXQoMSk7XG4gICAgICAgIGcgPSB2LmNoYXJBdCgyKTtcbiAgICAgICAgYiA9IHYuY2hhckF0KDMpO1xuICAgICAgICB2ID0gXCIjXCIgKyByICsgciArIGcgKyBnICsgYiArIGIgKyAodi5sZW5ndGggPT09IDUgPyB2LmNoYXJBdCg0KSArIHYuY2hhckF0KDQpIDogXCJcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh2Lmxlbmd0aCA9PT0gOSkge1xuICAgICAgICAvLyBoZXggd2l0aCBhbHBoYSwgbGlrZSAjZmQ1ZTUzZmZcbiAgICAgICAgYSA9IHBhcnNlSW50KHYuc3Vic3RyKDEsIDYpLCAxNik7XG4gICAgICAgIHJldHVybiBbYSA+PiAxNiwgYSA+PiA4ICYgXzI1NSwgYSAmIF8yNTUsIHBhcnNlSW50KHYuc3Vic3RyKDcpLCAxNikgLyAyNTVdO1xuICAgICAgfVxuXG4gICAgICB2ID0gcGFyc2VJbnQodi5zdWJzdHIoMSksIDE2KTtcbiAgICAgIGEgPSBbdiA+PiAxNiwgdiA+PiA4ICYgXzI1NSwgdiAmIF8yNTVdO1xuICAgIH0gZWxzZSBpZiAodi5zdWJzdHIoMCwgMykgPT09IFwiaHNsXCIpIHtcbiAgICAgIGEgPSB3YXNIU0wgPSB2Lm1hdGNoKF9zdHJpY3ROdW1FeHApO1xuXG4gICAgICBpZiAoIXRvSFNMKSB7XG4gICAgICAgIGggPSArYVswXSAlIDM2MCAvIDM2MDtcbiAgICAgICAgcyA9ICthWzFdIC8gMTAwO1xuICAgICAgICBsID0gK2FbMl0gLyAxMDA7XG4gICAgICAgIGcgPSBsIDw9IC41ID8gbCAqIChzICsgMSkgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgICByID0gbCAqIDIgLSBnO1xuICAgICAgICBhLmxlbmd0aCA+IDMgJiYgKGFbM10gKj0gMSk7IC8vY2FzdCBhcyBudW1iZXJcblxuICAgICAgICBhWzBdID0gX2h1ZShoICsgMSAvIDMsIHIsIGcpO1xuICAgICAgICBhWzFdID0gX2h1ZShoLCByLCBnKTtcbiAgICAgICAgYVsyXSA9IF9odWUoaCAtIDEgLyAzLCByLCBnKTtcbiAgICAgIH0gZWxzZSBpZiAofnYuaW5kZXhPZihcIj1cIikpIHtcbiAgICAgICAgLy9pZiByZWxhdGl2ZSB2YWx1ZXMgYXJlIGZvdW5kLCBqdXN0IHJldHVybiB0aGUgcmF3IHN0cmluZ3Mgd2l0aCB0aGUgcmVsYXRpdmUgcHJlZml4ZXMgaW4gcGxhY2UuXG4gICAgICAgIGEgPSB2Lm1hdGNoKF9udW1FeHApO1xuICAgICAgICBmb3JjZUFscGhhICYmIGEubGVuZ3RoIDwgNCAmJiAoYVszXSA9IDEpO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IHYubWF0Y2goX3N0cmljdE51bUV4cCkgfHwgX2NvbG9yTG9va3VwLnRyYW5zcGFyZW50O1xuICAgIH1cblxuICAgIGEgPSBhLm1hcChOdW1iZXIpO1xuICB9XG5cbiAgaWYgKHRvSFNMICYmICF3YXNIU0wpIHtcbiAgICByID0gYVswXSAvIF8yNTU7XG4gICAgZyA9IGFbMV0gLyBfMjU1O1xuICAgIGIgPSBhWzJdIC8gXzI1NTtcbiAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgICBoID0gcyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGQgPSBtYXggLSBtaW47XG4gICAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgICBoID0gbWF4ID09PSByID8gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCkgOiBtYXggPT09IGcgPyAoYiAtIHIpIC8gZCArIDIgOiAociAtIGcpIC8gZCArIDQ7XG4gICAgICBoICo9IDYwO1xuICAgIH1cblxuICAgIGFbMF0gPSB+fihoICsgLjUpO1xuICAgIGFbMV0gPSB+fihzICogMTAwICsgLjUpO1xuICAgIGFbMl0gPSB+fihsICogMTAwICsgLjUpO1xuICB9XG5cbiAgZm9yY2VBbHBoYSAmJiBhLmxlbmd0aCA8IDQgJiYgKGFbM10gPSAxKTtcbiAgcmV0dXJuIGE7XG59LFxuICAgIF9jb2xvck9yZGVyRGF0YSA9IGZ1bmN0aW9uIF9jb2xvck9yZGVyRGF0YSh2KSB7XG4gIC8vIHN0cmlwcyBvdXQgdGhlIGNvbG9ycyBmcm9tIHRoZSBzdHJpbmcsIGZpbmRzIGFsbCB0aGUgbnVtZXJpYyBzbG90cyAod2l0aCB1bml0cykgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhvc2UuIFRoZSBBcnJheSBhbHNvIGhhcyBhIFwiY1wiIHByb3BlcnR5IHdoaWNoIGlzIGFuIEFycmF5IG9mIHRoZSBpbmRleCB2YWx1ZXMgd2hlcmUgdGhlIGNvbG9ycyBiZWxvbmcuIFRoaXMgaXMgdG8gaGVscCB3b3JrIGFyb3VuZCBpc3N1ZXMgd2hlcmUgdGhlcmUncyBhIG1pcy1tYXRjaGVkIG9yZGVyIG9mIGNvbG9yL251bWVyaWMgZGF0YSBsaWtlIGRyb3Atc2hhZG93KCNmMDAgMHB4IDFweCAycHgpIGFuZCBkcm9wLXNoYWRvdygweCAxcHggMnB4ICNmMDApLiBUaGlzIGlzIGJhc2ljYWxseSBhIGhlbHBlciBmdW5jdGlvbiB1c2VkIGluIF9mb3JtYXRDb2xvcnMoKVxuICB2YXIgdmFsdWVzID0gW10sXG4gICAgICBjID0gW10sXG4gICAgICBpID0gLTE7XG4gIHYuc3BsaXQoX2NvbG9yRXhwKS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGEgPSB2Lm1hdGNoKF9udW1XaXRoVW5pdEV4cCkgfHwgW107XG4gICAgdmFsdWVzLnB1c2guYXBwbHkodmFsdWVzLCBhKTtcbiAgICBjLnB1c2goaSArPSBhLmxlbmd0aCArIDEpO1xuICB9KTtcbiAgdmFsdWVzLmMgPSBjO1xuICByZXR1cm4gdmFsdWVzO1xufSxcbiAgICBfZm9ybWF0Q29sb3JzID0gZnVuY3Rpb24gX2Zvcm1hdENvbG9ycyhzLCB0b0hTTCwgb3JkZXJNYXRjaERhdGEpIHtcbiAgdmFyIHJlc3VsdCA9IFwiXCIsXG4gICAgICBjb2xvcnMgPSAocyArIHJlc3VsdCkubWF0Y2goX2NvbG9yRXhwKSxcbiAgICAgIHR5cGUgPSB0b0hTTCA/IFwiaHNsYShcIiA6IFwicmdiYShcIixcbiAgICAgIGkgPSAwLFxuICAgICAgYyxcbiAgICAgIHNoZWxsLFxuICAgICAgZCxcbiAgICAgIGw7XG5cbiAgaWYgKCFjb2xvcnMpIHtcbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGNvbG9ycyA9IGNvbG9ycy5tYXAoZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgcmV0dXJuIChjb2xvciA9IHNwbGl0Q29sb3IoY29sb3IsIHRvSFNMLCAxKSkgJiYgdHlwZSArICh0b0hTTCA/IGNvbG9yWzBdICsgXCIsXCIgKyBjb2xvclsxXSArIFwiJSxcIiArIGNvbG9yWzJdICsgXCIlLFwiICsgY29sb3JbM10gOiBjb2xvci5qb2luKFwiLFwiKSkgKyBcIilcIjtcbiAgfSk7XG5cbiAgaWYgKG9yZGVyTWF0Y2hEYXRhKSB7XG4gICAgZCA9IF9jb2xvck9yZGVyRGF0YShzKTtcbiAgICBjID0gb3JkZXJNYXRjaERhdGEuYztcblxuICAgIGlmIChjLmpvaW4ocmVzdWx0KSAhPT0gZC5jLmpvaW4ocmVzdWx0KSkge1xuICAgICAgc2hlbGwgPSBzLnJlcGxhY2UoX2NvbG9yRXhwLCBcIjFcIikuc3BsaXQoX251bVdpdGhVbml0RXhwKTtcbiAgICAgIGwgPSBzaGVsbC5sZW5ndGggLSAxO1xuXG4gICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gc2hlbGxbaV0gKyAofmMuaW5kZXhPZihpKSA/IGNvbG9ycy5zaGlmdCgpIHx8IHR5cGUgKyBcIjAsMCwwLDApXCIgOiAoZC5sZW5ndGggPyBkIDogY29sb3JzLmxlbmd0aCA/IGNvbG9ycyA6IG9yZGVyTWF0Y2hEYXRhKS5zaGlmdCgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIXNoZWxsKSB7XG4gICAgc2hlbGwgPSBzLnNwbGl0KF9jb2xvckV4cCk7XG4gICAgbCA9IHNoZWxsLmxlbmd0aCAtIDE7XG5cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgcmVzdWx0ICs9IHNoZWxsW2ldICsgY29sb3JzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQgKyBzaGVsbFtsXTtcbn0sXG4gICAgX2NvbG9yRXhwID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcyA9IFwiKD86XFxcXGIoPzooPzpyZ2J8cmdiYXxoc2x8aHNsYSlcXFxcKC4rP1xcXFwpKXxcXFxcQiMoPzpbMC05YS1mXXszLDR9KXsxLDJ9XFxcXGJcIixcbiAgICAgIC8vd2UnbGwgZHluYW1pY2FsbHkgYnVpbGQgdGhpcyBSZWd1bGFyIEV4cHJlc3Npb24gdG8gY29uc2VydmUgZmlsZSBzaXplLiBBZnRlciBidWlsZGluZyBpdCwgaXQgd2lsbCBiZSBhYmxlIHRvIGZpbmQgcmdiKCksIHJnYmEoKSwgIyAoaGV4YWRlY2ltYWwpLCBhbmQgbmFtZWQgY29sb3IgdmFsdWVzIGxpa2UgcmVkLCBibHVlLCBwdXJwbGUsIGV0Yy4sXG4gIHA7XG5cbiAgZm9yIChwIGluIF9jb2xvckxvb2t1cCkge1xuICAgIHMgKz0gXCJ8XCIgKyBwICsgXCJcXFxcYlwiO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAocyArIFwiKVwiLCBcImdpXCIpO1xufSgpLFxuICAgIF9oc2xFeHAgPSAvaHNsW2FdP1xcKC8sXG4gICAgX2NvbG9yU3RyaW5nRmlsdGVyID0gZnVuY3Rpb24gX2NvbG9yU3RyaW5nRmlsdGVyKGEpIHtcbiAgdmFyIGNvbWJpbmVkID0gYS5qb2luKFwiIFwiKSxcbiAgICAgIHRvSFNMO1xuICBfY29sb3JFeHAubGFzdEluZGV4ID0gMDtcblxuICBpZiAoX2NvbG9yRXhwLnRlc3QoY29tYmluZWQpKSB7XG4gICAgdG9IU0wgPSBfaHNsRXhwLnRlc3QoY29tYmluZWQpO1xuICAgIGFbMV0gPSBfZm9ybWF0Q29sb3JzKGFbMV0sIHRvSFNMKTtcbiAgICBhWzBdID0gX2Zvcm1hdENvbG9ycyhhWzBdLCB0b0hTTCwgX2NvbG9yT3JkZXJEYXRhKGFbMV0pKTsgLy8gbWFrZSBzdXJlIHRoZSBvcmRlciBvZiBudW1iZXJzL2NvbG9ycyBtYXRjaCB3aXRoIHRoZSBFTkQgdmFsdWUuXG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUSUNLRVJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl90aWNrZXJBY3RpdmUsXG4gICAgX3RpY2tlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF9nZXRUaW1lID0gRGF0ZS5ub3csXG4gICAgICBfbGFnVGhyZXNob2xkID0gNTAwLFxuICAgICAgX2FkanVzdGVkTGFnID0gMzMsXG4gICAgICBfc3RhcnRUaW1lID0gX2dldFRpbWUoKSxcbiAgICAgIF9sYXN0VXBkYXRlID0gX3N0YXJ0VGltZSxcbiAgICAgIF9nYXAgPSAxMDAwIC8gMjQwLFxuICAgICAgX25leHRUaW1lID0gX2dhcCxcbiAgICAgIF9saXN0ZW5lcnMgPSBbXSxcbiAgICAgIF9pZCxcbiAgICAgIF9yZXEsXG4gICAgICBfcmFmLFxuICAgICAgX3NlbGYsXG4gICAgICBfZGVsdGEsXG4gICAgICBfaSxcbiAgICAgIF90aWNrID0gZnVuY3Rpb24gX3RpY2sodikge1xuICAgIHZhciBlbGFwc2VkID0gX2dldFRpbWUoKSAtIF9sYXN0VXBkYXRlLFxuICAgICAgICBtYW51YWwgPSB2ID09PSB0cnVlLFxuICAgICAgICBvdmVybGFwLFxuICAgICAgICBkaXNwYXRjaCxcbiAgICAgICAgdGltZSxcbiAgICAgICAgZnJhbWU7XG5cbiAgICBlbGFwc2VkID4gX2xhZ1RocmVzaG9sZCAmJiAoX3N0YXJ0VGltZSArPSBlbGFwc2VkIC0gX2FkanVzdGVkTGFnKTtcbiAgICBfbGFzdFVwZGF0ZSArPSBlbGFwc2VkO1xuICAgIHRpbWUgPSBfbGFzdFVwZGF0ZSAtIF9zdGFydFRpbWU7XG4gICAgb3ZlcmxhcCA9IHRpbWUgLSBfbmV4dFRpbWU7XG5cbiAgICBpZiAob3ZlcmxhcCA+IDAgfHwgbWFudWFsKSB7XG4gICAgICBmcmFtZSA9ICsrX3NlbGYuZnJhbWU7XG4gICAgICBfZGVsdGEgPSB0aW1lIC0gX3NlbGYudGltZSAqIDEwMDA7XG4gICAgICBfc2VsZi50aW1lID0gdGltZSA9IHRpbWUgLyAxMDAwO1xuICAgICAgX25leHRUaW1lICs9IG92ZXJsYXAgKyAob3ZlcmxhcCA+PSBfZ2FwID8gNCA6IF9nYXAgLSBvdmVybGFwKTtcbiAgICAgIGRpc3BhdGNoID0gMTtcbiAgICB9XG5cbiAgICBtYW51YWwgfHwgKF9pZCA9IF9yZXEoX3RpY2spKTsgLy9tYWtlIHN1cmUgdGhlIHJlcXVlc3QgaXMgbWFkZSBiZWZvcmUgd2UgZGlzcGF0Y2ggdGhlIFwidGlja1wiIGV2ZW50IHNvIHRoYXQgdGltaW5nIGlzIG1haW50YWluZWQuIE90aGVyd2lzZSwgaWYgcHJvY2Vzc2luZyB0aGUgXCJ0aWNrXCIgcmVxdWlyZXMgYSBidW5jaCBvZiB0aW1lIChsaWtlIDE1bXMpIGFuZCB3ZSdyZSB1c2luZyBhIHNldFRpbWVvdXQoKSB0aGF0J3MgYmFzZWQgb24gMTYuN21zLCBpdCdkIHRlY2huaWNhbGx5IHRha2UgMzEuN21zIGJldHdlZW4gZnJhbWVzIG90aGVyd2lzZS5cblxuICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgZm9yIChfaSA9IDA7IF9pIDwgX2xpc3RlbmVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgLy8gdXNlIF9pIGFuZCBjaGVjayBfbGlzdGVuZXJzLmxlbmd0aCBpbnN0ZWFkIG9mIGEgdmFyaWFibGUgYmVjYXVzZSBhIGxpc3RlbmVyIGNvdWxkIGdldCByZW1vdmVkIGR1cmluZyB0aGUgbG9vcCwgYW5kIGlmIHRoYXQgaGFwcGVucyB0byBhbiBlbGVtZW50IGxlc3MgdGhhbiB0aGUgY3VycmVudCBpbmRleCwgaXQnZCB0aHJvdyB0aGluZ3Mgb2ZmIGluIHRoZSBsb29wLlxuICAgICAgICBfbGlzdGVuZXJzW19pXSh0aW1lLCBfZGVsdGEsIGZyYW1lLCB2KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3NlbGYgPSB7XG4gICAgdGltZTogMCxcbiAgICBmcmFtZTogMCxcbiAgICB0aWNrOiBmdW5jdGlvbiB0aWNrKCkge1xuICAgICAgX3RpY2sodHJ1ZSk7XG4gICAgfSxcbiAgICBkZWx0YVJhdGlvOiBmdW5jdGlvbiBkZWx0YVJhdGlvKGZwcykge1xuICAgICAgcmV0dXJuIF9kZWx0YSAvICgxMDAwIC8gKGZwcyB8fCA2MCkpO1xuICAgIH0sXG4gICAgd2FrZTogZnVuY3Rpb24gd2FrZSgpIHtcbiAgICAgIGlmIChfY29yZVJlYWR5KSB7XG4gICAgICAgIGlmICghX2NvcmVJbml0dGVkICYmIF93aW5kb3dFeGlzdHMoKSkge1xuICAgICAgICAgIF93aW4gPSBfY29yZUluaXR0ZWQgPSB3aW5kb3c7XG4gICAgICAgICAgX2RvYyA9IF93aW4uZG9jdW1lbnQgfHwge307XG4gICAgICAgICAgX2dsb2JhbHMuZ3NhcCA9IGdzYXA7XG4gICAgICAgICAgKF93aW4uZ3NhcFZlcnNpb25zIHx8IChfd2luLmdzYXBWZXJzaW9ucyA9IFtdKSkucHVzaChnc2FwLnZlcnNpb24pO1xuXG4gICAgICAgICAgX2luc3RhbGwoX2luc3RhbGxTY29wZSB8fCBfd2luLkdyZWVuU29ja0dsb2JhbHMgfHwgIV93aW4uZ3NhcCAmJiBfd2luIHx8IHt9KTtcblxuICAgICAgICAgIF9yYWYgPSBfd2luLnJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9pZCAmJiBfc2VsZi5zbGVlcCgpO1xuXG4gICAgICAgIF9yZXEgPSBfcmFmIHx8IGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZiwgX25leHRUaW1lIC0gX3NlbGYudGltZSAqIDEwMDAgKyAxIHwgMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgX3RpY2tlckFjdGl2ZSA9IDE7XG5cbiAgICAgICAgX3RpY2soMik7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGVlcDogZnVuY3Rpb24gc2xlZXAoKSB7XG4gICAgICAoX3JhZiA/IF93aW4uY2FuY2VsQW5pbWF0aW9uRnJhbWUgOiBjbGVhclRpbWVvdXQpKF9pZCk7XG4gICAgICBfdGlja2VyQWN0aXZlID0gMDtcbiAgICAgIF9yZXEgPSBfZW1wdHlGdW5jO1xuICAgIH0sXG4gICAgbGFnU21vb3RoaW5nOiBmdW5jdGlvbiBsYWdTbW9vdGhpbmcodGhyZXNob2xkLCBhZGp1c3RlZExhZykge1xuICAgICAgX2xhZ1RocmVzaG9sZCA9IHRocmVzaG9sZCB8fCAxIC8gX3RpbnlOdW07IC8vemVybyBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXMgYmFzaWNhbGx5IHVubGltaXRlZFxuXG4gICAgICBfYWRqdXN0ZWRMYWcgPSBNYXRoLm1pbihhZGp1c3RlZExhZywgX2xhZ1RocmVzaG9sZCwgMCk7XG4gICAgfSxcbiAgICBmcHM6IGZ1bmN0aW9uIGZwcyhfZnBzKSB7XG4gICAgICBfZ2FwID0gMTAwMCAvIChfZnBzIHx8IDI0MCk7XG4gICAgICBfbmV4dFRpbWUgPSBfc2VsZi50aW1lICogMTAwMCArIF9nYXA7XG4gICAgfSxcbiAgICBhZGQ6IGZ1bmN0aW9uIGFkZChjYWxsYmFjaywgb25jZSwgcHJpb3JpdGl6ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBvbmNlID8gZnVuY3Rpb24gKHQsIGQsIGYsIHYpIHtcbiAgICAgICAgY2FsbGJhY2sodCwgZCwgZiwgdik7XG5cbiAgICAgICAgX3NlbGYucmVtb3ZlKGZ1bmMpO1xuICAgICAgfSA6IGNhbGxiYWNrO1xuXG4gICAgICBfc2VsZi5yZW1vdmUoY2FsbGJhY2spO1xuXG4gICAgICBfbGlzdGVuZXJzW3ByaW9yaXRpemUgPyBcInVuc2hpZnRcIiA6IFwicHVzaFwiXShmdW5jKTtcblxuICAgICAgX3dha2UoKTtcblxuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShjYWxsYmFjaywgaSkge1xuICAgICAgfihpID0gX2xpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKSkgJiYgX2xpc3RlbmVycy5zcGxpY2UoaSwgMSkgJiYgX2kgPj0gaSAmJiBfaS0tO1xuICAgIH0sXG4gICAgX2xpc3RlbmVyczogX2xpc3RlbmVyc1xuICB9O1xuICByZXR1cm4gX3NlbGY7XG59KCksXG4gICAgX3dha2UgPSBmdW5jdGlvbiBfd2FrZSgpIHtcbiAgcmV0dXJuICFfdGlja2VyQWN0aXZlICYmIF90aWNrZXIud2FrZSgpO1xufSxcbiAgICAvL2Fsc28gZW5zdXJlcyB0aGUgY29yZSBjbGFzc2VzIGFyZSBpbml0aWFsaXplZC5cblxuLypcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBFQVNJTkdcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cbl9lYXNlTWFwID0ge30sXG4gICAgX2N1c3RvbUVhc2VFeHAgPSAvXltcXGQuXFwtTV1bXFxkLlxcLSxcXHNdLyxcbiAgICBfcXVvdGVzRXhwID0gL1tcIiddL2csXG4gICAgX3BhcnNlT2JqZWN0SW5TdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VPYmplY3RJblN0cmluZyh2YWx1ZSkge1xuICAvL3Rha2VzIGEgc3RyaW5nIGxpa2UgXCJ7d2lnZ2xlczoxMCwgdHlwZTphbnRpY2lwYXRlfSlcIiBhbmQgdHVybnMgaXQgaW50byBhIHJlYWwgb2JqZWN0LiBOb3RpY2UgaXQgZW5kcyBpbiBcIilcIiBhbmQgaW5jbHVkZXMgdGhlIHt9IHdyYXBwZXJzLiBUaGlzIGlzIGJlY2F1c2Ugd2Ugb25seSB1c2UgdGhpcyBmdW5jdGlvbiBmb3IgcGFyc2luZyBlYXNlIGNvbmZpZ3MgYW5kIHByaW9yaXRpemVkIG9wdGltaXphdGlvbiByYXRoZXIgdGhhbiByZXVzYWJpbGl0eS5cbiAgdmFyIG9iaiA9IHt9LFxuICAgICAgc3BsaXQgPSB2YWx1ZS5zdWJzdHIoMSwgdmFsdWUubGVuZ3RoIC0gMykuc3BsaXQoXCI6XCIpLFxuICAgICAga2V5ID0gc3BsaXRbMF0sXG4gICAgICBpID0gMSxcbiAgICAgIGwgPSBzcGxpdC5sZW5ndGgsXG4gICAgICBpbmRleCxcbiAgICAgIHZhbCxcbiAgICAgIHBhcnNlZFZhbDtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIHZhbCA9IHNwbGl0W2ldO1xuICAgIGluZGV4ID0gaSAhPT0gbCAtIDEgPyB2YWwubGFzdEluZGV4T2YoXCIsXCIpIDogdmFsLmxlbmd0aDtcbiAgICBwYXJzZWRWYWwgPSB2YWwuc3Vic3RyKDAsIGluZGV4KTtcbiAgICBvYmpba2V5XSA9IGlzTmFOKHBhcnNlZFZhbCkgPyBwYXJzZWRWYWwucmVwbGFjZShfcXVvdGVzRXhwLCBcIlwiKS50cmltKCkgOiArcGFyc2VkVmFsO1xuICAgIGtleSA9IHZhbC5zdWJzdHIoaW5kZXggKyAxKS50cmltKCk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfdmFsdWVJblBhcmVudGhlc2VzID0gZnVuY3Rpb24gX3ZhbHVlSW5QYXJlbnRoZXNlcyh2YWx1ZSkge1xuICB2YXIgb3BlbiA9IHZhbHVlLmluZGV4T2YoXCIoXCIpICsgMSxcbiAgICAgIGNsb3NlID0gdmFsdWUuaW5kZXhPZihcIilcIiksXG4gICAgICBuZXN0ZWQgPSB2YWx1ZS5pbmRleE9mKFwiKFwiLCBvcGVuKTtcbiAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZyhvcGVuLCB+bmVzdGVkICYmIG5lc3RlZCA8IGNsb3NlID8gdmFsdWUuaW5kZXhPZihcIilcIiwgY2xvc2UgKyAxKSA6IGNsb3NlKTtcbn0sXG4gICAgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nID0gZnVuY3Rpb24gX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKG5hbWUpIHtcbiAgLy9uYW1lIGNhbiBiZSBhIHN0cmluZyBsaWtlIFwiZWxhc3RpYy5vdXQoMSwwLjUpXCIsIGFuZCBwYXNzIGluIF9lYXNlTWFwIGFzIG9iaiBhbmQgaXQnbGwgcGFyc2UgaXQgb3V0IGFuZCBjYWxsIHRoZSBhY3R1YWwgZnVuY3Rpb24gbGlrZSBfZWFzZU1hcC5FbGFzdGljLmVhc2VPdXQuY29uZmlnKDEsMC41KS4gSXQgd2lsbCBhbHNvIHBhcnNlIGN1c3RvbSBlYXNlIHN0cmluZ3MgYXMgbG9uZyBhcyBDdXN0b21FYXNlIGlzIGxvYWRlZCBhbmQgcmVnaXN0ZXJlZCAoaW50ZXJuYWxseSBhcyBfZWFzZU1hcC5fQ0UpLlxuICB2YXIgc3BsaXQgPSAobmFtZSArIFwiXCIpLnNwbGl0KFwiKFwiKSxcbiAgICAgIGVhc2UgPSBfZWFzZU1hcFtzcGxpdFswXV07XG4gIHJldHVybiBlYXNlICYmIHNwbGl0Lmxlbmd0aCA+IDEgJiYgZWFzZS5jb25maWcgPyBlYXNlLmNvbmZpZy5hcHBseShudWxsLCB+bmFtZS5pbmRleE9mKFwie1wiKSA/IFtfcGFyc2VPYmplY3RJblN0cmluZyhzcGxpdFsxXSldIDogX3ZhbHVlSW5QYXJlbnRoZXNlcyhuYW1lKS5zcGxpdChcIixcIikubWFwKF9udW1lcmljSWZQb3NzaWJsZSkpIDogX2Vhc2VNYXAuX0NFICYmIF9jdXN0b21FYXNlRXhwLnRlc3QobmFtZSkgPyBfZWFzZU1hcC5fQ0UoXCJcIiwgbmFtZSkgOiBlYXNlO1xufSxcbiAgICBfaW52ZXJ0RWFzZSA9IGZ1bmN0aW9uIF9pbnZlcnRFYXNlKGVhc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlKDEgLSBwKTtcbiAgfTtcbn0sXG4gICAgLy8gYWxsb3cgeW95b0Vhc2UgdG8gYmUgc2V0IGluIGNoaWxkcmVuIGFuZCBoYXZlIHRob3NlIGFmZmVjdGVkIHdoZW4gdGhlIHBhcmVudC9hbmNlc3RvciB0aW1lbGluZSB5b3lvcy5cbl9wcm9wYWdhdGVZb3lvRWFzZSA9IGZ1bmN0aW9uIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKSB7XG4gIHZhciBjaGlsZCA9IHRpbWVsaW5lLl9maXJzdCxcbiAgICAgIGVhc2U7XG5cbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVGltZWxpbmUpIHtcbiAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZCwgaXNZb3lvKTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnZhcnMueW95b0Vhc2UgJiYgKCFjaGlsZC5feW95byB8fCAhY2hpbGQuX3JlcGVhdCkgJiYgY2hpbGQuX3lveW8gIT09IGlzWW95bykge1xuICAgICAgaWYgKGNoaWxkLnRpbWVsaW5lKSB7XG4gICAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZC50aW1lbGluZSwgaXNZb3lvKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVhc2UgPSBjaGlsZC5fZWFzZTtcbiAgICAgICAgY2hpbGQuX2Vhc2UgPSBjaGlsZC5feUVhc2U7XG4gICAgICAgIGNoaWxkLl95RWFzZSA9IGVhc2U7XG4gICAgICAgIGNoaWxkLl95b3lvID0gaXNZb3lvO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gIH1cbn0sXG4gICAgX3BhcnNlRWFzZSA9IGZ1bmN0aW9uIF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgcmV0dXJuICFlYXNlID8gZGVmYXVsdEVhc2UgOiAoX2lzRnVuY3Rpb24oZWFzZSkgPyBlYXNlIDogX2Vhc2VNYXBbZWFzZV0gfHwgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKGVhc2UpKSB8fCBkZWZhdWx0RWFzZTtcbn0sXG4gICAgX2luc2VydEVhc2UgPSBmdW5jdGlvbiBfaW5zZXJ0RWFzZShuYW1lcywgZWFzZUluLCBlYXNlT3V0LCBlYXNlSW5PdXQpIHtcbiAgaWYgKGVhc2VPdXQgPT09IHZvaWQgMCkge1xuICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICAgIHJldHVybiAxIC0gZWFzZUluKDEgLSBwKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKGVhc2VJbk91dCA9PT0gdm9pZCAwKSB7XG4gICAgZWFzZUluT3V0ID0gZnVuY3Rpb24gZWFzZUluT3V0KHApIHtcbiAgICAgIHJldHVybiBwIDwgLjUgPyBlYXNlSW4ocCAqIDIpIC8gMiA6IDEgLSBlYXNlSW4oKDEgLSBwKSAqIDIpIC8gMjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGVhc2UgPSB7XG4gICAgZWFzZUluOiBlYXNlSW4sXG4gICAgZWFzZU91dDogZWFzZU91dCxcbiAgICBlYXNlSW5PdXQ6IGVhc2VJbk91dFxuICB9LFxuICAgICAgbG93ZXJjYXNlTmFtZTtcblxuICBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2Vhc2VNYXBbbmFtZV0gPSBfZ2xvYmFsc1tuYW1lXSA9IGVhc2U7XG4gICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKV0gPSBlYXNlT3V0O1xuXG4gICAgZm9yICh2YXIgcCBpbiBlYXNlKSB7XG4gICAgICBfZWFzZU1hcFtsb3dlcmNhc2VOYW1lICsgKHAgPT09IFwiZWFzZUluXCIgPyBcIi5pblwiIDogcCA9PT0gXCJlYXNlT3V0XCIgPyBcIi5vdXRcIiA6IFwiLmluT3V0XCIpXSA9IF9lYXNlTWFwW25hbWUgKyBcIi5cIiArIHBdID0gZWFzZVtwXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlYXNlO1xufSxcbiAgICBfZWFzZUluT3V0RnJvbU91dCA9IGZ1bmN0aW9uIF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgPCAuNSA/ICgxIC0gZWFzZU91dCgxIC0gcCAqIDIpKSAvIDIgOiAuNSArIGVhc2VPdXQoKHAgLSAuNSkgKiAyKSAvIDI7XG4gIH07XG59LFxuICAgIF9jb25maWdFbGFzdGljID0gZnVuY3Rpb24gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgdmFyIHAxID0gYW1wbGl0dWRlID49IDEgPyBhbXBsaXR1ZGUgOiAxLFxuICAgICAgLy9ub3RlOiBpZiBhbXBsaXR1ZGUgaXMgPCAxLCB3ZSBzaW1wbHkgYWRqdXN0IHRoZSBwZXJpb2QgZm9yIGEgbW9yZSBuYXR1cmFsIGZlZWwuIE90aGVyd2lzZSB0aGUgbWF0aCBkb2Vzbid0IHdvcmsgcmlnaHQgYW5kIHRoZSBjdXJ2ZSBzdGFydHMgYXQgMS5cbiAgcDIgPSAocGVyaW9kIHx8ICh0eXBlID8gLjMgOiAuNDUpKSAvIChhbXBsaXR1ZGUgPCAxID8gYW1wbGl0dWRlIDogMSksXG4gICAgICBwMyA9IHAyIC8gXzJQSSAqIChNYXRoLmFzaW4oMSAvIHAxKSB8fCAwKSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA9PT0gMSA/IDEgOiBwMSAqIE1hdGgucG93KDIsIC0xMCAqIHApICogX3NpbigocCAtIHAzKSAqIHAyKSArIDE7XG4gIH0sXG4gICAgICBlYXNlID0gdHlwZSA9PT0gXCJvdXRcIiA/IGVhc2VPdXQgOiB0eXBlID09PSBcImluXCIgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0gOiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KTtcblxuICBwMiA9IF8yUEkgLyBwMjsgLy9wcmVjYWxjdWxhdGUgdG8gb3B0aW1pemVcblxuICBlYXNlLmNvbmZpZyA9IGZ1bmN0aW9uIChhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICAgIHJldHVybiBfY29uZmlnRWxhc3RpYyh0eXBlLCBhbXBsaXR1ZGUsIHBlcmlvZCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59LFxuICAgIF9jb25maWdCYWNrID0gZnVuY3Rpb24gX2NvbmZpZ0JhY2sodHlwZSwgb3ZlcnNob290KSB7XG4gIGlmIChvdmVyc2hvb3QgPT09IHZvaWQgMCkge1xuICAgIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG4gIH1cblxuICB2YXIgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwID8gLS1wICogcCAqICgob3ZlcnNob290ICsgMSkgKiBwICsgb3ZlcnNob290KSArIDEgOiAwO1xuICB9LFxuICAgICAgZWFzZSA9IHR5cGUgPT09IFwib3V0XCIgPyBlYXNlT3V0IDogdHlwZSA9PT0gXCJpblwiID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAob3ZlcnNob290KSB7XG4gICAgcmV0dXJuIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59OyAvLyBhIGNoZWFwZXIgKGtiIGFuZCBjcHUpIGJ1dCBtb3JlIG1pbGQgd2F5IHRvIGdldCBhIHBhcmFtZXRlcml6ZWQgd2VpZ2h0ZWQgZWFzZSBieSBmZWVkaW5nIGluIGEgdmFsdWUgYmV0d2VlbiAtMSAoZWFzZUluKSBhbmQgMSAoZWFzZU91dCkgd2hlcmUgMCBpcyBsaW5lYXIuXG4vLyBfd2VpZ2h0ZWRFYXNlID0gcmF0aW8gPT4ge1xuLy8gXHRsZXQgeSA9IDAuNSArIHJhdGlvIC8gMjtcbi8vIFx0cmV0dXJuIHAgPT4gKDIgKiAoMSAtIHApICogcCAqIHkgKyBwICogcCk7XG4vLyB9LFxuLy8gYSBzdHJvbmdlciAoYnV0IG1vcmUgZXhwZW5zaXZlIGtiL2NwdSkgcGFyYW1ldGVyaXplZCB3ZWlnaHRlZCBlYXNlIHRoYXQgbGV0cyB5b3UgZmVlZCBpbiBhIHZhbHVlIGJldHdlZW4gLTEgKGVhc2VJbikgYW5kIDEgKGVhc2VPdXQpIHdoZXJlIDAgaXMgbGluZWFyLlxuLy8gX3dlaWdodGVkRWFzZVN0cm9uZyA9IHJhdGlvID0+IHtcbi8vIFx0cmF0aW8gPSAuNSArIHJhdGlvIC8gMjtcbi8vIFx0bGV0IG8gPSAxIC8gMyAqIChyYXRpbyA8IC41ID8gcmF0aW8gOiAxIC0gcmF0aW8pLFxuLy8gXHRcdGIgPSByYXRpbyAtIG8sXG4vLyBcdFx0YyA9IHJhdGlvICsgbztcbi8vIFx0cmV0dXJuIHAgPT4gcCA9PT0gMSA/IHAgOiAzICogYiAqICgxIC0gcCkgKiAoMSAtIHApICogcCArIDMgKiBjICogKDEgLSBwKSAqIHAgKiBwICsgcCAqIHAgKiBwO1xuLy8gfTtcblxuXG5fZm9yRWFjaE5hbWUoXCJMaW5lYXIsUXVhZCxDdWJpYyxRdWFydCxRdWludCxTdHJvbmdcIiwgZnVuY3Rpb24gKG5hbWUsIGkpIHtcbiAgdmFyIHBvd2VyID0gaSA8IDUgPyBpICsgMSA6IGk7XG5cbiAgX2luc2VydEVhc2UobmFtZSArIFwiLFBvd2VyXCIgKyAocG93ZXIgLSAxKSwgaSA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHAsIHBvd2VyKTtcbiAgfSA6IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHA7XG4gIH0sIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygxIC0gcCwgcG93ZXIpO1xuICB9LCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDwgLjUgPyBNYXRoLnBvdyhwICogMiwgcG93ZXIpIC8gMiA6IDEgLSBNYXRoLnBvdygoMSAtIHApICogMiwgcG93ZXIpIC8gMjtcbiAgfSk7XG59KTtcblxuX2Vhc2VNYXAuTGluZWFyLmVhc2VOb25lID0gX2Vhc2VNYXAubm9uZSA9IF9lYXNlTWFwLkxpbmVhci5lYXNlSW47XG5cbl9pbnNlcnRFYXNlKFwiRWxhc3RpY1wiLCBfY29uZmlnRWxhc3RpYyhcImluXCIpLCBfY29uZmlnRWxhc3RpYyhcIm91dFwiKSwgX2NvbmZpZ0VsYXN0aWMoKSk7XG5cbihmdW5jdGlvbiAobiwgYykge1xuICB2YXIgbjEgPSAxIC8gYyxcbiAgICAgIG4yID0gMiAqIG4xLFxuICAgICAgbjMgPSAyLjUgKiBuMSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA8IG4xID8gbiAqIHAgKiBwIDogcCA8IG4yID8gbiAqIE1hdGgucG93KHAgLSAxLjUgLyBjLCAyKSArIC43NSA6IHAgPCBuMyA/IG4gKiAocCAtPSAyLjI1IC8gYykgKiBwICsgLjkzNzUgOiBuICogTWF0aC5wb3cocCAtIDIuNjI1IC8gYywgMikgKyAuOTg0Mzc1O1xuICB9O1xuXG4gIF9pbnNlcnRFYXNlKFwiQm91bmNlXCIsIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSwgZWFzZU91dCk7XG59KSg3LjU2MjUsIDIuNzUpO1xuXG5faW5zZXJ0RWFzZShcIkV4cG9cIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAgPyBNYXRoLnBvdygyLCAxMCAqIChwIC0gMSkpIDogMDtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkNpcmNcIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIC0oX3NxcnQoMSAtIHAgKiBwKSAtIDEpO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiU2luZVwiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcCA9PT0gMSA/IDEgOiAtX2NvcyhwICogX0hBTEZfUEkpICsgMTtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkJhY2tcIiwgX2NvbmZpZ0JhY2soXCJpblwiKSwgX2NvbmZpZ0JhY2soXCJvdXRcIiksIF9jb25maWdCYWNrKCkpO1xuXG5fZWFzZU1hcC5TdGVwcGVkRWFzZSA9IF9lYXNlTWFwLnN0ZXBzID0gX2dsb2JhbHMuU3RlcHBlZEVhc2UgPSB7XG4gIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKHN0ZXBzLCBpbW1lZGlhdGVTdGFydCkge1xuICAgIGlmIChzdGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGVwcyA9IDE7XG4gICAgfVxuXG4gICAgdmFyIHAxID0gMSAvIHN0ZXBzLFxuICAgICAgICBwMiA9IHN0ZXBzICsgKGltbWVkaWF0ZVN0YXJ0ID8gMCA6IDEpLFxuICAgICAgICBwMyA9IGltbWVkaWF0ZVN0YXJ0ID8gMSA6IDAsXG4gICAgICAgIG1heCA9IDEgLSBfdGlueU51bTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiAoKHAyICogX2NsYW1wKDAsIG1heCwgcCkgfCAwKSArIHAzKSAqIHAxO1xuICAgIH07XG4gIH1cbn07XG5fZGVmYXVsdHMuZWFzZSA9IF9lYXNlTWFwW1wicXVhZC5vdXRcIl07XG5cbl9mb3JFYWNoTmFtZShcIm9uQ29tcGxldGUsb25VcGRhdGUsb25TdGFydCxvblJlcGVhdCxvblJldmVyc2VDb21wbGV0ZSxvbkludGVycnVwdFwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2NhbGxiYWNrTmFtZXMgKz0gbmFtZSArIFwiLFwiICsgbmFtZSArIFwiUGFyYW1zLFwiO1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENBQ0hFXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBHU0NhY2hlID0gZnVuY3Rpb24gR1NDYWNoZSh0YXJnZXQsIGhhcm5lc3MpIHtcbiAgdGhpcy5pZCA9IF9nc0lEKys7XG4gIHRhcmdldC5fZ3NhcCA9IHRoaXM7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLmhhcm5lc3MgPSBoYXJuZXNzO1xuICB0aGlzLmdldCA9IGhhcm5lc3MgPyBoYXJuZXNzLmdldCA6IF9nZXRQcm9wZXJ0eTtcbiAgdGhpcy5zZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXRTZXR0ZXIgOiBfZ2V0U2V0dGVyO1xufTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQU5JTUFUSU9OXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmV4cG9ydCB2YXIgQW5pbWF0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQW5pbWF0aW9uKHZhcnMpIHtcbiAgICB0aGlzLnZhcnMgPSB2YXJzO1xuICAgIHRoaXMuX2RlbGF5ID0gK3ZhcnMuZGVsYXkgfHwgMDtcblxuICAgIGlmICh0aGlzLl9yZXBlYXQgPSB2YXJzLnJlcGVhdCA9PT0gSW5maW5pdHkgPyAtMiA6IHZhcnMucmVwZWF0IHx8IDApIHtcbiAgICAgIC8vIFRPRE86IHJlcGVhdDogSW5maW5pdHkgb24gYSB0aW1lbGluZSdzIGNoaWxkcmVuIG11c3QgZmxhZyB0aGF0IHRpbWVsaW5lIGludGVybmFsbHkgYW5kIGFmZmVjdCBpdHMgdG90YWxEdXJhdGlvbiwgb3RoZXJ3aXNlIGl0J2xsIHN0b3AgaW4gdGhlIG5lZ2F0aXZlIGRpcmVjdGlvbiB3aGVuIHJlYWNoaW5nIHRoZSBzdGFydC5cbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhcnMucmVwZWF0RGVsYXkgfHwgMDtcbiAgICAgIHRoaXMuX3lveW8gPSAhIXZhcnMueW95byB8fCAhIXZhcnMueW95b0Vhc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fdHMgPSAxO1xuXG4gICAgX3NldER1cmF0aW9uKHRoaXMsICt2YXJzLmR1cmF0aW9uLCAxLCAxKTtcblxuICAgIHRoaXMuZGF0YSA9IHZhcnMuZGF0YTtcblxuICAgIGlmIChfY29udGV4dCkge1xuICAgICAgdGhpcy5fY3R4ID0gX2NvbnRleHQ7XG5cbiAgICAgIF9jb250ZXh0LmRhdGEucHVzaCh0aGlzKTtcbiAgICB9XG5cbiAgICBfdGlja2VyQWN0aXZlIHx8IF90aWNrZXIud2FrZSgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFuaW1hdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlbGF5ID0gZnVuY3Rpb24gZGVsYXkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuc3RhcnRUaW1lKHRoaXMuX3N0YXJ0ICsgdmFsdWUgLSB0aGlzLl9kZWxheSk7XG4gICAgICB0aGlzLl9kZWxheSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xuICB9O1xuXG4gIF9wcm90by5kdXJhdGlvbiA9IGZ1bmN0aW9uIGR1cmF0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsRHVyYXRpb24odGhpcy5fcmVwZWF0ID4gMCA/IHZhbHVlICsgKHZhbHVlICsgdGhpcy5fckRlbGF5KSAqIHRoaXMuX3JlcGVhdCA6IHZhbHVlKSA6IHRoaXMudG90YWxEdXJhdGlvbigpICYmIHRoaXMuX2R1cjtcbiAgfTtcblxuICBfcHJvdG8udG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90RHVyO1xuICAgIH1cblxuICAgIHRoaXMuX2RpcnR5ID0gMDtcbiAgICByZXR1cm4gX3NldER1cmF0aW9uKHRoaXMsIHRoaXMuX3JlcGVhdCA8IDAgPyB2YWx1ZSA6ICh2YWx1ZSAtIHRoaXMuX3JlcGVhdCAqIHRoaXMuX3JEZWxheSkgLyAodGhpcy5fcmVwZWF0ICsgMSkpO1xuICB9O1xuXG4gIF9wcm90by50b3RhbFRpbWUgPSBmdW5jdGlvbiB0b3RhbFRpbWUoX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBfd2FrZSgpO1xuXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdFRpbWU7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IHRoaXMuX2RwO1xuXG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgdGhpcy5fdHMpIHtcbiAgICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIF90b3RhbFRpbWUpO1xuXG4gICAgICAhcGFyZW50Ll9kcCB8fCBwYXJlbnQucGFyZW50IHx8IF9wb3N0QWRkQ2hlY2tzKHBhcmVudCwgdGhpcyk7IC8vIGVkZ2UgY2FzZTogaWYgdGhpcyBpcyBhIGNoaWxkIG9mIGEgdGltZWxpbmUgdGhhdCBhbHJlYWR5IGNvbXBsZXRlZCwgZm9yIGV4YW1wbGUsIHdlIG11c3QgcmUtYWN0aXZhdGUgdGhlIHBhcmVudC5cbiAgICAgIC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9yIHRpbWVsaW5lcyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQsIHdlIHNob3VsZCByZXNldCB0aGVpciB0b3RhbFRpbWUoKSB3aGljaCB3aWxsIGFsc28gZW5zdXJlIHRoYXQgdGhleSdyZSBsaW5lZCB1cCBwcm9wZXJseSBhbmQgZW5hYmxlZC4gU2tpcCBmb3IgYW5pbWF0aW9ucyB0aGF0IGFyZSBvbiB0aGUgcm9vdCAod2FzdGVmdWwpLiBFeGFtcGxlOiBhIFRpbWVsaW5lTGl0ZS5leHBvcnRSb290KCkgaXMgcGVyZm9ybWVkIHdoZW4gdGhlcmUncyBhIHBhdXNlZCB0d2VlbiBvbiB0aGUgcm9vdCwgdGhlIGV4cG9ydCB3aWxsIG5vdCBjb21wbGV0ZSB1bnRpbCB0aGF0IHR3ZWVuIGlzIHVucGF1c2VkLCBidXQgaW1hZ2luZSBhIGNoaWxkIGdldHMgcmVzdGFydGVkIGxhdGVyLCBhZnRlciBhbGwgW3VucGF1c2VkXSB0d2VlbnMgaGF2ZSBjb21wbGV0ZWQuIFRoZSBzdGFydCBvZiB0aGF0IGNoaWxkIHdvdWxkIGdldCBwdXNoZWQgb3V0LCBidXQgb25lIG9mIHRoZSBhbmNlc3RvcnMgbWF5IGhhdmUgY29tcGxldGVkLlxuXG4gICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5wYXJlbnQuX3RpbWUgIT09IHBhcmVudC5fc3RhcnQgKyAocGFyZW50Ll90cyA+PSAwID8gcGFyZW50Ll90VGltZSAvIHBhcmVudC5fdHMgOiAocGFyZW50LnRvdGFsRHVyYXRpb24oKSAtIHBhcmVudC5fdFRpbWUpIC8gLXBhcmVudC5fdHMpKSB7XG4gICAgICAgICAgcGFyZW50LnRvdGFsVGltZShwYXJlbnQuX3RUaW1lLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5wYXJlbnQgJiYgdGhpcy5fZHAuYXV0b1JlbW92ZUNoaWxkcmVuICYmICh0aGlzLl90cyA+IDAgJiYgX3RvdGFsVGltZSA8IHRoaXMuX3REdXIgfHwgdGhpcy5fdHMgPCAwICYmIF90b3RhbFRpbWUgPiAwIHx8ICF0aGlzLl90RHVyICYmICFfdG90YWxUaW1lKSkge1xuICAgICAgICAvL2lmIHRoZSBhbmltYXRpb24gZG9lc24ndCBoYXZlIGEgcGFyZW50LCBwdXQgaXQgYmFjayBpbnRvIGl0cyBsYXN0IHBhcmVudCAocmVjb3JkZWQgYXMgX2RwIGZvciBleGFjdGx5IGNhc2VzIGxpa2UgdGhpcykuIExpbWl0IHRvIHBhcmVudHMgd2l0aCBhdXRvUmVtb3ZlQ2hpbGRyZW4gKGxpa2UgZ2xvYmFsVGltZWxpbmUpIHNvIHRoYXQgaWYgdGhlIHVzZXIgbWFudWFsbHkgcmVtb3ZlcyBhbiBhbmltYXRpb24gZnJvbSBhIHRpbWVsaW5lIGFuZCB0aGVuIGFsdGVycyBpdHMgcGxheWhlYWQsIGl0IGRvZXNuJ3QgZ2V0IGFkZGVkIGJhY2sgaW4uXG4gICAgICAgIF9hZGRUb1RpbWVsaW5lKHRoaXMuX2RwLCB0aGlzLCB0aGlzLl9zdGFydCAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdFRpbWUgIT09IF90b3RhbFRpbWUgfHwgIXRoaXMuX2R1ciAmJiAhc3VwcHJlc3NFdmVudHMgfHwgdGhpcy5faW5pdHRlZCAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgPT09IF90aW55TnVtIHx8ICFfdG90YWxUaW1lICYmICF0aGlzLl9pbml0dGVkICYmICh0aGlzLmFkZCB8fCB0aGlzLl9wdExvb2t1cCkpIHtcbiAgICAgIC8vIGNoZWNrIGZvciBfcHRMb29rdXAgb24gYSBUd2VlbiBpbnN0YW5jZSB0byBlbnN1cmUgaXQgaGFzIGFjdHVhbGx5IGZpbmlzaGVkIGJlaW5nIGluc3RhbnRpYXRlZCwgb3RoZXJ3aXNlIGlmIHRoaXMucmV2ZXJzZSgpIGdldHMgY2FsbGVkIGluIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIGl0IGNvdWxkIHRyaWdnZXIgYSByZW5kZXIoKSBoZXJlIGV2ZW4gdGhvdWdoIHRoZSBfdGFyZ2V0cyB3ZXJlbid0IHBvcHVsYXRlZCwgdGh1cyB3aGVuIF9pbml0KCkgaXMgY2FsbGVkIHRoZXJlIHdvbid0IGJlIGFueSBQcm9wVHdlZW5zIChpdCdsbCBhY3QgbGlrZSB0aGUgdHdlZW4gaXMgbm9uLWZ1bmN0aW9uYWwpXG4gICAgICB0aGlzLl90cyB8fCAodGhpcy5fcFRpbWUgPSBfdG90YWxUaW1lKTsgLy8gb3RoZXJ3aXNlLCBpZiBhbiBhbmltYXRpb24gaXMgcGF1c2VkLCB0aGVuIHRoZSBwbGF5aGVhZCBpcyBtb3ZlZCBiYWNrIHRvIHplcm8sIHRoZW4gcmVzdW1lZCwgaXQnZCByZXZlcnQgYmFjayB0byB0aGUgb3JpZ2luYWwgdGltZSBhdCB0aGUgcGF1c2VcbiAgICAgIC8vaWYgKCF0aGlzLl9sb2NrKSB7IC8vIGF2b2lkIGVuZGxlc3MgcmVjdXJzaW9uIChub3Qgc3VyZSB3ZSBuZWVkIHRoaXMgeWV0IG9yIGlmIGl0J3Mgd29ydGggdGhlIHBlcmZvcm1hbmNlIGhpdClcbiAgICAgIC8vICAgdGhpcy5fbG9jayA9IDE7XG5cbiAgICAgIF9sYXp5U2FmZVJlbmRlcih0aGlzLCBfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cyk7IC8vICAgdGhpcy5fbG9jayA9IDA7XG4gICAgICAvL31cblxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by50aW1lID0gZnVuY3Rpb24gdGltZSh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKE1hdGgubWluKHRoaXMudG90YWxEdXJhdGlvbigpLCB2YWx1ZSArIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbih0aGlzKSkgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSB8fCAodmFsdWUgPyB0aGlzLl9kdXIgOiAwKSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fdGltZTsgLy8gbm90ZTogaWYgdGhlIG1vZHVsdXMgcmVzdWx0cyBpbiAwLCB0aGUgcGxheWhlYWQgY291bGQgYmUgZXhhY3RseSBhdCB0aGUgZW5kIG9yIHRoZSBiZWdpbm5pbmcsIGFuZCB3ZSBhbHdheXMgZGVmZXIgdG8gdGhlIEVORCB3aXRoIGEgbm9uLXplcm8gdmFsdWUsIG90aGVyd2lzZSBpZiB5b3Ugc2V0IHRoZSB0aW1lKCkgdG8gdGhlIHZlcnkgZW5kIChkdXJhdGlvbigpKSwgaXQgd291bGQgcmVuZGVyIGF0IHRoZSBTVEFSVCFcbiAgfTtcblxuICBfcHJvdG8udG90YWxQcm9ncmVzcyA9IGZ1bmN0aW9uIHRvdGFsUHJvZ3Jlc3ModmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLnRvdGFsRHVyYXRpb24oKSAqIHZhbHVlLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RUaW1lIC8gdGhpcy5fdER1cikgOiB0aGlzLnJhdGlvO1xuICB9O1xuXG4gIF9wcm90by5wcm9ncmVzcyA9IGZ1bmN0aW9uIHByb2dyZXNzKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5kdXJhdGlvbigpICogKHRoaXMuX3lveW8gJiYgISh0aGlzLml0ZXJhdGlvbigpICYgMSkgPyAxIC0gdmFsdWUgOiB2YWx1ZSkgKyBfZWxhcHNlZEN5Y2xlRHVyYXRpb24odGhpcyksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuZHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RpbWUgLyB0aGlzLl9kdXIpIDogdGhpcy5yYXRpbztcbiAgfTtcblxuICBfcHJvdG8uaXRlcmF0aW9uID0gZnVuY3Rpb24gaXRlcmF0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHZhciBjeWNsZUR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpICsgdGhpcy5fckRlbGF5O1xuXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLl90aW1lICsgKHZhbHVlIC0gMSkgKiBjeWNsZUR1cmF0aW9uLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pICsgMSA6IDE7XG4gIH0gLy8gcG90ZW50aWFsIGZ1dHVyZSBhZGRpdGlvbjpcbiAgLy8gaXNQbGF5aW5nQmFja3dhcmRzKCkge1xuICAvLyBcdGxldCBhbmltYXRpb24gPSB0aGlzLFxuICAvLyBcdFx0b3JpZW50YXRpb24gPSAxOyAvLyAxID0gZm9yd2FyZCwgLTEgPSBiYWNrd2FyZFxuICAvLyBcdHdoaWxlIChhbmltYXRpb24pIHtcbiAgLy8gXHRcdG9yaWVudGF0aW9uICo9IGFuaW1hdGlvbi5yZXZlcnNlZCgpIHx8IChhbmltYXRpb24ucmVwZWF0KCkgJiYgIShhbmltYXRpb24uaXRlcmF0aW9uKCkgJiAxKSkgPyAtMSA6IDE7XG4gIC8vIFx0XHRhbmltYXRpb24gPSBhbmltYXRpb24ucGFyZW50O1xuICAvLyBcdH1cbiAgLy8gXHRyZXR1cm4gb3JpZW50YXRpb24gPCAwO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG8udGltZVNjYWxlID0gZnVuY3Rpb24gdGltZVNjYWxlKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnRzID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyByZWNvcmRlZCB0aW1lU2NhbGUuIFNwZWNpYWwgY2FzZTogaWYgc29tZW9uZSBjYWxscyByZXZlcnNlKCkgb24gYW4gYW5pbWF0aW9uIHdpdGggdGltZVNjYWxlIG9mIDAsIHdlIGFzc2lnbiBpdCAtX3RpbnlOdW0gdG8gcmVtZW1iZXIgaXQncyByZXZlcnNlZC5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcnRzID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHRUaW1lID0gdGhpcy5wYXJlbnQgJiYgdGhpcy5fdHMgPyBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aGlzLnBhcmVudC5fdGltZSwgdGhpcykgOiB0aGlzLl90VGltZTsgLy8gbWFrZSBzdXJlIHRvIGRvIHRoZSBwYXJlbnRUb0NoaWxkVG90YWxUaW1lKCkgQkVGT1JFIHNldHRpbmcgdGhlIG5ldyBfdHMgYmVjYXVzZSB0aGUgb2xkIG9uZSBtdXN0IGJlIHVzZWQgaW4gdGhhdCBjYWxjdWxhdGlvbi5cbiAgICAvLyBmdXR1cmUgYWRkaXRpb24/IFVwIHNpZGU6IGZhc3QgYW5kIG1pbmltYWwgZmlsZSBzaXplLiBEb3duIHNpZGU6IG9ubHkgd29ya3Mgb24gdGhpcyBhbmltYXRpb247IGlmIGEgdGltZWxpbmUgaXMgcmV2ZXJzZWQsIGZvciBleGFtcGxlLCBpdHMgY2hpbGRyZW5zJyBvblJldmVyc2Ugd291bGRuJ3QgZ2V0IGNhbGxlZC5cbiAgICAvLygrdmFsdWUgPCAwICYmIHRoaXMuX3J0cyA+PSAwKSAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJldmVyc2VcIiwgdHJ1ZSk7XG4gICAgLy8gcHJpb3JpdGl6ZSByZW5kZXJpbmcgd2hlcmUgdGhlIHBhcmVudCdzIHBsYXloZWFkIGxpbmVzIHVwIGluc3RlYWQgb2YgdGhpcy5fdFRpbWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBhIHR3ZWVuIHRoYXQncyBhbmltYXRpbmcgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSBpbiB0aGUgc2FtZSByZW5kZXJpbmcgbG9vcCAoc2FtZSBwYXJlbnQpLCB0aHVzIGlmIHRoZSB0aW1lU2NhbGUgdHdlZW4gcmVuZGVycyBmaXJzdCwgaXQgd291bGQgYWx0ZXIgX3N0YXJ0IEJFRk9SRSBfdFRpbWUgd2FzIHNldCBvbiB0aGF0IHRpY2sgKGluIHRoZSByZW5kZXJpbmcgbG9vcCksIGVmZmVjdGl2ZWx5IGZyZWV6aW5nIGl0IHVudGlsIHRoZSB0aW1lU2NhbGUgdHdlZW4gZmluaXNoZXMuXG5cbiAgICB0aGlzLl9ydHMgPSArdmFsdWUgfHwgMDtcbiAgICB0aGlzLl90cyA9IHRoaXMuX3BzIHx8IHZhbHVlID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyBfdHMgaXMgdGhlIGZ1bmN0aW9uYWwgdGltZVNjYWxlIHdoaWNoIHdvdWxkIGJlIDAgaWYgdGhlIGFuaW1hdGlvbiBpcyBwYXVzZWQuXG5cbiAgICB0aGlzLnRvdGFsVGltZShfY2xhbXAoLXRoaXMuX2RlbGF5LCB0aGlzLl90RHVyLCB0VGltZSksIHRydWUpO1xuXG4gICAgX3NldEVuZCh0aGlzKTsgLy8gaWYgcGFyZW50LnNtb290aENoaWxkVGltaW5nIHdhcyBmYWxzZSwgdGhlIGVuZCB0aW1lIGRpZG4ndCBnZXQgdXBkYXRlZCBpbiB0aGUgX2FsaWduUGxheWhlYWQoKSBtZXRob2QsIHNvIGRvIGl0IGhlcmUuXG5cblxuICAgIHJldHVybiBfcmVjYWNoZUFuY2VzdG9ycyh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2VkID0gZnVuY3Rpb24gcGF1c2VkKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BzICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fcHMgPSB2YWx1ZTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3BUaW1lID0gdGhpcy5fdFRpbWUgfHwgTWF0aC5tYXgoLXRoaXMuX2RlbGF5LCB0aGlzLnJhd1RpbWUoKSk7IC8vIGlmIHRoZSBwYXVzZSBvY2N1cnMgZHVyaW5nIHRoZSBkZWxheSBwaGFzZSwgbWFrZSBzdXJlIHRoYXQncyBmYWN0b3JlZCBpbiB3aGVuIHJlc3VtaW5nLlxuXG4gICAgICAgIHRoaXMuX3RzID0gdGhpcy5fYWN0ID0gMDsgLy8gX3RzIGlzIHRoZSBmdW5jdGlvbmFsIHRpbWVTY2FsZSwgc28gYSBwYXVzZWQgdHdlZW4gd291bGQgZWZmZWN0aXZlbHkgaGF2ZSBhIHRpbWVTY2FsZSBvZiAwLiBXZSByZWNvcmQgdGhlIFwicmVhbFwiIHRpbWVTY2FsZSBhcyBfcnRzIChyZWNvcmRlZCB0aW1lIHNjYWxlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3dha2UoKTtcblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX3J0czsgLy9vbmx5IGRlZmVyIHRvIF9wVGltZSAocGF1c2VUaW1lKSBpZiB0VGltZSBpcyB6ZXJvLiBSZW1lbWJlciwgc29tZW9uZSBjb3VsZCBwYXVzZSgpIGFuIGFuaW1hdGlvbiwgdGhlbiBzY3J1YiB0aGUgcGxheWhlYWQgYW5kIHJlc3VtZSgpLiBJZiB0aGUgcGFyZW50IGRvZXNuJ3QgaGF2ZSBzbW9vdGhDaGlsZFRpbWluZywgd2UgcmVuZGVyIGF0IHRoZSByYXdUaW1lKCkgYmVjYXVzZSB0aGUgc3RhcnRUaW1lIHdvbid0IGdldCB1cGRhdGVkLlxuXG4gICAgICAgIHRoaXMudG90YWxUaW1lKHRoaXMucGFyZW50ICYmICF0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyA/IHRoaXMucmF3VGltZSgpIDogdGhpcy5fdFRpbWUgfHwgdGhpcy5fcFRpbWUsIHRoaXMucHJvZ3Jlc3MoKSA9PT0gMSAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgIT09IF90aW55TnVtICYmICh0aGlzLl90VGltZSAtPSBfdGlueU51bSkpOyAvLyBlZGdlIGNhc2U6IGFuaW1hdGlvbi5wcm9ncmVzcygxKS5wYXVzZSgpLnBsYXkoKSB3b3VsZG4ndCByZW5kZXIgYWdhaW4gYmVjYXVzZSB0aGUgcGxheWhlYWQgaXMgYWxyZWFkeSBhdCB0aGUgZW5kLCBidXQgdGhlIGNhbGwgdG8gdG90YWxUaW1lKCkgYmVsb3cgd2lsbCBhZGQgaXQgYmFjayB0byBpdHMgcGFyZW50Li4uYW5kIG5vdCByZW1vdmUgaXQgYWdhaW4gKHNpbmNlIHJlbW92aW5nIG9ubHkgaGFwcGVucyB1cG9uIHJlbmRlcmluZyBhdCBhIG5ldyB0aW1lKS4gT2Zmc2V0dGluZyB0aGUgX3RUaW1lIHNsaWdodGx5IGlzIGRvbmUgc2ltcGx5IHRvIGNhdXNlIHRoZSBmaW5hbCByZW5kZXIgaW4gdG90YWxUaW1lKCkgdGhhdCdsbCBwb3AgaXQgb2ZmIGl0cyB0aW1lbGluZSAoaWYgYXV0b1JlbW92ZUNoaWxkcmVuIGlzIHRydWUsIG9mIGNvdXJzZSkuIENoZWNrIHRvIG1ha2Ugc3VyZSBfelRpbWUgaXNuJ3QgLV90aW55TnVtIHRvIGF2b2lkIGFuIGVkZ2UgY2FzZSB3aGVyZSB0aGUgcGxheWhlYWQgaXMgcHVzaGVkIHRvIHRoZSBlbmQgYnV0IElOU0lERSBhIHR3ZWVuL2NhbGxiYWNrLCB0aGUgdGltZWxpbmUgaXRzZWxmIGlzIHBhdXNlZCB0aHVzIGhhbHRpbmcgcmVuZGVyaW5nIGFuZCBsZWF2aW5nIGEgZmV3IHVucmVuZGVyZWQuIFdoZW4gcmVzdW1pbmcsIGl0IHdvdWxkbid0IHJlbmRlciB0aG9zZSBvdGhlcndpc2UuXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnN0YXJ0VGltZSA9IGZ1bmN0aW9uIHN0YXJ0VGltZSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9zdGFydCA9IHZhbHVlO1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwO1xuICAgICAgcGFyZW50ICYmIChwYXJlbnQuX3NvcnQgfHwgIXRoaXMucGFyZW50KSAmJiBfYWRkVG9UaW1lbGluZShwYXJlbnQsIHRoaXMsIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0O1xuICB9O1xuXG4gIF9wcm90by5lbmRUaW1lID0gZnVuY3Rpb24gZW5kVGltZShpbmNsdWRlUmVwZWF0cykge1xuICAgIHJldHVybiB0aGlzLl9zdGFydCArIChfaXNOb3RGYWxzZShpbmNsdWRlUmVwZWF0cykgPyB0aGlzLnRvdGFsRHVyYXRpb24oKSA6IHRoaXMuZHVyYXRpb24oKSkgLyBNYXRoLmFicyh0aGlzLl90cyB8fCAxKTtcbiAgfTtcblxuICBfcHJvdG8ucmF3VGltZSA9IGZ1bmN0aW9uIHJhd1RpbWUod3JhcFJlcGVhdHMpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHA7IC8vIF9kcCA9IGRldGFjaGVkIHBhcmVudFxuXG4gICAgcmV0dXJuICFwYXJlbnQgPyB0aGlzLl90VGltZSA6IHdyYXBSZXBlYXRzICYmICghdGhpcy5fdHMgfHwgdGhpcy5fcmVwZWF0ICYmIHRoaXMuX3RpbWUgJiYgdGhpcy50b3RhbFByb2dyZXNzKCkgPCAxKSA/IHRoaXMuX3RUaW1lICUgKHRoaXMuX2R1ciArIHRoaXMuX3JEZWxheSkgOiAhdGhpcy5fdHMgPyB0aGlzLl90VGltZSA6IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudC5yYXdUaW1lKHdyYXBSZXBlYXRzKSwgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVydCA9IGZ1bmN0aW9uIHJldmVydChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHtcbiAgICAgIGNvbmZpZyA9IF9yZXZlcnRDb25maWc7XG4gICAgfVxuXG4gICAgdmFyIHByZXZJc1JldmVydGluZyA9IF9yZXZlcnRpbmc7XG4gICAgX3JldmVydGluZyA9IGNvbmZpZztcbiAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUucmV2ZXJ0KGNvbmZpZyk7XG4gICAgdGhpcy50b3RhbFRpbWUoLTAuMDEsIGNvbmZpZy5zdXBwcmVzc0V2ZW50cyk7XG4gICAgdGhpcy5kYXRhICE9PSBcIm5lc3RlZFwiICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMpO1xuICAgIF9yZXZlcnRpbmcgPSBwcmV2SXNSZXZlcnRpbmc7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmdsb2JhbFRpbWUgPSBmdW5jdGlvbiBnbG9iYWxUaW1lKHJhd1RpbWUpIHtcbiAgICB2YXIgYW5pbWF0aW9uID0gdGhpcyxcbiAgICAgICAgdGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPyByYXdUaW1lIDogYW5pbWF0aW9uLnJhd1RpbWUoKTtcblxuICAgIHdoaWxlIChhbmltYXRpb24pIHtcbiAgICAgIHRpbWUgPSBhbmltYXRpb24uX3N0YXJ0ICsgdGltZSAvIChhbmltYXRpb24uX3RzIHx8IDEpO1xuICAgICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uLl9kcDtcbiAgICB9XG5cbiAgICByZXR1cm4gIXRoaXMucGFyZW50ICYmIHRoaXMudmFycy5pbW1lZGlhdGVSZW5kZXIgPyAtMSA6IHRpbWU7IC8vIHRoZSBfc3RhcnRBdCB0d2VlbnMgZm9yIC5mcm9tVG8oKSBhbmQgLmZyb20oKSB0aGF0IGhhdmUgaW1tZWRpYXRlUmVuZGVyIHNob3VsZCBhbHdheXMgYmUgRklSU1QgaW4gdGhlIHRpbWVsaW5lIChpbXBvcnRhbnQgZm9yIFJlY29yZGluZy5yZXZlcnQoKSlcbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0ID0gZnVuY3Rpb24gcmVwZWF0KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3JlcGVhdCA9IHZhbHVlID09PSBJbmZpbml0eSA/IC0yIDogdmFsdWU7XG4gICAgICByZXR1cm4gX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcmVwZWF0ID09PSAtMiA/IEluZmluaXR5IDogdGhpcy5fcmVwZWF0O1xuICB9O1xuXG4gIF9wcm90by5yZXBlYXREZWxheSA9IGZ1bmN0aW9uIHJlcGVhdERlbGF5KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciB0aW1lID0gdGhpcy5fdGltZTtcbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhbHVlO1xuXG4gICAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuXG4gICAgICByZXR1cm4gdGltZSA/IHRoaXMudGltZSh0aW1lKSA6IHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JEZWxheTtcbiAgfTtcblxuICBfcHJvdG8ueW95byA9IGZ1bmN0aW9uIHlveW8odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5feW95byA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3lveW87XG4gIH07XG5cbiAgX3Byb3RvLnNlZWsgPSBmdW5jdGlvbiBzZWVrKHBvc2l0aW9uLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3RhcnQgPSBmdW5jdGlvbiByZXN0YXJ0KGluY2x1ZGVEZWxheSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5KCkudG90YWxUaW1lKGluY2x1ZGVEZWxheSA/IC10aGlzLl9kZWxheSA6IDAsIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnBsYXkgPSBmdW5jdGlvbiBwbGF5KGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQoZmFsc2UpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlKGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tIHx8IHRoaXMudG90YWxEdXJhdGlvbigpLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQodHJ1ZSkucGF1c2VkKGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZShhdFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgYXRUaW1lICE9IG51bGwgJiYgdGhpcy5zZWVrKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnBhdXNlZCh0cnVlKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdW1lID0gZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgIHJldHVybiB0aGlzLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2VkID0gZnVuY3Rpb24gcmV2ZXJzZWQodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgISF2YWx1ZSAhPT0gdGhpcy5yZXZlcnNlZCgpICYmIHRoaXMudGltZVNjYWxlKC10aGlzLl9ydHMgfHwgKHZhbHVlID8gLV90aW55TnVtIDogMCkpOyAvLyBpbiBjYXNlIHRpbWVTY2FsZSBpcyB6ZXJvLCByZXZlcnNpbmcgd291bGQgaGF2ZSBubyBlZmZlY3Qgc28gd2UgdXNlIF90aW55TnVtLlxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcnRzIDwgMDtcbiAgfTtcblxuICBfcHJvdG8uaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgdGhpcy5faW5pdHRlZCA9IHRoaXMuX2FjdCA9IDA7XG4gICAgdGhpcy5felRpbWUgPSAtX3RpbnlOdW07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmlzQWN0aXZlID0gZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwLFxuICAgICAgICBzdGFydCA9IHRoaXMuX3N0YXJ0LFxuICAgICAgICByYXdUaW1lO1xuICAgIHJldHVybiAhISghcGFyZW50IHx8IHRoaXMuX3RzICYmIHRoaXMuX2luaXR0ZWQgJiYgcGFyZW50LmlzQWN0aXZlKCkgJiYgKHJhd1RpbWUgPSBwYXJlbnQucmF3VGltZSh0cnVlKSkgPj0gc3RhcnQgJiYgcmF3VGltZSA8IHRoaXMuZW5kVGltZSh0cnVlKSAtIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8uZXZlbnRDYWxsYmFjayA9IGZ1bmN0aW9uIGV2ZW50Q2FsbGJhY2sodHlwZSwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB2YXJzID0gdGhpcy52YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIGRlbGV0ZSB2YXJzW3R5cGVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyc1t0eXBlXSA9IGNhbGxiYWNrO1xuICAgICAgICBwYXJhbXMgJiYgKHZhcnNbdHlwZSArIFwiUGFyYW1zXCJdID0gcGFyYW1zKTtcbiAgICAgICAgdHlwZSA9PT0gXCJvblVwZGF0ZVwiICYmICh0aGlzLl9vblVwZGF0ZSA9IGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhcnNbdHlwZV07XG4gIH07XG5cbiAgX3Byb3RvLnRoZW4gPSBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgdmFyIGYgPSBfaXNGdW5jdGlvbihvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IF9wYXNzVGhyb3VnaCxcbiAgICAgICAgICBfcmVzb2x2ZSA9IGZ1bmN0aW9uIF9yZXNvbHZlKCkge1xuICAgICAgICB2YXIgX3RoZW4gPSBzZWxmLnRoZW47XG4gICAgICAgIHNlbGYudGhlbiA9IG51bGw7IC8vIHRlbXBvcmFyaWx5IG51bGwgdGhlIHRoZW4oKSBtZXRob2QgdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcCAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzIyKVxuXG4gICAgICAgIF9pc0Z1bmN0aW9uKGYpICYmIChmID0gZihzZWxmKSkgJiYgKGYudGhlbiB8fCBmID09PSBzZWxmKSAmJiAoc2VsZi50aGVuID0gX3RoZW4pO1xuICAgICAgICByZXNvbHZlKGYpO1xuICAgICAgICBzZWxmLnRoZW4gPSBfdGhlbjtcbiAgICAgIH07XG5cbiAgICAgIGlmIChzZWxmLl9pbml0dGVkICYmIHNlbGYudG90YWxQcm9ncmVzcygpID09PSAxICYmIHNlbGYuX3RzID49IDAgfHwgIXNlbGYuX3RUaW1lICYmIHNlbGYuX3RzIDwgMCkge1xuICAgICAgICBfcmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5fcHJvbSA9IF9yZXNvbHZlO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5raWxsID0gZnVuY3Rpb24ga2lsbCgpIHtcbiAgICBfaW50ZXJydXB0KHRoaXMpO1xuICB9O1xuXG4gIHJldHVybiBBbmltYXRpb247XG59KCk7XG5cbl9zZXREZWZhdWx0cyhBbmltYXRpb24ucHJvdG90eXBlLCB7XG4gIF90aW1lOiAwLFxuICBfc3RhcnQ6IDAsXG4gIF9lbmQ6IDAsXG4gIF90VGltZTogMCxcbiAgX3REdXI6IDAsXG4gIF9kaXJ0eTogMCxcbiAgX3JlcGVhdDogMCxcbiAgX3lveW86IGZhbHNlLFxuICBwYXJlbnQ6IG51bGwsXG4gIF9pbml0dGVkOiBmYWxzZSxcbiAgX3JEZWxheTogMCxcbiAgX3RzOiAxLFxuICBfZHA6IDAsXG4gIHJhdGlvOiAwLFxuICBfelRpbWU6IC1fdGlueU51bSxcbiAgX3Byb206IDAsXG4gIF9wczogZmFsc2UsXG4gIF9ydHM6IDFcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRJTUVMSU5FXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFRpbWVsaW5lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKFRpbWVsaW5lLCBfQW5pbWF0aW9uKTtcblxuICBmdW5jdGlvbiBUaW1lbGluZSh2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9BbmltYXRpb24uY2FsbCh0aGlzLCB2YXJzKSB8fCB0aGlzO1xuICAgIF90aGlzLmxhYmVscyA9IHt9O1xuICAgIF90aGlzLnNtb290aENoaWxkVGltaW5nID0gISF2YXJzLnNtb290aENoaWxkVGltaW5nO1xuICAgIF90aGlzLmF1dG9SZW1vdmVDaGlsZHJlbiA9ICEhdmFycy5hdXRvUmVtb3ZlQ2hpbGRyZW47XG4gICAgX3RoaXMuX3NvcnQgPSBfaXNOb3RGYWxzZSh2YXJzLnNvcnRDaGlsZHJlbik7XG4gICAgX2dsb2JhbFRpbWVsaW5lICYmIF9hZGRUb1RpbWVsaW5lKHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHBvc2l0aW9uKTtcbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpcy5wYXVzZWQodHJ1ZSk7XG4gICAgdmFycy5zY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB2YXJzLnNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gVGltZWxpbmUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMCwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZnJvbSA9IGZ1bmN0aW9uIGZyb20odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDEsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgdmFycy5pbW1lZGlhdGVSZW5kZXIgPSAhIXZhcnMuaW1tZWRpYXRlUmVuZGVyO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIDEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuY2FsbCA9IGZ1bmN0aW9uIGNhbGwoY2FsbGJhY2ssIHBhcmFtcywgcG9zaXRpb24pIHtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2ssIHBhcmFtcyksIHBvc2l0aW9uKTtcbiAgfSAvL09OTFkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkhIE1heWJlIGRlbGV0ZT9cbiAgO1xuXG4gIF9wcm90bzIuc3RhZ2dlclRvID0gZnVuY3Rpb24gc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHZhcnMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB2YXJzLnN0YWdnZXIgPSB2YXJzLnN0YWdnZXIgfHwgc3RhZ2dlcjtcbiAgICB2YXJzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlQWxsO1xuICAgIHZhcnMub25Db21wbGV0ZVBhcmFtcyA9IG9uQ29tcGxldGVBbGxQYXJhbXM7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb20gPSBmdW5jdGlvbiBzdGFnZ2VyRnJvbSh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLnJ1bkJhY2t3YXJkcyA9IDE7XG4gICAgX2luaGVyaXREZWZhdWx0cyh2YXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh2YXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5zdGFnZ2VyRnJvbVRvID0gZnVuY3Rpb24gc3RhZ2dlckZyb21Ubyh0YXJnZXRzLCBkdXJhdGlvbiwgZnJvbVZhcnMsIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB0b1ZhcnMuc3RhcnRBdCA9IGZyb21WYXJzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModG9WYXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICByZXR1cm4gdGhpcy5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX2RpcnR5ID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lIDw9IDAgPyAwIDogX3JvdW5kUHJlY2lzZSh0b3RhbFRpbWUpLFxuICAgICAgICAvLyBpZiBhIHBhdXNlZCB0aW1lbGluZSBpcyByZXN1bWVkIChvciBpdHMgX3N0YXJ0IGlzIHVwZGF0ZWQgZm9yIGFub3RoZXIgcmVhc29uLi4ud2hpY2ggcm91bmRzIGl0KSwgdGhhdCBjb3VsZCByZXN1bHQgaW4gdGhlIHBsYXloZWFkIHNoaWZ0aW5nIGEgKip0aW55KiogYW1vdW50IGFuZCBhIHplcm8tZHVyYXRpb24gY2hpbGQgYXQgdGhhdCBzcG90IG1heSBnZXQgcmVuZGVyZWQgYXQgYSBkaWZmZXJlbnQgcmF0aW8sIGxpa2UgaXRzIHRvdGFsVGltZSBpbiByZW5kZXIoKSBtYXkgYmUgMWUtMTcgaW5zdGVhZCBvZiAwLCBmb3IgZXhhbXBsZS5cbiAgICBjcm9zc2luZ1N0YXJ0ID0gdGhpcy5felRpbWUgPCAwICE9PSB0b3RhbFRpbWUgPCAwICYmICh0aGlzLl9pbml0dGVkIHx8ICFkdXIpLFxuICAgICAgICB0aW1lLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgaXRlcmF0aW9uLFxuICAgICAgICBjeWNsZUR1cmF0aW9uLFxuICAgICAgICBwcmV2UGF1c2VkLFxuICAgICAgICBwYXVzZVR3ZWVuLFxuICAgICAgICB0aW1lU2NhbGUsXG4gICAgICAgIHByZXZTdGFydCxcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgeW95byxcbiAgICAgICAgaXNZb3lvO1xuICAgIHRoaXMgIT09IF9nbG9iYWxUaW1lbGluZSAmJiB0VGltZSA+IHREdXIgJiYgdG90YWxUaW1lID49IDAgJiYgKHRUaW1lID0gdER1cik7XG5cbiAgICBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8IGZvcmNlIHx8IGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSAmJiBkdXIpIHtcbiAgICAgICAgLy9pZiB0b3RhbER1cmF0aW9uKCkgZmluZHMgYSBjaGlsZCB3aXRoIGEgbmVnYXRpdmUgc3RhcnRUaW1lIGFuZCBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCB0aGluZ3MgZ2V0IHNoaWZ0ZWQgYXJvdW5kIGludGVybmFsbHkgc28gd2UgbmVlZCB0byBhZGp1c3QgdGhlIHRpbWUgYWNjb3JkaW5nbHkuIEZvciBleGFtcGxlLCBpZiBhIHR3ZWVuIHN0YXJ0cyBhdCAtMzAgd2UgbXVzdCBzaGlmdCBFVkVSWVRISU5HIGZvcndhcmQgMzAgc2Vjb25kcyBhbmQgbW92ZSB0aGlzIHRpbWVsaW5lJ3Mgc3RhcnRUaW1lIGJhY2t3YXJkIGJ5IDMwIHNlY29uZHMgc28gdGhhdCB0aGluZ3MgYWxpZ24gd2l0aCB0aGUgcGxheWhlYWQgKG5vIGp1bXApLlxuICAgICAgICB0VGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICAgIHRvdGFsVGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICB9XG5cbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHByZXZTdGFydCA9IHRoaXMuX3N0YXJ0O1xuICAgICAgdGltZVNjYWxlID0gdGhpcy5fdHM7XG4gICAgICBwcmV2UGF1c2VkID0gIXRpbWVTY2FsZTtcblxuICAgICAgaWYgKGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgICAgZHVyIHx8IChwcmV2VGltZSA9IHRoaXMuX3pUaW1lKTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgICAgICAodG90YWxUaW1lIHx8ICFzdXBwcmVzc0V2ZW50cykgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgeW95byA9IHRoaXMuX3lveW87XG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCA8IC0xICYmIHRvdGFsVGltZSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoY3ljbGVEdXJhdGlvbiAqIDEwMCArIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWUgPSBfcm91bmRQcmVjaXNlKHRUaW1lICUgY3ljbGVEdXJhdGlvbik7IC8vcm91bmQgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzLiAoNCAlIDAuOCBzaG91bGQgYmUgMCBidXQgc29tZSBicm93c2VycyByZXBvcnQgaXQgYXMgMC43OTk5OTk5OSEpXG5cbiAgICAgICAgaWYgKHRUaW1lID09PSB0RHVyKSB7XG4gICAgICAgICAgLy8gdGhlIHREdXIgPT09IHRUaW1lIGlzIGZvciBlZGdlIGNhc2VzIHdoZXJlIHRoZXJlJ3MgYSBsZW5ndGh5IGRlY2ltYWwgb24gdGhlIGR1cmF0aW9uIGFuZCBpdCBtYXkgcmVhY2ggdGhlIHZlcnkgZW5kIGJ1dCB0aGUgdGltZSBpcyByZW5kZXJlZCBhcyBub3QtcXVpdGUtdGhlcmUgKHJlbWVtYmVyLCB0RHVyIGlzIHJvdW5kZWQgdG8gNCBkZWNpbWFscyB3aGVyZWFzIGR1ciBpc24ndClcbiAgICAgICAgICBpdGVyYXRpb24gPSB0aGlzLl9yZXBlYXQ7XG4gICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVyYXRpb24gPSB+fih0VGltZSAvIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbiAmJiBpdGVyYXRpb24gPT09IHRUaW1lIC8gY3ljbGVEdXJhdGlvbikge1xuICAgICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgICAgIGl0ZXJhdGlvbi0tO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRpbWUgPiBkdXIgJiYgKHRpbWUgPSBkdXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldkl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbik7XG4gICAgICAgICFwcmV2VGltZSAmJiB0aGlzLl90VGltZSAmJiBwcmV2SXRlcmF0aW9uICE9PSBpdGVyYXRpb24gJiYgKHByZXZJdGVyYXRpb24gPSBpdGVyYXRpb24pOyAvLyBlZGdlIGNhc2UgLSBpZiBzb21lb25lIGRvZXMgYWRkUGF1c2UoKSBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb2YgYSByZXBlYXRpbmcgdGltZWxpbmUsIHRoYXQgcGF1c2UgaXMgdGVjaG5pY2FsbHkgYXQgdGhlIHNhbWUgc3BvdCBhcyB0aGUgZW5kIHdoaWNoIGNhdXNlcyB0aGlzLl90aW1lIHRvIGdldCBzZXQgdG8gMCB3aGVuIHRoZSB0b3RhbFRpbWUgd291bGQgbm9ybWFsbHkgcGxhY2UgdGhlIHBsYXloZWFkIGF0IHRoZSBlbmQuIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzIzODIzLWNsb3NpbmctbmF2LWFuaW1hdGlvbi1ub3Qtd29ya2luZy1vbi1pZS1hbmQtaXBob25lLTYtbWF5YmUtb3RoZXItb2xkZXItYnJvd3Nlci8/dGFiPWNvbW1lbnRzI2NvbW1lbnQtMTEzMDA1XG5cbiAgICAgICAgaWYgKHlveW8gJiYgaXRlcmF0aW9uICYgMSkge1xuICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICAgIGlzWW95byA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgbWFrZSBzdXJlIGNoaWxkcmVuIGF0IHRoZSBlbmQvYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSBhcmUgcmVuZGVyZWQgcHJvcGVybHkuIElmLCBmb3IgZXhhbXBsZSxcbiAgICAgICAgYSAzLXNlY29uZCBsb25nIHRpbWVsaW5lIHJlbmRlcmVkIGF0IDIuOSBzZWNvbmRzIHByZXZpb3VzbHksIGFuZCBub3cgcmVuZGVycyBhdCAzLjIgc2Vjb25kcyAod2hpY2hcbiAgICAgICAgd291bGQgZ2V0IHRyYW5zbGF0ZWQgdG8gMi44IHNlY29uZHMgaWYgdGhlIHRpbWVsaW5lIHlveW9zIG9yIDAuMiBzZWNvbmRzIGlmIGl0IGp1c3QgcmVwZWF0cyksIHRoZXJlXG4gICAgICAgIGNvdWxkIGJlIGEgY2FsbGJhY2sgb3IgYSBzaG9ydCB0d2VlbiB0aGF0J3MgYXQgMi45NSBvciAzIHNlY29uZHMgaW4gd2hpY2ggd291bGRuJ3QgcmVuZGVyLiBTb1xuICAgICAgICB3ZSBuZWVkIHRvIHB1c2ggdGhlIHRpbWVsaW5lIHRvIHRoZSBlbmQgKGFuZC9vciBiZWdpbm5pbmcgZGVwZW5kaW5nIG9uIGl0cyB5b3lvIHZhbHVlKS4gQWxzbyB3ZSBtdXN0XG4gICAgICAgIGVuc3VyZSB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIFRpbWVsaW5lIHdvcmsuXG4gICAgICAgICovXG5cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmICF0aGlzLl9sb2NrKSB7XG4gICAgICAgICAgdmFyIHJld2luZGluZyA9IHlveW8gJiYgcHJldkl0ZXJhdGlvbiAmIDEsXG4gICAgICAgICAgICAgIGRvZXNXcmFwID0gcmV3aW5kaW5nID09PSAoeW95byAmJiBpdGVyYXRpb24gJiAxKTtcbiAgICAgICAgICBpdGVyYXRpb24gPCBwcmV2SXRlcmF0aW9uICYmIChyZXdpbmRpbmcgPSAhcmV3aW5kaW5nKTtcbiAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IDAgOiBkdXI7XG4gICAgICAgICAgdGhpcy5fbG9jayA9IDE7XG4gICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUgfHwgKGlzWW95byA/IDAgOiBfcm91bmRQcmVjaXNlKGl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24pKSwgc3VwcHJlc3NFdmVudHMsICFkdXIpLl9sb2NrID0gMDtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lOyAvLyBpZiBhIHVzZXIgZ2V0cyB0aGUgaXRlcmF0aW9uKCkgaW5zaWRlIHRoZSBvblJlcGVhdCwgZm9yIGV4YW1wbGUsIGl0IHNob3VsZCBiZSBhY2N1cmF0ZS5cblxuICAgICAgICAgICFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnBhcmVudCAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJlcGVhdFwiKTtcbiAgICAgICAgICB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICh0aGlzLmludmFsaWRhdGUoKS5fbG9jayA9IDEpO1xuXG4gICAgICAgICAgaWYgKHByZXZUaW1lICYmIHByZXZUaW1lICE9PSB0aGlzLl90aW1lIHx8IHByZXZQYXVzZWQgIT09ICF0aGlzLl90cyB8fCB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXRoaXMucGFyZW50ICYmICF0aGlzLl9hY3QpIHtcbiAgICAgICAgICAgIC8vIGlmIHByZXZUaW1lIGlzIDAgYW5kIHdlIHJlbmRlciBhdCB0aGUgdmVyeSBlbmQsIF90aW1lIHdpbGwgYmUgdGhlIGVuZCwgdGh1cyB3b24ndCBtYXRjaC4gU28gaW4gdGhpcyBlZGdlIGNhc2UsIHByZXZUaW1lIHdvbid0IG1hdGNoIF90aW1lIGJ1dCB0aGF0J3Mgb2theS4gSWYgaXQgZ2V0cyBraWxsZWQgaW4gdGhlIG9uUmVwZWF0LCBlamVjdCBhcyB3ZWxsLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZHVyID0gdGhpcy5fZHVyOyAvLyBpbiBjYXNlIHRoZSBkdXJhdGlvbiBjaGFuZ2VkIGluIHRoZSBvblJlcGVhdFxuXG4gICAgICAgICAgdER1ciA9IHRoaXMuX3REdXI7XG5cbiAgICAgICAgICBpZiAoZG9lc1dyYXApIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSAyO1xuICAgICAgICAgICAgcHJldlRpbWUgPSByZXdpbmRpbmcgPyBkdXIgOiAtMC4wMDAxO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiB0aGlzLmludmFsaWRhdGUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgICAgICAgIGlmICghdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH0gLy9pbiBvcmRlciBmb3IgeW95b0Vhc2UgdG8gd29yayBwcm9wZXJseSB3aGVuIHRoZXJlJ3MgYSBzdGFnZ2VyLCB3ZSBtdXN0IHN3YXAgb3V0IHRoZSBlYXNlIGluIGVhY2ggc3ViLXR3ZWVuLlxuXG5cbiAgICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UodGhpcywgaXNZb3lvKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faGFzUGF1c2UgJiYgIXRoaXMuX2ZvcmNpbmcgJiYgdGhpcy5fbG9jayA8IDIpIHtcbiAgICAgICAgcGF1c2VUd2VlbiA9IF9maW5kTmV4dFBhdXNlVHdlZW4odGhpcywgX3JvdW5kUHJlY2lzZShwcmV2VGltZSksIF9yb3VuZFByZWNpc2UodGltZSkpO1xuXG4gICAgICAgIGlmIChwYXVzZVR3ZWVuKSB7XG4gICAgICAgICAgdFRpbWUgLT0gdGltZSAtICh0aW1lID0gcGF1c2VUd2Vlbi5fc3RhcnQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICAgIHRoaXMuX2FjdCA9ICF0aW1lU2NhbGU7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgdGhpcy5fb25VcGRhdGUgPSB0aGlzLnZhcnMub25VcGRhdGU7XG4gICAgICAgIHRoaXMuX2luaXR0ZWQgPSAxO1xuICAgICAgICB0aGlzLl96VGltZSA9IHRvdGFsVGltZTtcbiAgICAgICAgcHJldlRpbWUgPSAwOyAvLyB1cG9uIGluaXQsIHRoZSBwbGF5aGVhZCBzaG91bGQgYWx3YXlzIGdvIGZvcndhcmQ7IHNvbWVvbmUgY291bGQgaW52YWxpZGF0ZSgpIGEgY29tcGxldGVkIHRpbWVsaW5lIGFuZCB0aGVuIGlmIHRoZXkgcmVzdGFydCgpLCB0aGF0IHdvdWxkIG1ha2UgY2hpbGQgdHdlZW5zIHJlbmRlciBpbiByZXZlcnNlIG9yZGVyIHdoaWNoIGNvdWxkIGxvY2sgaW4gdGhlIHdyb25nIHN0YXJ0aW5nIHZhbHVlcyBpZiB0aGV5IGJ1aWxkIG9uIGVhY2ggb3RoZXIsIGxpa2UgdGwudG8ob2JqLCB7eDogMTAwfSkudG8ob2JqLCB7eDogMH0pLlxuICAgICAgfVxuXG4gICAgICBpZiAoIXByZXZUaW1lICYmIHRpbWUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgPj0gcHJldlRpbWUgJiYgdG90YWxUaW1lID49IDApIHtcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgdGltZSA+PSBjaGlsZC5fc3RhcnQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKHRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gLV90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGZsYWcgelRpbWUgYXMgbmVnYXRpdmUgc28gdGhhdCBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkIGl0J2xsIGJlIGZvcmNlZCAodG8gcmVuZGVyIGFueSByZW1haW5pbmcgY2hpbGRyZW4pXG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3JjZSA9IGZvcmNlIHx8IF9yZXZlcnRpbmc7IC8vIGlmIHJldmVydGluZywgd2Ugc2hvdWxkIGFsd2F5cyBmb3JjZSByZW5kZXJzLiBJZiwgZm9yIGV4YW1wbGUsIGEgLmZyb21UbygpIHR3ZWVuIHdpdGggYSBzdGFnZ2VyICh3aGljaCBjcmVhdGVzIGFuIGludGVybmFsIHRpbWVsaW5lKSBnZXRzIHJldmVydGVkIEJFRk9SRSBzb21lIG9mIGl0cyBjaGlsZCB0d2VlbnMgcmVuZGVyIGZvciB0aGUgZmlyc3QgdGltZSwgaXQgbWF5IG5vdCBwcm9wZXJseSB0cmlnZ2VyIHRoZW0gdG8gcmV2ZXJ0LlxuXG4gICAgICAgIGNoaWxkID0gdGhpcy5fbGFzdDtcbiAgICAgICAgdmFyIGFkanVzdGVkVGltZSA9IHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiB0aW1lOyAvL3doZW4gdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgYmV5b25kIHRoZSBzdGFydCBvZiB0aGlzIHRpbWVsaW5lLCB3ZSBtdXN0IHBhc3MgdGhhdCBpbmZvcm1hdGlvbiBkb3duIHRvIHRoZSBjaGlsZCBhbmltYXRpb25zIHNvIHRoYXQgemVyby1kdXJhdGlvbiB0d2VlbnMga25vdyB3aGV0aGVyIHRvIHJlbmRlciB0aGVpciBzdGFydGluZyBvciBlbmRpbmcgdmFsdWVzLlxuXG4gICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgIG5leHQgPSBjaGlsZC5fcHJldjtcblxuICAgICAgICAgIGlmICgoY2hpbGQuX2FjdCB8fCBhZGp1c3RlZFRpbWUgPD0gY2hpbGQuX2VuZCkgJiYgY2hpbGQuX3RzICYmIHBhdXNlVHdlZW4gIT09IGNoaWxkKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50ICE9PSB0aGlzKSB7XG4gICAgICAgICAgICAgIC8vIGFuIGV4dHJlbWUgZWRnZSBjYXNlIC0gdGhlIGNoaWxkJ3MgcmVuZGVyIGNvdWxkIGRvIHNvbWV0aGluZyBsaWtlIGtpbGwoKSB0aGUgXCJuZXh0XCIgb25lIGluIHRoZSBsaW5rZWQgbGlzdCwgb3IgcmVwYXJlbnQgaXQuIEluIHRoYXQgY2FzZSB3ZSBtdXN0IHJlLWluaXRpYXRlIHRoZSB3aG9sZSByZW5kZXIgdG8gYmUgc2FmZS5cbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hpbGQucmVuZGVyKGNoaWxkLl90cyA+IDAgPyAoYWRqdXN0ZWRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cyA6IChjaGlsZC5fZGlydHkgPyBjaGlsZC50b3RhbER1cmF0aW9uKCkgOiBjaGlsZC5fdER1cikgKyAoYWRqdXN0ZWRUaW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gYWRqdXN0ZWRUaW1lID8gLV90aW55TnVtIDogX3RpbnlOdW0pOyAvLyBpdCBkaWRuJ3QgZmluaXNoIHJlbmRlcmluZywgc28gYWRqdXN0IHpUaW1lIHNvIHRoYXQgc28gdGhhdCB0aGUgbmV4dCB0aW1lIHJlbmRlcigpIGlzIGNhbGxlZCBpdCdsbCBiZSBmb3JjZWQgKHRvIHJlbmRlciBhbnkgcmVtYWluaW5nIGNoaWxkcmVuKVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGF1c2VUd2VlbiAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICBwYXVzZVR3ZWVuLnJlbmRlcih0aW1lID49IHByZXZUaW1lID8gMCA6IC1fdGlueU51bSkuX3pUaW1lID0gdGltZSA+PSBwcmV2VGltZSA/IDEgOiAtMTtcblxuICAgICAgICBpZiAodGhpcy5fdHMpIHtcbiAgICAgICAgICAvL3RoZSBjYWxsYmFjayByZXN1bWVkIHBsYXliYWNrISBTbyBzaW5jZSB3ZSBtYXkgaGF2ZSBoZWxkIGJhY2sgdGhlIHBsYXloZWFkIGR1ZSB0byB3aGVyZSB0aGUgcGF1c2UgaXMgcG9zaXRpb25lZCwgZ28gYWhlYWQgYW5kIGp1bXAgdG8gd2hlcmUgaXQncyBTVVBQT1NFRCB0byBiZSAoaWYgbm8gcGF1c2UgaGFwcGVuZWQpLlxuICAgICAgICAgIHRoaXMuX3N0YXJ0ID0gcHJldlN0YXJ0OyAvL2lmIHRoZSBwYXVzZSB3YXMgYXQgYW4gZWFybGllciB0aW1lIGFuZCB0aGUgdXNlciByZXN1bWVkIGluIHRoZSBjYWxsYmFjaywgaXQgY291bGQgcmVwb3NpdGlvbiB0aGUgdGltZWxpbmUgKGNoYW5naW5nIGl0cyBzdGFydFRpbWUpLCB0aHJvd2luZyB0aGluZ3Mgb2ZmIHNsaWdodGx5LCBzbyB3ZSBtYWtlIHN1cmUgdGhlIF9zdGFydCBkb2Vzbid0IHNoaWZ0LlxuXG4gICAgICAgICAgX3NldEVuZCh0aGlzKTtcblxuICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIsIHRydWUpO1xuICAgICAgaWYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RUaW1lID49IHRoaXMudG90YWxEdXJhdGlvbigpIHx8ICF0VGltZSAmJiBwcmV2VGltZSkgaWYgKHByZXZTdGFydCA9PT0gdGhpcy5fc3RhcnQgfHwgTWF0aC5hYnModGltZVNjYWxlKSAhPT0gTWF0aC5hYnModGhpcy5fdHMpKSBpZiAoIXRoaXMuX2xvY2spIHtcbiAgICAgICAgLy8gcmVtZW1iZXIsIGEgY2hpbGQncyBjYWxsYmFjayBtYXkgYWx0ZXIgdGhpcyB0aW1lbGluZSdzIHBsYXloZWFkIG9yIHRpbWVTY2FsZSB3aGljaCBpcyB3aHkgd2UgbmVlZCB0byBhZGQgc29tZSBvZiB0aGVzZSBjaGVja3MuXG4gICAgICAgICh0b3RhbFRpbWUgfHwgIWR1cikgJiYgKHRUaW1lID09PSB0RHVyICYmIHRoaXMuX3RzID4gMCB8fCAhdFRpbWUgJiYgdGhpcy5fdHMgPCAwKSAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0aGlzLCAxKTsgLy8gZG9uJ3QgcmVtb3ZlIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIHBsYXloZWFkIGlzbid0IGF0IDAsIG90aGVyd2lzZSB0bC5wcm9ncmVzcygxKS5yZXZlcnNlKCkgd29uJ3Qgd29yay4gT25seSByZW1vdmUgaWYgdGhlIHBsYXloZWFkIGlzIGF0IHRoZSBlbmQgYW5kIHRpbWVTY2FsZSBpcyBwb3NpdGl2ZSwgb3IgaWYgdGhlIHBsYXloZWFkIGlzIGF0IDAgYW5kIHRoZSB0aW1lU2NhbGUgaXMgbmVnYXRpdmUuXG5cbiAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhKHRvdGFsVGltZSA8IDAgJiYgIXByZXZUaW1lKSAmJiAodFRpbWUgfHwgcHJldlRpbWUgfHwgIXREdXIpKSB7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyICYmIHRvdGFsVGltZSA+PSAwID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGQgPSBmdW5jdGlvbiBhZGQoY2hpbGQsIHBvc2l0aW9uKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBfaXNOdW1iZXIocG9zaXRpb24pIHx8IChwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uLCBjaGlsZCkpO1xuXG4gICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBBbmltYXRpb24pKSB7XG4gICAgICBpZiAoX2lzQXJyYXkoY2hpbGQpKSB7XG4gICAgICAgIGNoaWxkLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuYWRkKG9iaiwgcG9zaXRpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNTdHJpbmcoY2hpbGQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZExhYmVsKGNoaWxkLCBwb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNGdW5jdGlvbihjaGlsZCkpIHtcbiAgICAgICAgY2hpbGQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcyAhPT0gY2hpbGQgPyBfYWRkVG9UaW1lbGluZSh0aGlzLCBjaGlsZCwgcG9zaXRpb24pIDogdGhpczsgLy9kb24ndCBhbGxvdyBhIHRpbWVsaW5lIHRvIGJlIGFkZGVkIHRvIGl0c2VsZiBhcyBhIGNoaWxkIVxuICB9O1xuXG4gIF9wcm90bzIuZ2V0Q2hpbGRyZW4gPSBmdW5jdGlvbiBnZXRDaGlsZHJlbihuZXN0ZWQsIHR3ZWVucywgdGltZWxpbmVzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgaWYgKG5lc3RlZCA9PT0gdm9pZCAwKSB7XG4gICAgICBuZXN0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0d2VlbnMgPT09IHZvaWQgMCkge1xuICAgICAgdHdlZW5zID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGltZWxpbmVzID09PSB2b2lkIDApIHtcbiAgICAgIHRpbWVsaW5lcyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgaWdub3JlQmVmb3JlVGltZSA9IC1fYmlnTnVtO1xuICAgIH1cblxuICAgIHZhciBhID0gW10sXG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICAgIHR3ZWVucyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpbWVsaW5lcyAmJiBhLnB1c2goY2hpbGQpO1xuICAgICAgICAgIG5lc3RlZCAmJiBhLnB1c2guYXBwbHkoYSwgY2hpbGQuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHdlZW5zLCB0aW1lbGluZXMpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0QnlJZCA9IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICB2YXIgYW5pbWF0aW9ucyA9IHRoaXMuZ2V0Q2hpbGRyZW4oMSwgMSwgMSksXG4gICAgICAgIGkgPSBhbmltYXRpb25zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChhbmltYXRpb25zW2ldLnZhcnMuaWQgPT09IGlkKSB7XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShjaGlsZCkge1xuICAgIGlmIChfaXNTdHJpbmcoY2hpbGQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVMYWJlbChjaGlsZCk7XG4gICAgfVxuXG4gICAgaWYgKF9pc0Z1bmN0aW9uKGNoaWxkKSkge1xuICAgICAgcmV0dXJuIHRoaXMua2lsbFR3ZWVuc09mKGNoaWxkKTtcbiAgICB9XG5cbiAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgY2hpbGQpO1xuXG4gICAgaWYgKGNoaWxkID09PSB0aGlzLl9yZWNlbnQpIHtcbiAgICAgIHRoaXMuX3JlY2VudCA9IHRoaXMuX2xhc3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxUaW1lID0gZnVuY3Rpb24gdG90YWxUaW1lKF90b3RhbFRpbWUyLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RUaW1lO1xuICAgIH1cblxuICAgIHRoaXMuX2ZvcmNpbmcgPSAxO1xuXG4gICAgaWYgKCF0aGlzLl9kcCAmJiB0aGlzLl90cykge1xuICAgICAgLy9zcGVjaWFsIGNhc2UgZm9yIHRoZSBnbG9iYWwgdGltZWxpbmUgKG9yIGFueSBvdGhlciB0aGF0IGhhcyBubyBwYXJlbnQgb3IgZGV0YWNoZWQgcGFyZW50KS5cbiAgICAgIHRoaXMuX3N0YXJ0ID0gX3JvdW5kUHJlY2lzZShfdGlja2VyLnRpbWUgLSAodGhpcy5fdHMgPiAwID8gX3RvdGFsVGltZTIgLyB0aGlzLl90cyA6ICh0aGlzLnRvdGFsRHVyYXRpb24oKSAtIF90b3RhbFRpbWUyKSAvIC10aGlzLl90cykpO1xuICAgIH1cblxuICAgIF9BbmltYXRpb24ucHJvdG90eXBlLnRvdGFsVGltZS5jYWxsKHRoaXMsIF90b3RhbFRpbWUyLCBzdXBwcmVzc0V2ZW50cyk7XG5cbiAgICB0aGlzLl9mb3JjaW5nID0gMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZExhYmVsID0gZnVuY3Rpb24gYWRkTGFiZWwobGFiZWwsIHBvc2l0aW9uKSB7XG4gICAgdGhpcy5sYWJlbHNbbGFiZWxdID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlTGFiZWwgPSBmdW5jdGlvbiByZW1vdmVMYWJlbChsYWJlbCkge1xuICAgIGRlbGV0ZSB0aGlzLmxhYmVsc1tsYWJlbF07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5hZGRQYXVzZSA9IGZ1bmN0aW9uIGFkZFBhdXNlKHBvc2l0aW9uLCBjYWxsYmFjaywgcGFyYW1zKSB7XG4gICAgdmFyIHQgPSBUd2Vlbi5kZWxheWVkQ2FsbCgwLCBjYWxsYmFjayB8fCBfZW1wdHlGdW5jLCBwYXJhbXMpO1xuICAgIHQuZGF0YSA9IFwiaXNQYXVzZVwiO1xuICAgIHRoaXMuX2hhc1BhdXNlID0gMTtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgdCwgX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlbW92ZVBhdXNlID0gZnVuY3Rpb24gcmVtb3ZlUGF1c2UocG9zaXRpb24pIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICBwb3NpdGlvbiA9IF9wYXJzZVBvc2l0aW9uKHRoaXMsIHBvc2l0aW9uKTtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA9PT0gcG9zaXRpb24gJiYgY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIpIHtcbiAgICAgICAgX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9uZXh0O1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8yLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgIHZhciB0d2VlbnMgPSB0aGlzLmdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpLFxuICAgICAgICBpID0gdHdlZW5zLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuICE9PSB0d2VlbnNbaV0gJiYgdHdlZW5zW2ldLmtpbGwodGFyZ2V0cywgcHJvcHMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0VHdlZW5zT2YgPSBmdW5jdGlvbiBnZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSB7XG4gICAgdmFyIGEgPSBbXSxcbiAgICAgICAgcGFyc2VkVGFyZ2V0cyA9IHRvQXJyYXkodGFyZ2V0cyksXG4gICAgICAgIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIGlzR2xvYmFsVGltZSA9IF9pc051bWJlcihvbmx5QWN0aXZlKSxcbiAgICAgICAgLy8gYSBudW1iZXIgaXMgaW50ZXJwcmV0ZWQgYXMgYSBnbG9iYWwgdGltZS4gSWYgdGhlIGFuaW1hdGlvbiBzcGFuc1xuICAgIGNoaWxkcmVuO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUd2Vlbikge1xuICAgICAgICBpZiAoX2FycmF5Q29udGFpbnNBbnkoY2hpbGQuX3RhcmdldHMsIHBhcnNlZFRhcmdldHMpICYmIChpc0dsb2JhbFRpbWUgPyAoIV9vdmVyd3JpdGluZ1R3ZWVuIHx8IGNoaWxkLl9pbml0dGVkICYmIGNoaWxkLl90cykgJiYgY2hpbGQuZ2xvYmFsVGltZSgwKSA8PSBvbmx5QWN0aXZlICYmIGNoaWxkLmdsb2JhbFRpbWUoY2hpbGQudG90YWxEdXJhdGlvbigpKSA+IG9ubHlBY3RpdmUgOiAhb25seUFjdGl2ZSB8fCBjaGlsZC5pc0FjdGl2ZSgpKSkge1xuICAgICAgICAgIC8vIG5vdGU6IGlmIHRoaXMgaXMgZm9yIG92ZXJ3cml0aW5nLCBpdCBzaG91bGQgb25seSBiZSBmb3IgdHdlZW5zIHRoYXQgYXJlbid0IHBhdXNlZCBhbmQgYXJlIGluaXR0ZWQuXG4gICAgICAgICAgYS5wdXNoKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgoY2hpbGRyZW4gPSBjaGlsZC5nZXRUd2VlbnNPZihwYXJzZWRUYXJnZXRzLCBvbmx5QWN0aXZlKSkubGVuZ3RoKSB7XG4gICAgICAgIGEucHVzaC5hcHBseShhLCBjaGlsZHJlbik7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH0gLy8gcG90ZW50aWFsIGZ1dHVyZSBmZWF0dXJlIC0gdGFyZ2V0cygpIG9uIHRpbWVsaW5lc1xuICAvLyB0YXJnZXRzKCkge1xuICAvLyBcdGxldCByZXN1bHQgPSBbXTtcbiAgLy8gXHR0aGlzLmdldENoaWxkcmVuKHRydWUsIHRydWUsIGZhbHNlKS5mb3JFYWNoKHQgPT4gcmVzdWx0LnB1c2goLi4udC50YXJnZXRzKCkpKTtcbiAgLy8gXHRyZXR1cm4gcmVzdWx0LmZpbHRlcigodiwgaSkgPT4gcmVzdWx0LmluZGV4T2YodikgPT09IGkpO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG8yLnR3ZWVuVG8gPSBmdW5jdGlvbiB0d2VlblRvKHBvc2l0aW9uLCB2YXJzKSB7XG4gICAgdmFycyA9IHZhcnMgfHwge307XG5cbiAgICB2YXIgdGwgPSB0aGlzLFxuICAgICAgICBlbmRUaW1lID0gX3BhcnNlUG9zaXRpb24odGwsIHBvc2l0aW9uKSxcbiAgICAgICAgX3ZhcnMgPSB2YXJzLFxuICAgICAgICBzdGFydEF0ID0gX3ZhcnMuc3RhcnRBdCxcbiAgICAgICAgX29uU3RhcnQgPSBfdmFycy5vblN0YXJ0LFxuICAgICAgICBvblN0YXJ0UGFyYW1zID0gX3ZhcnMub25TdGFydFBhcmFtcyxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyID0gX3ZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgICBpbml0dGVkLFxuICAgICAgICB0d2VlbiA9IFR3ZWVuLnRvKHRsLCBfc2V0RGVmYXVsdHMoe1xuICAgICAgZWFzZTogdmFycy5lYXNlIHx8IFwibm9uZVwiLFxuICAgICAgbGF6eTogZmFsc2UsXG4gICAgICBpbW1lZGlhdGVSZW5kZXI6IGZhbHNlLFxuICAgICAgdGltZTogZW5kVGltZSxcbiAgICAgIG92ZXJ3cml0ZTogXCJhdXRvXCIsXG4gICAgICBkdXJhdGlvbjogdmFycy5kdXJhdGlvbiB8fCBNYXRoLmFicygoZW5kVGltZSAtIChzdGFydEF0ICYmIFwidGltZVwiIGluIHN0YXJ0QXQgPyBzdGFydEF0LnRpbWUgOiB0bC5fdGltZSkpIC8gdGwudGltZVNjYWxlKCkpIHx8IF90aW55TnVtLFxuICAgICAgb25TdGFydDogZnVuY3Rpb24gb25TdGFydCgpIHtcbiAgICAgICAgdGwucGF1c2UoKTtcblxuICAgICAgICBpZiAoIWluaXR0ZWQpIHtcbiAgICAgICAgICB2YXIgZHVyYXRpb24gPSB2YXJzLmR1cmF0aW9uIHx8IE1hdGguYWJzKChlbmRUaW1lIC0gKHN0YXJ0QXQgJiYgXCJ0aW1lXCIgaW4gc3RhcnRBdCA/IHN0YXJ0QXQudGltZSA6IHRsLl90aW1lKSkgLyB0bC50aW1lU2NhbGUoKSk7XG4gICAgICAgICAgdHdlZW4uX2R1ciAhPT0gZHVyYXRpb24gJiYgX3NldER1cmF0aW9uKHR3ZWVuLCBkdXJhdGlvbiwgMCwgMSkucmVuZGVyKHR3ZWVuLl90aW1lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBpbml0dGVkID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9vblN0YXJ0ICYmIF9vblN0YXJ0LmFwcGx5KHR3ZWVuLCBvblN0YXJ0UGFyYW1zIHx8IFtdKTsgLy9pbiBjYXNlIHRoZSB1c2VyIGhhZCBhbiBvblN0YXJ0IGluIHRoZSB2YXJzIC0gd2UgZG9uJ3Qgd2FudCB0byBvdmVyd3JpdGUgaXQuXG4gICAgICB9XG4gICAgfSwgdmFycykpO1xuXG4gICAgcmV0dXJuIGltbWVkaWF0ZVJlbmRlciA/IHR3ZWVuLnJlbmRlcigwKSA6IHR3ZWVuO1xuICB9O1xuXG4gIF9wcm90bzIudHdlZW5Gcm9tVG8gPSBmdW5jdGlvbiB0d2VlbkZyb21Ubyhmcm9tUG9zaXRpb24sIHRvUG9zaXRpb24sIHZhcnMpIHtcbiAgICByZXR1cm4gdGhpcy50d2VlblRvKHRvUG9zaXRpb24sIF9zZXREZWZhdWx0cyh7XG4gICAgICBzdGFydEF0OiB7XG4gICAgICAgIHRpbWU6IF9wYXJzZVBvc2l0aW9uKHRoaXMsIGZyb21Qb3NpdGlvbilcbiAgICAgIH1cbiAgICB9LCB2YXJzKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZWNlbnQgPSBmdW5jdGlvbiByZWNlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY2VudDtcbiAgfTtcblxuICBfcHJvdG8yLm5leHRMYWJlbCA9IGZ1bmN0aW9uIG5leHRMYWJlbChhZnRlclRpbWUpIHtcbiAgICBpZiAoYWZ0ZXJUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGFmdGVyVGltZSA9IHRoaXMuX3RpbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRoaXMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIGFmdGVyVGltZSkpO1xuICB9O1xuXG4gIF9wcm90bzIucHJldmlvdXNMYWJlbCA9IGZ1bmN0aW9uIHByZXZpb3VzTGFiZWwoYmVmb3JlVGltZSkge1xuICAgIGlmIChiZWZvcmVUaW1lID09PSB2b2lkIDApIHtcbiAgICAgIGJlZm9yZVRpbWUgPSB0aGlzLl90aW1lO1xuICAgIH1cblxuICAgIHJldHVybiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aGlzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBiZWZvcmVUaW1lKSwgMSk7XG4gIH07XG5cbiAgX3Byb3RvMi5jdXJyZW50TGFiZWwgPSBmdW5jdGlvbiBjdXJyZW50TGFiZWwodmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMuc2Vlayh2YWx1ZSwgdHJ1ZSkgOiB0aGlzLnByZXZpb3VzTGFiZWwodGhpcy5fdGltZSArIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8yLnNoaWZ0Q2hpbGRyZW4gPSBmdW5jdGlvbiBzaGlmdENoaWxkcmVuKGFtb3VudCwgYWRqdXN0TGFiZWxzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgaWYgKGlnbm9yZUJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgaWdub3JlQmVmb3JlVGltZSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIGxhYmVscyA9IHRoaXMubGFiZWxzLFxuICAgICAgICBwO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgY2hpbGQuX3N0YXJ0ICs9IGFtb3VudDtcbiAgICAgICAgY2hpbGQuX2VuZCArPSBhbW91bnQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKGFkanVzdExhYmVscykge1xuICAgICAgZm9yIChwIGluIGxhYmVscykge1xuICAgICAgICBpZiAobGFiZWxzW3BdID49IGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICAgICAgICBsYWJlbHNbcF0gKz0gYW1vdW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3Q7XG4gICAgdGhpcy5fbG9jayA9IDA7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGNoaWxkLmludmFsaWRhdGUoKTtcbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9BbmltYXRpb24ucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8yLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoaW5jbHVkZUxhYmVscykge1xuICAgIGlmIChpbmNsdWRlTGFiZWxzID09PSB2b2lkIDApIHtcbiAgICAgIGluY2x1ZGVMYWJlbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0LFxuICAgICAgICBuZXh0O1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG4gICAgICB0aGlzLnJlbW92ZShjaGlsZCk7XG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgdGhpcy5fZHAgJiYgKHRoaXMuX3RpbWUgPSB0aGlzLl90VGltZSA9IHRoaXMuX3BUaW1lID0gMCk7XG4gICAgaW5jbHVkZUxhYmVscyAmJiAodGhpcy5sYWJlbHMgPSB7fSk7XG4gICAgcmV0dXJuIF91bmNhY2hlKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIudG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICB2YXIgbWF4ID0gMCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIGNoaWxkID0gc2VsZi5fbGFzdCxcbiAgICAgICAgcHJldlN0YXJ0ID0gX2JpZ051bSxcbiAgICAgICAgcHJldixcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIHBhcmVudDtcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc2VsZi50aW1lU2NhbGUoKHNlbGYuX3JlcGVhdCA8IDAgPyBzZWxmLmR1cmF0aW9uKCkgOiBzZWxmLnRvdGFsRHVyYXRpb24oKSkgLyAoc2VsZi5yZXZlcnNlZCgpID8gLXZhbHVlIDogdmFsdWUpKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fZGlydHkpIHtcbiAgICAgIHBhcmVudCA9IHNlbGYucGFyZW50O1xuXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgcHJldiA9IGNoaWxkLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGluIGNhc2UgdGhlIHR3ZWVuIGNoYW5nZXMgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlLi4uXG5cbiAgICAgICAgY2hpbGQuX2RpcnR5ICYmIGNoaWxkLnRvdGFsRHVyYXRpb24oKTsgLy9jb3VsZCBjaGFuZ2UgdGhlIHR3ZWVuLl9zdGFydFRpbWUsIHNvIG1ha2Ugc3VyZSB0aGUgYW5pbWF0aW9uJ3MgY2FjaGUgaXMgY2xlYW4gYmVmb3JlIGFuYWx5emluZyBpdC5cblxuICAgICAgICBzdGFydCA9IGNoaWxkLl9zdGFydDtcblxuICAgICAgICBpZiAoc3RhcnQgPiBwcmV2U3RhcnQgJiYgc2VsZi5fc29ydCAmJiBjaGlsZC5fdHMgJiYgIXNlbGYuX2xvY2spIHtcbiAgICAgICAgICAvL2luIGNhc2Ugb25lIG9mIHRoZSB0d2VlbnMgc2hpZnRlZCBvdXQgb2Ygb3JkZXIsIGl0IG5lZWRzIHRvIGJlIHJlLWluc2VydGVkIGludG8gdGhlIGNvcnJlY3QgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlXG4gICAgICAgICAgc2VsZi5fbG9jayA9IDE7IC8vcHJldmVudCBlbmRsZXNzIHJlY3Vyc2l2ZSBjYWxscyAtIHRoZXJlIGFyZSBtZXRob2RzIHRoYXQgZ2V0IHRyaWdnZXJlZCB0aGF0IGNoZWNrIGR1cmF0aW9uL3RvdGFsRHVyYXRpb24gd2hlbiB3ZSBhZGQoKS5cblxuICAgICAgICAgIF9hZGRUb1RpbWVsaW5lKHNlbGYsIGNoaWxkLCBzdGFydCAtIGNoaWxkLl9kZWxheSwgMSkuX2xvY2sgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZTdGFydCA9IHN0YXJ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0IDwgMCAmJiBjaGlsZC5fdHMpIHtcbiAgICAgICAgICAvL2NoaWxkcmVuIGFyZW4ndCBhbGxvd2VkIHRvIGhhdmUgbmVnYXRpdmUgc3RhcnRUaW1lcyB1bmxlc3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgc28gYWRqdXN0IGhlcmUgaWYgb25lIGlzIGZvdW5kLlxuICAgICAgICAgIG1heCAtPSBzdGFydDtcblxuICAgICAgICAgIGlmICghcGFyZW50ICYmICFzZWxmLl9kcCB8fCBwYXJlbnQgJiYgcGFyZW50LnNtb290aENoaWxkVGltaW5nKSB7XG4gICAgICAgICAgICBzZWxmLl9zdGFydCArPSBzdGFydCAvIHNlbGYuX3RzO1xuICAgICAgICAgICAgc2VsZi5fdGltZSAtPSBzdGFydDtcbiAgICAgICAgICAgIHNlbGYuX3RUaW1lIC09IHN0YXJ0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuc2hpZnRDaGlsZHJlbigtc3RhcnQsIGZhbHNlLCAtMWU5OTkpO1xuICAgICAgICAgIHByZXZTdGFydCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC5fZW5kID4gbWF4ICYmIGNoaWxkLl90cyAmJiAobWF4ID0gY2hpbGQuX2VuZCk7XG4gICAgICAgIGNoaWxkID0gcHJldjtcbiAgICAgIH1cblxuICAgICAgX3NldER1cmF0aW9uKHNlbGYsIHNlbGYgPT09IF9nbG9iYWxUaW1lbGluZSAmJiBzZWxmLl90aW1lID4gbWF4ID8gc2VsZi5fdGltZSA6IG1heCwgMSwgMSk7XG5cbiAgICAgIHNlbGYuX2RpcnR5ID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZi5fdER1cjtcbiAgfTtcblxuICBUaW1lbGluZS51cGRhdGVSb290ID0gZnVuY3Rpb24gdXBkYXRlUm9vdCh0aW1lKSB7XG4gICAgaWYgKF9nbG9iYWxUaW1lbGluZS5fdHMpIHtcbiAgICAgIF9sYXp5U2FmZVJlbmRlcihfZ2xvYmFsVGltZWxpbmUsIF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHRpbWUsIF9nbG9iYWxUaW1lbGluZSkpO1xuXG4gICAgICBfbGFzdFJlbmRlcmVkRnJhbWUgPSBfdGlja2VyLmZyYW1lO1xuICAgIH1cblxuICAgIGlmIChfdGlja2VyLmZyYW1lID49IF9uZXh0R0NGcmFtZSkge1xuICAgICAgX25leHRHQ0ZyYW1lICs9IF9jb25maWcuYXV0b1NsZWVwIHx8IDEyMDtcbiAgICAgIHZhciBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG4gICAgICBpZiAoIWNoaWxkIHx8ICFjaGlsZC5fdHMpIGlmIChfY29uZmlnLmF1dG9TbGVlcCAmJiBfdGlja2VyLl9saXN0ZW5lcnMubGVuZ3RoIDwgMikge1xuICAgICAgICB3aGlsZSAoY2hpbGQgJiYgIWNoaWxkLl90cykge1xuICAgICAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZCB8fCBfdGlja2VyLnNsZWVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBUaW1lbGluZTtcbn0oQW5pbWF0aW9uKTtcblxuX3NldERlZmF1bHRzKFRpbWVsaW5lLnByb3RvdHlwZSwge1xuICBfbG9jazogMCxcbiAgX2hhc1BhdXNlOiAwLFxuICBfZm9yY2luZzogMFxufSk7XG5cbnZhciBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgc2V0dGVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSkge1xuICAvL25vdGU6IHdlIGNhbGwgX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0d2Vlbkluc3RhbmNlLi4uKSB0byBlbnN1cmUgdGhhdCBpdCdzIHNjb3BlZCBwcm9wZXJseS4gV2UgbWF5IGNhbGwgaXQgZnJvbSB3aXRoaW4gYSBwbHVnaW4gdG9vLCB0aHVzIFwidGhpc1wiIHdvdWxkIHJlZmVyIHRvIHRoZSBwbHVnaW4uXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIG51bGwsIHNldHRlciksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBtYXRjaEluZGV4ID0gMCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN0YXJ0TnVtcyxcbiAgICAgIGNvbG9yLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBzdGFydE51bSxcbiAgICAgIGhhc1JhbmRvbSxcbiAgICAgIGE7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy9lbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGhhc1JhbmRvbSA9IH5lbmQuaW5kZXhPZihcInJhbmRvbShcIikpIHtcbiAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICB9XG5cbiAgaWYgKHN0cmluZ0ZpbHRlcikge1xuICAgIGEgPSBbc3RhcnQsIGVuZF07XG4gICAgc3RyaW5nRmlsdGVyKGEsIHRhcmdldCwgcHJvcCk7IC8vcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy5cblxuICAgIHN0YXJ0ID0gYVswXTtcbiAgICBlbmQgPSBhWzFdO1xuICB9XG5cbiAgc3RhcnROdW1zID0gc3RhcnQubWF0Y2goX2NvbXBsZXhTdHJpbmdOdW1FeHApIHx8IFtdO1xuXG4gIHdoaWxlIChyZXN1bHQgPSBfY29tcGxleFN0cmluZ051bUV4cC5leGVjKGVuZCkpIHtcbiAgICBlbmROdW0gPSByZXN1bHRbMF07XG4gICAgY2h1bmsgPSBlbmQuc3Vic3RyaW5nKGluZGV4LCByZXN1bHQuaW5kZXgpO1xuXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICBjb2xvciA9IChjb2xvciArIDEpICUgNTtcbiAgICB9IGVsc2UgaWYgKGNodW5rLnN1YnN0cigtNSkgPT09IFwicmdiYShcIikge1xuICAgICAgY29sb3IgPSAxO1xuICAgIH1cblxuICAgIGlmIChlbmROdW0gIT09IHN0YXJ0TnVtc1ttYXRjaEluZGV4KytdKSB7XG4gICAgICBzdGFydE51bSA9IHBhcnNlRmxvYXQoc3RhcnROdW1zW21hdGNoSW5kZXggLSAxXSkgfHwgMDsgLy90aGVzZSBuZXN0ZWQgUHJvcFR3ZWVucyBhcmUgaGFuZGxlZCBpbiBhIHNwZWNpYWwgd2F5IC0gd2UnbGwgbmV2ZXIgYWN0dWFsbHkgY2FsbCBhIHJlbmRlciBvciBzZXR0ZXIgbWV0aG9kIG9uIHRoZW0uIFdlJ2xsIGp1c3QgbG9vcCB0aHJvdWdoIHRoZW0gaW4gdGhlIHBhcmVudCBjb21wbGV4IHN0cmluZyBQcm9wVHdlZW4ncyByZW5kZXIgbWV0aG9kLlxuXG4gICAgICBwdC5fcHQgPSB7XG4gICAgICAgIF9uZXh0OiBwdC5fcHQsXG4gICAgICAgIHA6IGNodW5rIHx8IG1hdGNoSW5kZXggPT09IDEgPyBjaHVuayA6IFwiLFwiLFxuICAgICAgICAvL25vdGU6IFNWRyBzcGVjIGFsbG93cyBvbWlzc2lvbiBvZiBjb21tYS9zcGFjZSB3aGVuIGEgbmVnYXRpdmUgc2lnbiBpcyB3ZWRnZWQgYmV0d2VlbiB0d28gbnVtYmVycywgbGlrZSAyLjUtNS4zIGluc3RlYWQgb2YgMi41LC01LjMgYnV0IHdoZW4gdHdlZW5pbmcsIHRoZSBuZWdhdGl2ZSB2YWx1ZSBtYXkgc3dpdGNoIHRvIHBvc2l0aXZlLCBzbyB3ZSBpbnNlcnQgdGhlIGNvbW1hIGp1c3QgaW4gY2FzZS5cbiAgICAgICAgczogc3RhcnROdW0sXG4gICAgICAgIGM6IGVuZE51bS5jaGFyQXQoMSkgPT09IFwiPVwiID8gX3BhcnNlUmVsYXRpdmUoc3RhcnROdW0sIGVuZE51bSkgLSBzdGFydE51bSA6IHBhcnNlRmxvYXQoZW5kTnVtKSAtIHN0YXJ0TnVtLFxuICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgPyBNYXRoLnJvdW5kIDogMFxuICAgICAgfTtcbiAgICAgIGluZGV4ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAubGFzdEluZGV4O1xuICAgIH1cbiAgfVxuXG4gIHB0LmMgPSBpbmRleCA8IGVuZC5sZW5ndGggPyBlbmQuc3Vic3RyaW5nKGluZGV4LCBlbmQubGVuZ3RoKSA6IFwiXCI7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBwYXJ0IG9mIHRoZSBzdHJpbmcgKGFmdGVyIHRoZSBsYXN0IG51bWJlcilcblxuICBwdC5mcCA9IGZ1bmNQYXJhbTtcblxuICBpZiAoX3JlbEV4cC50ZXN0KGVuZCkgfHwgaGFzUmFuZG9tKSB7XG4gICAgcHQuZSA9IDA7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cbiAgfVxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgaW5kZXgsIHRhcmdldHMsIG1vZGlmaWVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSwgb3B0aW9uYWwpIHtcbiAgX2lzRnVuY3Rpb24oZW5kKSAmJiAoZW5kID0gZW5kKGluZGV4IHx8IDAsIHRhcmdldCwgdGFyZ2V0cykpO1xuICB2YXIgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BdLFxuICAgICAgcGFyc2VkU3RhcnQgPSBzdGFydCAhPT0gXCJnZXRcIiA/IHN0YXJ0IDogIV9pc0Z1bmN0aW9uKGN1cnJlbnRWYWx1ZSkgPyBjdXJyZW50VmFsdWUgOiBmdW5jUGFyYW0gPyB0YXJnZXRbcHJvcC5pbmRleE9mKFwic2V0XCIpIHx8ICFfaXNGdW5jdGlvbih0YXJnZXRbXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXSkgPyBwcm9wIDogXCJnZXRcIiArIHByb3Auc3Vic3RyKDMpXShmdW5jUGFyYW0pIDogdGFyZ2V0W3Byb3BdKCksXG4gICAgICBzZXR0ZXIgPSAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IF9zZXR0ZXJQbGFpbiA6IGZ1bmNQYXJhbSA/IF9zZXR0ZXJGdW5jV2l0aFBhcmFtIDogX3NldHRlckZ1bmMsXG4gICAgICBwdDtcblxuICBpZiAoX2lzU3RyaW5nKGVuZCkpIHtcbiAgICBpZiAofmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgZW5kID0gX3JlcGxhY2VSYW5kb20oZW5kKTtcbiAgICB9XG5cbiAgICBpZiAoZW5kLmNoYXJBdCgxKSA9PT0gXCI9XCIpIHtcbiAgICAgIHB0ID0gX3BhcnNlUmVsYXRpdmUocGFyc2VkU3RhcnQsIGVuZCkgKyAoZ2V0VW5pdChwYXJzZWRTdGFydCkgfHwgMCk7XG5cbiAgICAgIGlmIChwdCB8fCBwdCA9PT0gMCkge1xuICAgICAgICAvLyB0byBhdm9pZCBpc05hTiwgbGlrZSBpZiBzb21lb25lIHBhc3NlcyBpbiBhIHZhbHVlIGxpa2UgXCIhPSB3aGF0ZXZlclwiXG4gICAgICAgIGVuZCA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghb3B0aW9uYWwgfHwgcGFyc2VkU3RhcnQgIT09IGVuZCB8fCBfZm9yY2VBbGxQcm9wVHdlZW5zKSB7XG4gICAgaWYgKCFpc05hTihwYXJzZWRTdGFydCAqIGVuZCkgJiYgZW5kICE9PSBcIlwiKSB7XG4gICAgICAvLyBmdW4gZmFjdDogYW55IG51bWJlciBtdWx0aXBsaWVkIGJ5IFwiXCIgaXMgZXZhbHVhdGVkIGFzIHRoZSBudW1iZXIgMCFcbiAgICAgIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCArcGFyc2VkU3RhcnQgfHwgMCwgZW5kIC0gKHBhcnNlZFN0YXJ0IHx8IDApLCB0eXBlb2YgY3VycmVudFZhbHVlID09PSBcImJvb2xlYW5cIiA/IF9yZW5kZXJCb29sZWFuIDogX3JlbmRlclBsYWluLCAwLCBzZXR0ZXIpO1xuICAgICAgZnVuY1BhcmFtICYmIChwdC5mcCA9IGZ1bmNQYXJhbSk7XG4gICAgICBtb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdGhpcywgdGFyZ2V0KTtcbiAgICAgIHJldHVybiB0aGlzLl9wdCA9IHB0O1xuICAgIH1cblxuICAgICFjdXJyZW50VmFsdWUgJiYgIShwcm9wIGluIHRhcmdldCkgJiYgX21pc3NpbmdQbHVnaW4ocHJvcCwgZW5kKTtcbiAgICByZXR1cm4gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4uY2FsbCh0aGlzLCB0YXJnZXQsIHByb3AsIHBhcnNlZFN0YXJ0LCBlbmQsIHNldHRlciwgc3RyaW5nRmlsdGVyIHx8IF9jb25maWcuc3RyaW5nRmlsdGVyLCBmdW5jUGFyYW0pO1xuICB9XG59LFxuICAgIC8vY3JlYXRlcyBhIGNvcHkgb2YgdGhlIHZhcnMgb2JqZWN0IGFuZCBwcm9jZXNzZXMgYW55IGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyAocHV0dGluZyB0aGUgcmVzdWx0aW5nIHZhbHVlcyBkaXJlY3RseSBpbnRvIHRoZSBjb3B5KSBhcyB3ZWxsIGFzIHN0cmluZ3Mgd2l0aCBcInJhbmRvbSgpXCIgaW4gdGhlbS4gSXQgZG9lcyBOT1QgcHJvY2VzcyByZWxhdGl2ZSB2YWx1ZXMuXG5fcHJvY2Vzc1ZhcnMgPSBmdW5jdGlvbiBfcHJvY2Vzc1ZhcnModmFycywgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pIHtcbiAgX2lzRnVuY3Rpb24odmFycykgJiYgKHZhcnMgPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpKTtcblxuICBpZiAoIV9pc09iamVjdCh2YXJzKSB8fCB2YXJzLnN0eWxlICYmIHZhcnMubm9kZVR5cGUgfHwgX2lzQXJyYXkodmFycykgfHwgX2lzVHlwZWRBcnJheSh2YXJzKSkge1xuICAgIHJldHVybiBfaXNTdHJpbmcodmFycykgPyBfcGFyc2VGdW5jT3JTdHJpbmcodmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIDogdmFycztcbiAgfVxuXG4gIHZhciBjb3B5ID0ge30sXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiB2YXJzKSB7XG4gICAgY29weVtwXSA9IF9wYXJzZUZ1bmNPclN0cmluZyh2YXJzW3BdLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX2NoZWNrUGx1Z2luID0gZnVuY3Rpb24gX2NoZWNrUGx1Z2luKHByb3BlcnR5LCB2YXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cykge1xuICB2YXIgcGx1Z2luLCBwdCwgcHRMb29rdXAsIGk7XG5cbiAgaWYgKF9wbHVnaW5zW3Byb3BlcnR5XSAmJiAocGx1Z2luID0gbmV3IF9wbHVnaW5zW3Byb3BlcnR5XSgpKS5pbml0KHRhcmdldCwgcGx1Z2luLnJhd1ZhcnMgPyB2YXJzW3Byb3BlcnR5XSA6IF9wcm9jZXNzVmFycyh2YXJzW3Byb3BlcnR5XSwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cywgdHdlZW4pLCB0d2VlbiwgaW5kZXgsIHRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcHJvcGVydHksIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgIGlmICh0d2VlbiAhPT0gX3F1aWNrVHdlZW4pIHtcbiAgICAgIHB0TG9va3VwID0gdHdlZW4uX3B0TG9va3VwW3R3ZWVuLl90YXJnZXRzLmluZGV4T2YodGFyZ2V0KV07IC8vbm90ZTogd2UgY2FuJ3QgdXNlIHR3ZWVuLl9wdExvb2t1cFtpbmRleF0gYmVjYXVzZSBmb3Igc3RhZ2dlcmVkIHR3ZWVucywgdGhlIGluZGV4IGZyb20gdGhlIGZ1bGxUYXJnZXRzIGFycmF5IHdvbid0IG1hdGNoIHdoYXQgaXQgaXMgaW4gZWFjaCBpbmRpdmlkdWFsIHR3ZWVuIHRoYXQgc3Bhd25zIGZyb20gdGhlIHN0YWdnZXIuXG5cbiAgICAgIGkgPSBwbHVnaW4uX3Byb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBwdExvb2t1cFtwbHVnaW4uX3Byb3BzW2ldXSA9IHB0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwbHVnaW47XG59LFxuICAgIF9vdmVyd3JpdGluZ1R3ZWVuLFxuICAgIC8vc3RvcmUgYSByZWZlcmVuY2UgdGVtcG9yYXJpbHkgc28gd2UgY2FuIGF2b2lkIG92ZXJ3cml0aW5nIGl0c2VsZi5cbl9mb3JjZUFsbFByb3BUd2VlbnMsXG4gICAgX2luaXRUd2VlbiA9IGZ1bmN0aW9uIF9pbml0VHdlZW4odHdlZW4sIHRpbWUpIHtcbiAgdmFyIHZhcnMgPSB0d2Vlbi52YXJzLFxuICAgICAgZWFzZSA9IHZhcnMuZWFzZSxcbiAgICAgIHN0YXJ0QXQgPSB2YXJzLnN0YXJ0QXQsXG4gICAgICBpbW1lZGlhdGVSZW5kZXIgPSB2YXJzLmltbWVkaWF0ZVJlbmRlcixcbiAgICAgIGxhenkgPSB2YXJzLmxhenksXG4gICAgICBvblVwZGF0ZSA9IHZhcnMub25VcGRhdGUsXG4gICAgICBvblVwZGF0ZVBhcmFtcyA9IHZhcnMub25VcGRhdGVQYXJhbXMsXG4gICAgICBjYWxsYmFja1Njb3BlID0gdmFycy5jYWxsYmFja1Njb3BlLFxuICAgICAgcnVuQmFja3dhcmRzID0gdmFycy5ydW5CYWNrd2FyZHMsXG4gICAgICB5b3lvRWFzZSA9IHZhcnMueW95b0Vhc2UsXG4gICAgICBrZXlmcmFtZXMgPSB2YXJzLmtleWZyYW1lcyxcbiAgICAgIGF1dG9SZXZlcnQgPSB2YXJzLmF1dG9SZXZlcnQsXG4gICAgICBkdXIgPSB0d2Vlbi5fZHVyLFxuICAgICAgcHJldlN0YXJ0QXQgPSB0d2Vlbi5fc3RhcnRBdCxcbiAgICAgIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHBhcmVudCA9IHR3ZWVuLnBhcmVudCxcbiAgICAgIGZ1bGxUYXJnZXRzID0gcGFyZW50ICYmIHBhcmVudC5kYXRhID09PSBcIm5lc3RlZFwiID8gcGFyZW50LnBhcmVudC5fdGFyZ2V0cyA6IHRhcmdldHMsXG4gICAgICBhdXRvT3ZlcndyaXRlID0gdHdlZW4uX292ZXJ3cml0ZSA9PT0gXCJhdXRvXCIgJiYgIV9zdXBwcmVzc092ZXJ3cml0ZXMsXG4gICAgICB0bCA9IHR3ZWVuLnRpbWVsaW5lLFxuICAgICAgY2xlYW5WYXJzLFxuICAgICAgaSxcbiAgICAgIHAsXG4gICAgICBwdCxcbiAgICAgIHRhcmdldCxcbiAgICAgIGhhc1ByaW9yaXR5LFxuICAgICAgZ3NEYXRhLFxuICAgICAgaGFybmVzcyxcbiAgICAgIHBsdWdpbixcbiAgICAgIHB0TG9va3VwLFxuICAgICAgaW5kZXgsXG4gICAgICBoYXJuZXNzVmFycyxcbiAgICAgIG92ZXJ3cml0dGVuO1xuICB0bCAmJiAoIWtleWZyYW1lcyB8fCAhZWFzZSkgJiYgKGVhc2UgPSBcIm5vbmVcIik7XG4gIHR3ZWVuLl9lYXNlID0gX3BhcnNlRWFzZShlYXNlLCBfZGVmYXVsdHMuZWFzZSk7XG4gIHR3ZWVuLl95RWFzZSA9IHlveW9FYXNlID8gX2ludmVydEVhc2UoX3BhcnNlRWFzZSh5b3lvRWFzZSA9PT0gdHJ1ZSA/IGVhc2UgOiB5b3lvRWFzZSwgX2RlZmF1bHRzLmVhc2UpKSA6IDA7XG5cbiAgaWYgKHlveW9FYXNlICYmIHR3ZWVuLl95b3lvICYmICF0d2Vlbi5fcmVwZWF0KSB7XG4gICAgLy90aGVyZSBtdXN0IGhhdmUgYmVlbiBhIHBhcmVudCB0aW1lbGluZSB3aXRoIHlveW86dHJ1ZSB0aGF0IGlzIGN1cnJlbnRseSBpbiBpdHMgeW95byBwaGFzZSwgc28gZmxpcCB0aGUgZWFzZXMuXG4gICAgeW95b0Vhc2UgPSB0d2Vlbi5feUVhc2U7XG4gICAgdHdlZW4uX3lFYXNlID0gdHdlZW4uX2Vhc2U7XG4gICAgdHdlZW4uX2Vhc2UgPSB5b3lvRWFzZTtcbiAgfVxuXG4gIHR3ZWVuLl9mcm9tID0gIXRsICYmICEhdmFycy5ydW5CYWNrd2FyZHM7IC8vbmVzdGVkIHRpbWVsaW5lcyBzaG91bGQgbmV2ZXIgcnVuIGJhY2t3YXJkcyAtIHRoZSBiYWNrd2FyZHMtbmVzcyBpcyBpbiB0aGUgY2hpbGQgdHdlZW5zLlxuXG4gIGlmICghdGwgfHwga2V5ZnJhbWVzICYmICF2YXJzLnN0YWdnZXIpIHtcbiAgICAvL2lmIHRoZXJlJ3MgYW4gaW50ZXJuYWwgdGltZWxpbmUsIHNraXAgYWxsIHRoZSBwYXJzaW5nIGJlY2F1c2Ugd2UgcGFzc2VkIHRoYXQgdGFzayBkb3duIHRoZSBjaGFpbi5cbiAgICBoYXJuZXNzID0gdGFyZ2V0c1swXSA/IF9nZXRDYWNoZSh0YXJnZXRzWzBdKS5oYXJuZXNzIDogMDtcbiAgICBoYXJuZXNzVmFycyA9IGhhcm5lc3MgJiYgdmFyc1toYXJuZXNzLnByb3BdOyAvL3NvbWVvbmUgbWF5IG5lZWQgdG8gc3BlY2lmeSBDU1Mtc3BlY2lmaWMgdmFsdWVzIEFORCBub24tQ1NTIHZhbHVlcywgbGlrZSBpZiB0aGUgZWxlbWVudCBoYXMgYW4gXCJ4XCIgcHJvcGVydHkgcGx1cyBpdCdzIGEgc3RhbmRhcmQgRE9NIGVsZW1lbnQuIFdlIGFsbG93IHBlb3BsZSB0byBkaXN0aW5ndWlzaCBieSB3cmFwcGluZyBwbHVnaW4tc3BlY2lmaWMgc3R1ZmYgaW4gYSBjc3M6e30gb2JqZWN0IGZvciBleGFtcGxlLlxuXG4gICAgY2xlYW5WYXJzID0gX2NvcHlFeGNsdWRpbmcodmFycywgX3Jlc2VydmVkUHJvcHMpO1xuXG4gICAgaWYgKHByZXZTdGFydEF0KSB7XG4gICAgICBwcmV2U3RhcnRBdC5yZXZlcnQocnVuQmFja3dhcmRzICYmIGR1ciA/IF9yZXZlcnRDb25maWcgOiBfc3RhcnRBdFJldmVydENvbmZpZyk7IC8vIGlmIGl0J3MgYSBcInN0YXJ0QXRcIiAobm90IFwiZnJvbSgpXCIgb3IgcnVuQmFja3dhcmRzOiB0cnVlKSwgd2Ugb25seSBuZWVkIHRvIGRvIGEgc2hhbGxvdyByZXZlcnQgKGtlZXAgdHJhbnNmb3JtcyBjYWNoZWQgaW4gQ1NTUGx1Z2luKVxuICAgICAgLy8gZG9uJ3QganVzdCBfcmVtb3ZlRnJvbVBhcmVudChwcmV2U3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpKSBiZWNhdXNlIHRoYXQnbGwgbGVhdmUgaW5saW5lIHN0eWxlcy4gV2UncmUgY3JlYXRpbmcgYSBuZXcgX3N0YXJ0QXQgZm9yIFwic3RhcnRBdFwiIHR3ZWVucyB0aGF0IHJlLWNhcHR1cmUgdGhpbmdzIHRvIGVuc3VyZSB0aGF0IGlmIHRoZSBwcmUtdHdlZW4gdmFsdWVzIGNoYW5nZWQgc2luY2UgdGhlIHR3ZWVuIHdhcyBjcmVhdGVkLCB0aGV5J3JlIHJlY29yZGVkLlxuXG4gICAgICBwcmV2U3RhcnRBdC5fbGF6eSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0QXQpIHtcbiAgICAgIF9yZW1vdmVGcm9tUGFyZW50KHR3ZWVuLl9zdGFydEF0ID0gVHdlZW4uc2V0KHRhcmdldHMsIF9zZXREZWZhdWx0cyh7XG4gICAgICAgIGRhdGE6IFwiaXNTdGFydFwiLFxuICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiB0cnVlLFxuICAgICAgICBsYXp5OiBfaXNOb3RGYWxzZShsYXp5KSxcbiAgICAgICAgc3RhcnRBdDogbnVsbCxcbiAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgIG9uVXBkYXRlOiBvblVwZGF0ZSxcbiAgICAgICAgb25VcGRhdGVQYXJhbXM6IG9uVXBkYXRlUGFyYW1zLFxuICAgICAgICBjYWxsYmFja1Njb3BlOiBjYWxsYmFja1Njb3BlLFxuICAgICAgICBzdGFnZ2VyOiAwXG4gICAgICB9LCBzdGFydEF0KSkpOyAvL2NvcHkgdGhlIHByb3BlcnRpZXMvdmFsdWVzIGludG8gYSBuZXcgb2JqZWN0IHRvIGF2b2lkIGNvbGxpc2lvbnMsIGxpa2UgdmFyIHRvID0ge3g6MH0sIGZyb20gPSB7eDo1MDB9OyB0aW1lbGluZS5mcm9tVG8oZSwgZnJvbSwgdG8pLmZyb21UbyhlLCB0bywgZnJvbSk7XG5cblxuICAgICAgdGltZSA8IDAgJiYgKF9yZXZlcnRpbmcgfHwgIWltbWVkaWF0ZVJlbmRlciAmJiAhYXV0b1JldmVydCkgJiYgdHdlZW4uX3N0YXJ0QXQucmV2ZXJ0KF9yZXZlcnRDb25maWcpOyAvLyByYXJlIGVkZ2UgY2FzZSwgbGlrZSBpZiBhIHJlbmRlciBpcyBmb3JjZWQgaW4gdGhlIG5lZ2F0aXZlIGRpcmVjdGlvbiBvZiBhIG5vbi1pbml0dGVkIHR3ZWVuLlxuXG4gICAgICBpZiAoaW1tZWRpYXRlUmVuZGVyKSB7XG4gICAgICAgIGlmIChkdXIgJiYgdGltZSA8PSAwKSB7XG4gICAgICAgICAgdGltZSAmJiAodHdlZW4uX3pUaW1lID0gdGltZSk7XG4gICAgICAgICAgcmV0dXJuOyAvL3dlIHNraXAgaW5pdGlhbGl6YXRpb24gaGVyZSBzbyB0aGF0IG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb2NjdXIgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucy4gT3RoZXJ3aXNlLCBpZiB5b3UgY3JlYXRlIHNldmVyYWwgaW1tZWRpYXRlUmVuZGVyOnRydWUgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldC9wcm9wZXJ0aWVzIHRvIGRyb3AgaW50byBhIFRpbWVsaW5lLCB0aGUgbGFzdCBvbmUgY3JlYXRlZCB3b3VsZCBvdmVyd3JpdGUgdGhlIGZpcnN0IG9uZXMgYmVjYXVzZSB0aGV5IGRpZG4ndCBnZXQgcGxhY2VkIGludG8gdGhlIHRpbWVsaW5lIHlldCBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlciBvY2N1cnMgYW5kIGtpY2tzIGluIG92ZXJ3cml0aW5nLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChydW5CYWNrd2FyZHMgJiYgZHVyKSB7XG4gICAgICAvL2Zyb20oKSB0d2VlbnMgbXVzdCBiZSBoYW5kbGVkIHVuaXF1ZWx5OiB0aGVpciBiZWdpbm5pbmcgdmFsdWVzIG11c3QgYmUgcmVuZGVyZWQgYnV0IHdlIGRvbid0IHdhbnQgb3ZlcndyaXRpbmcgdG8gb2NjdXIgeWV0ICh3aGVuIHRpbWUgaXMgc3RpbGwgMCkuIFdhaXQgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucyBiZWZvcmUgZG9pbmcgYWxsIHRoZSByb3V0aW5lcyBsaWtlIG92ZXJ3cml0aW5nLiBBdCB0aGF0IHRpbWUsIHdlIHNob3VsZCByZW5kZXIgYXQgdGhlIEVORCBvZiB0aGUgdHdlZW4gdG8gZW5zdXJlIHRoYXQgdGhpbmdzIGluaXRpYWxpemUgY29ycmVjdGx5IChyZW1lbWJlciwgZnJvbSgpIHR3ZWVucyBnbyBiYWNrd2FyZHMpXG4gICAgICBpZiAoIXByZXZTdGFydEF0KSB7XG4gICAgICAgIHRpbWUgJiYgKGltbWVkaWF0ZVJlbmRlciA9IGZhbHNlKTsgLy9pbiByYXJlIGNhc2VzIChsaWtlIGlmIGEgZnJvbSgpIHR3ZWVuIHJ1bnMgYW5kIHRoZW4gaXMgaW52YWxpZGF0ZSgpLWVkKSwgaW1tZWRpYXRlUmVuZGVyIGNvdWxkIGJlIHRydWUgYnV0IHRoZSBpbml0aWFsIGZvcmNlZC1yZW5kZXIgZ2V0cyBza2lwcGVkLCBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgdGhlIHJlbmRlciBpbiB0aGlzIGNvbnRleHQgd2hlbiB0aGUgX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDBcblxuICAgICAgICBwID0gX3NldERlZmF1bHRzKHtcbiAgICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICAgIGRhdGE6IFwiaXNGcm9tU3RhcnRcIixcbiAgICAgICAgICAvL3dlIHRhZyB0aGUgdHdlZW4gd2l0aCBhcyBcImlzRnJvbVN0YXJ0XCIgc28gdGhhdCBpZiBbaW5zaWRlIGEgcGx1Z2luXSB3ZSBuZWVkIHRvIG9ubHkgZG8gc29tZXRoaW5nIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuLCB3ZSBoYXZlIGEgd2F5IG9mIGlkZW50aWZ5aW5nIHRoaXMgdHdlZW4gYXMgbWVyZWx5IHRoZSBvbmUgdGhhdCdzIHNldHRpbmcgdGhlIGJlZ2lubmluZyB2YWx1ZXMgZm9yIGEgXCJmcm9tKClcIiB0d2Vlbi4gRm9yIGV4YW1wbGUsIGNsZWFyUHJvcHMgaW4gQ1NTUGx1Z2luIHNob3VsZCBvbmx5IGdldCBhcHBsaWVkIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuIGFuZCB3aXRob3V0IHRoaXMgdGFnLCBmcm9tKC4uLntoZWlnaHQ6MTAwLCBjbGVhclByb3BzOlwiaGVpZ2h0XCIsIGRlbGF5OjF9KSB3b3VsZCB3aXBlIHRoZSBoZWlnaHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4gYW5kIGFmdGVyIDEgc2Vjb25kLCBpdCdkIGtpY2sgYmFjayBpbi5cbiAgICAgICAgICBsYXp5OiBpbW1lZGlhdGVSZW5kZXIgJiYgX2lzTm90RmFsc2UobGF6eSksXG4gICAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiBpbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgICAgLy96ZXJvLWR1cmF0aW9uIHR3ZWVucyByZW5kZXIgaW1tZWRpYXRlbHkgYnkgZGVmYXVsdCwgYnV0IGlmIHdlJ3JlIG5vdCBzcGVjaWZpY2FsbHkgaW5zdHJ1Y3RlZCB0byByZW5kZXIgdGhpcyB0d2VlbiBpbW1lZGlhdGVseSwgd2Ugc2hvdWxkIHNraXAgdGhpcyBhbmQgbWVyZWx5IF9pbml0KCkgdG8gcmVjb3JkIHRoZSBzdGFydGluZyB2YWx1ZXMgKHJlbmRlcmluZyB0aGVtIGltbWVkaWF0ZWx5IHdvdWxkIHB1c2ggdGhlbSB0byBjb21wbGV0aW9uIHdoaWNoIGlzIHdhc3RlZnVsIGluIHRoYXQgY2FzZSAtIHdlJ2QgaGF2ZSB0byByZW5kZXIoLTEpIGltbWVkaWF0ZWx5IGFmdGVyKVxuICAgICAgICAgIHN0YWdnZXI6IDAsXG4gICAgICAgICAgcGFyZW50OiBwYXJlbnQgLy9lbnN1cmVzIHRoYXQgbmVzdGVkIHR3ZWVucyB0aGF0IGhhZCBhIHN0YWdnZXIgYXJlIGhhbmRsZWQgcHJvcGVybHksIGxpa2UgZ3NhcC5mcm9tKFwiLmNsYXNzXCIsIHt5OmdzYXAudXRpbHMud3JhcChbLTEwMCwxMDBdKX0pXG5cbiAgICAgICAgfSwgY2xlYW5WYXJzKTtcbiAgICAgICAgaGFybmVzc1ZhcnMgJiYgKHBbaGFybmVzcy5wcm9wXSA9IGhhcm5lc3NWYXJzKTsgLy8gaW4gY2FzZSBzb21lb25lIGRvZXMgc29tZXRoaW5nIGxpa2UgLmZyb20oLi4uLCB7Y3NzOnt9fSlcblxuICAgICAgICBfcmVtb3ZlRnJvbVBhcmVudCh0d2Vlbi5fc3RhcnRBdCA9IFR3ZWVuLnNldCh0YXJnZXRzLCBwKSk7XG5cbiAgICAgICAgdGltZSA8IDAgJiYgKF9yZXZlcnRpbmcgPyB0d2Vlbi5fc3RhcnRBdC5yZXZlcnQoX3JldmVydENvbmZpZykgOiB0d2Vlbi5fc3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpKTtcbiAgICAgICAgdHdlZW4uX3pUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoIWltbWVkaWF0ZVJlbmRlcikge1xuICAgICAgICAgIF9pbml0VHdlZW4odHdlZW4uX3N0YXJ0QXQsIF90aW55TnVtKTsgLy9lbnN1cmVzIHRoYXQgdGhlIGluaXRpYWwgdmFsdWVzIGFyZSByZWNvcmRlZFxuXG4gICAgICAgIH0gZWxzZSBpZiAoIXRpbWUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0d2Vlbi5fcHQgPSB0d2Vlbi5fcHRDYWNoZSA9IDA7XG4gICAgbGF6eSA9IGR1ciAmJiBfaXNOb3RGYWxzZShsYXp5KSB8fCBsYXp5ICYmICFkdXI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgdGFyZ2V0ID0gdGFyZ2V0c1tpXTtcbiAgICAgIGdzRGF0YSA9IHRhcmdldC5fZ3NhcCB8fCBfaGFybmVzcyh0YXJnZXRzKVtpXS5fZ3NhcDtcbiAgICAgIHR3ZWVuLl9wdExvb2t1cFtpXSA9IHB0TG9va3VwID0ge307XG4gICAgICBfbGF6eUxvb2t1cFtnc0RhdGEuaWRdICYmIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2lmIG90aGVyIHR3ZWVucyBvZiB0aGUgc2FtZSB0YXJnZXQgaGF2ZSByZWNlbnRseSBpbml0dGVkIGJ1dCBoYXZlbid0IHJlbmRlcmVkIHlldCwgd2UndmUgZ290IHRvIGZvcmNlIHRoZSByZW5kZXIgc28gdGhhdCB0aGUgc3RhcnRpbmcgdmFsdWVzIGFyZSBjb3JyZWN0IChpbWFnaW5lIHBvcHVsYXRpbmcgYSB0aW1lbGluZSB3aXRoIGEgYnVuY2ggb2Ygc2VxdWVudGlhbCB0d2VlbnMgYW5kIHRoZW4ganVtcGluZyB0byB0aGUgZW5kKVxuXG4gICAgICBpbmRleCA9IGZ1bGxUYXJnZXRzID09PSB0YXJnZXRzID8gaSA6IGZ1bGxUYXJnZXRzLmluZGV4T2YodGFyZ2V0KTtcblxuICAgICAgaWYgKGhhcm5lc3MgJiYgKHBsdWdpbiA9IG5ldyBoYXJuZXNzKCkpLmluaXQodGFyZ2V0LCBoYXJuZXNzVmFycyB8fCBjbGVhblZhcnMsIHR3ZWVuLCBpbmRleCwgZnVsbFRhcmdldHMpICE9PSBmYWxzZSkge1xuICAgICAgICB0d2Vlbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4odHdlZW4uX3B0LCB0YXJnZXQsIHBsdWdpbi5uYW1lLCAwLCAxLCBwbHVnaW4ucmVuZGVyLCBwbHVnaW4sIDAsIHBsdWdpbi5wcmlvcml0eSk7XG5cbiAgICAgICAgcGx1Z2luLl9wcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgcHRMb29rdXBbbmFtZV0gPSBwdDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWhhcm5lc3MgfHwgaGFybmVzc1ZhcnMpIHtcbiAgICAgICAgZm9yIChwIGluIGNsZWFuVmFycykge1xuICAgICAgICAgIGlmIChfcGx1Z2luc1twXSAmJiAocGx1Z2luID0gX2NoZWNrUGx1Z2luKHAsIGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIGZ1bGxUYXJnZXRzKSkpIHtcbiAgICAgICAgICAgIHBsdWdpbi5wcmlvcml0eSAmJiAoaGFzUHJpb3JpdHkgPSAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHRMb29rdXBbcF0gPSBwdCA9IF9hZGRQcm9wVHdlZW4uY2FsbCh0d2VlbiwgdGFyZ2V0LCBwLCBcImdldFwiLCBjbGVhblZhcnNbcF0sIGluZGV4LCBmdWxsVGFyZ2V0cywgMCwgdmFycy5zdHJpbmdGaWx0ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0d2Vlbi5fb3AgJiYgdHdlZW4uX29wW2ldICYmIHR3ZWVuLmtpbGwodGFyZ2V0LCB0d2Vlbi5fb3BbaV0pO1xuXG4gICAgICBpZiAoYXV0b092ZXJ3cml0ZSAmJiB0d2Vlbi5fcHQpIHtcbiAgICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSB0d2VlbjtcblxuICAgICAgICBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldCwgcHRMb29rdXAsIHR3ZWVuLmdsb2JhbFRpbWUodGltZSkpOyAvLyBtYWtlIHN1cmUgdGhlIG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb3ZlcndyaXRlIFRISVMgdHdlZW4hISFcblxuXG4gICAgICAgIG92ZXJ3cml0dGVuID0gIXR3ZWVuLnBhcmVudDtcbiAgICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSAwO1xuICAgICAgfVxuXG4gICAgICB0d2Vlbi5fcHQgJiYgbGF6eSAmJiAoX2xhenlMb29rdXBbZ3NEYXRhLmlkXSA9IDEpO1xuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodHdlZW4pO1xuICAgIHR3ZWVuLl9vbkluaXQgJiYgdHdlZW4uX29uSW5pdCh0d2Vlbik7IC8vcGx1Z2lucyBsaWtlIFJvdW5kUHJvcHMgbXVzdCB3YWl0IHVudGlsIEFMTCBvZiB0aGUgUHJvcFR3ZWVucyBhcmUgaW5zdGFudGlhdGVkLiBJbiB0aGUgcGx1Z2luJ3MgaW5pdCgpIGZ1bmN0aW9uLCBpdCBzZXRzIHRoZSBfb25Jbml0IG9uIHRoZSB0d2VlbiBpbnN0YW5jZS4gTWF5IG5vdCBiZSBwcmV0dHkvaW50dWl0aXZlLCBidXQgaXQncyBmYXN0IGFuZCBrZWVwcyBmaWxlIHNpemUgZG93bi5cbiAgfVxuXG4gIHR3ZWVuLl9vblVwZGF0ZSA9IG9uVXBkYXRlO1xuICB0d2Vlbi5faW5pdHRlZCA9ICghdHdlZW4uX29wIHx8IHR3ZWVuLl9wdCkgJiYgIW92ZXJ3cml0dGVuOyAvLyBpZiBvdmVyd3JpdHRlblByb3BzIHJlc3VsdGVkIGluIHRoZSBlbnRpcmUgdHdlZW4gYmVpbmcga2lsbGVkLCBkbyBOT1QgZmxhZyBpdCBhcyBpbml0dGVkIG9yIGVsc2UgaXQgbWF5IHJlbmRlciBmb3Igb25lIHRpY2suXG5cbiAga2V5ZnJhbWVzICYmIHRpbWUgPD0gMCAmJiB0bC5yZW5kZXIoX2JpZ051bSwgdHJ1ZSwgdHJ1ZSk7IC8vIGlmIHRoZXJlJ3MgYSAwJSBrZXlmcmFtZSwgaXQnbGwgcmVuZGVyIGluIHRoZSBcImJlZm9yZVwiIHN0YXRlIGZvciBhbnkgc3RhZ2dlcmVkL2RlbGF5ZWQgYW5pbWF0aW9ucyB0aHVzIHdoZW4gdGhlIGZvbGxvd2luZyB0d2VlbiBpbml0aWFsaXplcywgaXQnbGwgdXNlIHRoZSBcImJlZm9yZVwiIHN0YXRlIGluc3RlYWQgb2YgdGhlIFwiYWZ0ZXJcIiBzdGF0ZSBhcyB0aGUgaW5pdGlhbCB2YWx1ZXMuXG59LFxuICAgIF91cGRhdGVQcm9wVHdlZW5zID0gZnVuY3Rpb24gX3VwZGF0ZVByb3BUd2VlbnModHdlZW4sIHByb3BlcnR5LCB2YWx1ZSwgc3RhcnQsIHN0YXJ0SXNSZWxhdGl2ZSwgcmF0aW8sIHRpbWUpIHtcbiAgdmFyIHB0Q2FjaGUgPSAodHdlZW4uX3B0ICYmIHR3ZWVuLl9wdENhY2hlIHx8ICh0d2Vlbi5fcHRDYWNoZSA9IHt9KSlbcHJvcGVydHldLFxuICAgICAgcHQsXG4gICAgICByb290UFQsXG4gICAgICBsb29rdXAsXG4gICAgICBpO1xuXG4gIGlmICghcHRDYWNoZSkge1xuICAgIHB0Q2FjaGUgPSB0d2Vlbi5fcHRDYWNoZVtwcm9wZXJ0eV0gPSBbXTtcbiAgICBsb29rdXAgPSB0d2Vlbi5fcHRMb29rdXA7XG4gICAgaSA9IHR3ZWVuLl90YXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHB0ID0gbG9va3VwW2ldW3Byb3BlcnR5XTtcblxuICAgICAgaWYgKHB0ICYmIHB0LmQgJiYgcHQuZC5fcHQpIHtcbiAgICAgICAgLy8gaXQncyBhIHBsdWdpbiwgc28gZmluZCB0aGUgbmVzdGVkIFByb3BUd2VlblxuICAgICAgICBwdCA9IHB0LmQuX3B0O1xuXG4gICAgICAgIHdoaWxlIChwdCAmJiBwdC5wICE9PSBwcm9wZXJ0eSAmJiBwdC5mcCAhPT0gcHJvcGVydHkpIHtcbiAgICAgICAgICAvLyBcImZwXCIgaXMgZnVuY3Rpb25QYXJhbSBmb3IgdGhpbmdzIGxpa2Ugc2V0dGluZyBDU1MgdmFyaWFibGVzIHdoaWNoIHJlcXVpcmUgLnNldFByb3BlcnR5KFwiLS12YXItbmFtZVwiLCB2YWx1ZSlcbiAgICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghcHQpIHtcbiAgICAgICAgLy8gdGhlcmUgaXMgbm8gUHJvcFR3ZWVuIGFzc29jaWF0ZWQgd2l0aCB0aGF0IHByb3BlcnR5LCBzbyB3ZSBtdXN0IEZPUkNFIG9uZSB0byBiZSBjcmVhdGVkIGFuZCBkaXRjaCBvdXQgb2YgdGhpc1xuICAgICAgICAvLyBpZiB0aGUgdHdlZW4gaGFzIG90aGVyIHByb3BlcnRpZXMgdGhhdCBhbHJlYWR5IHJlbmRlcmVkIGF0IG5ldyBwb3NpdGlvbnMsIHdlJ2Qgbm9ybWFsbHkgaGF2ZSB0byByZXdpbmQgdG8gcHV0IHRoZW0gYmFjayBsaWtlIHR3ZWVuLnJlbmRlcigwLCB0cnVlKSBiZWZvcmUgZm9yY2luZyBhbiBfaW5pdFR3ZWVuKCksIGJ1dCB0aGF0IGNhbiBjcmVhdGUgYW5vdGhlciBlZGdlIGNhc2UgbGlrZSB0d2VlbmluZyBhIHRpbWVsaW5lJ3MgcHJvZ3Jlc3Mgd291bGQgdHJpZ2dlciBvblVwZGF0ZXMgdG8gZmlyZSB3aGljaCBjb3VsZCBtb3ZlIG90aGVyIHRoaW5ncyBhcm91bmQuIEl0J3MgYmV0dGVyIHRvIGp1c3QgaW5mb3JtIHVzZXJzIHRoYXQgLnJlc2V0VG8oKSBzaG91bGQgT05MWSBiZSB1c2VkIGZvciB0d2VlbnMgdGhhdCBhbHJlYWR5IGhhdmUgdGhhdCBwcm9wZXJ0eS4gRm9yIGV4YW1wbGUsIHlvdSBjYW4ndCBnc2FwLnRvKC4uLnsgeTogMCB9KSBhbmQgdGhlbiB0d2Vlbi5yZXN0VG8oXCJ4XCIsIDIwMCkgZm9yIGV4YW1wbGUuXG4gICAgICAgIF9mb3JjZUFsbFByb3BUd2VlbnMgPSAxOyAvLyBvdGhlcndpc2UsIHdoZW4gd2UgX2FkZFByb3BUd2VlbigpIGFuZCBpdCBmaW5kcyBubyBjaGFuZ2UgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCB2YWx1ZXMsIGl0IHNraXBzIGNyZWF0aW5nIGEgUHJvcFR3ZWVuIChmb3IgZWZmaWNpZW5jeS4uLndoeSB0d2VlbiB3aGVuIHRoZXJlJ3Mgbm8gZGlmZmVyZW5jZT8pIGJ1dCBpbiB0aGlzIGNhc2Ugd2UgTkVFRCB0aGF0IFByb3BUd2VlbiBjcmVhdGVkIHNvIHdlIGNhbiBlZGl0IGl0LlxuXG4gICAgICAgIHR3ZWVuLnZhcnNbcHJvcGVydHldID0gXCIrPTBcIjtcblxuICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLCB0aW1lKTtcblxuICAgICAgICBfZm9yY2VBbGxQcm9wVHdlZW5zID0gMDtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgIHB0Q2FjaGUucHVzaChwdCk7XG4gICAgfVxuICB9XG5cbiAgaSA9IHB0Q2FjaGUubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICByb290UFQgPSBwdENhY2hlW2ldO1xuICAgIHB0ID0gcm9vdFBULl9wdCB8fCByb290UFQ7IC8vIGNvbXBsZXggdmFsdWVzIG1heSBoYXZlIG5lc3RlZCBQcm9wVHdlZW5zLiBXZSBvbmx5IGFjY29tbW9kYXRlIHRoZSBGSVJTVCB2YWx1ZS5cblxuICAgIHB0LnMgPSAoc3RhcnQgfHwgc3RhcnQgPT09IDApICYmICFzdGFydElzUmVsYXRpdmUgPyBzdGFydCA6IHB0LnMgKyAoc3RhcnQgfHwgMCkgKyByYXRpbyAqIHB0LmM7XG4gICAgcHQuYyA9IHZhbHVlIC0gcHQucztcbiAgICByb290UFQuZSAmJiAocm9vdFBULmUgPSBfcm91bmQodmFsdWUpICsgZ2V0VW5pdChyb290UFQuZSkpOyAvLyBtYWlubHkgZm9yIENTU1BsdWdpbiAoZW5kIHZhbHVlKVxuXG4gICAgcm9vdFBULmIgJiYgKHJvb3RQVC5iID0gcHQucyArIGdldFVuaXQocm9vdFBULmIpKTsgLy8gKGJlZ2lubmluZyB2YWx1ZSlcbiAgfVxufSxcbiAgICBfYWRkQWxpYXNlc1RvVmFycyA9IGZ1bmN0aW9uIF9hZGRBbGlhc2VzVG9WYXJzKHRhcmdldHMsIHZhcnMpIHtcbiAgdmFyIGhhcm5lc3MgPSB0YXJnZXRzWzBdID8gX2dldENhY2hlKHRhcmdldHNbMF0pLmhhcm5lc3MgOiAwLFxuICAgICAgcHJvcGVydHlBbGlhc2VzID0gaGFybmVzcyAmJiBoYXJuZXNzLmFsaWFzZXMsXG4gICAgICBjb3B5LFxuICAgICAgcCxcbiAgICAgIGksXG4gICAgICBhbGlhc2VzO1xuXG4gIGlmICghcHJvcGVydHlBbGlhc2VzKSB7XG4gICAgcmV0dXJuIHZhcnM7XG4gIH1cblxuICBjb3B5ID0gX21lcmdlKHt9LCB2YXJzKTtcblxuICBmb3IgKHAgaW4gcHJvcGVydHlBbGlhc2VzKSB7XG4gICAgaWYgKHAgaW4gY29weSkge1xuICAgICAgYWxpYXNlcyA9IHByb3BlcnR5QWxpYXNlc1twXS5zcGxpdChcIixcIik7XG4gICAgICBpID0gYWxpYXNlcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29weVthbGlhc2VzW2ldXSA9IGNvcHlbcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIC8vIHBhcnNlcyBtdWx0aXBsZSBmb3JtYXRzLCBsaWtlIHtcIjAlXCI6IHt4OiAxMDB9LCB7XCI1MCVcIjoge3g6IC0yMH19IGFuZCB7IHg6IHtcIjAlXCI6IDEwMCwgXCI1MCVcIjogLTIwfSB9LCBhbmQgYW4gXCJlYXNlXCIgY2FuIGJlIHNldCBvbiBhbnkgb2JqZWN0LiBXZSBwb3B1bGF0ZSBhbiBcImFsbFByb3BzXCIgb2JqZWN0IHdpdGggYW4gQXJyYXkgZm9yIGVhY2ggcHJvcGVydHksIGxpa2Uge3g6IFt7fSwge31dLCB5Olt7fSwge31dfSB3aXRoIGRhdGEgZm9yIGVhY2ggcHJvcGVydHkgdHdlZW4uIFRoZSBvYmplY3RzIGhhdmUgYSBcInRcIiAodGltZSksIFwidlwiLCAodmFsdWUpLCBhbmQgXCJlXCIgKGVhc2UpIHByb3BlcnR5LiBUaGlzIGFsbG93cyB1cyB0byBwaWVjZSB0b2dldGhlciBhIHRpbWVsaW5lIGxhdGVyLlxuX3BhcnNlS2V5ZnJhbWUgPSBmdW5jdGlvbiBfcGFyc2VLZXlmcmFtZShwcm9wLCBvYmosIGFsbFByb3BzLCBlYXNlRWFjaCkge1xuICB2YXIgZWFzZSA9IG9iai5lYXNlIHx8IGVhc2VFYWNoIHx8IFwicG93ZXIxLmluT3V0XCIsXG4gICAgICBwLFxuICAgICAgYTtcblxuICBpZiAoX2lzQXJyYXkob2JqKSkge1xuICAgIGEgPSBhbGxQcm9wc1twcm9wXSB8fCAoYWxsUHJvcHNbcHJvcF0gPSBbXSk7IC8vIHQgPSB0aW1lIChvdXQgb2YgMTAwKSwgdiA9IHZhbHVlLCBlID0gZWFzZVxuXG4gICAgb2JqLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpKSB7XG4gICAgICByZXR1cm4gYS5wdXNoKHtcbiAgICAgICAgdDogaSAvIChvYmoubGVuZ3RoIC0gMSkgKiAxMDAsXG4gICAgICAgIHY6IHZhbHVlLFxuICAgICAgICBlOiBlYXNlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKHAgaW4gb2JqKSB7XG4gICAgICBhID0gYWxsUHJvcHNbcF0gfHwgKGFsbFByb3BzW3BdID0gW10pO1xuICAgICAgcCA9PT0gXCJlYXNlXCIgfHwgYS5wdXNoKHtcbiAgICAgICAgdDogcGFyc2VGbG9hdChwcm9wKSxcbiAgICAgICAgdjogb2JqW3BdLFxuICAgICAgICBlOiBlYXNlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0sXG4gICAgX3BhcnNlRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX3BhcnNlRnVuY09yU3RyaW5nKHZhbHVlLCB0d2VlbiwgaSwgdGFyZ2V0LCB0YXJnZXRzKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIDogX2lzU3RyaW5nKHZhbHVlKSAmJiB+dmFsdWUuaW5kZXhPZihcInJhbmRvbShcIikgPyBfcmVwbGFjZVJhbmRvbSh2YWx1ZSkgOiB2YWx1ZTtcbn0sXG4gICAgX3N0YWdnZXJUd2VlblByb3BzID0gX2NhbGxiYWNrTmFtZXMgKyBcInJlcGVhdCxyZXBlYXREZWxheSx5b3lvLHJlcGVhdFJlZnJlc2gseW95b0Vhc2UsYXV0b1JldmVydFwiLFxuICAgIF9zdGFnZ2VyUHJvcHNUb1NraXAgPSB7fTtcblxuX2ZvckVhY2hOYW1lKF9zdGFnZ2VyVHdlZW5Qcm9wcyArIFwiLGlkLHN0YWdnZXIsZGVsYXksZHVyYXRpb24scGF1c2VkLHNjcm9sbFRyaWdnZXJcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIF9zdGFnZ2VyUHJvcHNUb1NraXBbbmFtZV0gPSAxO1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRXRUVOXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBUd2VlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FuaW1hdGlvbjIpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHdlZW4sIF9BbmltYXRpb24yKTtcblxuICBmdW5jdGlvbiBUd2Vlbih0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbiwgc2tpcEluaGVyaXQpIHtcbiAgICB2YXIgX3RoaXMzO1xuXG4gICAgaWYgKHR5cGVvZiB2YXJzID09PSBcIm51bWJlclwiKSB7XG4gICAgICBwb3NpdGlvbi5kdXJhdGlvbiA9IHZhcnM7XG4gICAgICB2YXJzID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgX3RoaXMzID0gX0FuaW1hdGlvbjIuY2FsbCh0aGlzLCBza2lwSW5oZXJpdCA/IHZhcnMgOiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpKSB8fCB0aGlzO1xuICAgIHZhciBfdGhpczMkdmFycyA9IF90aGlzMy52YXJzLFxuICAgICAgICBkdXJhdGlvbiA9IF90aGlzMyR2YXJzLmR1cmF0aW9uLFxuICAgICAgICBkZWxheSA9IF90aGlzMyR2YXJzLmRlbGF5LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXIgPSBfdGhpczMkdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgIHN0YWdnZXIgPSBfdGhpczMkdmFycy5zdGFnZ2VyLFxuICAgICAgICBvdmVyd3JpdGUgPSBfdGhpczMkdmFycy5vdmVyd3JpdGUsXG4gICAgICAgIGtleWZyYW1lcyA9IF90aGlzMyR2YXJzLmtleWZyYW1lcyxcbiAgICAgICAgZGVmYXVsdHMgPSBfdGhpczMkdmFycy5kZWZhdWx0cyxcbiAgICAgICAgc2Nyb2xsVHJpZ2dlciA9IF90aGlzMyR2YXJzLnNjcm9sbFRyaWdnZXIsXG4gICAgICAgIHlveW9FYXNlID0gX3RoaXMzJHZhcnMueW95b0Vhc2UsXG4gICAgICAgIHBhcmVudCA9IHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSxcbiAgICAgICAgcGFyc2VkVGFyZ2V0cyA9IChfaXNBcnJheSh0YXJnZXRzKSB8fCBfaXNUeXBlZEFycmF5KHRhcmdldHMpID8gX2lzTnVtYmVyKHRhcmdldHNbMF0pIDogXCJsZW5ndGhcIiBpbiB2YXJzKSA/IFt0YXJnZXRzXSA6IHRvQXJyYXkodGFyZ2V0cyksXG4gICAgICAgIHRsLFxuICAgICAgICBpLFxuICAgICAgICBjb3B5LFxuICAgICAgICBsLFxuICAgICAgICBwLFxuICAgICAgICBjdXJUYXJnZXQsXG4gICAgICAgIHN0YWdnZXJGdW5jLFxuICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2U7XG4gICAgX3RoaXMzLl90YXJnZXRzID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGggPyBfaGFybmVzcyhwYXJzZWRUYXJnZXRzKSA6IF93YXJuKFwiR1NBUCB0YXJnZXQgXCIgKyB0YXJnZXRzICsgXCIgbm90IGZvdW5kLiBodHRwczovL2dyZWVuc29jay5jb21cIiwgIV9jb25maWcubnVsbFRhcmdldFdhcm4pIHx8IFtdO1xuICAgIF90aGlzMy5fcHRMb29rdXAgPSBbXTsgLy9Qcm9wVHdlZW4gbG9va3VwLiBBbiBhcnJheSBjb250YWluaW5nIGFuIG9iamVjdCBmb3IgZWFjaCB0YXJnZXQsIGhhdmluZyBrZXlzIGZvciBlYWNoIHR3ZWVuaW5nIHByb3BlcnR5XG5cbiAgICBfdGhpczMuX292ZXJ3cml0ZSA9IG92ZXJ3cml0ZTtcblxuICAgIGlmIChrZXlmcmFtZXMgfHwgc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgIHZhcnMgPSBfdGhpczMudmFycztcbiAgICAgIHRsID0gX3RoaXMzLnRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgICAgICAgZGF0YTogXCJuZXN0ZWRcIixcbiAgICAgICAgZGVmYXVsdHM6IGRlZmF1bHRzIHx8IHt9XG4gICAgICB9KTtcbiAgICAgIHRsLmtpbGwoKTtcbiAgICAgIHRsLnBhcmVudCA9IHRsLl9kcCA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKTtcbiAgICAgIHRsLl9zdGFydCA9IDA7XG5cbiAgICAgIGlmIChzdGFnZ2VyIHx8IF9pc0Z1bmNPclN0cmluZyhkdXJhdGlvbikgfHwgX2lzRnVuY09yU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBsID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGg7XG4gICAgICAgIHN0YWdnZXJGdW5jID0gc3RhZ2dlciAmJiBkaXN0cmlidXRlKHN0YWdnZXIpO1xuXG4gICAgICAgIGlmIChfaXNPYmplY3Qoc3RhZ2dlcikpIHtcbiAgICAgICAgICAvL3VzZXJzIGNhbiBwYXNzIGluIGNhbGxiYWNrcyBsaWtlIG9uU3RhcnQvb25Db21wbGV0ZSBpbiB0aGUgc3RhZ2dlciBvYmplY3QuIFRoZXNlIHNob3VsZCBmaXJlIHdpdGggZWFjaCBpbmRpdmlkdWFsIHR3ZWVuLlxuICAgICAgICAgIGZvciAocCBpbiBzdGFnZ2VyKSB7XG4gICAgICAgICAgICBpZiAofl9zdGFnZ2VyVHdlZW5Qcm9wcy5pbmRleE9mKHApKSB7XG4gICAgICAgICAgICAgIHN0YWdnZXJWYXJzVG9NZXJnZSB8fCAoc3RhZ2dlclZhcnNUb01lcmdlID0ge30pO1xuICAgICAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2VbcF0gPSBzdGFnZ2VyW3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBjb3B5ID0gX2NvcHlFeGNsdWRpbmcodmFycywgX3N0YWdnZXJQcm9wc1RvU2tpcCk7XG4gICAgICAgICAgY29weS5zdGFnZ2VyID0gMDtcbiAgICAgICAgICB5b3lvRWFzZSAmJiAoY29weS55b3lvRWFzZSA9IHlveW9FYXNlKTtcbiAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2UgJiYgX21lcmdlKGNvcHksIHN0YWdnZXJWYXJzVG9NZXJnZSk7XG4gICAgICAgICAgY3VyVGFyZ2V0ID0gcGFyc2VkVGFyZ2V0c1tpXTsgLy9kb24ndCBqdXN0IGNvcHkgZHVyYXRpb24gb3IgZGVsYXkgYmVjYXVzZSBpZiB0aGV5J3JlIGEgc3RyaW5nIG9yIGZ1bmN0aW9uLCB3ZSdkIGVuZCB1cCBpbiBhbiBpbmZpbml0ZSBsb29wIGJlY2F1c2UgX2lzRnVuY09yU3RyaW5nKCkgd291bGQgZXZhbHVhdGUgYXMgdHJ1ZSBpbiB0aGUgY2hpbGQgdHdlZW5zLCBlbnRlcmluZyB0aGlzIGxvb3AsIGV0Yy4gU28gd2UgcGFyc2UgdGhlIHZhbHVlIHN0cmFpZ2h0IGZyb20gdmFycyBhbmQgZGVmYXVsdCB0byAwLlxuXG4gICAgICAgICAgY29weS5kdXJhdGlvbiA9ICtfcGFyc2VGdW5jT3JTdHJpbmcoZHVyYXRpb24sIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKTtcbiAgICAgICAgICBjb3B5LmRlbGF5ID0gKCtfcGFyc2VGdW5jT3JTdHJpbmcoZGVsYXksIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKSB8fCAwKSAtIF90aGlzMy5fZGVsYXk7XG5cbiAgICAgICAgICBpZiAoIXN0YWdnZXIgJiYgbCA9PT0gMSAmJiBjb3B5LmRlbGF5KSB7XG4gICAgICAgICAgICAvLyBpZiBzb21lb25lIGRvZXMgZGVsYXk6XCJyYW5kb20oMSwgNSlcIiwgcmVwZWF0Oi0xLCBmb3IgZXhhbXBsZSwgdGhlIGRlbGF5IHNob3VsZG4ndCBiZSBpbnNpZGUgdGhlIHJlcGVhdC5cbiAgICAgICAgICAgIF90aGlzMy5fZGVsYXkgPSBkZWxheSA9IGNvcHkuZGVsYXk7XG4gICAgICAgICAgICBfdGhpczMuX3N0YXJ0ICs9IGRlbGF5O1xuICAgICAgICAgICAgY29weS5kZWxheSA9IDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGwudG8oY3VyVGFyZ2V0LCBjb3B5LCBzdGFnZ2VyRnVuYyA/IHN0YWdnZXJGdW5jKGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cykgOiAwKTtcbiAgICAgICAgICB0bC5fZWFzZSA9IF9lYXNlTWFwLm5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICB0bC5kdXJhdGlvbigpID8gZHVyYXRpb24gPSBkZWxheSA9IDAgOiBfdGhpczMudGltZWxpbmUgPSAwOyAvLyBpZiB0aGUgdGltZWxpbmUncyBkdXJhdGlvbiBpcyAwLCB3ZSBkb24ndCBuZWVkIGEgdGltZWxpbmUgaW50ZXJuYWxseSFcbiAgICAgIH0gZWxzZSBpZiAoa2V5ZnJhbWVzKSB7XG4gICAgICAgIF9pbmhlcml0RGVmYXVsdHMoX3NldERlZmF1bHRzKHRsLnZhcnMuZGVmYXVsdHMsIHtcbiAgICAgICAgICBlYXNlOiBcIm5vbmVcIlxuICAgICAgICB9KSk7XG5cbiAgICAgICAgdGwuX2Vhc2UgPSBfcGFyc2VFYXNlKGtleWZyYW1lcy5lYXNlIHx8IHZhcnMuZWFzZSB8fCBcIm5vbmVcIik7XG4gICAgICAgIHZhciB0aW1lID0gMCxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBrZixcbiAgICAgICAgICAgIHY7XG5cbiAgICAgICAgaWYgKF9pc0FycmF5KGtleWZyYW1lcykpIHtcbiAgICAgICAgICBrZXlmcmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoZnJhbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0bC50byhwYXJzZWRUYXJnZXRzLCBmcmFtZSwgXCI+XCIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRsLmR1cmF0aW9uKCk7IC8vIHRvIGVuc3VyZSB0bC5fZHVyIGlzIGNhY2hlZCBiZWNhdXNlIHdlIHRhcCBpbnRvIGl0IGZvciBwZXJmb3JtYW5jZSBwdXJwb3NlcyBpbiB0aGUgcmVuZGVyKCkgbWV0aG9kLlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvcHkgPSB7fTtcblxuICAgICAgICAgIGZvciAocCBpbiBrZXlmcmFtZXMpIHtcbiAgICAgICAgICAgIHAgPT09IFwiZWFzZVwiIHx8IHAgPT09IFwiZWFzZUVhY2hcIiB8fCBfcGFyc2VLZXlmcmFtZShwLCBrZXlmcmFtZXNbcF0sIGNvcHksIGtleWZyYW1lcy5lYXNlRWFjaCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChwIGluIGNvcHkpIHtcbiAgICAgICAgICAgIGEgPSBjb3B5W3BdLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGEudCAtIGIudDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGltZSA9IDA7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGtmID0gYVtpXTtcbiAgICAgICAgICAgICAgdiA9IHtcbiAgICAgICAgICAgICAgICBlYXNlOiBrZi5lLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAoa2YudCAtIChpID8gYVtpIC0gMV0udCA6IDApKSAvIDEwMCAqIGR1cmF0aW9uXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHZbcF0gPSBrZi52O1xuICAgICAgICAgICAgICB0bC50byhwYXJzZWRUYXJnZXRzLCB2LCB0aW1lKTtcbiAgICAgICAgICAgICAgdGltZSArPSB2LmR1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRsLmR1cmF0aW9uKCkgPCBkdXJhdGlvbiAmJiB0bC50byh7fSwge1xuICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uIC0gdGwuZHVyYXRpb24oKVxuICAgICAgICAgIH0pOyAvLyBpbiBjYXNlIGtleWZyYW1lcyBkaWRuJ3QgZ28gdG8gMTAwJVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGR1cmF0aW9uIHx8IF90aGlzMy5kdXJhdGlvbihkdXJhdGlvbiA9IHRsLmR1cmF0aW9uKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpczMudGltZWxpbmUgPSAwOyAvL3NwZWVkIG9wdGltaXphdGlvbiwgZmFzdGVyIGxvb2t1cHMgKG5vIGdvaW5nIHVwIHRoZSBwcm90b3R5cGUgY2hhaW4pXG4gICAgfVxuXG4gICAgaWYgKG92ZXJ3cml0ZSA9PT0gdHJ1ZSAmJiAhX3N1cHByZXNzT3ZlcndyaXRlcykge1xuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyk7XG5cbiAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YocGFyc2VkVGFyZ2V0cyk7XG5cbiAgICAgIF9vdmVyd3JpdGluZ1R3ZWVuID0gMDtcbiAgICB9XG5cbiAgICBfYWRkVG9UaW1lbGluZShwYXJlbnQsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgcG9zaXRpb24pO1xuXG4gICAgdmFycy5yZXZlcnNlZCAmJiBfdGhpczMucmV2ZXJzZSgpO1xuICAgIHZhcnMucGF1c2VkICYmIF90aGlzMy5wYXVzZWQodHJ1ZSk7XG5cbiAgICBpZiAoaW1tZWRpYXRlUmVuZGVyIHx8ICFkdXJhdGlvbiAmJiAha2V5ZnJhbWVzICYmIF90aGlzMy5fc3RhcnQgPT09IF9yb3VuZFByZWNpc2UocGFyZW50Ll90aW1lKSAmJiBfaXNOb3RGYWxzZShpbW1lZGlhdGVSZW5kZXIpICYmIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMykpICYmIHBhcmVudC5kYXRhICE9PSBcIm5lc3RlZFwiKSB7XG4gICAgICBfdGhpczMuX3RUaW1lID0gLV90aW55TnVtOyAvL2ZvcmNlcyBhIHJlbmRlciB3aXRob3V0IGhhdmluZyB0byBzZXQgdGhlIHJlbmRlcigpIFwiZm9yY2VcIiBwYXJhbWV0ZXIgdG8gdHJ1ZSBiZWNhdXNlIHdlIHdhbnQgdG8gYWxsb3cgbGF6eWluZyBieSBkZWZhdWx0ICh1c2luZyB0aGUgXCJmb3JjZVwiIHBhcmFtZXRlciBhbHdheXMgZm9yY2VzIGFuIGltbWVkaWF0ZSBmdWxsIHJlbmRlcilcblxuICAgICAgX3RoaXMzLnJlbmRlcihNYXRoLm1heCgwLCAtZGVsYXkpKTsgLy9pbiBjYXNlIGRlbGF5IGlzIG5lZ2F0aXZlXG5cbiAgICB9XG5cbiAgICBzY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSwgc2Nyb2xsVHJpZ2dlcik7XG4gICAgcmV0dXJuIF90aGlzMztcbiAgfVxuXG4gIHZhciBfcHJvdG8zID0gVHdlZW4ucHJvdG90eXBlO1xuXG4gIF9wcm90bzMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX3REdXIsXG4gICAgICAgIGR1ciA9IHRoaXMuX2R1cixcbiAgICAgICAgaXNOZWdhdGl2ZSA9IHRvdGFsVGltZSA8IDAsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lID4gdER1ciAtIF90aW55TnVtICYmICFpc05lZ2F0aXZlID8gdER1ciA6IHRvdGFsVGltZSA8IF90aW55TnVtID8gMCA6IHRvdGFsVGltZSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgcHQsXG4gICAgICAgIGl0ZXJhdGlvbixcbiAgICAgICAgY3ljbGVEdXJhdGlvbixcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgaXNZb3lvLFxuICAgICAgICByYXRpbyxcbiAgICAgICAgdGltZWxpbmUsXG4gICAgICAgIHlveW9FYXNlO1xuXG4gICAgaWYgKCFkdXIpIHtcbiAgICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0aGlzLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgfSBlbHNlIGlmICh0VGltZSAhPT0gdGhpcy5fdFRpbWUgfHwgIXRvdGFsVGltZSB8fCBmb3JjZSB8fCAhdGhpcy5faW5pdHRlZCAmJiB0aGlzLl90VGltZSB8fCB0aGlzLl9zdGFydEF0ICYmIHRoaXMuX3pUaW1lIDwgMCAhPT0gaXNOZWdhdGl2ZSkge1xuICAgICAgLy90aGlzIHNlbnNlcyBpZiB3ZSdyZSBjcm9zc2luZyBvdmVyIHRoZSBzdGFydCB0aW1lLCBpbiB3aGljaCBjYXNlIHdlIG11c3QgcmVjb3JkIF96VGltZSBhbmQgZm9yY2UgdGhlIHJlbmRlciwgYnV0IHdlIGRvIGl0IGluIHRoaXMgbGVuZ3RoeSBjb25kaXRpb25hbCB3YXkgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgKHVzdWFsbHkgd2UgY2FuIHNraXAgdGhlIGNhbGN1bGF0aW9ucyk6IHRoaXMuX2luaXR0ZWQgJiYgKHRoaXMuX3pUaW1lIDwgMCkgIT09ICh0b3RhbFRpbWUgPCAwKVxuICAgICAgdGltZSA9IHRUaW1lO1xuICAgICAgdGltZWxpbmUgPSB0aGlzLnRpbWVsaW5lO1xuXG4gICAgICBpZiAodGhpcy5fcmVwZWF0KSB7XG4gICAgICAgIC8vYWRqdXN0IHRoZSB0aW1lIGZvciByZXBlYXRzIGFuZCB5b3lvc1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fckRlbGF5O1xuXG4gICAgICAgIGlmICh0aGlzLl9yZXBlYXQgPCAtMSAmJiBpc05lZ2F0aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG90YWxUaW1lKGN5Y2xlRHVyYXRpb24gKiAxMDAgKyB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gX3JvdW5kUHJlY2lzZSh0VGltZSAlIGN5Y2xlRHVyYXRpb24pOyAvL3JvdW5kIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IGVycm9ycy4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IHNvbWUgYnJvd3NlcnMgcmVwb3J0IGl0IGFzIDAuNzk5OTk5OTkhKVxuXG4gICAgICAgIGlmICh0VGltZSA9PT0gdER1cikge1xuICAgICAgICAgIC8vIHRoZSB0RHVyID09PSB0VGltZSBpcyBmb3IgZWRnZSBjYXNlcyB3aGVyZSB0aGVyZSdzIGEgbGVuZ3RoeSBkZWNpbWFsIG9uIHRoZSBkdXJhdGlvbiBhbmQgaXQgbWF5IHJlYWNoIHRoZSB2ZXJ5IGVuZCBidXQgdGhlIHRpbWUgaXMgcmVuZGVyZWQgYXMgbm90LXF1aXRlLXRoZXJlIChyZW1lbWJlciwgdER1ciBpcyByb3VuZGVkIHRvIDQgZGVjaW1hbHMgd2hlcmVhcyBkdXIgaXNuJ3QpXG4gICAgICAgICAgaXRlcmF0aW9uID0gdGhpcy5fcmVwZWF0O1xuICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0aW9uID0gfn4odFRpbWUgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICAgIGlmIChpdGVyYXRpb24gJiYgaXRlcmF0aW9uID09PSB0VGltZSAvIGN5Y2xlRHVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWUgPSBkdXI7XG4gICAgICAgICAgICBpdGVyYXRpb24tLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aW1lID4gZHVyICYmICh0aW1lID0gZHVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzWW95byA9IHRoaXMuX3lveW8gJiYgaXRlcmF0aW9uICYgMTtcblxuICAgICAgICBpZiAoaXNZb3lvKSB7XG4gICAgICAgICAgeW95b0Vhc2UgPSB0aGlzLl95RWFzZTtcbiAgICAgICAgICB0aW1lID0gZHVyIC0gdGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZJdGVyYXRpb24gPSBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgIGlmICh0aW1lID09PSBwcmV2VGltZSAmJiAhZm9yY2UgJiYgdGhpcy5faW5pdHRlZCkge1xuICAgICAgICAgIC8vY291bGQgYmUgZHVyaW5nIHRoZSByZXBlYXREZWxheSBwYXJ0LiBObyBuZWVkIHRvIHJlbmRlciBhbmQgZmlyZSBjYWxsYmFja3MuXG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSB0VGltZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24pIHtcbiAgICAgICAgICB0aW1lbGluZSAmJiB0aGlzLl95RWFzZSAmJiBfcHJvcGFnYXRlWW95b0Vhc2UodGltZWxpbmUsIGlzWW95byk7IC8vcmVwZWF0UmVmcmVzaCBmdW5jdGlvbmFsaXR5XG5cbiAgICAgICAgICBpZiAodGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiAhdGhpcy5fbG9jaykge1xuICAgICAgICAgICAgdGhpcy5fbG9jayA9IGZvcmNlID0gMTsgLy9mb3JjZSwgb3RoZXJ3aXNlIGlmIGxhenkgaXMgdHJ1ZSwgdGhlIF9hdHRlbXB0SW5pdFR3ZWVuKCkgd2lsbCByZXR1cm4gYW5kIHdlJ2xsIGp1bXAgb3V0IGFuZCBnZXQgY2F1Z2h0IGJvdW5jaW5nIG9uIGVhY2ggdGljay5cblxuICAgICAgICAgICAgdGhpcy5yZW5kZXIoX3JvdW5kUHJlY2lzZShjeWNsZUR1cmF0aW9uICogaXRlcmF0aW9uKSwgdHJ1ZSkuaW52YWxpZGF0ZSgpLl9sb2NrID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9pbml0dGVkKSB7XG4gICAgICAgIGlmIChfYXR0ZW1wdEluaXRUd2Vlbih0aGlzLCBpc05lZ2F0aXZlID8gdG90YWxUaW1lIDogdGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzKSkge1xuICAgICAgICAgIHRoaXMuX3RUaW1lID0gMDsgLy8gaW4gY29uc3RydWN0b3IgaWYgaW1tZWRpYXRlUmVuZGVyIGlzIHRydWUsIHdlIHNldCBfdFRpbWUgdG8gLV90aW55TnVtIHRvIGhhdmUgdGhlIHBsYXloZWFkIGNyb3NzIHRoZSBzdGFydGluZyBwb2ludCBidXQgd2UgY2FuJ3QgbGVhdmUgX3RUaW1lIGFzIGEgbmVnYXRpdmUgbnVtYmVyLlxuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUpIHtcbiAgICAgICAgICAvLyByYXJlIGVkZ2UgY2FzZSAtIGR1cmluZyBpbml0aWFsaXphdGlvbiwgYW4gb25VcGRhdGUgaW4gdGhlIF9zdGFydEF0ICguZnJvbVRvKCkpIG1pZ2h0IGZvcmNlIHRoaXMgdHdlZW4gdG8gcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgZGl0Y2ggdGhpcyByZW5kZXIoKSBjYWxsIHNvIHRoYXQgaXQgZG9lc24ndCByZXZlcnQgdGhlIHZhbHVlcy5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkdXIgIT09IHRoaXMuX2R1cikge1xuICAgICAgICAgIC8vIHdoaWxlIGluaXR0aW5nLCBhIHBsdWdpbiBsaWtlIEluZXJ0aWFQbHVnaW4gbWlnaHQgYWx0ZXIgdGhlIGR1cmF0aW9uLCBzbyByZXJ1biBmcm9tIHRoZSBzdGFydCB0byBlbnN1cmUgZXZlcnl0aGluZyByZW5kZXJzIGFzIGl0IHNob3VsZC5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcblxuICAgICAgaWYgKCF0aGlzLl9hY3QgJiYgdGhpcy5fdHMpIHtcbiAgICAgICAgdGhpcy5fYWN0ID0gMTsgLy9hcyBsb25nIGFzIGl0J3Mgbm90IHBhdXNlZCwgZm9yY2UgaXQgdG8gYmUgYWN0aXZlIHNvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyBpbmRlcGVuZGVudCBvZiB0aGUgcGFyZW50IHRpbWVsaW5lLCBpdCdsbCBiZSBmb3JjZWQgdG8gcmUtcmVuZGVyIG9uIHRoZSBuZXh0IHRpY2suXG5cbiAgICAgICAgdGhpcy5fbGF6eSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9ICh5b3lvRWFzZSB8fCB0aGlzLl9lYXNlKSh0aW1lIC8gZHVyKTtcblxuICAgICAgaWYgKHRoaXMuX2Zyb20pIHtcbiAgICAgICAgdGhpcy5yYXRpbyA9IHJhdGlvID0gMSAtIHJhdGlvO1xuICAgICAgfVxuXG4gICAgICBpZiAodGltZSAmJiAhcHJldlRpbWUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHQgPSB0aGlzLl9wdDtcblxuICAgICAgd2hpbGUgKHB0KSB7XG4gICAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgfVxuXG4gICAgICB0aW1lbGluZSAmJiB0aW1lbGluZS5yZW5kZXIodG90YWxUaW1lIDwgMCA/IHRvdGFsVGltZSA6ICF0aW1lICYmIGlzWW95byA/IC1fdGlueU51bSA6IHRpbWVsaW5lLl9kdXIgKiB0aW1lbGluZS5fZWFzZSh0aW1lIC8gdGhpcy5fZHVyKSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB8fCB0aGlzLl9zdGFydEF0ICYmICh0aGlzLl96VGltZSA9IHRvdGFsVGltZSk7XG5cbiAgICAgIGlmICh0aGlzLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgaXNOZWdhdGl2ZSAmJiBfcmV3aW5kU3RhcnRBdCh0aGlzLCB0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7IC8vbm90ZTogZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHdlIHR1Y2sgdGhpcyBjb25kaXRpb25hbCBsb2dpYyBpbnNpZGUgbGVzcyB0cmF2ZWxlZCBhcmVhcyAobW9zdCB0d2VlbnMgZG9uJ3QgaGF2ZSBhbiBvblVwZGF0ZSkuIFdlJ2QganVzdCBoYXZlIGl0IGF0IHRoZSBlbmQgYmVmb3JlIHRoZSBvbkNvbXBsZXRlLCBidXQgdGhlIHZhbHVlcyBzaG91bGQgYmUgdXBkYXRlZCBiZWZvcmUgYW55IG9uVXBkYXRlIGlzIGNhbGxlZCwgc28gd2UgQUxTTyBwdXQgaXQgaGVyZSBhbmQgdGhlbiBpZiBpdCdzIG5vdCBjYWxsZWQsIHdlIGRvIHNvIGxhdGVyIG5lYXIgdGhlIG9uQ29tcGxldGUuXG5cbiAgICAgICAgX2NhbGxiYWNrKHRoaXMsIFwib25VcGRhdGVcIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlcGVhdCAmJiBpdGVyYXRpb24gIT09IHByZXZJdGVyYXRpb24gJiYgdGhpcy52YXJzLm9uUmVwZWF0ICYmICFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnBhcmVudCAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJlcGVhdFwiKTtcblxuICAgICAgaWYgKCh0VGltZSA9PT0gdGhpcy5fdER1ciB8fCAhdFRpbWUpICYmIHRoaXMuX3RUaW1lID09PSB0VGltZSkge1xuICAgICAgICBpc05lZ2F0aXZlICYmICF0aGlzLl9vblVwZGF0ZSAmJiBfcmV3aW5kU3RhcnRBdCh0aGlzLCB0b3RhbFRpbWUsIHRydWUsIHRydWUpO1xuICAgICAgICAodG90YWxUaW1lIHx8ICFkdXIpICYmICh0VGltZSA9PT0gdGhpcy5fdER1ciAmJiB0aGlzLl90cyA+IDAgfHwgIXRUaW1lICYmIHRoaXMuX3RzIDwgMCkgJiYgX3JlbW92ZUZyb21QYXJlbnQodGhpcywgMSk7IC8vIGRvbid0IHJlbW92ZSBpZiB3ZSdyZSByZW5kZXJpbmcgYXQgZXhhY3RseSBhIHRpbWUgb2YgMCwgYXMgdGhlcmUgY291bGQgYmUgYXV0b1JldmVydCB2YWx1ZXMgdGhhdCBzaG91bGQgZ2V0IHNldCBvbiB0aGUgbmV4dCB0aWNrIChpZiB0aGUgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBiZXlvbmQgdGhlIHN0YXJ0VGltZSwgbmVnYXRpdmUgdG90YWxUaW1lKS4gRG9uJ3QgcmVtb3ZlIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIHBsYXloZWFkIGlzbid0IGF0IDAsIG90aGVyd2lzZSB0bC5wcm9ncmVzcygxKS5yZXZlcnNlKCkgd29uJ3Qgd29yay4gT25seSByZW1vdmUgaWYgdGhlIHBsYXloZWFkIGlzIGF0IHRoZSBlbmQgYW5kIHRpbWVTY2FsZSBpcyBwb3NpdGl2ZSwgb3IgaWYgdGhlIHBsYXloZWFkIGlzIGF0IDAgYW5kIHRoZSB0aW1lU2NhbGUgaXMgbmVnYXRpdmUuXG5cbiAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhKGlzTmVnYXRpdmUgJiYgIXByZXZUaW1lKSAmJiAodFRpbWUgfHwgcHJldlRpbWUpKSB7XG4gICAgICAgICAgLy8gaWYgcHJldlRpbWUgYW5kIHRUaW1lIGFyZSB6ZXJvLCB3ZSBzaG91bGRuJ3QgZmlyZSB0aGUgb25SZXZlcnNlQ29tcGxldGUuIFRoaXMgY291bGQgaGFwcGVuIGlmIHlvdSBnc2FwLnRvKC4uLiB7cGF1c2VkOnRydWV9KS5wbGF5KCk7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMy50YXJnZXRzID0gZnVuY3Rpb24gdGFyZ2V0cygpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0cztcbiAgfTtcblxuICBfcHJvdG8zLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKCkge1xuICAgIHRoaXMuX3B0ID0gdGhpcy5fb3AgPSB0aGlzLl9zdGFydEF0ID0gdGhpcy5fb25VcGRhdGUgPSB0aGlzLl9sYXp5ID0gdGhpcy5yYXRpbyA9IDA7XG4gICAgdGhpcy5fcHRMb29rdXAgPSBbXTtcbiAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUuaW52YWxpZGF0ZSgpO1xuICAgIHJldHVybiBfQW5pbWF0aW9uMi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzMucmVzZXRUbyA9IGZ1bmN0aW9uIHJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKSB7XG4gICAgX3RpY2tlckFjdGl2ZSB8fCBfdGlja2VyLndha2UoKTtcbiAgICB0aGlzLl90cyB8fCB0aGlzLnBsYXkoKTtcbiAgICB2YXIgdGltZSA9IE1hdGgubWluKHRoaXMuX2R1ciwgKHRoaXMuX2RwLl90aW1lIC0gdGhpcy5fc3RhcnQpICogdGhpcy5fdHMpLFxuICAgICAgICByYXRpbztcbiAgICB0aGlzLl9pbml0dGVkIHx8IF9pbml0VHdlZW4odGhpcywgdGltZSk7XG4gICAgcmF0aW8gPSB0aGlzLl9lYXNlKHRpbWUgLyB0aGlzLl9kdXIpOyAvLyBkb24ndCBqdXN0IGdldCB0d2Vlbi5yYXRpbyBiZWNhdXNlIGl0IG1heSBub3QgaGF2ZSByZW5kZXJlZCB5ZXQuXG4gICAgLy8gcG9zc2libGUgZnV0dXJlIGFkZGl0aW9uIHRvIGFsbG93IGFuIG9iamVjdCB3aXRoIG11bHRpcGxlIHZhbHVlcyB0byB1cGRhdGUsIGxpa2UgdHdlZW4ucmVzZXRUbyh7eDogMTAwLCB5OiAyMDB9KTsgQXQgdGhpcyBwb2ludCwgaXQgZG9lc24ndCBzZWVtIHdvcnRoIHRoZSBhZGRlZCBrYiBnaXZlbiB0aGUgZmFjdCB0aGF0IG1vc3QgdXNlcnMgd2lsbCBsaWtlbHkgb3B0IGZvciB0aGUgY29udmVuaWVudCBnc2FwLnF1aWNrVG8oKSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCB0aGlzIG1ldGhvZC5cbiAgICAvLyBpZiAoX2lzT2JqZWN0KHByb3BlcnR5KSkgeyAvLyBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25cbiAgICAvLyBcdGZvciAocCBpbiBwcm9wZXJ0eSkge1xuICAgIC8vIFx0XHRpZiAoX3VwZGF0ZVByb3BUd2VlbnModGhpcywgcCwgcHJvcGVydHlbcF0sIHZhbHVlID8gdmFsdWVbcF0gOiBudWxsLCBzdGFydCwgcmF0aW8sIHRpbWUpKSB7XG4gICAgLy8gXHRcdFx0cmV0dXJuIHRoaXMucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpOyAvLyBpZiBhIFByb3BUd2VlbiB3YXNuJ3QgZm91bmQgZm9yIHRoZSBwcm9wZXJ0eSwgaXQnbGwgZ2V0IGZvcmNlZCB3aXRoIGEgcmUtaW5pdGlhbGl6YXRpb24gc28gd2UgbmVlZCB0byBqdW1wIG91dCBhbmQgc3RhcnQgb3ZlciBhZ2Fpbi5cbiAgICAvLyBcdFx0fVxuICAgIC8vIFx0fVxuICAgIC8vIH0gZWxzZSB7XG5cbiAgICBpZiAoX3VwZGF0ZVByb3BUd2VlbnModGhpcywgcHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlLCByYXRpbywgdGltZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc2V0VG8ocHJvcGVydHksIHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKTsgLy8gaWYgYSBQcm9wVHdlZW4gd2Fzbid0IGZvdW5kIGZvciB0aGUgcHJvcGVydHksIGl0J2xsIGdldCBmb3JjZWQgd2l0aCBhIHJlLWluaXRpYWxpemF0aW9uIHNvIHdlIG5lZWQgdG8ganVtcCBvdXQgYW5kIHN0YXJ0IG92ZXIgYWdhaW4uXG4gICAgfSAvL31cblxuXG4gICAgX2FsaWduUGxheWhlYWQodGhpcywgMCk7XG5cbiAgICB0aGlzLnBhcmVudCB8fCBfYWRkTGlua2VkTGlzdEl0ZW0odGhpcy5fZHAsIHRoaXMsIFwiX2ZpcnN0XCIsIFwiX2xhc3RcIiwgdGhpcy5fZHAuX3NvcnQgPyBcIl9zdGFydFwiIDogMCk7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyKDApO1xuICB9O1xuXG4gIF9wcm90bzMua2lsbCA9IGZ1bmN0aW9uIGtpbGwodGFyZ2V0cywgdmFycykge1xuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSBcImFsbFwiO1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0cyAmJiAoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikpIHtcbiAgICAgIHRoaXMuX2xhenkgPSB0aGlzLl9wdCA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyBfaW50ZXJydXB0KHRoaXMpIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy50aW1lbGluZSkge1xuICAgICAgdmFyIHREdXIgPSB0aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKTtcbiAgICAgIHRoaXMudGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHZhcnMsIF9vdmVyd3JpdGluZ1R3ZWVuICYmIF9vdmVyd3JpdGluZ1R3ZWVuLnZhcnMub3ZlcndyaXRlICE9PSB0cnVlKS5fZmlyc3QgfHwgX2ludGVycnVwdCh0aGlzKTsgLy8gaWYgbm90aGluZyBpcyBsZWZ0IHR3ZWVuaW5nLCBpbnRlcnJ1cHQuXG5cbiAgICAgIHRoaXMucGFyZW50ICYmIHREdXIgIT09IHRoaXMudGltZWxpbmUudG90YWxEdXJhdGlvbigpICYmIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9kdXIgKiB0aGlzLnRpbWVsaW5lLl90RHVyIC8gdER1ciwgMCwgMSk7IC8vIGlmIGEgbmVzdGVkIHR3ZWVuIGlzIGtpbGxlZCB0aGF0IGNoYW5nZXMgdGhlIGR1cmF0aW9uLCBpdCBzaG91bGQgYWZmZWN0IHRoaXMgdHdlZW4ncyBkdXJhdGlvbi4gV2UgbXVzdCB1c2UgdGhlIHJhdGlvLCB0aG91Z2gsIGJlY2F1c2Ugc29tZXRpbWVzIHRoZSBpbnRlcm5hbCB0aW1lbGluZSBpcyBzdHJldGNoZWQgbGlrZSBmb3Iga2V5ZnJhbWVzIHdoZXJlIHRoZXkgZG9uJ3QgYWxsIGFkZCB1cCB0byB3aGF0ZXZlciB0aGUgcGFyZW50IHR3ZWVuJ3MgZHVyYXRpb24gd2FzIHNldCB0by5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlZFRhcmdldHMgPSB0aGlzLl90YXJnZXRzLFxuICAgICAgICBraWxsaW5nVGFyZ2V0cyA9IHRhcmdldHMgPyB0b0FycmF5KHRhcmdldHMpIDogcGFyc2VkVGFyZ2V0cyxcbiAgICAgICAgcHJvcFR3ZWVuTG9va3VwID0gdGhpcy5fcHRMb29rdXAsXG4gICAgICAgIGZpcnN0UFQgPSB0aGlzLl9wdCxcbiAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wcyxcbiAgICAgICAgY3VyTG9va3VwLFxuICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHAsXG4gICAgICAgIHB0LFxuICAgICAgICBpO1xuXG4gICAgaWYgKCghdmFycyB8fCB2YXJzID09PSBcImFsbFwiKSAmJiBfYXJyYXlzTWF0Y2gocGFyc2VkVGFyZ2V0cywga2lsbGluZ1RhcmdldHMpKSB7XG4gICAgICB2YXJzID09PSBcImFsbFwiICYmICh0aGlzLl9wdCA9IDApO1xuICAgICAgcmV0dXJuIF9pbnRlcnJ1cHQodGhpcyk7XG4gICAgfVxuXG4gICAgb3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX29wID0gdGhpcy5fb3AgfHwgW107XG5cbiAgICBpZiAodmFycyAhPT0gXCJhbGxcIikge1xuICAgICAgLy9zbyBwZW9wbGUgY2FuIHBhc3MgaW4gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lc1xuICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICBwID0ge307XG5cbiAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHBbbmFtZV0gPSAxO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXJzID0gcDtcbiAgICAgIH1cblxuICAgICAgdmFycyA9IF9hZGRBbGlhc2VzVG9WYXJzKHBhcnNlZFRhcmdldHMsIHZhcnMpO1xuICAgIH1cblxuICAgIGkgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmICh+a2lsbGluZ1RhcmdldHMuaW5kZXhPZihwYXJzZWRUYXJnZXRzW2ldKSkge1xuICAgICAgICBjdXJMb29rdXAgPSBwcm9wVHdlZW5Mb29rdXBbaV07XG5cbiAgICAgICAgaWYgKHZhcnMgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgICBvdmVyd3JpdHRlblByb3BzW2ldID0gdmFycztcbiAgICAgICAgICBwcm9wcyA9IGN1ckxvb2t1cDtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzID0gb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gfHwge307XG4gICAgICAgICAgcHJvcHMgPSB2YXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChwIGluIHByb3BzKSB7XG4gICAgICAgICAgcHQgPSBjdXJMb29rdXAgJiYgY3VyTG9va3VwW3BdO1xuXG4gICAgICAgICAgaWYgKHB0KSB7XG4gICAgICAgICAgICBpZiAoIShcImtpbGxcIiBpbiBwdC5kKSB8fCBwdC5kLmtpbGwocCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIHB0LCBcIl9wdFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsZXRlIGN1ckxvb2t1cFtwXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VyT3ZlcndyaXRlUHJvcHMgIT09IFwiYWxsXCIpIHtcbiAgICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzW3BdID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pbml0dGVkICYmICF0aGlzLl9wdCAmJiBmaXJzdFBUICYmIF9pbnRlcnJ1cHQodGhpcyk7IC8vaWYgYWxsIHR3ZWVuaW5nIHByb3BlcnRpZXMgYXJlIGtpbGxlZCwga2lsbCB0aGUgdHdlZW4uIFdpdGhvdXQgdGhpcyBsaW5lLCBpZiB0aGVyZSdzIGEgdHdlZW4gd2l0aCBtdWx0aXBsZSB0YXJnZXRzIGFuZCB0aGVuIHlvdSBraWxsVHdlZW5zT2YoKSBlYWNoIHRhcmdldCBpbmRpdmlkdWFsbHksIHRoZSB0d2VlbiB3b3VsZCB0ZWNobmljYWxseSBzdGlsbCByZW1haW4gYWN0aXZlIGFuZCBmaXJlIGl0cyBvbkNvbXBsZXRlIGV2ZW4gdGhvdWdoIHRoZXJlIGFyZW4ndCBhbnkgbW9yZSBwcm9wZXJ0aWVzIHR3ZWVuaW5nLlxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgVHdlZW4udG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBhcmd1bWVudHNbMl0pO1xuICB9O1xuXG4gIFR3ZWVuLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLmRlbGF5ZWRDYWxsID0gZnVuY3Rpb24gZGVsYXllZENhbGwoZGVsYXksIGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBUd2VlbihjYWxsYmFjaywgMCwge1xuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgIG9uQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25Db21wbGV0ZVBhcmFtczogcGFyYW1zLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgIGNhbGxiYWNrU2NvcGU6IHNjb3BlXG4gICAgfSk7XG4gIH07XG5cbiAgVHdlZW4uZnJvbVRvID0gZnVuY3Rpb24gZnJvbVRvKHRhcmdldHMsIGZyb21WYXJzLCB0b1ZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgyLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5yZXBlYXREZWxheSB8fCAodmFycy5yZXBlYXQgPSAwKTtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMpO1xuICB9O1xuXG4gIFR3ZWVuLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKTtcbiAgfTtcblxuICByZXR1cm4gVHdlZW47XG59KEFuaW1hdGlvbik7XG5cbl9zZXREZWZhdWx0cyhUd2Vlbi5wcm90b3R5cGUsIHtcbiAgX3RhcmdldHM6IFtdLFxuICBfbGF6eTogMCxcbiAgX3N0YXJ0QXQ6IDAsXG4gIF9vcDogMCxcbiAgX29uSW5pdDogMFxufSk7IC8vYWRkIHRoZSBwZXJ0aW5lbnQgdGltZWxpbmUgbWV0aG9kcyB0byBUd2VlbiBpbnN0YW5jZXMgc28gdGhhdCB1c2VycyBjYW4gY2hhaW4gY29udmVuaWVudGx5IGFuZCBjcmVhdGUgYSB0aW1lbGluZSBhdXRvbWF0aWNhbGx5LiAocmVtb3ZlZCBkdWUgdG8gY29uY2VybnMgdGhhdCBpdCdkIHVsdGltYXRlbHkgYWRkIHRvIG1vcmUgY29uZnVzaW9uIGVzcGVjaWFsbHkgZm9yIGJlZ2lubmVycylcbi8vIF9mb3JFYWNoTmFtZShcInRvLGZyb20sZnJvbVRvLHNldCxjYWxsLGFkZCxhZGRMYWJlbCxhZGRQYXVzZVwiLCBuYW1lID0+IHtcbi8vIFx0VHdlZW4ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4vLyBcdFx0bGV0IHRsID0gbmV3IFRpbWVsaW5lKCk7XG4vLyBcdFx0cmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRsLCB0aGlzKVtuYW1lXS5hcHBseSh0bCwgdG9BcnJheShhcmd1bWVudHMpKTtcbi8vIFx0fVxuLy8gfSk7XG4vL2ZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LiBMZXZlcmFnZSB0aGUgdGltZWxpbmUgY2FsbHMuXG5cblxuX2ZvckVhY2hOYW1lKFwic3RhZ2dlclRvLHN0YWdnZXJGcm9tLHN0YWdnZXJGcm9tVG9cIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgVHdlZW5bbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKCksXG4gICAgICAgIHBhcmFtcyA9IF9zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICBwYXJhbXMuc3BsaWNlKG5hbWUgPT09IFwic3RhZ2dlckZyb21Ub1wiID8gNSA6IDQsIDAsIDApO1xuICAgIHJldHVybiB0bFtuYW1lXS5hcHBseSh0bCwgcGFyYW1zKTtcbiAgfTtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBQUk9QVFdFRU5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX3NldHRlclBsYWluID0gZnVuY3Rpb24gX3NldHRlclBsYWluKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJGdW5jID0gZnVuY3Rpb24gX3NldHRlckZ1bmModGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0odmFsdWUpO1xufSxcbiAgICBfc2V0dGVyRnVuY1dpdGhQYXJhbSA9IGZ1bmN0aW9uIF9zZXR0ZXJGdW5jV2l0aFBhcmFtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldKGRhdGEuZnAsIHZhbHVlKTtcbn0sXG4gICAgX3NldHRlckF0dHJpYnV0ZSA9IGZ1bmN0aW9uIF9zZXR0ZXJBdHRyaWJ1dGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zZXRBdHRyaWJ1dGUocHJvcGVydHksIHZhbHVlKTtcbn0sXG4gICAgX2dldFNldHRlciA9IGZ1bmN0aW9uIF9nZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odGFyZ2V0W3Byb3BlcnR5XSkgPyBfc2V0dGVyRnVuYyA6IF9pc1VuZGVmaW5lZCh0YXJnZXRbcHJvcGVydHldKSAmJiB0YXJnZXQuc2V0QXR0cmlidXRlID8gX3NldHRlckF0dHJpYnV0ZSA6IF9zZXR0ZXJQbGFpbjtcbn0sXG4gICAgX3JlbmRlclBsYWluID0gZnVuY3Rpb24gX3JlbmRlclBsYWluKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDAwMCkgLyAxMDAwMDAwLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckJvb2xlYW4gPSBmdW5jdGlvbiBfcmVuZGVyQm9vbGVhbihyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsICEhKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJDb21wbGV4U3RyaW5nID0gZnVuY3Rpb24gX3JlbmRlckNvbXBsZXhTdHJpbmcocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHB0ID0gZGF0YS5fcHQsXG4gICAgICBzID0gXCJcIjtcblxuICBpZiAoIXJhdGlvICYmIGRhdGEuYikge1xuICAgIC8vYiA9IGJlZ2lubmluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5iO1xuICB9IGVsc2UgaWYgKHJhdGlvID09PSAxICYmIGRhdGEuZSkge1xuICAgIC8vZSA9IGVuZGluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5lO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChwdCkge1xuICAgICAgcyA9IHB0LnAgKyAocHQubSA/IHB0Lm0ocHQucyArIHB0LmMgKiByYXRpbykgOiBNYXRoLnJvdW5kKChwdC5zICsgcHQuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwKSArIHM7IC8vd2UgdXNlIHRoZSBcInBcIiBwcm9wZXJ0eSBmb3IgdGhlIHRleHQgaW5iZXR3ZWVuIChsaWtlIGEgc3VmZml4KS4gQW5kIGluIHRoZSBjb250ZXh0IG9mIGEgY29tcGxleCBzdHJpbmcsIHRoZSBtb2RpZmllciAobSkgaXMgdHlwaWNhbGx5IGp1c3QgTWF0aC5yb3VuZCgpLCBsaWtlIGZvciBSR0IgY29sb3JzLlxuXG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHMgKz0gZGF0YS5jOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgY2h1bmsgb2Ygbm9uLW51bWVyaWMgdGV4dC5cbiAgfVxuXG4gIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBzLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlclByb3BUd2VlbnMgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFR3ZWVucyhyYXRpbywgZGF0YSkge1xuICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG59LFxuICAgIF9hZGRQbHVnaW5Nb2RpZmllciA9IGZ1bmN0aW9uIF9hZGRQbHVnaW5Nb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCwgcHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICBwdC5wID09PSBwcm9wZXJ0eSAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCk7XG4gICAgcHQgPSBuZXh0O1xuICB9XG59LFxuICAgIF9raWxsUHJvcFR3ZWVuc09mID0gZnVuY3Rpb24gX2tpbGxQcm9wVHdlZW5zT2YocHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBoYXNOb25EZXBlbmRlbnRSZW1haW5pbmcsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcblxuICAgIGlmIChwdC5wID09PSBwcm9wZXJ0eSAmJiAhcHQub3AgfHwgcHQub3AgPT09IHByb3BlcnR5KSB7XG4gICAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgcHQsIFwiX3B0XCIpO1xuICAgIH0gZWxzZSBpZiAoIXB0LmRlcCkge1xuICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nID0gMTtcbiAgICB9XG5cbiAgICBwdCA9IG5leHQ7XG4gIH1cblxuICByZXR1cm4gIWhhc05vbkRlcGVuZGVudFJlbWFpbmluZztcbn0sXG4gICAgX3NldHRlcldpdGhNb2RpZmllciA9IGZ1bmN0aW9uIF9zZXR0ZXJXaXRoTW9kaWZpZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgZGF0YS5tU2V0KHRhcmdldCwgcHJvcGVydHksIGRhdGEubS5jYWxsKGRhdGEudHdlZW4sIHZhbHVlLCBkYXRhLm10KSwgZGF0YSk7XG59LFxuICAgIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkgPSBmdW5jdGlvbiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHBhcmVudCkge1xuICB2YXIgcHQgPSBwYXJlbnQuX3B0LFxuICAgICAgbmV4dCxcbiAgICAgIHB0MixcbiAgICAgIGZpcnN0LFxuICAgICAgbGFzdDsgLy9zb3J0cyB0aGUgUHJvcFR3ZWVuIGxpbmtlZCBsaXN0IGluIG9yZGVyIG9mIHByaW9yaXR5IGJlY2F1c2Ugc29tZSBwbHVnaW5zIG5lZWQgdG8gZG8gdGhlaXIgd29yayBhZnRlciBBTEwgb2YgdGhlIFByb3BUd2VlbnMgd2VyZSBjcmVhdGVkIChsaWtlIFJvdW5kUHJvcHNQbHVnaW4gYW5kIE1vZGlmaWVyc1BsdWdpbilcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG4gICAgcHQyID0gZmlyc3Q7XG5cbiAgICB3aGlsZSAocHQyICYmIHB0Mi5wciA+IHB0LnByKSB7XG4gICAgICBwdDIgPSBwdDIuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKHB0Ll9wcmV2ID0gcHQyID8gcHQyLl9wcmV2IDogbGFzdCkge1xuICAgICAgcHQuX3ByZXYuX25leHQgPSBwdDtcbiAgICB9IGVsc2Uge1xuICAgICAgZmlyc3QgPSBwdDtcbiAgICB9XG5cbiAgICBpZiAocHQuX25leHQgPSBwdDIpIHtcbiAgICAgIHB0Mi5fcHJldiA9IHB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0ID0gcHQ7XG4gICAgfVxuXG4gICAgcHQgPSBuZXh0O1xuICB9XG5cbiAgcGFyZW50Ll9wdCA9IGZpcnN0O1xufTsgLy9Qcm9wVHdlZW4ga2V5OiB0ID0gdGFyZ2V0LCBwID0gcHJvcCwgciA9IHJlbmRlcmVyLCBkID0gZGF0YSwgcyA9IHN0YXJ0LCBjID0gY2hhbmdlLCBvcCA9IG92ZXJ3cml0ZVByb3BlcnR5IChPTkxZIHBvcHVsYXRlZCB3aGVuIGl0J3MgZGlmZmVyZW50IHRoYW4gcCksIHByID0gcHJpb3JpdHksIF9uZXh0L19wcmV2IGZvciB0aGUgbGlua2VkIGxpc3Qgc2libGluZ3MsIHNldCA9IHNldHRlciwgbSA9IG1vZGlmaWVyLCBtU2V0ID0gbW9kaWZpZXJTZXR0ZXIgKHRoZSBvcmlnaW5hbCBzZXR0ZXIsIGJlZm9yZSBhIG1vZGlmaWVyIHdhcyBhZGRlZClcblxuXG5leHBvcnQgdmFyIFByb3BUd2VlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByb3BUd2VlbihuZXh0LCB0YXJnZXQsIHByb3AsIHN0YXJ0LCBjaGFuZ2UsIHJlbmRlcmVyLCBkYXRhLCBzZXR0ZXIsIHByaW9yaXR5KSB7XG4gICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgIHRoaXMucyA9IHN0YXJ0O1xuICAgIHRoaXMuYyA9IGNoYW5nZTtcbiAgICB0aGlzLnAgPSBwcm9wO1xuICAgIHRoaXMuciA9IHJlbmRlcmVyIHx8IF9yZW5kZXJQbGFpbjtcbiAgICB0aGlzLmQgPSBkYXRhIHx8IHRoaXM7XG4gICAgdGhpcy5zZXQgPSBzZXR0ZXIgfHwgX3NldHRlclBsYWluO1xuICAgIHRoaXMucHIgPSBwcmlvcml0eSB8fCAwO1xuICAgIHRoaXMuX25leHQgPSBuZXh0O1xuXG4gICAgaWYgKG5leHQpIHtcbiAgICAgIG5leHQuX3ByZXYgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvdG80ID0gUHJvcFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG80Lm1vZGlmaWVyID0gZnVuY3Rpb24gbW9kaWZpZXIoZnVuYywgdHdlZW4sIHRhcmdldCkge1xuICAgIHRoaXMubVNldCA9IHRoaXMubVNldCB8fCB0aGlzLnNldDsgLy9pbiBjYXNlIGl0IHdhcyBhbHJlYWR5IHNldCAoYSBQcm9wVHdlZW4gY2FuIG9ubHkgaGF2ZSBvbmUgbW9kaWZpZXIpXG5cbiAgICB0aGlzLnNldCA9IF9zZXR0ZXJXaXRoTW9kaWZpZXI7XG4gICAgdGhpcy5tID0gZnVuYztcbiAgICB0aGlzLm10ID0gdGFyZ2V0OyAvL21vZGlmaWVyIHRhcmdldFxuXG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuICB9O1xuXG4gIHJldHVybiBQcm9wVHdlZW47XG59KCk7IC8vSW5pdGlhbGl6YXRpb24gdGFza3NcblxuX2ZvckVhY2hOYW1lKF9jYWxsYmFja05hbWVzICsgXCJwYXJlbnQsZHVyYXRpb24sZWFzZSxkZWxheSxvdmVyd3JpdGUscnVuQmFja3dhcmRzLHN0YXJ0QXQseW95byxpbW1lZGlhdGVSZW5kZXIscmVwZWF0LHJlcGVhdERlbGF5LGRhdGEscGF1c2VkLHJldmVyc2VkLGxhenksY2FsbGJhY2tTY29wZSxzdHJpbmdGaWx0ZXIsaWQseW95b0Vhc2Usc3RhZ2dlcixpbmhlcml0LHJlcGVhdFJlZnJlc2gsa2V5ZnJhbWVzLGF1dG9SZXZlcnQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xufSk7XG5cbl9nbG9iYWxzLlR3ZWVuTWF4ID0gX2dsb2JhbHMuVHdlZW5MaXRlID0gVHdlZW47XG5fZ2xvYmFscy5UaW1lbGluZUxpdGUgPSBfZ2xvYmFscy5UaW1lbGluZU1heCA9IFRpbWVsaW5lO1xuX2dsb2JhbFRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgc29ydENoaWxkcmVuOiBmYWxzZSxcbiAgZGVmYXVsdHM6IF9kZWZhdWx0cyxcbiAgYXV0b1JlbW92ZUNoaWxkcmVuOiB0cnVlLFxuICBpZDogXCJyb290XCIsXG4gIHNtb290aENoaWxkVGltaW5nOiB0cnVlXG59KTtcbl9jb25maWcuc3RyaW5nRmlsdGVyID0gX2NvbG9yU3RyaW5nRmlsdGVyO1xuXG52YXIgX21lZGlhID0gW10sXG4gICAgX2xpc3RlbmVycyA9IHt9LFxuICAgIF9lbXB0eUFycmF5ID0gW10sXG4gICAgX2xhc3RNZWRpYVRpbWUgPSAwLFxuICAgIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIF9kaXNwYXRjaCh0eXBlKSB7XG4gIHJldHVybiAoX2xpc3RlbmVyc1t0eXBlXSB8fCBfZW1wdHlBcnJheSkubWFwKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIGYoKTtcbiAgfSk7XG59LFxuICAgIF9vbk1lZGlhQ2hhbmdlID0gZnVuY3Rpb24gX29uTWVkaWFDaGFuZ2UoKSB7XG4gIHZhciB0aW1lID0gRGF0ZS5ub3coKSxcbiAgICAgIG1hdGNoZXMgPSBbXTtcblxuICBpZiAodGltZSAtIF9sYXN0TWVkaWFUaW1lID4gMikge1xuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFJbml0XCIpO1xuXG4gICAgX21lZGlhLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHZhciBxdWVyaWVzID0gYy5xdWVyaWVzLFxuICAgICAgICAgIGNvbmRpdGlvbnMgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgbWF0Y2gsXG4gICAgICAgICAgcCxcbiAgICAgICAgICBhbnlNYXRjaCxcbiAgICAgICAgICB0b2dnbGVkO1xuXG4gICAgICBmb3IgKHAgaW4gcXVlcmllcykge1xuICAgICAgICBtYXRjaCA9IF93aW4ubWF0Y2hNZWRpYShxdWVyaWVzW3BdKS5tYXRjaGVzOyAvLyBGaXJlZm94IGRvZXNuJ3QgdXBkYXRlIHRoZSBcIm1hdGNoZXNcIiBwcm9wZXJ0eSBvZiB0aGUgTWVkaWFRdWVyeUxpc3Qgb2JqZWN0IGNvcnJlY3RseSAtIGl0IG9ubHkgZG9lcyBzbyBhcyBpdCBjYWxscyBpdHMgY2hhbmdlIGhhbmRsZXIgLSBzbyB3ZSBtdXN0IHJlLWNyZWF0ZSBhIG1lZGlhIHF1ZXJ5IGhlcmUgdG8gZW5zdXJlIGl0J3MgYWNjdXJhdGUuXG5cbiAgICAgICAgbWF0Y2ggJiYgKGFueU1hdGNoID0gMSk7XG5cbiAgICAgICAgaWYgKG1hdGNoICE9PSBjb25kaXRpb25zW3BdKSB7XG4gICAgICAgICAgY29uZGl0aW9uc1twXSA9IG1hdGNoO1xuICAgICAgICAgIHRvZ2dsZWQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2dnbGVkKSB7XG4gICAgICAgIGMucmV2ZXJ0KCk7XG4gICAgICAgIGFueU1hdGNoICYmIG1hdGNoZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kaXNwYXRjaChcIm1hdGNoTWVkaWFSZXZlcnRcIik7XG5cbiAgICBtYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBjLm9uTWF0Y2goYyk7XG4gICAgfSk7XG4gICAgX2xhc3RNZWRpYVRpbWUgPSB0aW1lO1xuXG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVwiKTtcbiAgfVxufTtcblxudmFyIENvbnRleHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb250ZXh0KGZ1bmMsIHNjb3BlKSB7XG4gICAgdGhpcy5zZWxlY3RvciA9IHNjb3BlICYmIHNlbGVjdG9yKHNjb3BlKTtcbiAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICB0aGlzLl9yID0gW107IC8vIHJldHVybmVkL2NsZWFudXAgZnVuY3Rpb25zXG5cbiAgICB0aGlzLmlzUmV2ZXJ0ZWQgPSBmYWxzZTtcbiAgICBmdW5jICYmIHRoaXMuYWRkKGZ1bmMpO1xuICB9XG5cbiAgdmFyIF9wcm90bzUgPSBDb250ZXh0LnByb3RvdHlwZTtcblxuICBfcHJvdG81LmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBmdW5jLCBzY29wZSkge1xuICAgIGlmIChfaXNGdW5jdGlvbihuYW1lKSkge1xuICAgICAgc2NvcGUgPSBmdW5jO1xuICAgICAgZnVuYyA9IG5hbWU7XG4gICAgICBuYW1lID0gX2lzRnVuY3Rpb247XG4gICAgfVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBmID0gZnVuY3Rpb24gZigpIHtcbiAgICAgIHZhciBwcmV2ID0gX2NvbnRleHQsXG4gICAgICAgICAgcHJldlNlbGVjdG9yID0gc2VsZi5zZWxlY3RvcixcbiAgICAgICAgICByZXN1bHQ7XG4gICAgICBwcmV2ICYmIHByZXYuZGF0YS5wdXNoKHNlbGYpO1xuICAgICAgc2NvcGUgJiYgKHNlbGYuc2VsZWN0b3IgPSBzZWxlY3RvcihzY29wZSkpO1xuICAgICAgX2NvbnRleHQgPSBzZWxmO1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgICAgX2lzRnVuY3Rpb24ocmVzdWx0KSAmJiBzZWxmLl9yLnB1c2gocmVzdWx0KTtcbiAgICAgIF9jb250ZXh0ID0gcHJldjtcbiAgICAgIHNlbGYuc2VsZWN0b3IgPSBwcmV2U2VsZWN0b3I7XG4gICAgICBzZWxmLmlzUmV2ZXJ0ZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHNlbGYubGFzdCA9IGY7XG4gICAgcmV0dXJuIG5hbWUgPT09IF9pc0Z1bmN0aW9uID8gZihzZWxmKSA6IG5hbWUgPyBzZWxmW25hbWVdID0gZiA6IGY7XG4gIH07XG5cbiAgX3Byb3RvNS5pZ25vcmUgPSBmdW5jdGlvbiBpZ25vcmUoZnVuYykge1xuICAgIHZhciBwcmV2ID0gX2NvbnRleHQ7XG4gICAgX2NvbnRleHQgPSBudWxsO1xuICAgIGZ1bmModGhpcyk7XG4gICAgX2NvbnRleHQgPSBwcmV2O1xuICB9O1xuXG4gIF9wcm90bzUuZ2V0VHdlZW5zID0gZnVuY3Rpb24gZ2V0VHdlZW5zKCkge1xuICAgIHZhciBhID0gW107XG4gICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgQ29udGV4dCA/IGEucHVzaC5hcHBseShhLCBlLmdldFR3ZWVucygpKSA6IGUgaW5zdGFuY2VvZiBUd2VlbiAmJiBlLl90YXJnZXRzWzBdICE9PSBlLnZhcnMub25Db21wbGV0ZSAmJiBhLnB1c2goZSk7XG4gICAgfSk7IC8vIGRvbid0IGluY2x1ZGUgZGVsYXllZENhbGxzXG5cbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBfcHJvdG81LmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5fci5sZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoID0gMDtcbiAgfTtcblxuICBfcHJvdG81LmtpbGwgPSBmdW5jdGlvbiBraWxsKHJldmVydCwgbWF0Y2hNZWRpYSkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgaWYgKHJldmVydCkge1xuICAgICAgLy8gc2F2ZSBhcyBhbiBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gY2FjaGUgdGhlIGdsb2JhbFRpbWUgZm9yIGVhY2ggdHdlZW4gdG8gb3B0aW1pemUgcGVyZm9ybWFuY2UgZHVyaW5nIHRoZSBzb3J0XG4gICAgICB0aGlzLmdldFR3ZWVucygpLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGc6IHQuZ2xvYmFsVGltZSgwKSxcbiAgICAgICAgICB0OiB0XG4gICAgICAgIH07XG4gICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBiLmcgLSBhLmcgfHwgLTE7XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHJldHVybiBvLnQucmV2ZXJ0KHJldmVydCk7XG4gICAgICB9KTsgLy8gbm90ZTogYWxsIG9mIHRoZSBfc3RhcnRBdCB0d2VlbnMgc2hvdWxkIGJlIHJldmVydGVkIGluIHJldmVyc2Ugb3JkZXIgdGhhdCB0aHkgd2VyZSBjcmVhdGVkLCBhbmQgdGhleSdsbCBhbGwgaGF2ZSB0aGUgc2FtZSBnbG9iYWxUaW1lICgtMSkgc28gdGhlIFwiIHx8IC0xXCIgaW4gdGhlIHNvcnQga2VlcHMgdGhlIG9yZGVyIHByb3Blcmx5LlxuXG4gICAgICB0aGlzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gIShlIGluc3RhbmNlb2YgQW5pbWF0aW9uKSAmJiBlLnJldmVydCAmJiBlLnJldmVydChyZXZlcnQpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX3IuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICByZXR1cm4gZihyZXZlcnQsIF90aGlzNCk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5pc1JldmVydGVkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUua2lsbCAmJiBlLmtpbGwoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuY2xlYXIoKTtcblxuICAgIGlmIChtYXRjaE1lZGlhKSB7XG4gICAgICB2YXIgaSA9IF9tZWRpYS5pbmRleE9mKHRoaXMpO1xuXG4gICAgICAhIX5pICYmIF9tZWRpYS5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzUucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIHJldHVybiBDb250ZXh0O1xufSgpO1xuXG52YXIgTWF0Y2hNZWRpYSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1hdGNoTWVkaWEoc2NvcGUpIHtcbiAgICB0aGlzLmNvbnRleHRzID0gW107XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICB9XG5cbiAgdmFyIF9wcm90bzYgPSBNYXRjaE1lZGlhLnByb3RvdHlwZTtcblxuICBfcHJvdG82LmFkZCA9IGZ1bmN0aW9uIGFkZChjb25kaXRpb25zLCBmdW5jLCBzY29wZSkge1xuICAgIF9pc09iamVjdChjb25kaXRpb25zKSB8fCAoY29uZGl0aW9ucyA9IHtcbiAgICAgIG1hdGNoZXM6IGNvbmRpdGlvbnNcbiAgICB9KTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KDAsIHNjb3BlIHx8IHRoaXMuc2NvcGUpLFxuICAgICAgICBjb25kID0gY29udGV4dC5jb25kaXRpb25zID0ge30sXG4gICAgICAgIG1xLFxuICAgICAgICBwLFxuICAgICAgICBhY3RpdmU7XG4gICAgdGhpcy5jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICAgIGZ1bmMgPSBjb250ZXh0LmFkZChcIm9uTWF0Y2hcIiwgZnVuYyk7XG4gICAgY29udGV4dC5xdWVyaWVzID0gY29uZGl0aW9ucztcblxuICAgIGZvciAocCBpbiBjb25kaXRpb25zKSB7XG4gICAgICBpZiAocCA9PT0gXCJhbGxcIikge1xuICAgICAgICBhY3RpdmUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXEgPSBfd2luLm1hdGNoTWVkaWEoY29uZGl0aW9uc1twXSk7XG5cbiAgICAgICAgaWYgKG1xKSB7XG4gICAgICAgICAgX21lZGlhLmluZGV4T2YoY29udGV4dCkgPCAwICYmIF9tZWRpYS5wdXNoKGNvbnRleHQpO1xuICAgICAgICAgIChjb25kW3BdID0gbXEubWF0Y2hlcykgJiYgKGFjdGl2ZSA9IDEpO1xuICAgICAgICAgIG1xLmFkZExpc3RlbmVyID8gbXEuYWRkTGlzdGVuZXIoX29uTWVkaWFDaGFuZ2UpIDogbXEuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBfb25NZWRpYUNoYW5nZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhY3RpdmUgJiYgZnVuYyhjb250ZXh0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyByZWZyZXNoKCkge1xuICAvLyBcdGxldCB0aW1lID0gX2xhc3RNZWRpYVRpbWUsXG4gIC8vIFx0XHRtZWRpYSA9IF9tZWRpYTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IC0xO1xuICAvLyBcdF9tZWRpYSA9IHRoaXMuY29udGV4dHM7XG4gIC8vIFx0X29uTWVkaWFDaGFuZ2UoKTtcbiAgLy8gXHRfbGFzdE1lZGlhVGltZSA9IHRpbWU7XG4gIC8vIFx0X21lZGlhID0gbWVkaWE7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90bzYucmV2ZXJ0ID0gZnVuY3Rpb24gcmV2ZXJ0KGNvbmZpZykge1xuICAgIHRoaXMua2lsbChjb25maWcgfHwge30pO1xuICB9O1xuXG4gIF9wcm90bzYua2lsbCA9IGZ1bmN0aW9uIGtpbGwocmV2ZXJ0KSB7XG4gICAgdGhpcy5jb250ZXh0cy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gYy5raWxsKHJldmVydCwgdHJ1ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1hdGNoTWVkaWE7XG59KCk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEdTQVBcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX2dzYXAgPSB7XG4gIHJlZ2lzdGVyUGx1Z2luOiBmdW5jdGlvbiByZWdpc3RlclBsdWdpbigpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgcmV0dXJuIF9jcmVhdGVQbHVnaW4oY29uZmlnKTtcbiAgICB9KTtcbiAgfSxcbiAgdGltZWxpbmU6IGZ1bmN0aW9uIHRpbWVsaW5lKHZhcnMpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVsaW5lKHZhcnMpO1xuICB9LFxuICBnZXRUd2VlbnNPZjogZnVuY3Rpb24gZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSk7XG4gIH0sXG4gIGdldFByb3BlcnR5OiBmdW5jdGlvbiBnZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgX2lzU3RyaW5nKHRhcmdldCkgJiYgKHRhcmdldCA9IHRvQXJyYXkodGFyZ2V0KVswXSk7IC8vaW4gY2FzZSBzZWxlY3RvciB0ZXh0IG9yIGFuIGFycmF5IGlzIHBhc3NlZCBpblxuXG4gICAgdmFyIGdldHRlciA9IF9nZXRDYWNoZSh0YXJnZXQgfHwge30pLmdldCxcbiAgICAgICAgZm9ybWF0ID0gdW5pdCA/IF9wYXNzVGhyb3VnaCA6IF9udW1lcmljSWZQb3NzaWJsZTtcblxuICAgIHVuaXQgPT09IFwibmF0aXZlXCIgJiYgKHVuaXQgPSBcIlwiKTtcbiAgICByZXR1cm4gIXRhcmdldCA/IHRhcmdldCA6ICFwcm9wZXJ0eSA/IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICAgICAgcmV0dXJuIGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gICAgfSA6IGZvcm1hdCgoX3BsdWdpbnNbcHJvcGVydHldICYmIF9wbHVnaW5zW3Byb3BlcnR5XS5nZXQgfHwgZ2V0dGVyKSh0YXJnZXQsIHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSk7XG4gIH0sXG4gIHF1aWNrU2V0dGVyOiBmdW5jdGlvbiBxdWlja1NldHRlcih0YXJnZXQsIHByb3BlcnR5LCB1bml0KSB7XG4gICAgdGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpO1xuXG4gICAgaWYgKHRhcmdldC5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgc2V0dGVycyA9IHRhcmdldC5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIGdzYXAucXVpY2tTZXR0ZXIodCwgcHJvcGVydHksIHVuaXQpO1xuICAgICAgfSksXG4gICAgICAgICAgbCA9IHNldHRlcnMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaSA9IGw7XG5cbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIHNldHRlcnNbaV0odmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRhcmdldCA9IHRhcmdldFswXSB8fCB7fTtcblxuICAgIHZhciBQbHVnaW4gPSBfcGx1Z2luc1twcm9wZXJ0eV0sXG4gICAgICAgIGNhY2hlID0gX2dldENhY2hlKHRhcmdldCksXG4gICAgICAgIHAgPSBjYWNoZS5oYXJuZXNzICYmIChjYWNoZS5oYXJuZXNzLmFsaWFzZXMgfHwge30pW3Byb3BlcnR5XSB8fCBwcm9wZXJ0eSxcbiAgICAgICAgLy8gaW4gY2FzZSBpdCdzIGFuIGFsaWFzLCBsaWtlIFwicm90YXRlXCIgZm9yIFwicm90YXRpb25cIi5cbiAgICBzZXR0ZXIgPSBQbHVnaW4gPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBwID0gbmV3IFBsdWdpbigpO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ID0gMDtcbiAgICAgIHAuaW5pdCh0YXJnZXQsIHVuaXQgPyB2YWx1ZSArIHVuaXQgOiB2YWx1ZSwgX3F1aWNrVHdlZW4sIDAsIFt0YXJnZXRdKTtcbiAgICAgIHAucmVuZGVyKDEsIHApO1xuICAgICAgX3F1aWNrVHdlZW4uX3B0ICYmIF9yZW5kZXJQcm9wVHdlZW5zKDEsIF9xdWlja1R3ZWVuKTtcbiAgICB9IDogY2FjaGUuc2V0KHRhcmdldCwgcCk7XG5cbiAgICByZXR1cm4gUGx1Z2luID8gc2V0dGVyIDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gc2V0dGVyKHRhcmdldCwgcCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBjYWNoZSwgMSk7XG4gICAgfTtcbiAgfSxcbiAgcXVpY2tUbzogZnVuY3Rpb24gcXVpY2tUbyh0YXJnZXQsIHByb3BlcnR5LCB2YXJzKSB7XG4gICAgdmFyIF9tZXJnZTI7XG5cbiAgICB2YXIgdHdlZW4gPSBnc2FwLnRvKHRhcmdldCwgX21lcmdlKChfbWVyZ2UyID0ge30sIF9tZXJnZTJbcHJvcGVydHldID0gXCIrPTAuMVwiLCBfbWVyZ2UyLnBhdXNlZCA9IHRydWUsIF9tZXJnZTIpLCB2YXJzIHx8IHt9KSksXG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiBmdW5jKHZhbHVlLCBzdGFydCwgc3RhcnRJc1JlbGF0aXZlKSB7XG4gICAgICByZXR1cm4gdHdlZW4ucmVzZXRUbyhwcm9wZXJ0eSwgdmFsdWUsIHN0YXJ0LCBzdGFydElzUmVsYXRpdmUpO1xuICAgIH07XG5cbiAgICBmdW5jLnR3ZWVuID0gdHdlZW47XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0sXG4gIGlzVHdlZW5pbmc6IGZ1bmN0aW9uIGlzVHdlZW5pbmcodGFyZ2V0cykge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUuZ2V0VHdlZW5zT2YodGFyZ2V0cywgdHJ1ZSkubGVuZ3RoID4gMDtcbiAgfSxcbiAgZGVmYXVsdHM6IGZ1bmN0aW9uIGRlZmF1bHRzKHZhbHVlKSB7XG4gICAgdmFsdWUgJiYgdmFsdWUuZWFzZSAmJiAodmFsdWUuZWFzZSA9IF9wYXJzZUVhc2UodmFsdWUuZWFzZSwgX2RlZmF1bHRzLmVhc2UpKTtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfZGVmYXVsdHMsIHZhbHVlIHx8IHt9KTtcbiAgfSxcbiAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcodmFsdWUpIHtcbiAgICByZXR1cm4gX21lcmdlRGVlcChfY29uZmlnLCB2YWx1ZSB8fCB7fSk7XG4gIH0sXG4gIHJlZ2lzdGVyRWZmZWN0OiBmdW5jdGlvbiByZWdpc3RlckVmZmVjdChfcmVmMykge1xuICAgIHZhciBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0LFxuICAgICAgICBwbHVnaW5zID0gX3JlZjMucGx1Z2lucyxcbiAgICAgICAgZGVmYXVsdHMgPSBfcmVmMy5kZWZhdWx0cyxcbiAgICAgICAgZXh0ZW5kVGltZWxpbmUgPSBfcmVmMy5leHRlbmRUaW1lbGluZTtcbiAgICAocGx1Z2lucyB8fCBcIlwiKS5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luTmFtZSkge1xuICAgICAgcmV0dXJuIHBsdWdpbk5hbWUgJiYgIV9wbHVnaW5zW3BsdWdpbk5hbWVdICYmICFfZ2xvYmFsc1twbHVnaW5OYW1lXSAmJiBfd2FybihuYW1lICsgXCIgZWZmZWN0IHJlcXVpcmVzIFwiICsgcGx1Z2luTmFtZSArIFwiIHBsdWdpbi5cIik7XG4gICAgfSk7XG5cbiAgICBfZWZmZWN0c1tuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCB0bCkge1xuICAgICAgcmV0dXJuIGVmZmVjdCh0b0FycmF5KHRhcmdldHMpLCBfc2V0RGVmYXVsdHModmFycyB8fCB7fSwgZGVmYXVsdHMpLCB0bCk7XG4gICAgfTtcblxuICAgIGlmIChleHRlbmRUaW1lbGluZSkge1xuICAgICAgVGltZWxpbmUucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gKHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChfZWZmZWN0c1tuYW1lXSh0YXJnZXRzLCBfaXNPYmplY3QodmFycykgPyB2YXJzIDogKHBvc2l0aW9uID0gdmFycykgJiYge30sIHRoaXMpLCBwb3NpdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgcmVnaXN0ZXJFYXNlOiBmdW5jdGlvbiByZWdpc3RlckVhc2UobmFtZSwgZWFzZSkge1xuICAgIF9lYXNlTWFwW25hbWVdID0gX3BhcnNlRWFzZShlYXNlKTtcbiAgfSxcbiAgcGFyc2VFYXNlOiBmdW5jdGlvbiBwYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIDogX2Vhc2VNYXA7XG4gIH0sXG4gIGdldEJ5SWQ6IGZ1bmN0aW9uIGdldEJ5SWQoaWQpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldEJ5SWQoaWQpO1xuICB9LFxuICBleHBvcnRSb290OiBmdW5jdGlvbiBleHBvcnRSb290KHZhcnMsIGluY2x1ZGVEZWxheWVkQ2FsbHMpIHtcbiAgICBpZiAodmFycyA9PT0gdm9pZCAwKSB7XG4gICAgICB2YXJzID0ge307XG4gICAgfVxuXG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKHZhcnMpLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dDtcbiAgICB0bC5zbW9vdGhDaGlsZFRpbWluZyA9IF9pc05vdEZhbHNlKHZhcnMuc21vb3RoQ2hpbGRUaW1pbmcpO1xuXG4gICAgX2dsb2JhbFRpbWVsaW5lLnJlbW92ZSh0bCk7XG5cbiAgICB0bC5fZHAgPSAwOyAvL290aGVyd2lzZSBpdCdsbCBnZXQgcmUtYWN0aXZhdGVkIHdoZW4gYWRkaW5nIGNoaWxkcmVuIGFuZCBiZSByZS1pbnRyb2R1Y2VkIGludG8gX2dsb2JhbFRpbWVsaW5lJ3MgbGlua2VkIGxpc3QgKHRoZW4gYWRkZWQgdG8gaXRzZWxmKS5cblxuICAgIHRsLl90aW1lID0gdGwuX3RUaW1lID0gX2dsb2JhbFRpbWVsaW5lLl90aW1lO1xuICAgIGNoaWxkID0gX2dsb2JhbFRpbWVsaW5lLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgbmV4dCA9IGNoaWxkLl9uZXh0O1xuXG4gICAgICBpZiAoaW5jbHVkZURlbGF5ZWRDYWxscyB8fCAhKCFjaGlsZC5fZHVyICYmIGNoaWxkIGluc3RhbmNlb2YgVHdlZW4gJiYgY2hpbGQudmFycy5vbkNvbXBsZXRlID09PSBjaGlsZC5fdGFyZ2V0c1swXSkpIHtcbiAgICAgICAgX2FkZFRvVGltZWxpbmUodGwsIGNoaWxkLCBjaGlsZC5fc3RhcnQgLSBjaGlsZC5fZGVsYXkpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IG5leHQ7XG4gICAgfVxuXG4gICAgX2FkZFRvVGltZWxpbmUoX2dsb2JhbFRpbWVsaW5lLCB0bCwgMCk7XG5cbiAgICByZXR1cm4gdGw7XG4gIH0sXG4gIGNvbnRleHQ6IGZ1bmN0aW9uIGNvbnRleHQoZnVuYywgc2NvcGUpIHtcbiAgICByZXR1cm4gZnVuYyA/IG5ldyBDb250ZXh0KGZ1bmMsIHNjb3BlKSA6IF9jb250ZXh0O1xuICB9LFxuICBtYXRjaE1lZGlhOiBmdW5jdGlvbiBtYXRjaE1lZGlhKHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRjaE1lZGlhKHNjb3BlKTtcbiAgfSxcbiAgbWF0Y2hNZWRpYVJlZnJlc2g6IGZ1bmN0aW9uIG1hdGNoTWVkaWFSZWZyZXNoKCkge1xuICAgIHJldHVybiBfbWVkaWEuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIGNvbmQgPSBjLmNvbmRpdGlvbnMsXG4gICAgICAgICAgZm91bmQsXG4gICAgICAgICAgcDtcblxuICAgICAgZm9yIChwIGluIGNvbmQpIHtcbiAgICAgICAgaWYgKGNvbmRbcF0pIHtcbiAgICAgICAgICBjb25kW3BdID0gZmFsc2U7XG4gICAgICAgICAgZm91bmQgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvdW5kICYmIGMucmV2ZXJ0KCk7XG4gICAgfSkgfHwgX29uTWVkaWFDaGFuZ2UoKTtcbiAgfSxcbiAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSB8fCAoX2xpc3RlbmVyc1t0eXBlXSA9IFtdKTtcbiAgICB+YS5pbmRleE9mKGNhbGxiYWNrKSB8fCBhLnB1c2goY2FsbGJhY2spO1xuICB9LFxuICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdLFxuICAgICAgICBpID0gYSAmJiBhLmluZGV4T2YoY2FsbGJhY2spO1xuICAgIGkgPj0gMCAmJiBhLnNwbGljZShpLCAxKTtcbiAgfSxcbiAgdXRpbHM6IHtcbiAgICB3cmFwOiB3cmFwLFxuICAgIHdyYXBZb3lvOiB3cmFwWW95byxcbiAgICBkaXN0cmlidXRlOiBkaXN0cmlidXRlLFxuICAgIHJhbmRvbTogcmFuZG9tLFxuICAgIHNuYXA6IHNuYXAsXG4gICAgbm9ybWFsaXplOiBub3JtYWxpemUsXG4gICAgZ2V0VW5pdDogZ2V0VW5pdCxcbiAgICBjbGFtcDogY2xhbXAsXG4gICAgc3BsaXRDb2xvcjogc3BsaXRDb2xvcixcbiAgICB0b0FycmF5OiB0b0FycmF5LFxuICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICBtYXBSYW5nZTogbWFwUmFuZ2UsXG4gICAgcGlwZTogcGlwZSxcbiAgICB1bml0aXplOiB1bml0aXplLFxuICAgIGludGVycG9sYXRlOiBpbnRlcnBvbGF0ZSxcbiAgICBzaHVmZmxlOiBzaHVmZmxlXG4gIH0sXG4gIGluc3RhbGw6IF9pbnN0YWxsLFxuICBlZmZlY3RzOiBfZWZmZWN0cyxcbiAgdGlja2VyOiBfdGlja2VyLFxuICB1cGRhdGVSb290OiBUaW1lbGluZS51cGRhdGVSb290LFxuICBwbHVnaW5zOiBfcGx1Z2lucyxcbiAgZ2xvYmFsVGltZWxpbmU6IF9nbG9iYWxUaW1lbGluZSxcbiAgY29yZToge1xuICAgIFByb3BUd2VlbjogUHJvcFR3ZWVuLFxuICAgIGdsb2JhbHM6IF9hZGRHbG9iYWwsXG4gICAgVHdlZW46IFR3ZWVuLFxuICAgIFRpbWVsaW5lOiBUaW1lbGluZSxcbiAgICBBbmltYXRpb246IEFuaW1hdGlvbixcbiAgICBnZXRDYWNoZTogX2dldENhY2hlLFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbTogX3JlbW92ZUxpbmtlZExpc3RJdGVtLFxuICAgIHJldmVydGluZzogZnVuY3Rpb24gcmV2ZXJ0aW5nKCkge1xuICAgICAgcmV0dXJuIF9yZXZlcnRpbmc7XG4gICAgfSxcbiAgICBjb250ZXh0OiBmdW5jdGlvbiBjb250ZXh0KHRvQWRkKSB7XG4gICAgICBpZiAodG9BZGQgJiYgX2NvbnRleHQpIHtcbiAgICAgICAgX2NvbnRleHQuZGF0YS5wdXNoKHRvQWRkKTtcblxuICAgICAgICB0b0FkZC5fY3R4ID0gX2NvbnRleHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfY29udGV4dDtcbiAgICB9LFxuICAgIHN1cHByZXNzT3ZlcndyaXRlczogZnVuY3Rpb24gc3VwcHJlc3NPdmVyd3JpdGVzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3N1cHByZXNzT3ZlcndyaXRlcyA9IHZhbHVlO1xuICAgIH1cbiAgfVxufTtcblxuX2ZvckVhY2hOYW1lKFwidG8sZnJvbSxmcm9tVG8sZGVsYXllZENhbGwsc2V0LGtpbGxUd2VlbnNPZlwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2dzYXBbbmFtZV0gPSBUd2VlbltuYW1lXTtcbn0pO1xuXG5fdGlja2VyLmFkZChUaW1lbGluZS51cGRhdGVSb290KTtcblxuX3F1aWNrVHdlZW4gPSBfZ3NhcC50byh7fSwge1xuICBkdXJhdGlvbjogMFxufSk7IC8vIC0tLS0gRVhUUkEgUExVR0lOUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgX2dldFBsdWdpblByb3BUd2VlbiA9IGZ1bmN0aW9uIF9nZXRQbHVnaW5Qcm9wVHdlZW4ocGx1Z2luLCBwcm9wKSB7XG4gIHZhciBwdCA9IHBsdWdpbi5fcHQ7XG5cbiAgd2hpbGUgKHB0ICYmIHB0LnAgIT09IHByb3AgJiYgcHQub3AgIT09IHByb3AgJiYgcHQuZnAgIT09IHByb3ApIHtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYWRkTW9kaWZpZXJzID0gZnVuY3Rpb24gX2FkZE1vZGlmaWVycyh0d2VlbiwgbW9kaWZpZXJzKSB7XG4gIHZhciB0YXJnZXRzID0gdHdlZW4uX3RhcmdldHMsXG4gICAgICBwLFxuICAgICAgaSxcbiAgICAgIHB0O1xuXG4gIGZvciAocCBpbiBtb2RpZmllcnMpIHtcbiAgICBpID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBwdCA9IHR3ZWVuLl9wdExvb2t1cFtpXVtwXTtcblxuICAgICAgaWYgKHB0ICYmIChwdCA9IHB0LmQpKSB7XG4gICAgICAgIGlmIChwdC5fcHQpIHtcbiAgICAgICAgICAvLyBpcyBhIHBsdWdpblxuICAgICAgICAgIHB0ID0gX2dldFBsdWdpblByb3BUd2VlbihwdCwgcCk7XG4gICAgICAgIH1cblxuICAgICAgICBwdCAmJiBwdC5tb2RpZmllciAmJiBwdC5tb2RpZmllcihtb2RpZmllcnNbcF0sIHR3ZWVuLCB0YXJnZXRzW2ldLCBwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgX2J1aWxkTW9kaWZpZXJQbHVnaW4gPSBmdW5jdGlvbiBfYnVpbGRNb2RpZmllclBsdWdpbihuYW1lLCBtb2RpZmllcikge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgcmF3VmFyczogMSxcbiAgICAvL2Rvbid0IHByZS1wcm9jZXNzIGZ1bmN0aW9uLWJhc2VkIHZhbHVlcyBvciBcInJhbmRvbSgpXCIgc3RyaW5ncy5cbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4pIHtcbiAgICAgIHR3ZWVuLl9vbkluaXQgPSBmdW5jdGlvbiAodHdlZW4pIHtcbiAgICAgICAgdmFyIHRlbXAsIHA7XG5cbiAgICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIF9mb3JFYWNoTmFtZSh2YXJzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBbbmFtZV0gPSAxO1xuICAgICAgICAgIH0pOyAvL2lmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzIHRvIHJvdW5kUHJvcHMsIGxpa2UgXCJ4LHlcIiwgd2Ugcm91bmQgdG8gd2hvbGUgbnVtYmVycy5cblxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kaWZpZXIpIHtcbiAgICAgICAgICB0ZW1wID0ge307XG5cbiAgICAgICAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgICAgICAgdGVtcFtwXSA9IG1vZGlmaWVyKHZhcnNbcF0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhcnMgPSB0ZW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgX2FkZE1vZGlmaWVycyh0d2VlbiwgdmFycyk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07IC8vcmVnaXN0ZXIgY29yZSBwbHVnaW5zXG5cblxuZXhwb3J0IHZhciBnc2FwID0gX2dzYXAucmVnaXN0ZXJQbHVnaW4oe1xuICBuYW1lOiBcImF0dHJcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0cykge1xuICAgIHZhciBwLCBwdCwgdjtcbiAgICB0aGlzLnR3ZWVuID0gdHdlZW47XG5cbiAgICBmb3IgKHAgaW4gdmFycykge1xuICAgICAgdiA9IHRhcmdldC5nZXRBdHRyaWJ1dGUocCkgfHwgXCJcIjtcbiAgICAgIHB0ID0gdGhpcy5hZGQodGFyZ2V0LCBcInNldEF0dHJpYnV0ZVwiLCAodiB8fCAwKSArIFwiXCIsIHZhcnNbcF0sIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgIHB0Lm9wID0gcDtcbiAgICAgIHB0LmIgPSB2OyAvLyByZWNvcmQgdGhlIGJlZ2lubmluZyB2YWx1ZSBzbyB3ZSBjYW4gcmV2ZXJ0KClcblxuICAgICAgdGhpcy5fcHJvcHMucHVzaChwKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJhdGlvLCBkYXRhKSB7XG4gICAgdmFyIHB0ID0gZGF0YS5fcHQ7XG5cbiAgICB3aGlsZSAocHQpIHtcbiAgICAgIF9yZXZlcnRpbmcgPyBwdC5zZXQocHQudCwgcHQucCwgcHQuYiwgcHQpIDogcHQucihyYXRpbywgcHQuZCk7IC8vIGlmIHJldmVydGluZywgZ28gYmFjayB0byB0aGUgb3JpZ2luYWwgKHB0LmIpXG5cbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuICB9XG59LCB7XG4gIG5hbWU6IFwiZW5kQXJyYXlcIixcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0YXJnZXQsIHZhbHVlKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmFkZCh0YXJnZXQsIGksIHRhcmdldFtpXSB8fCAwLCB2YWx1ZVtpXSwgMCwgMCwgMCwgMCwgMCwgMSk7XG4gICAgfVxuICB9XG59LCBfYnVpbGRNb2RpZmllclBsdWdpbihcInJvdW5kUHJvcHNcIiwgX3JvdW5kTW9kaWZpZXIpLCBfYnVpbGRNb2RpZmllclBsdWdpbihcIm1vZGlmaWVyc1wiKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJzbmFwXCIsIHNuYXApKSB8fCBfZ3NhcDsgLy90byBwcmV2ZW50IHRoZSBjb3JlIHBsdWdpbnMgZnJvbSBiZWluZyBkcm9wcGVkIHZpYSBhZ2dyZXNzaXZlIHRyZWUgc2hha2luZywgd2UgbXVzdCBpbmNsdWRlIHRoZW0gaW4gdGhlIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGluIHRoaXMgd2F5LlxuXG5Ud2Vlbi52ZXJzaW9uID0gVGltZWxpbmUudmVyc2lvbiA9IGdzYXAudmVyc2lvbiA9IFwiMy4xMS4wXCI7XG5fY29yZVJlYWR5ID0gMTtcbl93aW5kb3dFeGlzdHMoKSAmJiBfd2FrZSgpO1xudmFyIFBvd2VyMCA9IF9lYXNlTWFwLlBvd2VyMCxcbiAgICBQb3dlcjEgPSBfZWFzZU1hcC5Qb3dlcjEsXG4gICAgUG93ZXIyID0gX2Vhc2VNYXAuUG93ZXIyLFxuICAgIFBvd2VyMyA9IF9lYXNlTWFwLlBvd2VyMyxcbiAgICBQb3dlcjQgPSBfZWFzZU1hcC5Qb3dlcjQsXG4gICAgTGluZWFyID0gX2Vhc2VNYXAuTGluZWFyLFxuICAgIFF1YWQgPSBfZWFzZU1hcC5RdWFkLFxuICAgIEN1YmljID0gX2Vhc2VNYXAuQ3ViaWMsXG4gICAgUXVhcnQgPSBfZWFzZU1hcC5RdWFydCxcbiAgICBRdWludCA9IF9lYXNlTWFwLlF1aW50LFxuICAgIFN0cm9uZyA9IF9lYXNlTWFwLlN0cm9uZyxcbiAgICBFbGFzdGljID0gX2Vhc2VNYXAuRWxhc3RpYyxcbiAgICBCYWNrID0gX2Vhc2VNYXAuQmFjayxcbiAgICBTdGVwcGVkRWFzZSA9IF9lYXNlTWFwLlN0ZXBwZWRFYXNlLFxuICAgIEJvdW5jZSA9IF9lYXNlTWFwLkJvdW5jZSxcbiAgICBTaW5lID0gX2Vhc2VNYXAuU2luZSxcbiAgICBFeHBvID0gX2Vhc2VNYXAuRXhwbyxcbiAgICBDaXJjID0gX2Vhc2VNYXAuQ2lyYztcbmV4cG9ydCB7IFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9O1xuZXhwb3J0IHsgVHdlZW4gYXMgVHdlZW5NYXgsIFR3ZWVuIGFzIFR3ZWVuTGl0ZSwgVGltZWxpbmUgYXMgVGltZWxpbmVNYXgsIFRpbWVsaW5lIGFzIFRpbWVsaW5lTGl0ZSwgZ3NhcCBhcyBkZWZhdWx0LCB3cmFwLCB3cmFwWW95bywgZGlzdHJpYnV0ZSwgcmFuZG9tLCBzbmFwLCBub3JtYWxpemUsIGdldFVuaXQsIGNsYW1wLCBzcGxpdENvbG9yLCB0b0FycmF5LCBzZWxlY3RvciwgbWFwUmFuZ2UsIHBpcGUsIHVuaXRpemUsIGludGVycG9sYXRlLCBzaHVmZmxlIH07IC8vZXhwb3J0IHNvbWUgaW50ZXJuYWwgbWV0aG9kcy9vcm9qZWN0cyBmb3IgdXNlIGluIENTU1BsdWdpbiBzbyB0aGF0IHdlIGNhbiBleHRlcm5hbGl6ZSB0aGF0IGZpbGUgYW5kIGFsbG93IGN1c3RvbSBidWlsZHMgdGhhdCBleGNsdWRlIGl0LlxuXG5leHBvcnQgeyBfZ2V0UHJvcGVydHksIF9udW1FeHAsIF9udW1XaXRoVW5pdEV4cCwgX2lzU3RyaW5nLCBfaXNVbmRlZmluZWQsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBfcmVsRXhwLCBfc2V0RGVmYXVsdHMsIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9yZXBsYWNlUmFuZG9tLCBfY2hlY2tQbHVnaW4sIF9wbHVnaW5zLCBfdGlja2VyLCBfY29uZmlnLCBfcm91bmRNb2RpZmllciwgX3JvdW5kLCBfbWlzc2luZ1BsdWdpbiwgX2dldFNldHRlciwgX2dldENhY2hlLCBfY29sb3JFeHAsIF9wYXJzZVJlbGF0aXZlIH07IiwiaW1wb3J0IHsgZ3NhcCwgUG93ZXIwLCBQb3dlcjEsIFBvd2VyMiwgUG93ZXIzLCBQb3dlcjQsIExpbmVhciwgUXVhZCwgQ3ViaWMsIFF1YXJ0LCBRdWludCwgU3Ryb25nLCBFbGFzdGljLCBCYWNrLCBTdGVwcGVkRWFzZSwgQm91bmNlLCBTaW5lLCBFeHBvLCBDaXJjLCBUd2VlbkxpdGUsIFRpbWVsaW5lTGl0ZSwgVGltZWxpbmVNYXggfSBmcm9tIFwiLi9nc2FwLWNvcmUuanNcIjtcbmltcG9ydCB7IENTU1BsdWdpbiB9IGZyb20gXCIuL0NTU1BsdWdpbi5qc1wiO1xudmFyIGdzYXBXaXRoQ1NTID0gZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pIHx8IGdzYXAsXG4gICAgLy8gdG8gcHJvdGVjdCBmcm9tIHRyZWUgc2hha2luZ1xuVHdlZW5NYXhXaXRoQ1NTID0gZ3NhcFdpdGhDU1MuY29yZS5Ud2VlbjtcbmV4cG9ydCB7IGdzYXBXaXRoQ1NTIGFzIGdzYXAsIGdzYXBXaXRoQ1NTIGFzIGRlZmF1bHQsIENTU1BsdWdpbiwgVHdlZW5NYXhXaXRoQ1NTIGFzIFR3ZWVuTWF4LCBUd2VlbkxpdGUsIFRpbWVsaW5lTWF4LCBUaW1lbGluZUxpdGUsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9OyIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVZpZXc7XG4iLCJ2YXIgaGFzaENsZWFyID0gcmVxdWlyZSgnLi9faGFzaENsZWFyJyksXG4gICAgaGFzaERlbGV0ZSA9IHJlcXVpcmUoJy4vX2hhc2hEZWxldGUnKSxcbiAgICBoYXNoR2V0ID0gcmVxdWlyZSgnLi9faGFzaEdldCcpLFxuICAgIGhhc2hIYXMgPSByZXF1aXJlKCcuL19oYXNoSGFzJyksXG4gICAgaGFzaFNldCA9IHJlcXVpcmUoJy4vX2hhc2hTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaDtcbiIsInZhciBsaXN0Q2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUNsZWFyJyksXG4gICAgbGlzdENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlRGVsZXRlJyksXG4gICAgbGlzdENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlR2V0JyksXG4gICAgbGlzdENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlSGFzJyksXG4gICAgbGlzdENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q2FjaGU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuIiwidmFyIG1hcENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19tYXBDYWNoZUNsZWFyJyksXG4gICAgbWFwQ2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19tYXBDYWNoZURlbGV0ZScpLFxuICAgIG1hcENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVHZXQnKSxcbiAgICBtYXBDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX21hcENhY2hlSGFzJyksXG4gICAgbWFwQ2FjaGVTZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0O1xuIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKSxcbiAgICBzZXRDYWNoZUFkZCA9IHJlcXVpcmUoJy4vX3NldENhY2hlQWRkJyksXG4gICAgc2V0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19zZXRDYWNoZUhhcycpO1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0Q2FjaGU7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgc3RhY2tDbGVhciA9IHJlcXVpcmUoJy4vX3N0YWNrQ2xlYXInKSxcbiAgICBzdGFja0RlbGV0ZSA9IHJlcXVpcmUoJy4vX3N0YWNrRGVsZXRlJyksXG4gICAgc3RhY2tHZXQgPSByZXF1aXJlKCcuL19zdGFja0dldCcpLFxuICAgIHN0YWNrSGFzID0gcmVxdWlyZSgnLi9fc3RhY2tIYXMnKSxcbiAgICBzdGFja1NldCA9IHJlcXVpcmUoJy4vX3N0YWNrU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGFjaztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBVaW50OEFycmF5O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2Vha01hcDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUVhY2g7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlGaWx0ZXI7XG4iLCJ2YXIgYmFzZVRpbWVzID0gcmVxdWlyZSgnLi9fYmFzZVRpbWVzJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TGlrZUtleXM7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TWFwO1xuIiwiLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5UHVzaDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlTb21lO1xuIiwidmFyIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc29jSW5kZXhPZjtcbiIsInZhciBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpLFxuICAgIGNyZWF0ZUJhc2VFYWNoID0gcmVxdWlyZSgnLi9fY3JlYXRlQmFzZUVhY2gnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqL1xudmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUVhY2g7XG4iLCJ2YXIgY3JlYXRlQmFzZUZvciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUJhc2VGb3InKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbnZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGb3I7XG4iLCJ2YXIgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yT3duO1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAwLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgfVxuICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldDtcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0QWxsS2V5cztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSGFzSW47XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0FyZ3VtZW50cztcbiIsInZhciBiYXNlSXNFcXVhbERlZXAgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbERlZXAnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgfVxuICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbDtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIGVxdWFsQnlUYWcgPSByZXF1aXJlKCcuL19lcXVhbEJ5VGFnJyksXG4gICAgZXF1YWxPYmplY3RzID0gcmVxdWlyZSgnLi9fZXF1YWxPYmplY3RzJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgfVxuICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICB9XG4gIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgfVxuICBpZiAoIWlzU2FtZVRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsRGVlcDtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiAhbGVuZ3RoO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNNYXRjaDtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNNYXNrZWQgPSByZXF1aXJlKCcuL19pc01hc2tlZCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYXRpdmU7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcbiIsInZhciBiYXNlTWF0Y2hlcyA9IHJlcXVpcmUoJy4vX2Jhc2VNYXRjaGVzJyksXG4gICAgYmFzZU1hdGNoZXNQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VNYXRjaGVzUHJvcGVydHknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgcHJvcGVydHkgPSByZXF1aXJlKCcuL3Byb3BlcnR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gaWRlbnRpdHk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICB9XG4gIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUl0ZXJhdGVlO1xuIiwidmFyIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5cycpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXM7XG4iLCJ2YXIgYmFzZUVhY2ggPSByZXF1aXJlKCcuL19iYXNlRWFjaCcpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXA7XG4iLCJ2YXIgYmFzZUlzTWF0Y2ggPSByZXF1aXJlKCcuL19iYXNlSXNNYXRjaCcpLFxuICAgIGdldE1hdGNoRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hdGNoRGF0YScpLFxuICAgIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hdGNoZXM7XG4iLCJ2YXIgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpLFxuICAgIGdldCA9IHJlcXVpcmUoJy4vZ2V0JyksXG4gICAgaGFzSW4gPSByZXF1aXJlKCcuL2hhc0luJyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIGlzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX2lzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlc1Byb3BlcnR5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHk7XG4iLCJ2YXIgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5RGVlcDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRpbWVzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRvU3RyaW5nO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VVbmFyeTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhY2hlSGFzO1xuIiwidmFyIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhc3RGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RGdW5jdGlvbjtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHN0cmluZ1RvUGF0aCA9IHJlcXVpcmUoJy4vX3N0cmluZ1RvUGF0aCcpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RQYXRoO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZUpzRGF0YTtcbiIsInZhciBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgIH1cbiAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVCYXNlRWFjaDtcbiIsIi8qKlxuICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJhc2VGb3I7XG4iLCJ2YXIgU2V0Q2FjaGUgPSByZXF1aXJlKCcuL19TZXRDYWNoZScpLFxuICAgIGFycmF5U29tZSA9IHJlcXVpcmUoJy4vX2FycmF5U29tZScpLFxuICAgIGNhY2hlSGFzID0gcmVxdWlyZSgnLi9fY2FjaGVIYXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgYXJyU3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgaWYgKGFyclN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgIHJldHVybiBhcnJTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gYXJyYXk7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQXJyYXlzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5JyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIG1hcFRvQXJyYXkgPSByZXF1aXJlKCcuL19tYXBUb0FycmF5JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEJ5VGFnO1xuIiwidmFyIGdldEFsbEtleXMgPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBvYmpTdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgaWYgKG9ialN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgIHJldHVybiBvYmpTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gb2JqZWN0O1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsT2JqZWN0cztcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsInZhciBiYXNlR2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRBbGxLZXlzJyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWxsS2V5cztcbiIsInZhciBpc0tleWFibGUgPSByZXF1aXJlKCcuL19pc0tleWFibGUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcERhdGE7XG4iLCJ2YXIgaXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9faXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXRjaERhdGE7XG4iLCJ2YXIgYmFzZUlzTmF0aXZlID0gcmVxdWlyZSgnLi9fYmFzZUlzTmF0aXZlJyksXG4gICAgZ2V0VmFsdWUgPSByZXF1aXJlKCcuL19nZXRWYWx1ZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5hdGl2ZTtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiIsInZhciBhcnJheUZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5RmlsdGVyJyksXG4gICAgc3R1YkFycmF5ID0gcmVxdWlyZSgnLi9zdHViQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN5bWJvbHM7XG4iLCJ2YXIgRGF0YVZpZXcgPSByZXF1aXJlKCcuL19EYXRhVmlldycpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIFByb21pc2UgPSByZXF1aXJlKCcuL19Qcm9taXNlJyksXG4gICAgU2V0ID0gcmVxdWlyZSgnLi9fU2V0JyksXG4gICAgV2Vha01hcCA9IHJlcXVpcmUoJy4vX1dlYWtNYXAnKSxcbiAgICBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUYWc7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRWYWx1ZTtcbiIsInZhciBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICB9XG4gIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNQYXRoO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hEZWxldGU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoR2V0O1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFNldDtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0luZGV4O1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5YWJsZTtcbiIsInZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpY3RDb21wYXJhYmxlO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUNsZWFyO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlRGVsZXRlO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUdldDtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlSGFzO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlU2V0O1xuIiwidmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUNsZWFyO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlRGVsZXRlO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUdldDtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlSGFzO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZVNldDtcbiIsIi8qKlxuICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwVG9BcnJheTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZTtcbiIsInZhciBtZW1vaXplID0gcmVxdWlyZSgnLi9tZW1vaXplJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbnZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH0pO1xuXG4gIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplQ2FwcGVkO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUNyZWF0ZTtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5cztcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vZGVVdGlsO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyQXJnO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwiLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVBZGQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVIYXM7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvQXJyYXk7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0RlbGV0ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0dldDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tIYXM7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja1NldDtcbiIsInZhciBtZW1vaXplQ2FwcGVkID0gcmVxdWlyZSgnLi9fbWVtb2l6ZUNhcHBlZCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nVG9QYXRoO1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0tleTtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1NvdXJjZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mb3JFYWNoJyk7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcTtcbiIsInZhciBhcnJheUVhY2ggPSByZXF1aXJlKCcuL19hcnJheUVhY2gnKSxcbiAgICBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgY2FzdEZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fY2FzdEZ1bmN0aW9uJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAqIHByb3BlcnR5IGFyZSBpdGVyYXRlZCBsaWtlIGFycmF5cy4gVG8gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2UgYF8uZm9ySW5gXG4gKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBhbGlhcyBlYWNoXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAqIEBleGFtcGxlXG4gKlxuICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICogfSk7XG4gKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAqXG4gKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICovXG5mdW5jdGlvbiBmb3JFYWNoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBjYXN0RnVuY3Rpb24oaXRlcmF0ZWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JFYWNoO1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy43LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICogLy8gPT4gJ2RlZmF1bHQnXG4gKi9cbmZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXQ7XG4iLCJ2YXIgYmFzZUhhc0luID0gcmVxdWlyZSgnLi9fYmFzZUhhc0luJyksXG4gICAgaGFzUGF0aCA9IHJlcXVpcmUoJy4vX2hhc1BhdGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc0luO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpZGVudGl0eTtcbiIsInZhciBiYXNlSXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL19iYXNlSXNBcmd1bWVudHMnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FyZ3VtZW50cztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXk7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZTtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpLFxuICAgIHN0dWJGYWxzZSA9IHJlcXVpcmUoJy4vc3R1YkZhbHNlJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZmZlcjtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiIsInZhciBiYXNlSXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9fYmFzZUlzVHlwZWRBcnJheScpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUeXBlZEFycmF5O1xuIiwidmFyIGFycmF5TGlrZUtleXMgPSByZXF1aXJlKCcuL19hcnJheUxpa2VLZXlzJyksXG4gICAgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzO1xuIiwidmFyIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBiYXNlTWFwID0gcmVxdWlyZSgnLi9fYmFzZU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydVxuICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKlxuICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAqXG4gKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gKiBgZmlsbGAsIGBpbnZlcnRgLCBgcGFyc2VJbnRgLCBgcmFuZG9tYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVwZWF0YCxcbiAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gKiAgIHJldHVybiBuICogbjtcbiAqIH1cbiAqXG4gKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gKiAvLyA9PiBbMTYsIDY0XVxuICpcbiAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAqIC8vID0+IFsxNiwgNjRdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2Jhcm5leScgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gKiBdO1xuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAqL1xuZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5TWFwIDogYmFzZU1hcDtcbiAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgYmFzZUl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwO1xuIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKlxuICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gKlxuICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIHZhbHVlcyhvdGhlcik7XG4gKiAvLyA9PiBbMywgNF1cbiAqXG4gKiBvYmplY3QuYSA9IDI7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddXG4gKlxuICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxubWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemU7XG4iLCJ2YXIgYmFzZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5JyksXG4gICAgYmFzZVByb3BlcnR5RGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eURlZXAnKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFtcbiAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICogXTtcbiAqXG4gKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqXG4gKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICogLy8gPT4gWzEsIDJdXG4gKi9cbmZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvcGVydHk7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJBcnJheTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG4iLCJ2YXIgYmFzZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVRvU3RyaW5nJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1N0cmluZztcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zcmMvbm9ybWFsaXplV2hlZWwuanMnKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV4ZWN1dGlvbkVudmlyb25tZW50XG4gKi9cblxuLypqc2xpbnQgZXZpbDogdHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhIShcbiAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgd2luZG93LmRvY3VtZW50ICYmXG4gIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50XG4pO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6XG4gICAgY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMDQtcHJlc2VudCBGYWNlYm9vay4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgVXNlckFnZW50X0RFUFJFQ0FURURcbiAqL1xuXG4vKipcbiAqICBQcm92aWRlcyBlbnRpcmVseSBjbGllbnQtc2lkZSBVc2VyIEFnZW50IGFuZCBPUyBkZXRlY3Rpb24uIFlvdSBzaG91bGQgcHJlZmVyXG4gKiAgdGhlIG5vbi1kZXByZWNhdGVkIFVzZXJBZ2VudCBtb2R1bGUgd2hlbiBwb3NzaWJsZSwgd2hpY2ggZXhwb3NlcyBvdXJcbiAqICBhdXRob3JpdGF0aXZlIHNlcnZlci1zaWRlIFBIUC1iYXNlZCBkZXRlY3Rpb24gdG8gdGhlIGNsaWVudC5cbiAqXG4gKiAgVXNhZ2UgaXMgc3RyYWlnaHRmb3J3YXJkOlxuICpcbiAqICAgIGlmIChVc2VyQWdlbnRfREVQUkVDQVRFRC5pZSgpKSB7XG4gKiAgICAgIC8vICBJRVxuICogICAgfVxuICpcbiAqICBZb3UgY2FuIGFsc28gZG8gdmVyc2lvbiBjaGVja3M6XG4gKlxuICogICAgaWYgKFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkgPj0gNykge1xuICogICAgICAvLyAgSUU3IG9yIGJldHRlclxuICogICAgfVxuICpcbiAqICBUaGUgYnJvd3NlciBmdW5jdGlvbnMgd2lsbCByZXR1cm4gTmFOIGlmIHRoZSBicm93c2VyIGRvZXMgbm90IG1hdGNoLCBzb1xuICogIHlvdSBjYW4gYWxzbyBkbyB2ZXJzaW9uIGNvbXBhcmVzIHRoZSBvdGhlciB3YXk6XG4gKlxuICogICAgaWYgKFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkgPCA3KSB7XG4gKiAgICAgIC8vICBJRTYgb3Igd29yc2VcbiAqICAgIH1cbiAqXG4gKiAgTm90ZSB0aGF0IHRoZSB2ZXJzaW9uIGlzIGEgZmxvYXQgYW5kIG1heSBpbmNsdWRlIGEgbWlub3IgdmVyc2lvbiBudW1iZXIsXG4gKiAgc28geW91IHNob3VsZCBhbHdheXMgdXNlIHJhbmdlIG9wZXJhdG9ycyB0byBwZXJmb3JtIGNvbXBhcmlzb25zLCBub3RcbiAqICBzdHJpY3QgZXF1YWxpdHkuXG4gKlxuICogICoqTm90ZToqKiBZb3Ugc2hvdWxkICoqc3Ryb25nbHkqKiBwcmVmZXIgY2FwYWJpbGl0eSBkZXRlY3Rpb24gdG8gYnJvd3NlclxuICogIHZlcnNpb24gZGV0ZWN0aW9uIHdoZXJlIGl0J3MgcmVhc29uYWJsZTpcbiAqXG4gKiAgICBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL3N1cHBvcnQuaHRtbFxuICpcbiAqICBGdXJ0aGVyLCB3ZSBoYXZlIGEgbGFyZ2UgbnVtYmVyIG9mIG1hdHVyZSB3cmFwcGVyIGZ1bmN0aW9ucyBhbmQgY2xhc3Nlc1xuICogIHdoaWNoIGFic3RyYWN0IGF3YXkgbWFueSBicm93c2VyIGlycmVndWxhcml0aWVzLiBDaGVjayB0aGUgZG9jdW1lbnRhdGlvbixcbiAqICBncmVwIGZvciB0aGluZ3MsIG9yIGFzayBvbiBqYXZhc2NyaXB0QGxpc3RzLmZhY2Vib29rLmNvbSBiZWZvcmUgd3JpdGluZyB5ZXRcbiAqICBhbm90aGVyIGNvcHkgb2YgXCJldmVudCB8fCB3aW5kb3cuZXZlbnRcIi5cbiAqXG4gKi9cblxudmFyIF9wb3B1bGF0ZWQgPSBmYWxzZTtcblxuLy8gQnJvd3NlcnNcbnZhciBfaWUsIF9maXJlZm94LCBfb3BlcmEsIF93ZWJraXQsIF9jaHJvbWU7XG5cbi8vIEFjdHVhbCBJRSBicm93c2VyIGZvciBjb21wYXRpYmlsaXR5IG1vZGVcbnZhciBfaWVfcmVhbF92ZXJzaW9uO1xuXG4vLyBQbGF0Zm9ybXNcbnZhciBfb3N4LCBfd2luZG93cywgX2xpbnV4LCBfYW5kcm9pZDtcblxuLy8gQXJjaGl0ZWN0dXJlc1xudmFyIF93aW42NDtcblxuLy8gRGV2aWNlc1xudmFyIF9pcGhvbmUsIF9pcGFkLCBfbmF0aXZlO1xuXG52YXIgX21vYmlsZTtcblxuZnVuY3Rpb24gX3BvcHVsYXRlKCkge1xuICBpZiAoX3BvcHVsYXRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIF9wb3B1bGF0ZWQgPSB0cnVlO1xuXG4gIC8vIFRvIHdvcmsgYXJvdW5kIGJ1Z2d5IEpTIGxpYnJhcmllcyB0aGF0IGNhbid0IGhhbmRsZSBtdWx0aS1kaWdpdFxuICAvLyB2ZXJzaW9uIG51bWJlcnMsIE9wZXJhIDEwJ3MgdXNlciBhZ2VudCBzdHJpbmcgY2xhaW1zIGl0J3MgT3BlcmFcbiAgLy8gOSwgdGhlbiBsYXRlciBpbmNsdWRlcyBhIFZlcnNpb24vWC5ZIGZpZWxkOlxuICAvL1xuICAvLyBPcGVyYS85LjgwIChmb28pIFByZXN0by8yLjIuMTUgVmVyc2lvbi8xMC4xMFxuICB2YXIgdWFzID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgdmFyIGFnZW50ID0gLyg/Ok1TSUUuKFxcZCtcXC5cXGQrKSl8KD86KD86RmlyZWZveHxHcmFuUGFyYWRpc298SWNld2Vhc2VsKS4oXFxkK1xcLlxcZCspKXwoPzpPcGVyYSg/Oi4rVmVyc2lvbi58LikoXFxkK1xcLlxcZCspKXwoPzpBcHBsZVdlYktpdC4oXFxkKyg/OlxcLlxcZCspPykpfCg/OlRyaWRlbnRcXC9cXGQrXFwuXFxkKy4qcnY6KFxcZCtcXC5cXGQrKSkvLmV4ZWModWFzKTtcbiAgdmFyIG9zICAgID0gLyhNYWMgT1MgWCl8KFdpbmRvd3MpfChMaW51eCkvLmV4ZWModWFzKTtcblxuICBfaXBob25lID0gL1xcYihpUGhvbmV8aVBbYW9dZCkvLmV4ZWModWFzKTtcbiAgX2lwYWQgPSAvXFxiKGlQW2FvXWQpLy5leGVjKHVhcyk7XG4gIF9hbmRyb2lkID0gL0FuZHJvaWQvaS5leGVjKHVhcyk7XG4gIF9uYXRpdmUgPSAvRkJBTlxcL1xcdys7L2kuZXhlYyh1YXMpO1xuICBfbW9iaWxlID0gL01vYmlsZS9pLmV4ZWModWFzKTtcblxuICAvLyBOb3RlIHRoYXQgdGhlIElFIHRlYW0gYmxvZyB3b3VsZCBoYXZlIHlvdSBiZWxpZXZlIHlvdSBzaG91bGQgYmUgY2hlY2tpbmdcbiAgLy8gZm9yICdXaW42NDsgeDY0Jy4gIEJ1dCBNU0ROIHRoZW4gcmV2ZWFscyB0aGF0IHlvdSBjYW4gYWN0dWFsbHkgYmUgY29taW5nXG4gIC8vIGZyb20gZWl0aGVyIHg2NCBvciBpYTY0OyAgc28gdWx0aW1hdGVseSwgeW91IHNob3VsZCBqdXN0IGNoZWNrIGZvciBXaW42NFxuICAvLyBhcyBpbiBpbmRpY2F0b3Igb2Ygd2hldGhlciB5b3UncmUgaW4gNjQtYml0IElFLiAgMzItYml0IElFIG9uIDY0LWJpdFxuICAvLyBXaW5kb3dzIHdpbGwgc2VuZCAnV09XNjQnIGluc3RlYWQuXG4gIF93aW42NCA9ICEhKC9XaW42NC8uZXhlYyh1YXMpKTtcblxuICBpZiAoYWdlbnQpIHtcbiAgICBfaWUgPSBhZ2VudFsxXSA/IHBhcnNlRmxvYXQoYWdlbnRbMV0pIDogKFxuICAgICAgICAgIGFnZW50WzVdID8gcGFyc2VGbG9hdChhZ2VudFs1XSkgOiBOYU4pO1xuICAgIC8vIElFIGNvbXBhdGliaWxpdHkgbW9kZVxuICAgIGlmIChfaWUgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSB7XG4gICAgICBfaWUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG4gICAgfVxuICAgIC8vIGdyYWIgdGhlIFwidHJ1ZVwiIGllIHZlcnNpb24gZnJvbSB0aGUgdHJpZGVudCB0b2tlbiBpZiBhdmFpbGFibGVcbiAgICB2YXIgdHJpZGVudCA9IC8oPzpUcmlkZW50XFwvKFxcZCsuXFxkKykpLy5leGVjKHVhcyk7XG4gICAgX2llX3JlYWxfdmVyc2lvbiA9IHRyaWRlbnQgPyBwYXJzZUZsb2F0KHRyaWRlbnRbMV0pICsgNCA6IF9pZTtcblxuICAgIF9maXJlZm94ID0gYWdlbnRbMl0gPyBwYXJzZUZsb2F0KGFnZW50WzJdKSA6IE5hTjtcbiAgICBfb3BlcmEgICA9IGFnZW50WzNdID8gcGFyc2VGbG9hdChhZ2VudFszXSkgOiBOYU47XG4gICAgX3dlYmtpdCAgPSBhZ2VudFs0XSA/IHBhcnNlRmxvYXQoYWdlbnRbNF0pIDogTmFOO1xuICAgIGlmIChfd2Via2l0KSB7XG4gICAgICAvLyBXZSBkbyBub3QgYWRkIHRoZSByZWdleHAgdG8gdGhlIGFib3ZlIHRlc3QsIGJlY2F1c2UgaXQgd2lsbCBhbHdheXNcbiAgICAgIC8vIG1hdGNoICdzYWZhcmknIG9ubHkgc2luY2UgJ0FwcGxlV2ViS2l0JyBhcHBlYXJzIGJlZm9yZSAnQ2hyb21lJyBpblxuICAgICAgLy8gdGhlIHVzZXJBZ2VudCBzdHJpbmcuXG4gICAgICBhZ2VudCA9IC8oPzpDaHJvbWVcXC8oXFxkK1xcLlxcZCspKS8uZXhlYyh1YXMpO1xuICAgICAgX2Nocm9tZSA9IGFnZW50ICYmIGFnZW50WzFdID8gcGFyc2VGbG9hdChhZ2VudFsxXSkgOiBOYU47XG4gICAgfSBlbHNlIHtcbiAgICAgIF9jaHJvbWUgPSBOYU47XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIF9pZSA9IF9maXJlZm94ID0gX29wZXJhID0gX2Nocm9tZSA9IF93ZWJraXQgPSBOYU47XG4gIH1cblxuICBpZiAob3MpIHtcbiAgICBpZiAob3NbMV0pIHtcbiAgICAgIC8vIERldGVjdCBPUyBYIHZlcnNpb24uICBJZiBubyB2ZXJzaW9uIG51bWJlciBtYXRjaGVzLCBzZXQgX29zeCB0byB0cnVlLlxuICAgICAgLy8gVmVyc2lvbiBleGFtcGxlczogIDEwLCAxMF82XzEsIDEwLjdcbiAgICAgIC8vIFBhcnNlcyB2ZXJzaW9uIG51bWJlciBhcyBhIGZsb2F0LCB0YWtpbmcgb25seSBmaXJzdCB0d28gc2V0cyBvZlxuICAgICAgLy8gZGlnaXRzLiAgSWYgb25seSBvbmUgc2V0IG9mIGRpZ2l0cyBpcyBmb3VuZCwgcmV0dXJucyBqdXN0IHRoZSBtYWpvclxuICAgICAgLy8gdmVyc2lvbiBudW1iZXIuXG4gICAgICB2YXIgdmVyID0gLyg/Ok1hYyBPUyBYIChcXGQrKD86Wy5fXVxcZCspPykpLy5leGVjKHVhcyk7XG5cbiAgICAgIF9vc3ggPSB2ZXIgPyBwYXJzZUZsb2F0KHZlclsxXS5yZXBsYWNlKCdfJywgJy4nKSkgOiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBfb3N4ID0gZmFsc2U7XG4gICAgfVxuICAgIF93aW5kb3dzID0gISFvc1syXTtcbiAgICBfbGludXggICA9ICEhb3NbM107XG4gIH0gZWxzZSB7XG4gICAgX29zeCA9IF93aW5kb3dzID0gX2xpbnV4ID0gZmFsc2U7XG4gIH1cbn1cblxudmFyIFVzZXJBZ2VudF9ERVBSRUNBVEVEID0ge1xuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIFVBIGlzIEludGVybmV0IEV4cGxvcmVyLlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICBpZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9pZTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgd2UncmUgaW4gSW50ZXJuZXQgRXhwbG9yZXIgY29tcGF0aWJpbGl0eSBtb2RlLlxuICAgKlxuICAgKiBAcmV0dXJuIGJvb2wgdHJ1ZSBpZiBpbiBjb21wYXRpYmlsaXR5IG1vZGUsIGZhbHNlIGlmXG4gICAqIG5vdCBjb21wYXRpYmlsaXR5IG1vZGUgb3Igbm90IGllXG4gICAqL1xuICBpZUNvbXBhdGliaWxpdHlNb2RlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgKF9pZV9yZWFsX3ZlcnNpb24gPiBfaWUpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGJyb3dzZXIgaXMgNjQtYml0IElFLiAgUmVhbGx5LCB0aGlzIGlzIGtpbmQgb2Ygd2VhayBzYXVjZTsgIHdlXG4gICAqIG9ubHkgbmVlZCB0aGlzIGJlY2F1c2UgU2t5cGUgY2FuJ3QgaGFuZGxlIDY0LWJpdCBJRSB5ZXQuICBXZSBuZWVkIHRvIHJlbW92ZVxuICAgKiB0aGlzIHdoZW4gd2UgZG9uJ3QgbmVlZCBpdCAtLSB0cmFja2VkIGJ5ICM2MDE5NTcuXG4gICAqL1xuICBpZTY0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSAmJiBfd2luNjQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgRmlyZWZveC5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgZmlyZWZveDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9maXJlZm94O1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgT3BlcmEuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIG9wZXJhOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX29wZXJhO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgV2ViS2l0LlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICB3ZWJraXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfd2Via2l0O1xuICB9LFxuXG4gIC8qKlxuICAgKiAgRm9yIFB1c2hcbiAgICogIFdJTEwgQkUgUkVNT1ZFRCBWRVJZIFNPT04uIFVzZSBVc2VyQWdlbnRfREVQUkVDQVRFRC53ZWJraXRcbiAgICovXG4gIHNhZmFyaTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFVzZXJBZ2VudF9ERVBSRUNBVEVELndlYmtpdCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIFVBIGlzIGEgQ2hyb21lIGJyb3dzZXIuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIGNocm9tZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfY2hyb21lO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIFdpbmRvd3MuXG4gICAqXG4gICAqICBAcmV0dXJuIGJvb2wgYHRydWUnIGlmIHRoZSB1c2VyJ3MgT1MgaXMgV2luZG93cy5cbiAgICovXG4gIHdpbmRvd3M6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfd2luZG93cztcbiAgfSxcblxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIHVzZXIgaXMgcnVubmluZyBNYWMgT1MgWC5cbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8Ym9vbCAgIFJldHVybnMgYSBmbG9hdCBpZiBhIHZlcnNpb24gbnVtYmVyIGlzIGRldGVjdGVkLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJ3aXNlIHRydWUvZmFsc2UuXG4gICAqL1xuICBvc3g6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfb3N4O1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIExpbnV4LlxuICAgKlxuICAgKiBAcmV0dXJuIGJvb2wgYHRydWUnIGlmIHRoZSB1c2VyJ3MgT1MgaXMgc29tZSBmbGF2b3Igb2YgTGludXguXG4gICAqL1xuICBsaW51eDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9saW51eDtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHVzZXIgaXMgcnVubmluZyBvbiBhbiBpUGhvbmUgb3IgaVBvZCBwbGF0Zm9ybS5cbiAgICpcbiAgICogQHJldHVybiBib29sIGB0cnVlJyBpZiB0aGUgdXNlciBpcyBydW5uaW5nIHNvbWUgZmxhdm9yIG9mIHRoZVxuICAgKiAgICBpUGhvbmUgT1MuXG4gICAqL1xuICBpcGhvbmU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfaXBob25lO1xuICB9LFxuXG4gIG1vYmlsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IChfaXBob25lIHx8IF9pcGFkIHx8IF9hbmRyb2lkIHx8IF9tb2JpbGUpO1xuICB9LFxuXG4gIG5hdGl2ZUFwcDogZnVuY3Rpb24oKSB7XG4gICAgLy8gd2Vidmlld3MgaW5zaWRlIG9mIHRoZSBuYXRpdmUgYXBwc1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfbmF0aXZlO1xuICB9LFxuXG4gIGFuZHJvaWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfYW5kcm9pZDtcbiAgfSxcblxuICBpcGFkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2lwYWQ7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVXNlckFnZW50X0RFUFJFQ0FURUQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNFdmVudFN1cHBvcnRlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgdXNlSGFzRmVhdHVyZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgdXNlSGFzRmVhdHVyZSA9XG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24gJiZcbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmXG4gICAgLy8gYWx3YXlzIHJldHVybnMgdHJ1ZSBpbiBuZXdlciBicm93c2VycyBhcyBwZXIgdGhlIHN0YW5kYXJkLlxuICAgIC8vIEBzZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlXG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnJywgJycpICE9PSB0cnVlO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhbiBldmVudCBpcyBzdXBwb3J0ZWQgaW4gdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGVudmlyb25tZW50LlxuICpcbiAqIE5PVEU6IFRoaXMgd2lsbCBub3Qgd29yayBjb3JyZWN0bHkgZm9yIG5vbi1nZW5lcmljIGV2ZW50cyBzdWNoIGFzIGBjaGFuZ2VgLFxuICogYHJlc2V0YCwgYGxvYWRgLCBgZXJyb3JgLCBhbmQgYHNlbGVjdGAuXG4gKlxuICogQm9ycm93cyBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lU3VmZml4IEV2ZW50IG5hbWUsIGUuZy4gXCJjbGlja1wiLlxuICogQHBhcmFtIHs/Ym9vbGVhbn0gY2FwdHVyZSBDaGVjayBpZiB0aGUgY2FwdHVyZSBwaGFzZSBpcyBzdXBwb3J0ZWQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCBpcyBzdXBwb3J0ZWQuXG4gKiBAaW50ZXJuYWxcbiAqIEBsaWNlbnNlIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuICovXG5mdW5jdGlvbiBpc0V2ZW50U3VwcG9ydGVkKGV2ZW50TmFtZVN1ZmZpeCwgY2FwdHVyZSkge1xuICBpZiAoIUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSB8fFxuICAgICAgY2FwdHVyZSAmJiAhKCdhZGRFdmVudExpc3RlbmVyJyBpbiBkb2N1bWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZXZlbnROYW1lID0gJ29uJyArIGV2ZW50TmFtZVN1ZmZpeDtcbiAgdmFyIGlzU3VwcG9ydGVkID0gZXZlbnROYW1lIGluIGRvY3VtZW50O1xuXG4gIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBpZiAoIWlzU3VwcG9ydGVkICYmIHVzZUhhc0ZlYXR1cmUgJiYgZXZlbnROYW1lU3VmZml4ID09PSAnd2hlZWwnKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXZlbnRTdXBwb3J0ZWQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBub3JtYWxpemVXaGVlbFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVc2VyQWdlbnRfREVQUkVDQVRFRCA9IHJlcXVpcmUoJy4vVXNlckFnZW50X0RFUFJFQ0FURUQnKTtcblxudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKCcuL2lzRXZlbnRTdXBwb3J0ZWQnKTtcblxuXG4vLyBSZWFzb25hYmxlIGRlZmF1bHRzXG52YXIgUElYRUxfU1RFUCAgPSAxMDtcbnZhciBMSU5FX0hFSUdIVCA9IDQwO1xudmFyIFBBR0VfSEVJR0hUID0gODAwO1xuXG4vKipcbiAqIE1vdXNlIHdoZWVsIChhbmQgMi1maW5nZXIgdHJhY2twYWQpIHN1cHBvcnQgb24gdGhlIHdlYiBzdWNrcy4gIEl0IGlzXG4gKiBjb21wbGljYXRlZCwgdGh1cyB0aGlzIGRvYyBpcyBsb25nIGFuZCAoaG9wZWZ1bGx5KSBkZXRhaWxlZCBlbm91Z2ggdG8gYW5zd2VyXG4gKiB5b3VyIHF1ZXN0aW9ucy5cbiAqXG4gKiBJZiB5b3UgbmVlZCB0byByZWFjdCB0byB0aGUgbW91c2Ugd2hlZWwgaW4gYSBwcmVkaWN0YWJsZSB3YXksIHRoaXMgY29kZSBpc1xuICogbGlrZSB5b3VyIGJlc3Rlc3QgZnJpZW5kLiAqIGh1Z3MgKlxuICpcbiAqIEFzIG9mIHRvZGF5LCB0aGVyZSBhcmUgNCBET00gZXZlbnQgdHlwZXMgeW91IGNhbiBsaXN0ZW4gdG86XG4gKlxuICogICAnd2hlZWwnICAgICAgICAgICAgICAgIC0tIENocm9tZSgzMSspLCBGRigxNyspLCBJRSg5KylcbiAqICAgJ21vdXNld2hlZWwnICAgICAgICAgICAtLSBDaHJvbWUsIElFKDYrKSwgT3BlcmEsIFNhZmFyaVxuICogICAnTW96TW91c2VQaXhlbFNjcm9sbCcgIC0tIEZGKDMuNSBvbmx5ISkgKDIwMTAtMjAxMykgLS0gZG9uJ3QgYm90aGVyIVxuICogICAnRE9NTW91c2VTY3JvbGwnICAgICAgIC0tIEZGKDAuOS43Kykgc2luY2UgMjAwM1xuICpcbiAqIFNvIHdoYXQgdG8gZG8/ICBUaGUgaXMgdGhlIGJlc3Q6XG4gKlxuICogICBub3JtYWxpemVXaGVlbC5nZXRFdmVudFR5cGUoKTtcbiAqXG4gKiBJbiB5b3VyIGV2ZW50IGNhbGxiYWNrLCB1c2UgdGhpcyBjb2RlIHRvIGdldCBzYW5lIGludGVycHJldGF0aW9uIG9mIHRoZVxuICogZGVsdGFzLiAgVGhpcyBjb2RlIHdpbGwgcmV0dXJuIGFuIG9iamVjdCB3aXRoIHByb3BlcnRpZXM6XG4gKlxuICogICBzcGluWCAgIC0tIG5vcm1hbGl6ZWQgc3BpbiBzcGVlZCAodXNlIGZvciB6b29tKSAtIHggcGxhbmVcbiAqICAgc3BpblkgICAtLSBcIiAtIHkgcGxhbmVcbiAqICAgcGl4ZWxYICAtLSBub3JtYWxpemVkIGRpc3RhbmNlICh0byBwaXhlbHMpIC0geCBwbGFuZVxuICogICBwaXhlbFkgIC0tIFwiIC0geSBwbGFuZVxuICpcbiAqIFdoZWVsIHZhbHVlcyBhcmUgcHJvdmlkZWQgYnkgdGhlIGJyb3dzZXIgYXNzdW1pbmcgeW91IGFyZSB1c2luZyB0aGUgd2hlZWwgdG9cbiAqIHNjcm9sbCBhIHdlYiBwYWdlIGJ5IGEgbnVtYmVyIG9mIGxpbmVzIG9yIHBpeGVscyAob3IgcGFnZXMpLiAgVmFsdWVzIGNhbiB2YXJ5XG4gKiBzaWduaWZpY2FudGx5IG9uIGRpZmZlcmVudCBwbGF0Zm9ybXMgYW5kIGJyb3dzZXJzLCBmb3JnZXR0aW5nIHRoYXQgeW91IGNhblxuICogc2Nyb2xsIGF0IGRpZmZlcmVudCBzcGVlZHMuICBTb21lIGRldmljZXMgKGxpa2UgdHJhY2twYWRzKSBlbWl0IG1vcmUgZXZlbnRzXG4gKiBhdCBzbWFsbGVyIGluY3JlbWVudHMgd2l0aCBmaW5lIGdyYW51bGFyaXR5LCBhbmQgc29tZSBlbWl0IG1hc3NpdmUganVtcHMgd2l0aFxuICogbGluZWFyIHNwZWVkIG9yIGFjY2VsZXJhdGlvbi5cbiAqXG4gKiBUaGlzIGNvZGUgZG9lcyBpdHMgYmVzdCB0byBub3JtYWxpemUgdGhlIGRlbHRhcyBmb3IgeW91OlxuICpcbiAqICAgLSBzcGluIGlzIHRyeWluZyB0byBub3JtYWxpemUgaG93IGZhciB0aGUgd2hlZWwgd2FzIHNwdW4gKG9yIHRyYWNrcGFkXG4gKiAgICAgZHJhZ2dlZCkuICBUaGlzIGlzIHN1cGVyIHVzZWZ1bCBmb3Igem9vbSBzdXBwb3J0IHdoZXJlIHlvdSB3YW50IHRvXG4gKiAgICAgdGhyb3cgYXdheSB0aGUgY2h1bmt5IHNjcm9sbCBzdGVwcyBvbiB0aGUgUEMgYW5kIG1ha2UgdGhvc2UgZXF1YWwgdG9cbiAqICAgICB0aGUgc2xvdyBhbmQgc21vb3RoIHRpbnkgc3RlcHMgb24gdGhlIE1hYy4gS2V5IGRhdGE6IFRoaXMgY29kZSB0cmllcyB0b1xuICogICAgIHJlc29sdmUgYSBzaW5nbGUgc2xvdyBzdGVwIG9uIGEgd2hlZWwgdG8gMS5cbiAqXG4gKiAgIC0gcGl4ZWwgaXMgbm9ybWFsaXppbmcgdGhlIGRlc2lyZWQgc2Nyb2xsIGRlbHRhIGluIHBpeGVsIHVuaXRzLiAgWW91J2xsXG4gKiAgICAgZ2V0IHRoZSBjcmF6eSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGJyb3dzZXJzLCBidXQgYXQgbGVhc3QgaXQnbGwgYmUgaW5cbiAqICAgICBwaXhlbHMhXG4gKlxuICogICAtIHBvc2l0aXZlIHZhbHVlIGluZGljYXRlcyBzY3JvbGxpbmcgRE9XTi9SSUdIVCwgbmVnYXRpdmUgVVAvTEVGVC4gIFRoaXNcbiAqICAgICBzaG91bGQgdHJhbnNsYXRlIHRvIHBvc2l0aXZlIHZhbHVlIHpvb21pbmcgSU4sIG5lZ2F0aXZlIHpvb21pbmcgT1VULlxuICogICAgIFRoaXMgbWF0Y2hlcyB0aGUgbmV3ZXIgJ3doZWVsJyBldmVudC5cbiAqXG4gKiBXaHkgYXJlIHRoZXJlIHNwaW5YLCBzcGluWSAob3IgcGl4ZWxzKT9cbiAqXG4gKiAgIC0gc3BpblggaXMgYSAyLWZpbmdlciBzaWRlIGRyYWcgb24gdGhlIHRyYWNrcGFkLCBhbmQgYSBzaGlmdCArIHdoZWVsIHR1cm5cbiAqICAgICB3aXRoIGEgbW91c2UuICBJdCByZXN1bHRzIGluIHNpZGUtc2Nyb2xsaW5nIGluIHRoZSBicm93c2VyIGJ5IGRlZmF1bHQuXG4gKlxuICogICAtIHNwaW5ZIGlzIHdoYXQgeW91IGV4cGVjdCAtLSBpdCdzIHRoZSBjbGFzc2ljIGF4aXMgb2YgYSBtb3VzZSB3aGVlbC5cbiAqXG4gKiAgIC0gSSBkcm9wcGVkIHNwaW5aL3BpeGVsWi4gIEl0IGlzIHN1cHBvcnRlZCBieSB0aGUgRE9NIDMgJ3doZWVsJyBldmVudCBhbmRcbiAqICAgICBwcm9iYWJseSBpcyBieSBicm93c2VycyBpbiBjb25qdW5jdGlvbiB3aXRoIGZhbmN5IDNEIGNvbnRyb2xsZXJzIC4uIGJ1dFxuICogICAgIHlvdSBrbm93LlxuICpcbiAqIEltcGxlbWVudGF0aW9uIGluZm86XG4gKlxuICogRXhhbXBsZXMgb2YgJ3doZWVsJyBldmVudCBpZiB5b3Ugc2Nyb2xsIHNsb3dseSAoZG93bikgYnkgb25lIHN0ZXAgd2l0aCBhblxuICogYXZlcmFnZSBtb3VzZTpcbiAqXG4gKiAgIE9TIFggKyBDaHJvbWUgIChtb3VzZSkgICAgIC0gICAgNCAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAtMTIwKVxuICogICBPUyBYICsgU2FmYXJpICAobW91c2UpICAgICAtICBOL0EgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgIC0xMilcbiAqICAgT1MgWCArIEZpcmVmb3ggKG1vdXNlKSAgICAgLSAgICAwLjEgbGluZSAgZGVsdGEgICh3aGVlbERlbHRhICBOL0EpXG4gKiAgIFdpbjggKyBDaHJvbWUgIChtb3VzZSkgICAgIC0gIDEwMCAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAtMTIwKVxuICogICBXaW44ICsgRmlyZWZveCAobW91c2UpICAgICAtICAgIDMgICBsaW5lICBkZWx0YSAgKHdoZWVsRGVsdGEgLTEyMClcbiAqXG4gKiBPbiB0aGUgdHJhY2twYWQ6XG4gKlxuICogICBPUyBYICsgQ2hyb21lICAodHJhY2twYWQpICAtICAgIDIgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgICAtNilcbiAqICAgT1MgWCArIEZpcmVmb3ggKHRyYWNrcGFkKSAgLSAgICAxICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhICBOL0EpXG4gKlxuICogT24gb3RoZXIvb2xkZXIgYnJvd3NlcnMuLiBpdCdzIG1vcmUgY29tcGxpY2F0ZWQgYXMgdGhlcmUgY2FuIGJlIG11bHRpcGxlIGFuZFxuICogYWxzbyBtaXNzaW5nIGRlbHRhIHZhbHVlcy5cbiAqXG4gKiBUaGUgJ3doZWVsJyBldmVudCBpcyBtb3JlIHN0YW5kYXJkOlxuICpcbiAqIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLXdoZWVsZXZlbnRzXG4gKlxuICogVGhlIGJhc2ljcyBpcyB0aGF0IGl0IGluY2x1ZGVzIGEgdW5pdCwgZGVsdGFNb2RlIChwaXhlbHMsIGxpbmVzLCBwYWdlcyksIGFuZFxuICogZGVsdGFYLCBkZWx0YVkgYW5kIGRlbHRhWi4gIFNvbWUgYnJvd3NlcnMgcHJvdmlkZSBvdGhlciB2YWx1ZXMgdG8gbWFpbnRhaW5cbiAqIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBvbGRlciBldmVudHMuICBUaG9zZSBvdGhlciB2YWx1ZXMgaGVscCB1c1xuICogYmV0dGVyIG5vcm1hbGl6ZSBzcGluIHNwZWVkLiAgRXhhbXBsZSBvZiB3aGF0IHRoZSBicm93c2VycyBwcm92aWRlOlxuICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICB8IGV2ZW50LndoZWVsRGVsdGEgfCBldmVudC5kZXRhaWxcbiAqICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0tXG4gKiAgICAgICAgICBTYWZhcmkgdjUvT1MgWCAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICAgU2FmYXJpIHY1L1dpbjcgIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAqICAgICAgICAgQ2hyb21lIHYxNy9PUyBYICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgIENocm9tZSB2MTcvV2luNyAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICAgICAgICAgSUU5L1dpbjcgIHwgICAgICAgLTEyMCAgICAgICB8ICAgdW5kZWZpbmVkXG4gKiAgICAgICAgIEZpcmVmb3ggdjQvT1MgWCAgfCAgICAgdW5kZWZpbmVkICAgIHwgICAgICAgMVxuICogICAgICAgICBGaXJlZm94IHY0L1dpbjcgIHwgICAgIHVuZGVmaW5lZCAgICB8ICAgICAgIDNcbiAqXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVdoZWVsKC8qb2JqZWN0Ki8gZXZlbnQpIC8qb2JqZWN0Ki8ge1xuICB2YXIgc1ggPSAwLCBzWSA9IDAsICAgICAgIC8vIHNwaW5YLCBzcGluWVxuICAgICAgcFggPSAwLCBwWSA9IDA7ICAgICAgIC8vIHBpeGVsWCwgcGl4ZWxZXG5cbiAgLy8gTGVnYWN5XG4gIGlmICgnZGV0YWlsJyAgICAgIGluIGV2ZW50KSB7IHNZID0gZXZlbnQuZGV0YWlsOyB9XG4gIGlmICgnd2hlZWxEZWx0YScgIGluIGV2ZW50KSB7IHNZID0gLWV2ZW50LndoZWVsRGVsdGEgLyAxMjA7IH1cbiAgaWYgKCd3aGVlbERlbHRhWScgaW4gZXZlbnQpIHsgc1kgPSAtZXZlbnQud2hlZWxEZWx0YVkgLyAxMjA7IH1cbiAgaWYgKCd3aGVlbERlbHRhWCcgaW4gZXZlbnQpIHsgc1ggPSAtZXZlbnQud2hlZWxEZWx0YVggLyAxMjA7IH1cblxuICAvLyBzaWRlIHNjcm9sbGluZyBvbiBGRiB3aXRoIERPTU1vdXNlU2Nyb2xsXG4gIGlmICggJ2F4aXMnIGluIGV2ZW50ICYmIGV2ZW50LmF4aXMgPT09IGV2ZW50LkhPUklaT05UQUxfQVhJUyApIHtcbiAgICBzWCA9IHNZO1xuICAgIHNZID0gMDtcbiAgfVxuXG4gIHBYID0gc1ggKiBQSVhFTF9TVEVQO1xuICBwWSA9IHNZICogUElYRUxfU1RFUDtcblxuICBpZiAoJ2RlbHRhWScgaW4gZXZlbnQpIHsgcFkgPSBldmVudC5kZWx0YVk7IH1cbiAgaWYgKCdkZWx0YVgnIGluIGV2ZW50KSB7IHBYID0gZXZlbnQuZGVsdGFYOyB9XG5cbiAgaWYgKChwWCB8fCBwWSkgJiYgZXZlbnQuZGVsdGFNb2RlKSB7XG4gICAgaWYgKGV2ZW50LmRlbHRhTW9kZSA9PSAxKSB7ICAgICAgICAgIC8vIGRlbHRhIGluIExJTkUgdW5pdHNcbiAgICAgIHBYICo9IExJTkVfSEVJR0hUO1xuICAgICAgcFkgKj0gTElORV9IRUlHSFQ7XG4gICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbHRhIGluIFBBR0UgdW5pdHNcbiAgICAgIHBYICo9IFBBR0VfSEVJR0hUO1xuICAgICAgcFkgKj0gUEFHRV9IRUlHSFQ7XG4gICAgfVxuICB9XG5cbiAgLy8gRmFsbC1iYWNrIGlmIHNwaW4gY2Fubm90IGJlIGRldGVybWluZWRcbiAgaWYgKHBYICYmICFzWCkgeyBzWCA9IChwWCA8IDEpID8gLTEgOiAxOyB9XG4gIGlmIChwWSAmJiAhc1kpIHsgc1kgPSAocFkgPCAxKSA/IC0xIDogMTsgfVxuXG4gIHJldHVybiB7IHNwaW5YICA6IHNYLFxuICAgICAgICAgICBzcGluWSAgOiBzWSxcbiAgICAgICAgICAgcGl4ZWxYIDogcFgsXG4gICAgICAgICAgIHBpeGVsWSA6IHBZIH07XG59XG5cblxuLyoqXG4gKiBUaGUgYmVzdCBjb21iaW5hdGlvbiBpZiB5b3UgcHJlZmVyIHNwaW5YICsgc3Bpblkgbm9ybWFsaXphdGlvbi4gIEl0IGZhdm9yc1xuICogdGhlIG9sZGVyIERPTU1vdXNlU2Nyb2xsIGZvciBGaXJlZm94LCBhcyBGRiBkb2VzIG5vdCBpbmNsdWRlIHdoZWVsRGVsdGEgd2l0aFxuICogJ3doZWVsJyBldmVudCwgbWFraW5nIHNwaW4gc3BlZWQgZGV0ZXJtaW5hdGlvbiBpbXBvc3NpYmxlLlxuICovXG5ub3JtYWxpemVXaGVlbC5nZXRFdmVudFR5cGUgPSBmdW5jdGlvbigpIC8qc3RyaW5nKi8ge1xuICByZXR1cm4gKFVzZXJBZ2VudF9ERVBSRUNBVEVELmZpcmVmb3goKSlcbiAgICAgICAgICAgPyAnRE9NTW91c2VTY3JvbGwnXG4gICAgICAgICAgIDogKGlzRXZlbnRTdXBwb3J0ZWQoJ3doZWVsJykpXG4gICAgICAgICAgICAgICA/ICd3aGVlbCdcbiAgICAgICAgICAgICAgIDogJ21vdXNld2hlZWwnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3JtYWxpemVXaGVlbDtcbiIsIi8vIGNoZWNrIGRvY3VtZW50IGZpcnN0IHNvIGl0IGRvZXNuJ3QgZXJyb3IgaW4gbm9kZS5qc1xudmFyIHN0eWxlID0gdHlwZW9mIGRvY3VtZW50ICE9ICd1bmRlZmluZWQnXG4gID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLnN0eWxlXG4gIDoge31cblxudmFyIHByZWZpeGVzID0gWydPJywgJ21zJywgJ01veicsICdXZWJraXQnXVxudmFyIHVwcGVyID0gLyhbQS1aXSkvZ1xudmFyIG1lbW8gPSB7fVxuXG4vKipcbiAqIHByZWZpeCBga2V5YFxuICpcbiAqICAgcHJlZml4KCd0cmFuc2Zvcm0nKSAvLyA9PiBXZWJraXRUcmFuc2Zvcm1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBwcmVmaXgoa2V5KXtcbiAgLy8gQ2FtZWwgY2FzZVxuICBrZXkgPSBrZXkucmVwbGFjZSgvLShbYS16XSkvZywgZnVuY3Rpb24oXywgY2hhcil7XG4gICAgcmV0dXJuIGNoYXIudG9VcHBlckNhc2UoKVxuICB9KVxuXG4gIC8vIFdpdGhvdXQgcHJlZml4XG4gIGlmIChzdHlsZVtrZXldICE9PSB1bmRlZmluZWQpIHJldHVybiBrZXlcblxuICAvLyBXaXRoIHByZWZpeFxuICB2YXIgS2V5ID0ga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpXG4gIHZhciBpID0gcHJlZml4ZXMubGVuZ3RoXG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgbmFtZSA9IHByZWZpeGVzW2ldICsgS2V5XG4gICAgaWYgKHN0eWxlW25hbWVdICE9PSB1bmRlZmluZWQpIHJldHVybiBuYW1lXG4gIH1cblxuICByZXR1cm4ga2V5XG59XG5cbi8qKlxuICogTWVtb2l6ZWQgdmVyc2lvbiBvZiBgcHJlZml4YFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHByZWZpeE1lbW96aWVkKGtleSl7XG4gIHJldHVybiBrZXkgaW4gbWVtb1xuICAgID8gbWVtb1trZXldXG4gICAgOiBtZW1vW2tleV0gPSBwcmVmaXgoa2V5KVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGRhc2hlZCBwcmVmaXhcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBwcmVmaXhEYXNoZWQoa2V5KXtcbiAga2V5ID0gcHJlZml4KGtleSlcbiAgaWYgKHVwcGVyLnRlc3Qoa2V5KSkge1xuICAgIGtleSA9ICctJyArIGtleS5yZXBsYWNlKHVwcGVyLCAnLSQxJylcbiAgICB1cHBlci5sYXN0SW5kZXggPSAwXG4gIH1cbiAgcmV0dXJuIGtleS50b0xvd2VyQ2FzZSgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJlZml4TWVtb3ppZWRcbm1vZHVsZS5leHBvcnRzLmRhc2ggPSBwcmVmaXhEYXNoZWRcbiIsImV4cG9ydCBkZWZhdWx0IFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbiNkZWZpbmUgR0xTTElGWSAxXFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgdE1hcDtcXG5cXG52YXJ5aW5nIHZlYzIgdlV2O1xcblxcbnZvaWQgbWFpbigpIHtcXG4gIHZlYzQgdGV4dHVyZSA9IHRleHR1cmUyRCh0TWFwLCB2VXYpO1xcblxcbiAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTtcXG59XFxuXCI7IiwiZXhwb3J0IGRlZmF1bHQgXCIjZGVmaW5lIEdMU0xJRlkgMVxcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xcblxcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICB2VXYgPSB1djtcXG4gIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XFxufVxcblwiOyIsImltcG9ydCBBbmltYXRpb24gZnJvbSAnY2xhc3Nlcy9BbmltYXRpb24nXG5pbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xuaW1wb3J0IGVhY2ggZnJvbSAnbG9kYXNoL2VhY2gnXG5pbXBvcnQgeyBjYWxjdWxhdGUsIHNwbGl0IH0gZnJvbSAndXRpbHMvdGV4dCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGlnaGxpZ2h0IGV4dGVuZHMgQW5pbWF0aW9uIHtcblx0Y29uc3RydWN0b3IoeyBlbGVtZW50LCBlbGVtZW50cyB9KSB7XG5cdFx0c3VwZXIoeyBlbGVtZW50LCBlbGVtZW50cyB9KVxuXHR9XG5cblx0YW5pbWF0ZUluKCkge1xuXHRcdHRoaXMudGltZWxpbmVJbiA9IEdTQVAudGltZWxpbmUoeyBkZWxheTogMC41IH0pXG5cblx0XHR0aGlzLnRpbWVsaW5lSW4uZnJvbVRvKFxuXHRcdFx0dGhpcy5lbGVtZW50LFxuXHRcdFx0e1xuXHRcdFx0XHRhdXRvQWxwaGE6IDAsXG5cdFx0XHRcdHNjYWxlOiAxLjIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRhdXRvQWxwaGE6IDEsXG5cdFx0XHRcdGR1cmF0aW9uOiAxLjUsXG5cdFx0XHRcdGVhc2U6ICdleHBvLm91dCcsXG5cdFx0XHRcdHNjYWxlOiAxLFxuXHRcdFx0fVxuXHRcdClcblx0fVxuXG5cdGFuaW1hdGVPdXQoKSB7XG5cdFx0R1NBUC5zZXQodGhpcy5lbGVtZW50LCB7XG5cdFx0XHRhdXRvQWxwaGE6IDAsXG5cdFx0fSlcblx0fVxufVxuIiwiaW1wb3J0IEFuaW1hdGlvbiBmcm9tICdjbGFzc2VzL0FuaW1hdGlvbidcbmltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXG5pbXBvcnQgZWFjaCBmcm9tICdsb2Rhc2gvZWFjaCdcbmltcG9ydCB7IGNhbGN1bGF0ZSwgc3BsaXQgfSBmcm9tICd1dGlscy90ZXh0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYWJlbCBleHRlbmRzIEFuaW1hdGlvbiB7XG5cdGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgZWxlbWVudHMgfSkge1xuXHRcdHN1cGVyKHsgZWxlbWVudCwgZWxlbWVudHMgfSlcblxuXHRcdHNwbGl0KHsgZWxlbWVudDogdGhpcy5lbGVtZW50LCBhcHBlbmQ6IHRydWUgfSlcblx0XHRzcGxpdCh7IGVsZW1lbnQ6IHRoaXMuZWxlbWVudCwgYXBwZW5kOiB0cnVlIH0pXG5cblx0XHR0aGlzLmVsZW1lbnRMaW5lc1NwYW5zID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NwYW4gc3BhbicpXG5cdH1cblxuXHRhbmltYXRlSW4oKSB7XG5cdFx0dGhpcy50aW1lbGluZUluID0gR1NBUC50aW1lbGluZSh7IGRlbGF5OiAwLjUgfSlcblxuXHRcdHRoaXMudGltZWxpbmVJbi5zZXQodGhpcy5lbGVtZW50LCB7XG5cdFx0XHRhdXRvQWxwaGE6IDEsXG5cdFx0fSlcblxuXHRcdEdTQVAuc2V0KHRoaXMuZWxlbWVudCwge1xuXHRcdFx0YXV0b0FscGhhOiAxLFxuXHRcdH0pXG5cblx0XHRlYWNoKFxuXHRcdFx0dGhpcy5lbGVtZW50c0xpbmVzLFxuXHRcdFx0KGxpbmUsIGluZGV4KSA9PiB7XG5cdFx0XHRcdEdTQVAuZnJvbVRvKFxuXHRcdFx0XHRcdGxpbmUsXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YXV0b0FscGhhOiAwLFxuXHRcdFx0XHRcdFx0eTogJzEwMCUnLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YXV0b0FscGhhOiAxLFxuXHRcdFx0XHRcdFx0ZGVsYXk6IGluZGV4ICogMC4yLFxuXHRcdFx0XHRcdFx0ZHVyYXRpb246IDEuNSxcblx0XHRcdFx0XHRcdGVhc2U6ICdleHBvLm91dCcsXG5cdFx0XHRcdFx0XHR5OiAnMCUnLFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KVxuXHRcdFx0fSxcblx0XHRcdDBcblx0XHQpXG5cdH1cblxuXHRhbmltYXRlT3V0KCkge1xuXHRcdEdTQVAuc2V0KHRoaXMuZWxlbWVudCwge1xuXHRcdFx0YXV0b0FscGhhOiAwLFxuXHRcdH0pXG5cdH1cblxuXHRvblJlc2l6ZSgpIHtcblx0XHR0aGlzLmVsZW1lbnRzTGluZXMgPSBjYWxjdWxhdGUodGhpcy5lbGVtZW50TGluZXNTcGFucylcblx0fVxufVxuIiwiaW1wb3J0IEFuaW1hdGlvbiBmcm9tICdjbGFzc2VzL0FuaW1hdGlvbidcbmltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXG5pbXBvcnQgZWFjaCBmcm9tICdsb2Rhc2gvZWFjaCdcbmltcG9ydCB7IGNhbGN1bGF0ZSwgc3BsaXQgfSBmcm9tICd1dGlscy90ZXh0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXJhZ3JhcGggZXh0ZW5kcyBBbmltYXRpb24ge1xuXHRjb25zdHJ1Y3Rvcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pIHtcblx0XHRzdXBlcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pXG5cblx0XHRzcGxpdCh7IGVsZW1lbnQ6IHRoaXMuZWxlbWVudCwgYXBwZW5kOiB0cnVlIH0pXG5cdFx0c3BsaXQoeyBlbGVtZW50OiB0aGlzLmVsZW1lbnQsIGFwcGVuZDogdHJ1ZSB9KVxuXG5cdFx0dGhpcy5lbGVtZW50TGluZXNTcGFucyA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuIHNwYW4nKVxuXHR9XG5cblx0YW5pbWF0ZUluKCkge1xuXHRcdHRoaXMudGltZWxpbmVJbiA9IEdTQVAudGltZWxpbmUoeyBkZWxheTogMC41IH0pXG5cblx0XHR0aGlzLnRpbWVsaW5lSW4uc2V0KHRoaXMuZWxlbWVudCwge1xuXHRcdFx0YXV0b0FscGhhOiAxLFxuXHRcdH0pXG5cblx0XHRHU0FQLnNldCh0aGlzLmVsZW1lbnQsIHtcblx0XHRcdGF1dG9BbHBoYTogMSxcblx0XHR9KVxuXG5cdFx0ZWFjaChcblx0XHRcdHRoaXMuZWxlbWVudHNMaW5lcyxcblx0XHRcdChsaW5lLCBpbmRleCkgPT4ge1xuXHRcdFx0XHRHU0FQLmZyb21Ubyhcblx0XHRcdFx0XHRsaW5lLFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGF1dG9BbHBoYTogMCxcblx0XHRcdFx0XHRcdHk6ICcxMDAlJyxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGF1dG9BbHBoYTogMSxcblx0XHRcdFx0XHRcdGRlbGF5OiBpbmRleCAqIDAuMixcblx0XHRcdFx0XHRcdGR1cmF0aW9uOiAxLjUsXG5cdFx0XHRcdFx0XHRlYXNlOiAnZXhwby5vdXQnLFxuXHRcdFx0XHRcdFx0eTogJzAlJyxcblx0XHRcdFx0XHR9XG5cdFx0XHRcdClcblx0XHRcdH0sXG5cdFx0XHQwXG5cdFx0KVxuXHR9XG5cblx0YW5pbWF0ZU91dCgpIHtcblx0XHRHU0FQLnNldCh0aGlzLmVsZW1lbnQsIHtcblx0XHRcdGF1dG9BbHBoYTogMCxcblx0XHR9KVxuXHR9XG5cblx0b25SZXNpemUoKSB7XG5cdFx0dGhpcy5lbGVtZW50c0xpbmVzID0gY2FsY3VsYXRlKHRoaXMuZWxlbWVudExpbmVzU3BhbnMpXG5cdH1cbn1cbiIsImltcG9ydCBBbmltYXRpb24gZnJvbSAnY2xhc3Nlcy9BbmltYXRpb24nXG5pbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xuaW1wb3J0IGVhY2ggZnJvbSAnbG9kYXNoL2VhY2gnXG5pbXBvcnQgeyBjYWxjdWxhdGUsIHNwbGl0IH0gZnJvbSAndXRpbHMvdGV4dCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGl0bGUgZXh0ZW5kcyBBbmltYXRpb24ge1xuXHRjb25zdHJ1Y3Rvcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pIHtcblx0XHRzdXBlcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pXG5cblx0XHRzcGxpdCh7XG5cdFx0XHRlbGVtZW50OiB0aGlzLmVsZW1lbnQsXG5cdFx0XHRhcHBlbmQ6IHRydWUsXG5cdFx0fSlcblx0XHRzcGxpdCh7XG5cdFx0XHRlbGVtZW50OiB0aGlzLmVsZW1lbnQsXG5cdFx0XHRhcHBlbmQ6IHRydWUsXG5cdFx0fSlcblxuXHRcdHRoaXMuZWxlbWVudExpbmVzU3BhbnMgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3BhbiBzcGFuJylcblx0fVxuXG5cdGFuaW1hdGVJbigpIHtcblx0XHR0aGlzLnRpbWVsaW5lSW4gPSBHU0FQLnRpbWVsaW5lKHsgZGVsYXk6IDAuNSB9KVxuXG5cdFx0dGhpcy50aW1lbGluZUluLnNldCh0aGlzLmVsZW1lbnQsIHtcblx0XHRcdGF1dG9BbHBoYTogMSxcblx0XHR9KVxuXG5cdFx0R1NBUC5zZXQodGhpcy5lbGVtZW50LCB7XG5cdFx0XHRhdXRvQWxwaGE6IDEsXG5cdFx0fSlcblxuXHRcdGVhY2goXG5cdFx0XHR0aGlzLmVsZW1lbnRzTGluZXMsXG5cdFx0XHQobGluZSwgaW5kZXgpID0+IHtcblx0XHRcdFx0R1NBUC5mcm9tVG8oXG5cdFx0XHRcdFx0bGluZSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR5OiAnMTAwJScsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRkZWxheTogaW5kZXggKiAwLjIsXG5cdFx0XHRcdFx0XHRkdXJhdGlvbjogMS41LFxuXHRcdFx0XHRcdFx0ZWFzZTogJ2V4cG8ub3V0Jyxcblx0XHRcdFx0XHRcdHk6ICcwJScsXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpXG5cdFx0XHR9LFxuXHRcdFx0MFxuXHRcdClcblx0fVxuXG5cdGFuaW1hdGVPdXQoKSB7XG5cdFx0R1NBUC5zZXQodGhpcy5lbGVtZW50LCB7XG5cdFx0XHRhdXRvQWxwaGE6IDAsXG5cdFx0fSlcblx0fVxuXG5cdG9uUmVzaXplKCkge1xuXHRcdHRoaXMuZWxlbWVudHNMaW5lcyA9IGNhbGN1bGF0ZSh0aGlzLmVsZW1lbnRMaW5lc1NwYW5zKVxuXHR9XG59XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJ2NsYXNzZXMvQ29tcG9uZW50J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmltYXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xuXHRjb25zdHJ1Y3Rvcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pIHtcblx0XHRzdXBlcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pXG5cblx0XHR0aGlzLmNyZWF0ZU9ic2VydmVyKClcblxuXHRcdHRoaXMuYW5pbWF0ZU91dCgpXG5cdH1cblxuXHRjcmVhdGVPYnNlcnZlcigpIHtcblx0XHR0aGlzLm9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGVudHJpZXMgPT4ge1xuXHRcdFx0ZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcblx0XHRcdFx0aWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG5cdFx0XHRcdFx0dGhpcy5hbmltYXRlSW4oKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuYW5pbWF0ZU91dCgpXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0fSlcblxuXHRcdHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQpXG5cdH1cblxuXHRhbmltYXRlT3V0KCkge31cblxuXHRhbmltYXRlSW4oKSB7fVxuXG5cdG9uUmVzaXplKCkge31cbn1cbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnY2xhc3Nlcy9Db21wb25lbnQnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFzeW5jTG9hZCBleHRlbmRzIENvbXBvbmVudCB7XG5cdGNvbnN0cnVjdG9yKHsgZWxlbWVudCB9KSB7XG5cdFx0c3VwZXIoe1xuXHRcdFx0ZWxlbWVudCxcblx0XHR9KVxuXG5cdFx0dGhpcy5jcmVhdGVPYnNlcnZlcigpXG5cdH1cblxuXHRjcmVhdGVPYnNlcnZlcigpIHtcblx0XHR0aGlzLm9ic2VydmVyID0gbmV3IHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlcihlbnRyaWVzID0+IHtcblx0XHRcdGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG5cdFx0XHRcdGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xuXHRcdFx0XHRcdGlmICghdGhpcy5lbGVtZW50LnNyYykge1xuXHRcdFx0XHRcdFx0dGhpcy5lbGVtZW50LnNyYyA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3JjJylcblx0XHRcdFx0XHRcdHRoaXMuZWxlbWVudC5vbmxvYWQgPSBfID0+IHtcblx0XHRcdFx0XHRcdFx0dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2xvYWRlZCcpXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdH0pXG5cblx0XHR0aGlzLm9ic2VydmVyLm9ic2VydmUodGhpcy5lbGVtZW50KVxuXHR9XG59XG4iLCJpbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICdjbGFzc2VzL0NvbXBvbmVudCdcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1dHRvbiBleHRlbmRzIENvbXBvbmVudCB7XG5cdGNvbnN0cnVjdG9yKHsgZWxlbWVudCB9KSB7XG5cdFx0c3VwZXIoeyBlbGVtZW50IH0pXG5cblx0XHR0aGlzLnBhdGggPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3BhdGg6bGFzdC1jaGlsZCcpXG5cdFx0dGhpcy5wYXRoTGVuZ3RoID0gdGhpcy5wYXRoLmdldFRvdGFsTGVuZ3RoKClcblxuXHRcdHRoaXMudGltZWxpbmUgPSBHU0FQLnRpbWVsaW5lKHsgcGF1c2VkOiB0cnVlIH0pXG5cblx0XHR0aGlzLnRpbWVsaW5lLmZyb21Ubyhcblx0XHRcdHRoaXMucGF0aCxcblx0XHRcdHtcblx0XHRcdFx0c3Ryb2tlRGFzaG9mZnNldDogdGhpcy5wYXRoTGVuZ3RoLFxuXHRcdFx0XHRzdHJva2VEYXNoYXJyYXk6IGAke3RoaXMucGF0aExlbmd0aH0gJHt0aGlzLnBhdGhMZW5ndGh9YCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0cm9rZURhc2hvZmZzZXQ6IDAsXG5cdFx0XHRcdHN0cm9rZURhc2hhcnJheTogYCR7dGhpcy5wYXRoTGVuZ3RofSAke3RoaXMucGF0aExlbmd0aH1gLFxuXHRcdFx0fVxuXHRcdClcblx0fVxuXG5cdG9uTW91c2VFbnRlcigpIHtcblx0XHR0aGlzLnRpbWVsaW5lLnBsYXkoKVxuXHR9XG5cdG9uTW91c2VMZWF2ZSgpIHtcblx0XHR0aGlzLnRpbWVsaW5lLnJldmVyc2UoKVxuXHR9XG5cblx0YWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG5cdFx0dGhpcy5vbk1vdXNlRW50ZXJFdmVudCA9IHRoaXMub25Nb3VzZUVudGVyLmJpbmQodGhpcylcblx0XHR0aGlzLm9uTW91c2VMZWF2ZUV2ZW50ID0gdGhpcy5vbk1vdXNlTGVhdmUuYmluZCh0aGlzKVxuXG5cdFx0dGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLm9uTW91c2VFbnRlckV2ZW50KVxuXHRcdHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5vbk1vdXNlTGVhdmVFdmVudClcblx0fVxuXG5cdHJlbW92ZXJFdmVudExpc3RlbmVyKCkge1xuXHRcdHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5vbk1vdXNlRW50ZXJFdmVudClcblx0XHR0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMub25Nb3VzZUxlYXZlRXZlbnQpXG5cdH1cbn1cbiIsImltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXG5cbmNsYXNzIENvbG9ycyB7XG5cdGNoYW5nZSh7IGJhY2tncm91bmRDb2xvciwgY29sb3IgfSkge1xuXHRcdEdTQVAudG8oZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBjb2xvcixcbiAgICAgIGR1cmF0aW9uOiAxLjVcbiAgICB9KVxuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBDb2xvcnNNYW5hZ2VyID0gbmV3IENvbG9ycygpXG4iLCJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gXCJldmVudHNcIjtcbmltcG9ydCBlYWNoIGZyb20gXCJsb2Rhc2gvZWFjaFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnQgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3Rvcih7IGVsZW1lbnQsIGVsZW1lbnRzIH0pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2VsZWN0b3IgPSBlbGVtZW50O1xuICAgIHRoaXMuc2VsZWN0b3JDaGlsZHJlbiA9IHsgLi4uZWxlbWVudHMgfTtcbiAgICB0aGlzLmNyZWF0ZSgpO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIGNyZWF0ZSgpIHtcbiAgICBpZiAodGhpcy5zZWxlY3RvciBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCkge1xuICAgICAgdGhpcy5lbGVtZW50ID0gdGhpcy5zZWxlY3RvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnRzID0ge307XG5cbiAgICBlYWNoKHRoaXMuc2VsZWN0b3JDaGlsZHJlbiwgKGVudHJ5LCBrZXkpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgZW50cnkgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEVsZW1lbnQgfHxcbiAgICAgICAgZW50cnkgaW5zdGFuY2VvZiB3aW5kb3cuTm9kZUxpc3QgfHxcbiAgICAgICAgQXJyYXkuaXNBcnJheShlbnRyeSlcbiAgICAgICkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSBlbnRyeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZW50cnkpO1xuXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2tleV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVsZW1lbnRzW2tleV0ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50c1trZXldID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbnRyeSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFkZEV2ZW50TGlzdGVuZXJzKCkge31cblxuICByZW1vdmVFdmVudExpc3RlbmVycygpIHt9XG59XG4iLCJpbXBvcnQgZWFjaCBmcm9tICdsb2Rhc2gvZWFjaCdcbmltcG9ydCBtYXAgZnJvbSAnbG9kYXNoL21hcCdcbmltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXG5pbXBvcnQgUHJlZml4IGZyb20gJ3ByZWZpeCdcblxuaW1wb3J0IFRpdGxlIGZyb20gJ2FuaW1hdGlvbnMvVGl0bGUnXG5pbXBvcnQgUGFyYWdyYXBoIGZyb20gJ2FuaW1hdGlvbnMvUGFyYWdyYXBoJ1xuaW1wb3J0IExhYmVsIGZyb20gJ2FuaW1hdGlvbnMvTGFiZWwnXG5pbXBvcnQgSGlnaGxpZ2h0IGZyb20gJ2FuaW1hdGlvbnMvSGlnaGxpZ2h0J1xuXG5pbXBvcnQgQXN5bmNMb2FkIGZyb20gJ2NsYXNzZXMvQXN5bmNMb2FkJ1xuaW1wb3J0IHsgQ29sb3JzTWFuYWdlciB9IGZyb20gJ2NsYXNzZXMvQ29sb3JzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWdlIHtcblx0Y29uc3RydWN0b3IoeyBlbGVtZW50LCBlbGVtZW50cywgaWQgfSkge1xuXHRcdHRoaXMuc2VsZWN0b3IgPSBlbGVtZW50XG5cdFx0dGhpcy5zZWxlY3RvckNoaWxkcmVuID0ge1xuXHRcdFx0Li4uZWxlbWVudHMsXG5cdFx0XHRhbmltYXRpb25zVGl0bGVzOiAnW2RhdGEtYW5pbWF0aW9uPVwidGl0bGVcIl0nLFxuXHRcdFx0YW5pbWF0aW9uc1BhcmFncmFwaHM6ICdbZGF0YS1hbmltYXRpb249XCJwYXJhZ3JhcGhcIl0nLFxuXHRcdFx0YW5pbWF0aW9uc0xhYmVsOiAnW2RhdGEtYW5pbWF0aW9uPVwibGFiZWxcIl0nLFxuXHRcdFx0YW5pbWF0aW9uc0hpZ2hsaWdodHM6ICdbZGF0YS1hbmltYXRpb249XCJoaWdobGlnaHRcIl0nLFxuXHRcdFx0cHJlbG9hZGVyczogJ1tkYXRhLXNyY10nLFxuXHRcdH1cblx0XHR0aGlzLmlkID0gaWRcblxuXHRcdHRoaXMudHJhbnNmb3JtUHJlZml4ID0gUHJlZml4KCd0cmFuc2Zvcm0nKVxuXHR9XG5cblx0Y3JlYXRlKCkge1xuXHRcdHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zZWxlY3Rvcilcblx0XHR0aGlzLmVsZW1lbnRzID0ge31cblxuXHRcdHRoaXMuc2Nyb2xsID0ge1xuXHRcdFx0Y3VycmVudDogMCxcblx0XHRcdHRhcmdldDogMCxcblx0XHRcdGxhc3Q6IDAsXG5cdFx0XHRsaW1pdDogMCxcblx0XHR9XG5cblx0XHRlYWNoKHRoaXMuc2VsZWN0b3JDaGlsZHJlbiwgKGVudHJ5LCBrZXkpID0+IHtcblx0XHRcdGlmIChcblx0XHRcdFx0ZW50cnkgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEVsZW1lbnQgfHxcblx0XHRcdFx0ZW50cnkgaW5zdGFuY2VvZiB3aW5kb3cuTm9kZUxpc3QgfHxcblx0XHRcdFx0QXJyYXkuaXNBcnJheShlbnRyeSlcblx0XHRcdCkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnRzW2tleV0gPSBlbnRyeVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50c1trZXldID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbnRyeSlcblxuXHRcdFx0XHRpZiAodGhpcy5lbGVtZW50c1trZXldLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdHRoaXMuZWxlbWVudHNba2V5XSA9IG51bGxcblx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLmVsZW1lbnRzW2tleV0ubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdFx0dGhpcy5lbGVtZW50c1trZXldID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbnRyeSlcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pXG5cblx0XHR0aGlzLmNyZWF0ZUFuaW1hdGlvbnMoKVxuXHRcdHRoaXMuY3JlYXRlUHJlbG9hZGVyKClcblx0fVxuXG5cdGNyZWF0ZUFuaW1hdGlvbnMoKSB7XG5cdFx0dGhpcy5hbmltYXRpb25zID0gW11cblxuXHRcdC8vIHRpdGxlXG5cdFx0dGhpcy5hbmltYXRpb25zVGl0bGVzID0gbWFwKHRoaXMuZWxlbWVudHMuYW5pbWF0aW9uc1RpdGxlcywgZWxlbWVudCA9PiB7XG5cdFx0XHRyZXR1cm4gbmV3IFRpdGxlKHtcblx0XHRcdFx0ZWxlbWVudCxcblx0XHRcdH0pXG5cdFx0fSlcblxuXHRcdHRoaXMuYW5pbWF0aW9ucy5wdXNoKC4uLnRoaXMuYW5pbWF0aW9uc1RpdGxlcylcblxuXHRcdC8vIHBhcmFncmFwaFxuXHRcdHRoaXMuYW5pbWF0aW9uc1BhcmFncmFwaHMgPSBtYXAodGhpcy5lbGVtZW50cy5hbmltYXRpb25zUGFyYWdyYXBocywgZWxlbWVudCA9PiB7XG5cdFx0XHRyZXR1cm4gbmV3IFBhcmFncmFwaCh7XG5cdFx0XHRcdGVsZW1lbnQsXG5cdFx0XHR9KVxuXHRcdH0pXG5cblx0XHR0aGlzLmFuaW1hdGlvbnMucHVzaCguLi50aGlzLmFuaW1hdGlvbnNQYXJhZ3JhcGhzKVxuXG5cdFx0Ly8gbGFiZWxcblx0XHR0aGlzLmFuaW1hdGlvbnNMYWJlbCA9IG1hcCh0aGlzLmVsZW1lbnRzLmFuaW1hdGlvbnNMYWJlbCwgZWxlbWVudCA9PiB7XG5cdFx0XHRyZXR1cm4gbmV3IExhYmVsKHtcblx0XHRcdFx0ZWxlbWVudCxcblx0XHRcdH0pXG5cdFx0fSlcblxuXHRcdHRoaXMuYW5pbWF0aW9ucy5wdXNoKC4uLnRoaXMuYW5pbWF0aW9uc0xhYmVsKVxuXG5cdFx0Ly8gaGlnaGxpZ2h0XG5cdFx0dGhpcy5hbmltYXRpb25zSGlnaGxpZ2h0cyA9IG1hcCh0aGlzLmVsZW1lbnRzLmFuaW1hdGlvbnNIaWdobGlnaHRzLCBlbGVtZW50ID0+IHtcblx0XHRcdHJldHVybiBuZXcgSGlnaGxpZ2h0KHtcblx0XHRcdFx0ZWxlbWVudCxcblx0XHRcdH0pXG5cdFx0fSlcblxuXHRcdHRoaXMuYW5pbWF0aW9ucy5wdXNoKC4uLnRoaXMuYW5pbWF0aW9uc0hpZ2hsaWdodHMpXG5cdH1cblxuXHRjcmVhdGVQcmVsb2FkZXIoKSB7XG5cdFx0dGhpcy5wcmVsb2FkZXJzID0gbWFwKHRoaXMuZWxlbWVudHMucHJlbG9hZGVycywgZWxlbWVudCA9PiB7XG5cdFx0XHRyZXR1cm4gbmV3IEFzeW5jTG9hZCh7IGVsZW1lbnQgfSlcblx0XHR9KVxuXHR9XG5cblx0c2hvdygpIHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG5cdFx0XHRDb2xvcnNNYW5hZ2VyLmNoYW5nZSh7XG5cdFx0XHRcdGJhY2tncm91bmRDb2xvcjogdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1iYWNrZ3JvdW5kJyksXG5cdFx0XHRcdGNvbG9yOiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbG9yJyksXG5cdFx0XHR9KVxuXHRcdFx0dGhpcy5hbmltYXRpb25JbiA9IEdTQVAudGltZWxpbmUoKVxuXHRcdFx0R1NBUC5mcm9tVG8oXG5cdFx0XHRcdHRoaXMuZWxlbWVudCxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGF1dG9BbHBoYTogMCxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGF1dG9BbHBoYTogMSxcblx0XHRcdFx0fVxuXHRcdFx0KVxuXG5cdFx0XHR0aGlzLmFuaW1hdGlvbkluLmNhbGwoXyA9PiB7XG5cdFx0XHRcdHRoaXMsIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKVxuXHRcdFx0XHRyZXNvbHZlKClcblx0XHRcdH0pXG5cdFx0fSlcblx0fVxuXG5cdGhpZGUoKSB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuXHRcdFx0dGhpcy5kZXN0cm95KClcblxuXHRcdFx0dGhpcy5hbmltYXRpb25PdXQgPSBHU0FQLnRpbWVsaW5lKClcblxuXHRcdFx0R1NBUC50byh0aGlzLmVsZW1lbnQsIHtcblx0XHRcdFx0YXV0b0FscGhhOiAwLFxuXHRcdFx0XHRvbkNvbXBsZXRlOiByZXNvbHZlLFxuXHRcdFx0fSlcblx0XHR9KVxuXHR9XG5cblx0b25SZXNpemUoKSB7XG5cdFx0aWYgKHRoaXMuZWxlbWVudHMud3JhcHBlcilcblx0XHRcdHRoaXMuc2Nyb2xsLmxpbWl0ID0gdGhpcy5lbGVtZW50cy53cmFwcGVyLmNsaWVudEhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodFxuXG5cdFx0ZWFjaCh0aGlzLmFuaW1hdGlvbnMsIGFuaW1hdGlvbiA9PiBhbmltYXRpb24ub25SZXNpemUoKSlcblx0fVxuXG5cdG9uV2hlZWwoeyBwaXhlbFkgfSkge1xuXHRcdHRoaXMuc2Nyb2xsLnRhcmdldCArPSBwaXhlbFlcblx0fVxuXG5cdC8qIExvb3AgKi9cblxuXHR1cGRhdGUoKSB7XG5cdFx0dGhpcy5zY3JvbGwudGFyZ2V0ID0gR1NBUC51dGlscy5jbGFtcCgwLCB0aGlzLnNjcm9sbC5saW1pdCwgdGhpcy5zY3JvbGwudGFyZ2V0KVxuXG5cdFx0dGhpcy5zY3JvbGwuY3VycmVudCA9IEdTQVAudXRpbHMuaW50ZXJwb2xhdGUodGhpcy5zY3JvbGwuY3VycmVudCwgdGhpcy5zY3JvbGwudGFyZ2V0LCAwLjEpXG5cblx0XHRpZiAodGhpcy5zY3JvbGwuY3VycmVudCA8IDAuMDEpIHtcblx0XHRcdHRoaXMuc2Nyb2xsLmN1cnJlbnQgPSAwXG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuZWxlbWVudHMud3JhcHBlcilcblx0XHRcdHRoaXMuZWxlbWVudHMud3JhcHBlci5zdHlsZVt0aGlzLnRyYW5zZm9ybVByZWZpeF0gPSBgdHJhbnNsYXRlWSgtJHt0aGlzLnNjcm9sbC5jdXJyZW50fXB4KWBcblx0fVxuXG5cdC8qIExpc3RlbmVycyAqL1xuXHRhZGRFdmVudExpc3RlbmVycygpIHt9XG5cblx0cmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7fVxuXG5cdGRlc3Ryb3koKSB7XG5cdFx0dGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpXG5cdH1cbn1cbiIsImltcG9ydCB7IFRleHR1cmUsIFByb2dyYW0sIE1lc2ggfSBmcm9tICdvZ2wnXG5pbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xuXG5pbXBvcnQgZnJhZ21lbnQgZnJvbSAnc2hhZGVycy9wbGFuZS1mcmFnbWVudC5nbHNsJ1xuaW1wb3J0IHZlcnRleCBmcm9tICdzaGFkZXJzL3BsYW5lLXZlcnRleC5nbHNsJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XG5cdGNvbnN0cnVjdG9yKHsgZWxlbWVudCwgZ2VvbWV0cnksIGdsLCBpbmRleCwgc2NlbmUsIHNpemVzIH0pIHtcblx0XHR0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG5cdFx0dGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5XG5cdFx0dGhpcy5nbCA9IGdsXG5cdFx0dGhpcy5zY2VuZSA9IHNjZW5lXG5cdFx0dGhpcy5pbmRleCA9IGluZGV4XG5cdFx0dGhpcy5zaXplcyA9IHNpemVzXG5cblx0XHR0aGlzLmNyZWF0ZVRleHR1cmUoKVxuXHRcdHRoaXMuY3JlYXRlUHJvZ3JhbSgpXG5cdFx0dGhpcy5jcmVhdGVNZXNoKClcblxuXHRcdHRoaXMuZXh0cmEgPSB7XG5cdFx0XHR4OiAwLFxuXHRcdFx0eTogMCxcblx0XHR9XG5cdH1cblxuXHRjcmVhdGVUZXh0dXJlKCkge1xuXHRcdHRoaXMudGV4dHVyZSA9IG5ldyBUZXh0dXJlKHRoaXMuZ2wpXG5cblx0XHR0aGlzLmltYWdlID0gbmV3IHdpbmRvdy5JbWFnZSgpXG5cdFx0dGhpcy5pbWFnZS5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnXG5cdFx0dGhpcy5pbWFnZS5zcmMgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXNyYycpXG5cdFx0dGhpcy5pbWFnZS5vbmxvYWQgPSBfID0+ICh0aGlzLnRleHR1cmUuaW1hZ2UgPSB0aGlzLmltYWdlKVxuXHR9XG5cblx0Y3JlYXRlUHJvZ3JhbSgpIHtcblx0XHR0aGlzLnByb2dyYW0gPSBuZXcgUHJvZ3JhbSh0aGlzLmdsLCB7XG5cdFx0XHRmcmFnbWVudCxcblx0XHRcdHZlcnRleCxcblx0XHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRcdHRNYXA6IHsgdmFsdWU6IHRoaXMudGV4dHVyZSB9LFxuXHRcdFx0fSxcblx0XHR9KVxuXHR9XG5cblx0Y3JlYXRlTWVzaCgpIHtcblx0XHR0aGlzLm1lc2ggPSBuZXcgTWVzaCh0aGlzLmdsLCB7XG5cdFx0XHRnZW9tZXRyeTogdGhpcy5nZW9tZXRyeSxcblx0XHRcdHByb2dyYW06IHRoaXMucHJvZ3JhbSxcblx0XHR9KVxuXG5cdFx0dGhpcy5tZXNoLnNldFBhcmVudCh0aGlzLnNjZW5lKVxuXG5cdFx0dGhpcy5tZXNoLnJvdGF0aW9uLnogPSBHU0FQLnV0aWxzLnJhbmRvbSgtTWF0aC5QSSAqIDAuMDMsIE1hdGguUEkgKiAwLjAzKVxuXHR9XG5cblx0Y3JlYXRlQm91bmRzKHsgc2l6ZXMgfSkge1xuXHRcdHRoaXMuc2l6ZXMgPSBzaXplc1xuXG5cdFx0dGhpcy5ib3VuZHMgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcblxuXHRcdHRoaXMudXBkYXRlU2NhbGUoc2l6ZXMpXG5cdFx0dGhpcy51cGRhdGVYKClcblx0XHR0aGlzLnVwZGF0ZVkoKVxuXHR9XG5cblx0dXBkYXRlU2NhbGUoKSB7XG5cdFx0dGhpcy53aWR0aCA9IHRoaXMuYm91bmRzLndpZHRoIC8gd2luZG93LmlubmVyV2lkdGhcblx0XHR0aGlzLmhlaWdodCA9IHRoaXMuYm91bmRzLmhlaWdodCAvIHdpbmRvdy5pbm5lckhlaWdodFxuXG5cdFx0dGhpcy5tZXNoLnNjYWxlLnggPSB0aGlzLnNpemVzLndpZHRoICogdGhpcy53aWR0aFxuXHRcdHRoaXMubWVzaC5zY2FsZS55ID0gdGhpcy5zaXplcy5oZWlnaHQgKiB0aGlzLmhlaWdodFxuXHR9XG5cdHVwZGF0ZVgoeCA9IDApIHtcblx0XHR0aGlzLnggPSAodGhpcy5ib3VuZHMubGVmdCArIHgpIC8gd2luZG93LmlubmVyV2lkdGhcblxuXHRcdHRoaXMubWVzaC5wb3NpdGlvbi54ID1cblx0XHRcdC10aGlzLnNpemVzLndpZHRoIC8gMiArIHRoaXMubWVzaC5zY2FsZS54IC8gMiArIHRoaXMueCAqIHRoaXMuc2l6ZXMud2lkdGggKyB0aGlzLmV4dHJhLnhcblx0fVxuXHR1cGRhdGVZKHkgPSAwKSB7XG5cdFx0dGhpcy55ID0gKHRoaXMuYm91bmRzLnRvcCArIHkpIC8gd2luZG93LmlubmVySGVpZ2h0XG5cblx0XHR0aGlzLm1lc2gucG9zaXRpb24ueSA9XG5cdFx0XHR0aGlzLnNpemVzLmhlaWdodCAvIDIgLSB0aGlzLm1lc2guc2NhbGUueSAvIDIgLSB0aGlzLnkgKiB0aGlzLnNpemVzLmhlaWdodCArIHRoaXMuZXh0cmEueVxuXHR9XG5cblx0dXBkYXRlKHNjcm9sbCkge1xuXHRcdGlmICghdGhpcy5ib3VuZHMpIHJldHVyblxuXG5cdFx0dGhpcy51cGRhdGVYKHNjcm9sbC54KVxuXHRcdHRoaXMudXBkYXRlWShzY3JvbGwueSlcblx0fVxuXG5cdG9uUmVzaXplKHNpemVzLCBzY3JvbGwpIHtcblx0XHR0aGlzLmNyZWF0ZUJvdW5kcyhzaXplcylcblx0XHR0aGlzLmV4dHJhID0ge1xuXHRcdFx0eDogMCxcblx0XHRcdHk6IDAsXG5cdFx0fVxuXHRcdHRoaXMudXBkYXRlWChzY3JvbGwgPyBzY3JvbGwueCA6IDApXG5cdFx0dGhpcy51cGRhdGVZKHNjcm9sbCA/IHNjcm9sbC55IDogMClcblx0fVxufVxuIiwiaW1wb3J0IE1lZGlhIGZyb20gJy4vTWVkaWEnXG5pbXBvcnQgbWFwIGZyb20gJ2xvZGFzaC9tYXAnXG5pbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xuXG5pbXBvcnQgeyBQbGFuZSwgVHJhbnNmb3JtIH0gZnJvbSAnb2dsJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XG5cdGNvbnN0cnVjdG9yKHsgZ2wsIHNjZW5lLCBzaXplcyB9KSB7XG5cdFx0dGhpcy5ncm91cCA9IG5ldyBUcmFuc2Zvcm0oKVxuXHRcdHRoaXMuZ2wgPSBnbFxuXHRcdHRoaXMuc2l6ZXMgPSBzaXplc1xuXG5cdFx0dGhpcy5nYWxsZXJ5RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ob21lX19nYWxsZXJ5Jylcblx0XHR0aGlzLm1lZGlhc0VsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmhvbWVfX2dhbGxlcnlfX21lZGlhX19pbWFnZScpXG5cblx0XHR0aGlzLmNyZWF0ZUdlb21ldHJ5KClcblx0XHR0aGlzLmNyZWF0ZUdhbGxlcnkoKVxuXG5cdFx0dGhpcy5ncm91cC5zZXRQYXJlbnQoc2NlbmUpXG5cblx0XHR0aGlzLnggPSB7XG5cdFx0XHRjdXJyZW50OiAwLFxuXHRcdFx0dGFyZ2V0OiAwLFxuXHRcdFx0bGVycDogMC4xLFxuXHRcdH1cblxuXHRcdHRoaXMueSA9IHtcblx0XHRcdGN1cnJlbnQ6IDAsXG5cdFx0XHR0YXJnZXQ6IDAsXG5cdFx0XHRsZXJwOiAwLjEsXG5cdFx0fVxuXG5cdFx0dGhpcy5zY3JvbGxDdXJyZW50ID0ge1xuXHRcdFx0eDogMCxcblx0XHRcdHk6IDAsXG5cdFx0fVxuXG5cdFx0dGhpcy5zY3JvbGwgPSB7XG5cdFx0XHR4OiAwLFxuXHRcdFx0eTogMCxcblx0XHR9XG5cdH1cblxuXHRjcmVhdGVHZW9tZXRyeSgpIHtcblx0XHR0aGlzLmdlb21ldHJ5ID0gbmV3IFBsYW5lKHRoaXMuZ2wpXG5cdH1cblxuXHRjcmVhdGVHYWxsZXJ5KCkge1xuXHRcdHRoaXMubWVkaWFzID0gbWFwKHRoaXMubWVkaWFzRWxlbWVudHMsIChlbGVtZW50LCBpbmRleCkgPT4ge1xuXHRcdFx0cmV0dXJuIG5ldyBNZWRpYSh7XG5cdFx0XHRcdGVsZW1lbnQsXG5cdFx0XHRcdGdlb21ldHJ5OiB0aGlzLmdlb21ldHJ5LFxuXHRcdFx0XHRpbmRleCxcblx0XHRcdFx0Z2w6IHRoaXMuZ2wsXG5cdFx0XHRcdHNjZW5lOiB0aGlzLmdyb3VwLFxuXHRcdFx0XHRzaXplczogdGhpcy5zaXplcyxcblx0XHRcdH0pXG5cdFx0fSlcblx0fVxuXG5cdG9uUmVzaXplKGV2ZW50KSB7XG5cdFx0dGhpcy5nYWxsZXJ5Qm91bmRzID0gdGhpcy5nYWxsZXJ5RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG5cdFx0dGhpcy5zaXplcyA9IGV2ZW50LnNpemVzXG5cblx0XHR0aGlzLmdhbGxlcnlTaXplcyA9IHtcblx0XHRcdGhlaWdodDogKHRoaXMuZ2FsbGVyeUJvdW5kcy5oZWlnaHQgLyB3aW5kb3cuaW5uZXJIZWlnaHQpICogdGhpcy5zaXplcy5oZWlnaHQsXG5cdFx0XHR3aWR0aDogKHRoaXMuZ2FsbGVyeUJvdW5kcy53aWR0aCAvIHdpbmRvdy5pbm5lcldpZHRoKSAqIHRoaXMuc2l6ZXMud2lkdGgsXG5cdFx0fVxuXG5cdFx0dGhpcy5zY3JvbGwueCA9IHRoaXMueC50YXJnZXQgPSAwXG5cdFx0dGhpcy5zY3JvbGwueSA9IHRoaXMueS50YXJnZXQgPSAwXG5cblx0XHRpZiAodGhpcy5zY3JvbGwpIG1hcCh0aGlzLm1lZGlhcywgbWVkaWEgPT4gbWVkaWEub25SZXNpemUoZXZlbnQsIHRoaXMuc2Nyb2xsKSlcblx0fVxuXG5cdG9uVG91Y2hEb3duKHsgeCwgeSB9KSB7XG5cdFx0dGhpcy5zY3JvbGxDdXJyZW50LnggPSB0aGlzLnNjcm9sbC54XG5cdFx0dGhpcy5zY3JvbGxDdXJyZW50LnkgPSB0aGlzLnNjcm9sbC55XG5cdH1cblxuXHRvblRvdWNoTW92ZSh7IHgsIHkgfSkge1xuXHRcdGNvbnN0IHhEaXN0YW5jZSA9IHguc3RhcnQgLSB4LmVuZFxuXHRcdGNvbnN0IHlEaXN0YW5jZSA9IHkuc3RhcnQgLSB5LmVuZFxuXG5cdFx0dGhpcy54LnRhcmdldCA9IHRoaXMuc2Nyb2xsQ3VycmVudC54IC0geERpc3RhbmNlXG5cdFx0dGhpcy55LnRhcmdldCA9IHRoaXMuc2Nyb2xsQ3VycmVudC55IC0geURpc3RhbmNlXG5cdH1cblxuXHRvblRvdWNoVXAoeyB4LCB5IH0pIHt9XG5cblx0b25XaGVlbCh7IHBpeGVsWCwgcGl4ZWxZIH0pIHtcblx0XHR0aGlzLngudGFyZ2V0ICs9IHBpeGVsWFxuXHRcdHRoaXMueS50YXJnZXQgKz0gcGl4ZWxZXG5cdH1cblxuXHR1cGRhdGUoKSB7XG5cdFx0aWYgKCF0aGlzLmdhbGxlcnlCb3VuZHMpIHJldHVyblxuXG5cdFx0dGhpcy54LmN1cnJlbnQgPSBHU0FQLnV0aWxzLmludGVycG9sYXRlKHRoaXMueC5jdXJyZW50LCB0aGlzLngudGFyZ2V0LCB0aGlzLngubGVycClcblx0XHR0aGlzLnkuY3VycmVudCA9IEdTQVAudXRpbHMuaW50ZXJwb2xhdGUodGhpcy55LmN1cnJlbnQsIHRoaXMueS50YXJnZXQsIHRoaXMueS5sZXJwKVxuXG5cdFx0aWYgKHRoaXMuc2Nyb2xsLnggPCB0aGlzLnguY3VycmVudCkge1xuXHRcdFx0dGhpcy54LmRpcmVjdGlvbiA9ICdyaWdodCdcblx0XHR9IGVsc2UgaWYgKHRoaXMuc2Nyb2xsLnggPiB0aGlzLnguY3VycmVudCkge1xuXHRcdFx0dGhpcy54LmRpcmVjdGlvbiA9ICdsZWZ0J1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnNjcm9sbC55IDwgdGhpcy55LmN1cnJlbnQpIHtcblx0XHRcdHRoaXMueS5kaXJlY3Rpb24gPSAndG9wJ1xuXHRcdH0gZWxzZSBpZiAodGhpcy5zY3JvbGwueSA+IHRoaXMueS5jdXJyZW50KSB7XG5cdFx0XHR0aGlzLnkuZGlyZWN0aW9uID0gJ2JvdHRvbSdcblx0XHR9XG5cblx0XHR0aGlzLnNjcm9sbC54ID0gdGhpcy54LmN1cnJlbnRcblx0XHR0aGlzLnNjcm9sbC55ID0gdGhpcy55LmN1cnJlbnRcblxuXHRcdG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhLCBpbmRleCkgPT4ge1xuXHRcdFx0Y29uc3Qgc2NhbGVYID0gbWVkaWEubWVzaC5zY2FsZS54IC8gMlxuXHRcdFx0Y29uc3Qgc2NhbGVZID0gbWVkaWEubWVzaC5zY2FsZS55IC8gMlxuXG5cdFx0XHQvKiBYLWF4aXMgKi9cblx0XHRcdGlmICh0aGlzLnguZGlyZWN0aW9uID09PSAnbGVmdCcpIHtcblx0XHRcdFx0Y29uc3QgeCA9IG1lZGlhLm1lc2gucG9zaXRpb24ueCArIHNjYWxlWFxuXG5cdFx0XHRcdGlmICh4IDwgLXRoaXMuc2l6ZXMud2lkdGggLyAyKSB7XG5cdFx0XHRcdFx0bWVkaWEuZXh0cmEueCArPSB0aGlzLmdhbGxlcnlTaXplcy53aWR0aFxuXHRcdFx0XHRcdG1lZGlhLm1lc2gucm90YXRpb24ueiA9IEdTQVAudXRpbHMucmFuZG9tKC1NYXRoLlBJICogMC4wMywgTWF0aC5QSSAqIDAuMDMpXG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodGhpcy54LmRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xuXHRcdFx0XHRjb25zdCB4ID0gbWVkaWEubWVzaC5wb3NpdGlvbi54IC0gc2NhbGVYXG5cblx0XHRcdFx0aWYgKHggPiB0aGlzLnNpemVzLndpZHRoIC8gMikge1xuXHRcdFx0XHRcdG1lZGlhLmV4dHJhLnggLT0gdGhpcy5nYWxsZXJ5U2l6ZXMud2lkdGhcblx0XHRcdFx0XHRtZWRpYS5tZXNoLnJvdGF0aW9uLnogPSBHU0FQLnV0aWxzLnJhbmRvbSgtTWF0aC5QSSAqIDAuMDMsIE1hdGguUEkgKiAwLjAzKVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8qIFktYXhpcyAqL1xuXHRcdFx0aWYgKHRoaXMueS5kaXJlY3Rpb24gPT09ICd0b3AnKSB7XG5cdFx0XHRcdGNvbnN0IHkgPSBtZWRpYS5tZXNoLnBvc2l0aW9uLnkgLSBzY2FsZVlcblx0XHRcdFx0aWYgKHkgPCAtdGhpcy5zaXplcy53aWR0aCAvIDIpIHtcblx0XHRcdFx0XHRtZWRpYS5leHRyYS55ICs9IHRoaXMuZ2FsbGVyeVNpemVzLmhlaWdodFxuXHRcdFx0XHRcdG1lZGlhLm1lc2gucm90YXRpb24ueiA9IEdTQVAudXRpbHMucmFuZG9tKC1NYXRoLlBJICogMC4wMywgTWF0aC5QSSAqIDAuMDMpXG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodGhpcy55LmRpcmVjdGlvbiA9PT0gJ2JvdHRvbScpIHtcblx0XHRcdFx0Y29uc3QgeSA9IG1lZGlhLm1lc2gucG9zaXRpb24ueSArIHNjYWxlWVxuXHRcdFx0XHRpZiAoeSA+IHRoaXMuc2l6ZXMud2lkdGggLyAyKSB7XG5cdFx0XHRcdFx0bWVkaWEuZXh0cmEueSAtPSB0aGlzLmdhbGxlcnlTaXplcy5oZWlnaHRcblx0XHRcdFx0XHRtZWRpYS5tZXNoLnJvdGF0aW9uLnogPSBHU0FQLnV0aWxzLnJhbmRvbSgtTWF0aC5QSSAqIDAuMDMsIE1hdGguUEkgKiAwLjAzKVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdG1lZGlhLnVwZGF0ZSh0aGlzLnNjcm9sbClcblx0XHR9KVxuXHR9XG59XG4iLCJpbXBvcnQgeyBDYW1lcmEsIFJlbmRlcmVyLCBUcmFuc2Zvcm0gfSBmcm9tICdvZ2wnXG5cbmltcG9ydCBIb21lIGZyb20gJy4vSG9tZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FudmFzIHtcblx0Y29uc3RydWN0b3IoeyB0ZW1wbGF0ZSB9KSB7XG5cdFx0dGhpcy54ID0ge1xuXHRcdFx0c3RhcnQ6IDAsXG5cdFx0XHRkaXN0YW5jZTogMCxcblx0XHRcdGVuZDogMCxcblx0XHR9XG5cdFx0dGhpcy55ID0ge1xuXHRcdFx0c3RhcnQ6IDAsXG5cdFx0XHRkaXN0YW5jZTogMCxcblx0XHRcdGVuZDogMCxcblx0XHR9XG5cblx0XHR0aGlzLmNyZWF0ZVJlbmRlcmVyKClcblx0XHR0aGlzLmNyZWF0ZUNhbWVyYSgpXG5cdFx0dGhpcy5jcmVhdGVTY2VuZSgpXG5cblx0XHR0aGlzLm9uUmVzaXplKClcblxuXHRcdHRoaXMuY3JlYXRlSG9tZSgpXG5cdH1cblxuXHRjcmVhdGVSZW5kZXJlcigpIHtcblx0XHR0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKHtcblx0XHRcdGFscGhhOiB0cnVlLFxuXHRcdFx0YW50aWFsaWFzOiB0cnVlLFxuXHRcdH0pXG5cblx0XHR0aGlzLmdsID0gdGhpcy5yZW5kZXJlci5nbFxuXG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmdsLmNhbnZhcylcblx0fVxuXG5cdGNyZWF0ZUNhbWVyYSgpIHtcblx0XHR0aGlzLmNhbWVyYSA9IG5ldyBDYW1lcmEodGhpcy5nbClcblx0XHR0aGlzLmNhbWVyYS5wb3NpdGlvbi56ID0gNVxuXHR9XG5cblx0Y3JlYXRlSG9tZSgpIHtcblx0XHR0aGlzLmhvbWUgPSBuZXcgSG9tZSh7XG5cdFx0XHRnbDogdGhpcy5nbCxcblx0XHRcdHNjZW5lOiB0aGlzLnNjZW5lLFxuXHRcdFx0c2l6ZXM6IHRoaXMuc2l6ZXMsXG5cdFx0fSlcblx0fVxuXG5cdGNyZWF0ZVNjZW5lKCkge1xuXHRcdHRoaXMuc2NlbmUgPSBuZXcgVHJhbnNmb3JtKClcblx0fVxuXG5cdG9uUmVzaXplKCkge1xuXHRcdHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KVxuXG5cdFx0dGhpcy5jYW1lcmEucGVyc3BlY3RpdmUoe1xuXHRcdFx0YXNwZWN0OiB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCxcblx0XHR9KVxuXG5cdFx0Y29uc3QgZm92ID0gdGhpcy5jYW1lcmEuZm92ICogKE1hdGguUEkgLyAxODApXG5cdFx0Y29uc3QgaGVpZ2h0ID0gMiAqIE1hdGgudGFuKGZvdiAvIDIpICogdGhpcy5jYW1lcmEucG9zaXRpb24uelxuXHRcdGNvbnN0IHdpZHRoID0gaGVpZ2h0ICogdGhpcy5jYW1lcmEuYXNwZWN0XG5cblx0XHR0aGlzLnNpemVzID0ge1xuXHRcdFx0aGVpZ2h0LFxuXHRcdFx0d2lkdGgsXG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuaG9tZSlcblx0XHRcdHRoaXMuaG9tZS5vblJlc2l6ZSh7XG5cdFx0XHRcdHNpemVzOiB0aGlzLnNpemVzLFxuXHRcdFx0fSlcblx0fVxuXG5cdG9uVG91Y2hEb3duKGV2ZW50KSB7XG5cdFx0dGhpcy5pc0Rvd24gPSB0cnVlXG5cblx0XHR0aGlzLnguc3RhcnQgPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYIDogZXZlbnQuY2xpZW50WFxuXHRcdHRoaXMueS5zdGFydCA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdLmNsaWVudFkgOiBldmVudC5jbGllbnRZXG5cblx0XHRpZiAodGhpcy5ob21lKSB0aGlzLmhvbWUub25Ub3VjaERvd24oeyB4OiB0aGlzLngsIHk6IHRoaXMueSB9KVxuXHR9XG5cdG9uVG91Y2hNb3ZlKGV2ZW50KSB7XG5cdFx0aWYgKCF0aGlzLmlzRG93bikgcmV0dXJuXG5cblx0XHRjb25zdCB4ID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCA6IGV2ZW50LmNsaWVudFhcblx0XHRjb25zdCB5ID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WSA6IGV2ZW50LmNsaWVudFlcblxuXHRcdHRoaXMueC5lbmQgPSB4XG5cdFx0dGhpcy55LmVuZCA9IHlcblxuXHRcdGlmICh0aGlzLmhvbWUpIHRoaXMuaG9tZS5vblRvdWNoTW92ZSh7IHg6IHRoaXMueCwgeTogdGhpcy55IH0pXG5cdH1cblx0b25Ub3VjaFVwKGV2ZW50KSB7XG5cdFx0dGhpcy5pc0Rvd24gPSBmYWxzZVxuXG5cdFx0Y29uc3QgeCA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdLmNsaWVudFggOiBldmVudC5jbGllbnRYXG5cdFx0Y29uc3QgeSA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdLmNsaWVudFkgOiBldmVudC5jbGllbnRZXG5cblx0XHR0aGlzLnguZW5kID0geFxuXHRcdHRoaXMueS5lbmQgPSB5XG5cblx0XHRpZiAodGhpcy5ob21lKSB0aGlzLmhvbWUub25Ub3VjaFVwKHsgeDogdGhpcy54LCB5OiB0aGlzLnkgfSlcblx0fVxuXG5cdG9uV2hlZWwoZXZlbnQpIHtcblx0XHRpZiAodGhpcy5ob21lKSB7XG5cdFx0XHR0aGlzLmhvbWUub25XaGVlbChldmVudClcblx0XHR9XG5cdH1cblxuXHR1cGRhdGUoKSB7XG5cdFx0aWYgKHRoaXMuaG9tZSkgdGhpcy5ob21lLnVwZGF0ZSgpXG5cblx0XHR0aGlzLnJlbmRlcmVyLnJlbmRlcih7XG5cdFx0XHRjYW1lcmE6IHRoaXMuY2FtZXJhLFxuXHRcdFx0c2NlbmU6IHRoaXMuc2NlbmUsXG5cdFx0fSlcblx0fVxufVxuIiwiaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCdcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnY2xhc3Nlcy9Db21wb25lbnQnXG5cbmltcG9ydCB7IENPTE9SX0JSSUdIVF9HUkFZLCBDT0xPUl9RVUFSVEVSX1NQQU5JU0hfV0hJVEUgfSBmcm9tICd1dGlscy9jb2xvcnMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hdmlnYXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xuXHRjb25zdHJ1Y3Rvcih7IHRlbXBsYXRlIH0pIHtcblx0XHRzdXBlcih7XG5cdFx0XHRlbGVtZW50OiAnLm5hdmlnYXRpb24nLFxuXHRcdFx0ZWxlbWVudHM6IHtcblx0XHRcdFx0aXRlbXM6ICcubmF2aWdhdGlvbl9fbGlzdF9faXRlbScsXG5cdFx0XHRcdGxpbmtzOiAnLm5hdmlnYXRpb25fX2xpc3RfX2xpbmsnLFxuXHRcdFx0fSxcblx0XHR9KVxuXG5cdFx0dGhpcy5vbkNoYW5nZSh0ZW1wbGF0ZSlcblx0fVxuXG5cdG9uQ2hhbmdlKHRlbXBsYXRlKSB7XG5cdFx0aWYgKHRlbXBsYXRlID09PSAnYWJvdXQnKSB7XG5cdFx0XHRHU0FQLnRvKHRoaXMuZWxlbWVudCwge1xuXHRcdFx0XHRhdXRvQWxwaGE6IDEsXG5cdFx0XHRcdGNvbG9yOiBDT0xPUl9CUklHSFRfR1JBWSxcblx0XHRcdFx0ZHVyYXRpb246IDEuNSxcblx0XHRcdH0pXG5cblx0XHRcdEdTQVAudG8odGhpcy5lbGVtZW50cy5pdGVtc1swXSwge1xuXHRcdFx0XHRhdXRvQWxwaGE6IDEsXG5cdFx0XHRcdGRlbGF5OiAwLjc1LFxuXHRcdFx0XHRkdXJhdGlvbjogMC43NSxcblx0XHRcdH0pXG5cdFx0XHRHU0FQLnRvKHRoaXMuZWxlbWVudHMuaXRlbXNbMV0sIHtcblx0XHRcdFx0YXV0b0FscGhhOiAwLFxuXHRcdFx0XHRkdXJhdGlvbjogMC43NSxcblx0XHRcdH0pXG5cdFx0fSBlbHNlIHtcblx0XHRcdEdTQVAudG8odGhpcy5lbGVtZW50LCB7XG5cdFx0XHRcdGF1dG9BbHBoYTogMSxcblx0XHRcdFx0Y29sb3I6IENPTE9SX1FVQVJURVJfU1BBTklTSF9XSElURSxcblx0XHRcdFx0ZHVyYXRpb246IDEuNSxcblx0XHRcdH0pXG5cblx0XHRcdEdTQVAudG8odGhpcy5lbGVtZW50cy5pdGVtc1swXSwge1xuXHRcdFx0XHRhdXRvQWxwaGE6IDAsXG5cdFx0XHRcdGR1cmF0aW9uOiAwLjc1LFxuXHRcdFx0fSlcblx0XHRcdEdTQVAudG8odGhpcy5lbGVtZW50cy5pdGVtc1sxXSwge1xuXHRcdFx0XHRhdXRvQWxwaGE6IDEsXG5cdFx0XHRcdGRlbGF5OiAwLjc1LFxuXHRcdFx0XHRkdXJhdGlvbjogMC43NSxcblx0XHRcdH0pXG5cdFx0fVxuXHR9XG59XG4iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gXCJjbGFzc2VzL0NvbXBvbmVudFwiO1xuaW1wb3J0IGVhY2ggZnJvbSBcImxvZGFzaC9lYWNoXCI7XG5pbXBvcnQgR1NBUCBmcm9tIFwiZ3NhcFwiO1xuaW1wb3J0IHsgc3BsaXQgfSBmcm9tIFwidXRpbHMvdGV4dFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcmVsb2FkZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7XG4gICAgICBlbGVtZW50OiBcIi5wcmVsb2FkZXJcIixcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHRpdGxlOiBcIi5wcmVsb2FkZXJfX3RleHRcIixcbiAgICAgICAgbnVtYmVyOiBcIi5wcmVsb2FkZXJfX251bWJlclwiLFxuICAgICAgICBudW1iZXJUZXh0OiBcIi5wcmVsb2FkZXJfX251bWJlcl9fdGV4dFwiLFxuICAgICAgICBpbWFnZXM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbWdcIiksXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgc3BsaXQoe1xuICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50cy50aXRsZSxcbiAgICAgIGV4cHJlc3Npb246IFwiPGJyPlwiLFxuICAgIH0pO1xuICAgIHNwbGl0KHtcbiAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudHMudGl0bGUsXG4gICAgICBleHByZXNzaW9uOiBcIjxicj5cIixcbiAgICB9KTtcblxuICAgIHRoaXMuZWxlbWVudHMudGl0bGVTcGFucyA9XG4gICAgICB0aGlzLmVsZW1lbnRzLnRpdGxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJzcGFuIHNwYW5cIik7XG5cbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICB0aGlzLmNyZWF0ZUxvYWRlcigpO1xuICB9XG5cbiAgY3JlYXRlTG9hZGVyKCkge1xuICAgIGVhY2godGhpcy5lbGVtZW50cy5pbWFnZXMsIChlbGVtZW50KSA9PiB7XG4gICAgICBlbGVtZW50Lm9ubG9hZCA9IChfKSA9PiB0aGlzLm9uQXNzZXRMb2FkZWQoZWxlbWVudCk7XG4gICAgICBlbGVtZW50LnNyYyA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zcmNcIik7XG4gICAgfSk7XG4gIH1cblxuICBvbkFzc2V0TG9hZGVkKGltYWdlKSB7XG4gICAgdGhpcy5sZW5ndGggKz0gMTtcblxuICAgIGNvbnN0IHBlcmNlbnQgPSB0aGlzLmxlbmd0aCAvIHRoaXMuZWxlbWVudHMuaW1hZ2VzLmxlbmd0aDtcbiAgICB0aGlzLmVsZW1lbnRzLm51bWJlclRleHQuaW5uZXJIVE1MID0gYCR7TWF0aC5yb3VuZChwZXJjZW50ICogMTAwKX0lYDtcblxuICAgIGlmIChwZXJjZW50ID09PSAxKSB7XG4gICAgICB0aGlzLm9uTG9hZGVkKCk7XG4gICAgfVxuICB9XG5cbiAgb25Mb2FkZWQoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLmFuaW1hdGVPdXQgPSBHU0FQLnRpbWVsaW5lKHtcbiAgICAgICAgZGVsYXk6IDEuNSxcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmFuaW1hdGVPdXQudG8odGhpcy5lbGVtZW50cy50aXRsZVNwYW5zLCB7XG4gICAgICAgIGR1cmF0aW9uOiAxLjUsXG4gICAgICAgIGVhc2U6IFwiZXhwby5vdXRcIixcbiAgICAgICAgc3RhZ2dlcjogMC4xLFxuICAgICAgICB5OiBcIjEwMCVcIixcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmFuaW1hdGVPdXQudG8oXG4gICAgICAgIHRoaXMuZWxlbWVudHMubnVtYmVyVGV4dCxcbiAgICAgICAge1xuICAgICAgICAgIGF1dG9BbHBoYTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogMS41LFxuICAgICAgICAgIGVhc2U6IFwiZXhwby5vdXRcIixcbiAgICAgICAgICBzdGFnZ2VyOiAwLjEsXG4gICAgICAgICAgeTogNTAsXG4gICAgICAgIH0sXG4gICAgICAgIFwiLT0xLjRcIlxuICAgICAgKTtcblxuICAgICAgdGhpcy5hbmltYXRlT3V0LnRvKFxuICAgICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICAgIHtcbiAgICAgICAgICBkdXJhdGlvbjogMS41LFxuICAgICAgICAgIGVhc2U6IFwiZXhwby5vdXRcIixcbiAgICAgICAgICBzY2FsZVk6IDAsXG4gICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiBcIjEwMCUgMTAwJVwiLFxuICAgICAgICB9LFxuICAgICAgICBcIi09MVwiXG4gICAgICApO1xuXG4gICAgICB0aGlzLmFuaW1hdGVPdXQuY2FsbCgoXykgPT4ge1xuICAgICAgICB0aGlzLmVtaXQoXCJjb21wbGV0ZWRcIik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgfVxufVxuIiwiaW1wb3J0IEFib3V0IGZyb20gJ3BhZ2VzL0Fib3V0L2luZGV4LmpzJ1xuaW1wb3J0IENvbGxlY3Rpb25zIGZyb20gJ3BhZ2VzL0NvbGxlY3Rpb25zL2luZGV4LmpzJ1xuaW1wb3J0IERldGFpbCBmcm9tICdwYWdlcy9EZXRhaWwvaW5kZXguanMnXG5pbXBvcnQgSG9tZSBmcm9tICdwYWdlcy9Ib21lL2luZGV4LmpzJ1xuXG5pbXBvcnQgTm9ybWFsaXplV2hlZWwgZnJvbSAnbm9ybWFsaXplLXdoZWVsJ1xuaW1wb3J0IGVhY2ggZnJvbSAnbG9kYXNoL2VhY2gnXG5cbmltcG9ydCBDYW52YXMgZnJvbSAnY29tcG9uZW50cy9DYW52YXMvJ1xuXG5pbXBvcnQgUHJlbG9hZGVyIGZyb20gJ2NvbXBvbmVudHMvUHJlbG9hZGVyJ1xuaW1wb3J0IE5hdmlnYXRpb24gZnJvbSAnY29tcG9uZW50cy9OYXZpZ2F0aW9uJ1xuXG5jbGFzcyBBcHAge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLmNyZWF0ZUNvbnRlbnQoKVxuXG5cdFx0dGhpcy5jcmVhdGVQcmVsb2FkZXIoKVxuXHRcdHRoaXMuY3JlYXRlTmF2aWdhdGlvbigpXG5cblx0XHR0aGlzLmNyZWF0ZUNhbnZhcygpXG5cblx0XHR0aGlzLmNyZWF0ZVBhZ2VzKClcblxuXHRcdHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKVxuXHRcdHRoaXMuYWRkTGlua0xpc3RlbmVycygpXG5cblx0XHR0aGlzLnVwZGF0ZSgpXG5cdH1cblxuXHRjcmVhdGVOYXZpZ2F0aW9uKCkge1xuXHRcdHRoaXMubmF2aWdhdGlvbiA9IG5ldyBOYXZpZ2F0aW9uKHtcblx0XHRcdHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlLFxuXHRcdH0pXG5cdH1cblxuXHRjcmVhdGVQcmVsb2FkZXIoKSB7XG5cdFx0dGhpcy5wcmVsb2FkZXIgPSBuZXcgUHJlbG9hZGVyKClcblx0XHR0aGlzLnByZWxvYWRlci5vbmNlKCdjb21wbGV0ZWQnLCB0aGlzLm9uUHJlbG9hZGVkLmJpbmQodGhpcykpXG5cdH1cblxuXHRjcmVhdGVDYW52YXMoKSB7XG5cdFx0dGhpcy5jYW52YXMgPSBuZXcgQ2FudmFzKHtcbiAgICAgIHRlbXBsXG4gICAgfSlcblx0fVxuXG5cdGNyZWF0ZUNvbnRlbnQoKSB7XG5cdFx0dGhpcy5jb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKVxuXHRcdHRoaXMudGVtcGxhdGUgPSB0aGlzLmNvbnRlbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRlbXBsYXRlJylcblx0fVxuXG5cdGNyZWF0ZVBhZ2VzKCkge1xuXHRcdHRoaXMucGFnZXMgPSB7XG5cdFx0XHRhYm91dDogbmV3IEFib3V0KCksXG5cdFx0XHRjb2xsZWN0aW9uczogbmV3IENvbGxlY3Rpb25zKCksXG5cdFx0XHRkZXRhaWw6IG5ldyBEZXRhaWwoKSxcblx0XHRcdGhvbWU6IG5ldyBIb21lKCksXG5cdFx0fVxuXG5cdFx0dGhpcy5wYWdlID0gdGhpcy5wYWdlc1t0aGlzLnRlbXBsYXRlXVxuXHRcdHRoaXMucGFnZS5jcmVhdGUoKVxuXHR9XG5cblx0b25QcmVsb2FkZWQoKSB7XG5cdFx0dGhpcy5wcmVsb2FkZXIuZGVzdHJveSgpXG5cdFx0dGhpcy5vblJlc2l6ZSgpXG5cdFx0dGhpcy5wYWdlLnNob3coKVxuXHR9XG5cblx0b25Qb3BTdGF0ZSgpIHtcblx0XHR0aGlzLm9uQ2hhbmdlKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSlcblx0fVxuXG5cdGFzeW5jIG9uQ2hhbmdlKHVybCkge1xuXHRcdGF3YWl0IHRoaXMucGFnZS5oaWRlKClcblxuXHRcdGNvbnN0IHJlcXVlc3QgPSBhd2FpdCB3aW5kb3cuZmV0Y2godXJsKVxuXG5cdFx0aWYgKHJlcXVlc3Quc3RhdHVzID09PSAyMDApIHtcblx0XHRcdGNvbnN0IGh0bWwgPSBhd2FpdCByZXF1ZXN0LnRleHQoKVxuXG5cdFx0XHRjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuXG5cdFx0XHR3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCB1cmwpXG5cblx0XHRcdGRpdi5pbm5lckhUTUwgPSBodG1sXG5cblx0XHRcdGNvbnN0IGRpdkNvbnRlbnQgPSBkaXYucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKVxuXG5cdFx0XHR0aGlzLnRlbXBsYXRlID0gZGl2Q29udGVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGVtcGxhdGUnKVxuXG5cdFx0XHR0aGlzLm5hdmlnYXRpb24ub25DaGFuZ2UodGhpcy50ZW1wbGF0ZSlcblxuXHRcdFx0dGhpcy5jb250ZW50LnNldEF0dHJpYnV0ZSgnZGF0YS10ZW1wbGF0ZScsIHRoaXMudGVtcGxhdGUpXG5cdFx0XHR0aGlzLmNvbnRlbnQuaW5uZXJIVE1MID0gZGl2Q29udGVudC5pbm5lckhUTUxcblxuXHRcdFx0dGhpcy5wYWdlID0gdGhpcy5wYWdlc1t0aGlzLnRlbXBsYXRlXVxuXG5cdFx0XHR0aGlzLnBhZ2UuY3JlYXRlKClcblx0XHRcdHRoaXMub25SZXNpemUoKVxuXG5cdFx0XHR0aGlzLnBhZ2Uuc2hvdygpXG5cblx0XHRcdHRoaXMuYWRkTGlua0xpc3RlbmVycygpXG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUubG9nKCdFcnJvcicsIGVycm9yKVxuXHRcdH1cblx0fVxuXG5cdG9uUmVzaXplKCkge1xuXHRcdGlmICh0aGlzLnBhZ2UgJiYgdGhpcy5wYWdlLm9uUmVzaXplKSB7XG5cdFx0XHR0aGlzLnBhZ2Uub25SZXNpemUoKVxuXHRcdH1cblxuXHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoXyA9PiB7XG5cdFx0XHRpZiAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMub25SZXNpemUpIHRoaXMuY2FudmFzLm9uUmVzaXplKClcblx0XHR9KVxuXHR9XG5cblx0b25Ub3VjaERvd24oZXZlbnQpIHtcblx0XHRpZiAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMub25Ub3VjaERvd24pIHRoaXMuY2FudmFzLm9uVG91Y2hEb3duKGV2ZW50KVxuXHR9XG5cdG9uVG91Y2hNb3ZlKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLm9uVG91Y2hNb3ZlKSB0aGlzLmNhbnZhcy5vblRvdWNoTW92ZShldmVudClcblx0fVxuXHRvblRvdWNoVXAoZXZlbnQpIHtcblx0XHRpZiAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMub25Ub3VjaFVwKSB0aGlzLmNhbnZhcy5vblRvdWNoVXAoZXZlbnQpXG5cdH1cblx0b25XaGVlbChldmVudCkge1xuXHRcdGNvbnN0IG5vcm1hbGl6ZWRXaGVlbCA9IE5vcm1hbGl6ZVdoZWVsKGV2ZW50KVxuXG5cdFx0aWYgKHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLm9uV2hlZWwpIHtcblx0XHRcdHRoaXMuY2FudmFzLm9uV2hlZWwobm9ybWFsaXplZFdoZWVsKVxuXHRcdH1cblxuXHRcdGlmICh0aGlzLnBhZ2UgJiYgdGhpcy5wYWdlLm9uV2hlZWwpIHtcblx0XHRcdHRoaXMucGFnZS5vbldoZWVsKG5vcm1hbGl6ZWRXaGVlbClcblx0XHR9XG5cdH1cblxuXHQvKiBMb29wICovXG5cdHVwZGF0ZSgpIHtcblx0XHRpZiAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMudXBkYXRlKSB7XG5cdFx0XHR0aGlzLmNhbnZhcy51cGRhdGUoKVxuXHRcdH1cblxuXHRcdGlmICh0aGlzLnBhZ2UgJiYgdGhpcy5wYWdlLnVwZGF0ZSkge1xuXHRcdFx0dGhpcy5wYWdlLnVwZGF0ZSgpXG5cdFx0fVxuXG5cdFx0dGhpcy5mcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGUuYmluZCh0aGlzKSlcblx0fVxuXG5cdC8qIExpc3RlbmVycyAqL1xuXHRhZGRMaW5rTGlzdGVuZXJzKCkge1xuXHRcdGNvbnN0IGxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYScpXG5cblx0XHRlYWNoKGxpbmtzLCBsaW5rID0+IHtcblx0XHRcdGxpbmsub25jbGljayA9IGV2ZW50ID0+IHtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKVxuXHRcdFx0XHRjb25zdCB7IGhyZWYgfSA9IGxpbmtcblx0XHRcdFx0dGhpcy5vbkNoYW5nZShocmVmKVxuXHRcdFx0fVxuXHRcdH0pXG5cdH1cblxuXHRhZGRFdmVudExpc3RlbmVycygpIHtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCB0aGlzLm9uUG9wU3RhdGUuYmluZCh0aGlzKSlcblxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXdoZWVsJywgdGhpcy5vbldoZWVsLmJpbmQodGhpcykpXG5cblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vblRvdWNoRG93bi5iaW5kKHRoaXMpKVxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uVG91Y2hNb3ZlLmJpbmQodGhpcykpXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLm9uVG91Y2hVcC5iaW5kKHRoaXMpKVxuXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uVG91Y2hEb3duLmJpbmQodGhpcykpXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmUuYmluZCh0aGlzKSlcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uVG91Y2hVcC5iaW5kKHRoaXMpKVxuXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25SZXNpemUuYmluZCh0aGlzKSlcblx0fVxufVxuXG5uZXcgQXBwKClcbiIsImltcG9ydCBQYWdlIGZyb20gXCJjbGFzc2VzL1BhZ2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWJvdXQgZXh0ZW5kcyBQYWdlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgaWQ6IFwiYWJvdXRcIixcbiAgICAgIGVsZW1lbnQ6IFwiLmFib3V0XCIsXG4gICAgICBlbGVtZW50czoge1xuICAgICAgICB3cmFwcGVyOiBcIi5hYm91dF9fd3JhcHBlclwiLFxuICAgICAgICBuYXZpZ2F0aW9uOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5hdmlnYXRpb25cIiksXG4gICAgICAgIHRpdGxlOiBcIi5hYm91dF9fdGl0bGVcIixcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBQYWdlIGZyb20gXCJjbGFzc2VzL1BhZ2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sbGVjdGlvbnMgZXh0ZW5kcyBQYWdlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgaWQ6IFwiY29sbGVjdGlvbnNcIixcbiAgICAgIGVsZW1lbnQ6ICcuY29sbGVjdGlvbnMnXG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBQYWdlIGZyb20gJ2NsYXNzZXMvUGFnZSdcbmltcG9ydCBCdXR0b24gZnJvbSAnY2xhc3Nlcy9CdXR0b24nXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERldGFpbCBleHRlbmRzIFBhZ2Uge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcih7XG5cdFx0XHRpZDogJ2RldGFpbCcsXG5cdFx0XHRlbGVtZW50OiAnLmRldGFpbCcsXG5cdFx0XHRlbGVtZW50czoge1xuXHRcdFx0XHRidXR0b246ICcuZGV0YWlsX19idXR0b24nLFxuXHRcdFx0fSxcblx0XHR9KVxuXHR9XG5cblx0Y3JlYXRlKCkge1xuXHRcdHN1cGVyLmNyZWF0ZSgpXG5cdFx0dGhpcy5saW5rID0gbmV3IEJ1dHRvbih7XG5cdFx0XHRlbGVtZW50OiB0aGlzLmVsZW1lbnRzLmJ1dHRvbixcblx0XHR9KVxuXHR9XG5cblx0ZGVzdHJveSgpIHtcblx0XHRzdXBlci5kZXN0cm95KClcblx0XHR0aGlzLmxpbmsucmVtb3ZlckV2ZW50TGlzdGVuZXIoKVxuXHR9XG59XG4iLCJpbXBvcnQgQnV0dG9uIGZyb20gJ2NsYXNzZXMvQnV0dG9uJ1xuaW1wb3J0IFBhZ2UgZnJvbSAnY2xhc3Nlcy9QYWdlJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIb21lIGV4dGVuZHMgUGFnZSB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKHtcblx0XHRcdGlkOiAnaG9tZScsXG5cdFx0XHRlbGVtZW50OiAnLmhvbWUnLFxuXHRcdFx0ZWxlbWVudHM6IHtcblx0XHRcdFx0bmF2aWdhdG9yOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2aWdhdGlvbicpLFxuXG5cdFx0XHRcdGxpbms6ICcuaG9tZV9fbGluaycsXG5cdFx0XHR9LFxuXHRcdH0pXG5cdH1cblxuXHRjcmVhdGUoKSB7XG5cdFx0c3VwZXIuY3JlYXRlKClcblxuXHRcdHRoaXMubGluayA9IG5ldyBCdXR0b24oe1xuXHRcdFx0ZWxlbWVudDogdGhpcy5lbGVtZW50cy5saW5rLFxuXHRcdH0pXG5cdH1cblxuXHRkZXN0cm95KCkge1xuXHRcdHN1cGVyLmRlc3Ryb3koKVxuXHRcdHRoaXMubGluay5yZW1vdmVFdmVudExpc3RlbmVycygpXG5cdH1cbn1cbiIsImV4cG9ydCBjb25zdCBDT0xPUl9RVUFSVEVSX1NQQU5JU0hfV0hJVEUgPSAnI2Y5ZjFlNydcbmV4cG9ydCBjb25zdCBDT0xPUl9CUklHSFRfR1JBWSA9ICcjMzczODRjJ1xuIiwiaW1wb3J0IGVhY2ggZnJvbSBcImxvZGFzaC9lYWNoXCI7XG5cbi8qKlxuICogRnVuY3Rpb24gdGhhdCBzcGxpdHMgdGV4dCBpbnRvIHNwYW5zXG4gKiBAcGFyYW0ge3N0cmluZyB8fCBIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb25cbiAqIEBwYXJhbSB7Ym9vbH0gYXBwZW5kXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdCh7IGVsZW1lbnQsIGV4cHJlc3Npb24gPSBcIiBcIiwgYXBwZW5kID0gdHJ1ZSB9KSB7XG4gIGNvbnN0IHdvcmRzID0gc3BsaXRUZXh0KGVsZW1lbnQuaW5uZXJIVE1MLnRvU3RyaW5nKCkudHJpbSgpLCBleHByZXNzaW9uKTtcblxuICBsZXQgaW5uZXJIVE1MID0gXCJcIjtcblxuICBlYWNoKHdvcmRzLCAobGluZSkgPT4ge1xuICAgIGlmIChsaW5lLmluZGV4T2YoXCI8YnI+XCIpID4gLTEpIHtcbiAgICAgIGNvbnN0IGxpbmVzID0gbGluZS5zcGxpdChcIjxicj5cIik7XG5cbiAgICAgIGVhY2gobGluZXMsIChsaW5lLCBpbmRleCkgPT4ge1xuICAgICAgICBpbm5lckhUTUwgKz0gaW5kZXggPiAwID8gXCI8YnI+XCIgKyBwYXJzZUxpbmUobGluZSkgOiBwYXJzZUxpbmUobGluZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5uZXJIVE1MICs9IHBhcnNlTGluZShsaW5lKTtcbiAgICB9XG4gIH0pO1xuXG4gIGVsZW1lbnQuaW5uZXJIVE1MID0gaW5uZXJIVE1MO1xuXG4gIGNvbnN0IHNwYW5zID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3BhblwiKTtcblxuICBpZiAoYXBwZW5kKSB7XG4gICAgZWFjaChzcGFucywgKHNwYW4pID0+IHtcbiAgICAgIGNvbnN0IGlzU2luZ2xlTGV0dGVyID0gc3Bhbi50ZXh0Q29udGVudC5sZW5ndGggPT09IDE7XG4gICAgICBjb25zdCBpc05vdEVtcHR5ID0gc3Bhbi5pbm5lckhUTUwudHJpbSgpICE9PSBcIlwiO1xuICAgICAgY29uc3QgaXNOb3RBbmRDaGFyYWN0ZXIgPSBzcGFuLnRleHRDb250ZW50ICE9PSBcIiZcIjtcbiAgICAgIGNvbnN0IGlzTm90RGFzaENoYXJhY3RlciA9IHNwYW4udGV4dENvbnRlbnQgIT09IFwiLVwiO1xuXG4gICAgICBpZiAoXG4gICAgICAgIGlzU2luZ2xlTGV0dGVyICYmXG4gICAgICAgIGlzTm90RW1wdHkgJiZcbiAgICAgICAgaXNOb3RBbmRDaGFyYWN0ZXIgJiZcbiAgICAgICAgaXNOb3REYXNoQ2hhcmFjdGVyXG4gICAgICApIHtcbiAgICAgICAgc3Bhbi5pbm5lckhUTUwgPSBgJHtzcGFuLnRleHRDb250ZW50fSZuYnNwO2A7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3BhbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGUoc3BhbnMpIHtcbiAgaWYgKCFzcGFucy5sZW5ndGgpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbGluZXMgPSBbXTtcbiAgbGV0IHdvcmRzID0gW107XG5cbiAgbGV0IHBvc2l0aW9uID0gc3BhbnNbMF0ub2Zmc2V0VG9wO1xuXG4gIGVhY2goc3BhbnMsIChzcGFuLCBpbmRleCkgPT4ge1xuICAgIGlmIChzcGFuLm9mZnNldFRvcCA9PT0gcG9zaXRpb24pIHtcbiAgICAgIHdvcmRzLnB1c2goc3Bhbik7XG4gICAgfVxuXG4gICAgaWYgKHNwYW4ub2Zmc2V0VG9wICE9PSBwb3NpdGlvbikge1xuICAgICAgbGluZXMucHVzaCh3b3Jkcyk7XG5cbiAgICAgIHdvcmRzID0gW107XG4gICAgICB3b3Jkcy5wdXNoKHNwYW4pO1xuXG4gICAgICBwb3NpdGlvbiA9IHNwYW4ub2Zmc2V0VG9wO1xuICAgIH1cblxuICAgIGlmIChpbmRleCArIDEgPT09IHNwYW5zLmxlbmd0aCkge1xuICAgICAgbGluZXMucHVzaCh3b3Jkcyk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbGluZXM7XG59XG5cbmZ1bmN0aW9uIHNwbGl0VGV4dCh0ZXh0LCBleHByZXNzaW9uKSB7XG4gIGNvbnN0IHNwbGl0cyA9IHRleHQuc3BsaXQoXCI8YnI+XCIpO1xuXG4gIGxldCB3b3JkcyA9IFtdO1xuXG4gIGVhY2goc3BsaXRzLCAoaXRlbSwgaW5kZXgpID0+IHtcbiAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICB3b3Jkcy5wdXNoKFwiPGJyPlwiKTtcbiAgICB9XG5cbiAgICB3b3JkcyA9IHdvcmRzLmNvbmNhdChpdGVtLnNwbGl0KGV4cHJlc3Npb24pKTtcblxuICAgIGxldCBpc0xpbmsgPSBmYWxzZTtcbiAgICBsZXQgbGluayA9IFwiXCI7XG5cbiAgICBjb25zdCBpbm5lckhUTUwgPSBbXTtcblxuICAgIGVhY2god29yZHMsICh3b3JkKSA9PiB7XG4gICAgICBpZiAoIWlzTGluayAmJiAod29yZC5pbmNsdWRlcyhcIjxhXCIpIHx8IHdvcmQuaW5jbHVkZXMoXCI8c3Ryb25nXCIpKSkge1xuICAgICAgICBsaW5rID0gXCJcIjtcblxuICAgICAgICBpc0xpbmsgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNMaW5rKSB7XG4gICAgICAgIGxpbmsgKz0gYCAke3dvcmR9YDtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzTGluayAmJiAod29yZC5pbmNsdWRlcyhcIi9hPlwiKSB8fCB3b3JkLmluY2x1ZGVzKFwiL3N0cm9uZz5cIikpKSB7XG4gICAgICAgIGlubmVySFRNTC5wdXNoKGxpbmspO1xuXG4gICAgICAgIGxpbmsgPSBcIlwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTGluayAmJiBsaW5rID09PSBcIlwiKSB7XG4gICAgICAgIGlubmVySFRNTC5wdXNoKHdvcmQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNMaW5rICYmICh3b3JkLmluY2x1ZGVzKFwiL2E+XCIpIHx8IHdvcmQuaW5jbHVkZXMoXCIvc3Ryb25nPlwiKSkpIHtcbiAgICAgICAgaXNMaW5rID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB3b3JkcyA9IGlubmVySFRNTDtcbiAgfSk7XG5cbiAgcmV0dXJuIHdvcmRzO1xufVxuXG5mdW5jdGlvbiBwYXJzZUxpbmUobGluZSkge1xuICBsaW5lID0gbGluZS50cmltKCk7XG5cbiAgaWYgKGxpbmUgPT09IFwiXCIgfHwgbGluZSA9PT0gXCIgXCIpIHtcbiAgICByZXR1cm4gbGluZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGluZSA9PT0gXCI8YnI+XCJcbiAgICAgID8gXCI8YnI+XCJcbiAgICAgIDogYDxzcGFuPiR7bGluZX08L3NwYW4+YCArIChsaW5lLmxlbmd0aCA+IDEgPyBcIiBcIiA6IFwiXCIpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBUcmFuc2Zvcm0gfSBmcm9tICcuL1RyYW5zZm9ybS5qcyc7XG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSAnLi4vbWF0aC9NYXQ0LmpzJztcbmltcG9ydCB7IFZlYzMgfSBmcm9tICcuLi9tYXRoL1ZlYzMuanMnO1xuXG5jb25zdCB0ZW1wTWF0NCA9IG5ldyBNYXQ0KCk7XG5jb25zdCB0ZW1wVmVjM2EgPSBuZXcgVmVjMygpO1xuY29uc3QgdGVtcFZlYzNiID0gbmV3IFZlYzMoKTtcblxuZXhwb3J0IGNsYXNzIENhbWVyYSBleHRlbmRzIFRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IoZ2wsIHsgbmVhciA9IDAuMSwgZmFyID0gMTAwLCBmb3YgPSA0NSwgYXNwZWN0ID0gMSwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCB6b29tID0gMSB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHsgbmVhciwgZmFyLCBmb3YsIGFzcGVjdCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCB6b29tIH0pO1xuXG4gICAgICAgIHRoaXMucHJvamVjdGlvbk1hdHJpeCA9IG5ldyBNYXQ0KCk7XG4gICAgICAgIHRoaXMudmlld01hdHJpeCA9IG5ldyBNYXQ0KCk7XG4gICAgICAgIHRoaXMucHJvamVjdGlvblZpZXdNYXRyaXggPSBuZXcgTWF0NCgpO1xuICAgICAgICB0aGlzLndvcmxkUG9zaXRpb24gPSBuZXcgVmVjMygpO1xuXG4gICAgICAgIC8vIFVzZSBvcnRob2dyYXBoaWMgaWYgbGVmdC9yaWdodCBzZXQsIGVsc2UgZGVmYXVsdCB0byBwZXJzcGVjdGl2ZSBjYW1lcmFcbiAgICAgICAgdGhpcy50eXBlID0gbGVmdCB8fCByaWdodCA/ICdvcnRob2dyYXBoaWMnIDogJ3BlcnNwZWN0aXZlJztcblxuICAgICAgICBpZiAodGhpcy50eXBlID09PSAnb3J0aG9ncmFwaGljJykgdGhpcy5vcnRob2dyYXBoaWMoKTtcbiAgICAgICAgZWxzZSB0aGlzLnBlcnNwZWN0aXZlKCk7XG4gICAgfVxuXG4gICAgcGVyc3BlY3RpdmUoeyBuZWFyID0gdGhpcy5uZWFyLCBmYXIgPSB0aGlzLmZhciwgZm92ID0gdGhpcy5mb3YsIGFzcGVjdCA9IHRoaXMuYXNwZWN0IH0gPSB7fSkge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHsgbmVhciwgZmFyLCBmb3YsIGFzcGVjdCB9KTtcbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uTWF0cml4LmZyb21QZXJzcGVjdGl2ZSh7IGZvdjogZm92ICogKE1hdGguUEkgLyAxODApLCBhc3BlY3QsIG5lYXIsIGZhciB9KTtcbiAgICAgICAgdGhpcy50eXBlID0gJ3BlcnNwZWN0aXZlJztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgb3J0aG9ncmFwaGljKHtcbiAgICAgICAgbmVhciA9IHRoaXMubmVhcixcbiAgICAgICAgZmFyID0gdGhpcy5mYXIsXG4gICAgICAgIGxlZnQgPSB0aGlzLmxlZnQsXG4gICAgICAgIHJpZ2h0ID0gdGhpcy5yaWdodCxcbiAgICAgICAgYm90dG9tID0gdGhpcy5ib3R0b20sXG4gICAgICAgIHRvcCA9IHRoaXMudG9wLFxuICAgICAgICB6b29tID0gdGhpcy56b29tLFxuICAgIH0gPSB7fSkge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHsgbmVhciwgZmFyLCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIHpvb20gfSk7XG4gICAgICAgIGxlZnQgLz0gem9vbTtcbiAgICAgICAgcmlnaHQgLz0gem9vbTtcbiAgICAgICAgYm90dG9tIC89IHpvb207XG4gICAgICAgIHRvcCAvPSB6b29tO1xuICAgICAgICB0aGlzLnByb2plY3Rpb25NYXRyaXguZnJvbU9ydGhvZ29uYWwoeyBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhciB9KTtcbiAgICAgICAgdGhpcy50eXBlID0gJ29ydGhvZ3JhcGhpYyc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHVwZGF0ZU1hdHJpeFdvcmxkKCkge1xuICAgICAgICBzdXBlci51cGRhdGVNYXRyaXhXb3JsZCgpO1xuICAgICAgICB0aGlzLnZpZXdNYXRyaXguaW52ZXJzZSh0aGlzLndvcmxkTWF0cml4KTtcbiAgICAgICAgdGhpcy53b3JsZE1hdHJpeC5nZXRUcmFuc2xhdGlvbih0aGlzLndvcmxkUG9zaXRpb24pO1xuXG4gICAgICAgIC8vIHVzZWQgZm9yIHNvcnRpbmdcbiAgICAgICAgdGhpcy5wcm9qZWN0aW9uVmlld01hdHJpeC5tdWx0aXBseSh0aGlzLnByb2plY3Rpb25NYXRyaXgsIHRoaXMudmlld01hdHJpeCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGxvb2tBdCh0YXJnZXQpIHtcbiAgICAgICAgc3VwZXIubG9va0F0KHRhcmdldCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIFByb2plY3QgM0QgY29vcmRpbmF0ZSB0byAyRCBwb2ludFxuICAgIHByb2plY3Qodikge1xuICAgICAgICB2LmFwcGx5TWF0cml4NCh0aGlzLnZpZXdNYXRyaXgpO1xuICAgICAgICB2LmFwcGx5TWF0cml4NCh0aGlzLnByb2plY3Rpb25NYXRyaXgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBVbnByb2plY3QgMkQgcG9pbnQgdG8gM0QgY29vcmRpbmF0ZVxuICAgIHVucHJvamVjdCh2KSB7XG4gICAgICAgIHYuYXBwbHlNYXRyaXg0KHRlbXBNYXQ0LmludmVyc2UodGhpcy5wcm9qZWN0aW9uTWF0cml4KSk7XG4gICAgICAgIHYuYXBwbHlNYXRyaXg0KHRoaXMud29ybGRNYXRyaXgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB1cGRhdGVGcnVzdHVtKCkge1xuICAgICAgICBpZiAoIXRoaXMuZnJ1c3R1bSkge1xuICAgICAgICAgICAgdGhpcy5mcnVzdHVtID0gW25ldyBWZWMzKCksIG5ldyBWZWMzKCksIG5ldyBWZWMzKCksIG5ldyBWZWMzKCksIG5ldyBWZWMzKCksIG5ldyBWZWMzKCldO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbSA9IHRoaXMucHJvamVjdGlvblZpZXdNYXRyaXg7XG4gICAgICAgIHRoaXMuZnJ1c3R1bVswXS5zZXQobVszXSAtIG1bMF0sIG1bN10gLSBtWzRdLCBtWzExXSAtIG1bOF0pLmNvbnN0YW50ID0gbVsxNV0gLSBtWzEyXTsgLy8gLXhcbiAgICAgICAgdGhpcy5mcnVzdHVtWzFdLnNldChtWzNdICsgbVswXSwgbVs3XSArIG1bNF0sIG1bMTFdICsgbVs4XSkuY29uc3RhbnQgPSBtWzE1XSArIG1bMTJdOyAvLyAreFxuICAgICAgICB0aGlzLmZydXN0dW1bMl0uc2V0KG1bM10gKyBtWzFdLCBtWzddICsgbVs1XSwgbVsxMV0gKyBtWzldKS5jb25zdGFudCA9IG1bMTVdICsgbVsxM107IC8vICt5XG4gICAgICAgIHRoaXMuZnJ1c3R1bVszXS5zZXQobVszXSAtIG1bMV0sIG1bN10gLSBtWzVdLCBtWzExXSAtIG1bOV0pLmNvbnN0YW50ID0gbVsxNV0gLSBtWzEzXTsgLy8gLXlcbiAgICAgICAgdGhpcy5mcnVzdHVtWzRdLnNldChtWzNdIC0gbVsyXSwgbVs3XSAtIG1bNl0sIG1bMTFdIC0gbVsxMF0pLmNvbnN0YW50ID0gbVsxNV0gLSBtWzE0XTsgLy8gK3ogKGZhcilcbiAgICAgICAgdGhpcy5mcnVzdHVtWzVdLnNldChtWzNdICsgbVsyXSwgbVs3XSArIG1bNl0sIG1bMTFdICsgbVsxMF0pLmNvbnN0YW50ID0gbVsxNV0gKyBtWzE0XTsgLy8gLXogKG5lYXIpXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGludkxlbiA9IDEuMCAvIHRoaXMuZnJ1c3R1bVtpXS5kaXN0YW5jZSgpO1xuICAgICAgICAgICAgdGhpcy5mcnVzdHVtW2ldLm11bHRpcGx5KGludkxlbik7XG4gICAgICAgICAgICB0aGlzLmZydXN0dW1baV0uY29uc3RhbnQgKj0gaW52TGVuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnJ1c3R1bUludGVyc2VjdHNNZXNoKG5vZGUpIHtcbiAgICAgICAgLy8gSWYgbm8gcG9zaXRpb24gYXR0cmlidXRlLCB0cmVhdCBhcyBmcnVzdHVtQ3VsbGVkIGZhbHNlXG4gICAgICAgIGlmICghbm9kZS5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBpZiAoIW5vZGUuZ2VvbWV0cnkuYm91bmRzIHx8IG5vZGUuZ2VvbWV0cnkuYm91bmRzLnJhZGl1cyA9PT0gSW5maW5pdHkpIG5vZGUuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cbiAgICAgICAgaWYgKCFub2RlLmdlb21ldHJ5LmJvdW5kcykgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY29uc3QgY2VudGVyID0gdGVtcFZlYzNhO1xuICAgICAgICBjZW50ZXIuY29weShub2RlLmdlb21ldHJ5LmJvdW5kcy5jZW50ZXIpO1xuICAgICAgICBjZW50ZXIuYXBwbHlNYXRyaXg0KG5vZGUud29ybGRNYXRyaXgpO1xuXG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IG5vZGUuZ2VvbWV0cnkuYm91bmRzLnJhZGl1cyAqIG5vZGUud29ybGRNYXRyaXguZ2V0TWF4U2NhbGVPbkF4aXMoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5mcnVzdHVtSW50ZXJzZWN0c1NwaGVyZShjZW50ZXIsIHJhZGl1cyk7XG4gICAgfVxuXG4gICAgZnJ1c3R1bUludGVyc2VjdHNTcGhlcmUoY2VudGVyLCByYWRpdXMpIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsID0gdGVtcFZlYzNiO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwbGFuZSA9IHRoaXMuZnJ1c3R1bVtpXTtcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gbm9ybWFsLmNvcHkocGxhbmUpLmRvdChjZW50ZXIpICsgcGxhbmUuY29uc3RhbnQ7XG4gICAgICAgICAgICBpZiAoZGlzdGFuY2UgPCAtcmFkaXVzKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuIiwiLy8gYXR0cmlidXRlIHBhcmFtc1xuLy8ge1xuLy8gICAgIGRhdGEgLSB0eXBlZCBhcnJheSBlZyBVSW50MTZBcnJheSBmb3IgaW5kaWNlcywgRmxvYXQzMkFycmF5XG4vLyAgICAgc2l6ZSAtIGludCBkZWZhdWx0IDFcbi8vICAgICBpbnN0YW5jZWQgLSBkZWZhdWx0IG51bGwuIFBhc3MgZGl2aXNvciBhbW91bnRcbi8vICAgICB0eXBlIC0gZ2wgZW51bSBkZWZhdWx0IGdsLlVOU0lHTkVEX1NIT1JUIGZvciAnaW5kZXgnLCBnbC5GTE9BVCBmb3Igb3RoZXJzXG4vLyAgICAgbm9ybWFsaXplZCAtIGJvb2xlYW4gZGVmYXVsdCBmYWxzZVxuXG4vLyAgICAgYnVmZmVyIC0gZ2wgYnVmZmVyLCBpZiBidWZmZXIgZXhpc3RzLCBkb24ndCBuZWVkIHRvIHByb3ZpZGUgZGF0YSAtIGFsdGhvdWdoIG5lZWRzIHBvc2l0aW9uIGRhdGEgZm9yIGJvdW5kcyBjYWxjdWxhdGlvblxuLy8gICAgIHN0cmlkZSAtIGRlZmF1bHQgMCAtIGZvciB3aGVuIHBhc3NpbmcgaW4gYnVmZmVyXG4vLyAgICAgb2Zmc2V0IC0gZGVmYXVsdCAwIC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vICAgICBjb3VudCAtIGRlZmF1bHQgbnVsbCAtIGZvciB3aGVuIHBhc3NpbmcgaW4gYnVmZmVyXG4vLyAgICAgbWluIC0gYXJyYXkgLSBmb3Igd2hlbiBwYXNzaW5nIGluIGJ1ZmZlclxuLy8gICAgIG1heCAtIGFycmF5IC0gZm9yIHdoZW4gcGFzc2luZyBpbiBidWZmZXJcbi8vIH1cblxuLy8gVE9ETzogZml0IGluIHRyYW5zZm9ybSBmZWVkYmFja1xuXG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC9WZWMzLmpzJztcblxuY29uc3QgdGVtcFZlYzMgPSBuZXcgVmVjMygpO1xuXG5sZXQgSUQgPSAxO1xubGV0IEFUVFJfSUQgPSAxO1xuXG4vLyBUbyBzdG9wIGluaWZpbml0ZSB3YXJuaW5nc1xubGV0IGlzQm91bmRzV2FybmVkID0gZmFsc2U7XG5cbmV4cG9ydCBjbGFzcyBHZW9tZXRyeSB7XG4gICAgY29uc3RydWN0b3IoZ2wsIGF0dHJpYnV0ZXMgPSB7fSkge1xuICAgICAgICBpZiAoIWdsLmNhbnZhcykgY29uc29sZS5lcnJvcignZ2wgbm90IHBhc3NlZCBhcyBmaXJzdCBhcmd1bWVudCB0byBHZW9tZXRyeScpO1xuICAgICAgICB0aGlzLmdsID0gZ2w7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuXG4gICAgICAgIC8vIFN0b3JlIG9uZSBWQU8gcGVyIHByb2dyYW0gYXR0cmlidXRlIGxvY2F0aW9ucyBvcmRlclxuICAgICAgICB0aGlzLlZBT3MgPSB7fTtcblxuICAgICAgICB0aGlzLmRyYXdSYW5nZSA9IHsgc3RhcnQ6IDAsIGNvdW50OiAwIH07XG4gICAgICAgIHRoaXMuaW5zdGFuY2VkQ291bnQgPSAwO1xuXG4gICAgICAgIC8vIFVuYmluZCBjdXJyZW50IFZBTyBzbyB0aGF0IG5ldyBidWZmZXJzIGRvbid0IGdldCBhZGRlZCB0byBhY3RpdmUgbWVzaFxuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmJpbmRWZXJ0ZXhBcnJheShudWxsKTtcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5jdXJyZW50R2VvbWV0cnkgPSBudWxsO1xuXG4gICAgICAgIC8vIEFsaWFzIGZvciBzdGF0ZSBzdG9yZSB0byBhdm9pZCByZWR1bmRhbnQgY2FsbHMgZm9yIGdsb2JhbCBzdGF0ZVxuICAgICAgICB0aGlzLmdsU3RhdGUgPSB0aGlzLmdsLnJlbmRlcmVyLnN0YXRlO1xuXG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgYnVmZmVyc1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICAgICAgdGhpcy5hZGRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkQXR0cmlidXRlKGtleSwgYXR0cikge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXNba2V5XSA9IGF0dHI7XG5cbiAgICAgICAgLy8gU2V0IG9wdGlvbnNcbiAgICAgICAgYXR0ci5pZCA9IEFUVFJfSUQrKzsgLy8gVE9ETzogY3VycmVudGx5IHVudXNlZCwgcmVtb3ZlP1xuICAgICAgICBhdHRyLnNpemUgPSBhdHRyLnNpemUgfHwgMTtcbiAgICAgICAgYXR0ci50eXBlID1cbiAgICAgICAgICAgIGF0dHIudHlwZSB8fFxuICAgICAgICAgICAgKGF0dHIuZGF0YS5jb25zdHJ1Y3RvciA9PT0gRmxvYXQzMkFycmF5XG4gICAgICAgICAgICAgICAgPyB0aGlzLmdsLkZMT0FUXG4gICAgICAgICAgICAgICAgOiBhdHRyLmRhdGEuY29uc3RydWN0b3IgPT09IFVpbnQxNkFycmF5XG4gICAgICAgICAgICAgICAgPyB0aGlzLmdsLlVOU0lHTkVEX1NIT1JUXG4gICAgICAgICAgICAgICAgOiB0aGlzLmdsLlVOU0lHTkVEX0lOVCk7IC8vIFVpbnQzMkFycmF5XG4gICAgICAgIGF0dHIudGFyZ2V0ID0ga2V5ID09PSAnaW5kZXgnID8gdGhpcy5nbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiA6IHRoaXMuZ2wuQVJSQVlfQlVGRkVSO1xuICAgICAgICBhdHRyLm5vcm1hbGl6ZWQgPSBhdHRyLm5vcm1hbGl6ZWQgfHwgZmFsc2U7XG4gICAgICAgIGF0dHIuc3RyaWRlID0gYXR0ci5zdHJpZGUgfHwgMDtcbiAgICAgICAgYXR0ci5vZmZzZXQgPSBhdHRyLm9mZnNldCB8fCAwO1xuICAgICAgICBhdHRyLmNvdW50ID0gYXR0ci5jb3VudCB8fCAoYXR0ci5zdHJpZGUgPyBhdHRyLmRhdGEuYnl0ZUxlbmd0aCAvIGF0dHIuc3RyaWRlIDogYXR0ci5kYXRhLmxlbmd0aCAvIGF0dHIuc2l6ZSk7XG4gICAgICAgIGF0dHIuZGl2aXNvciA9IGF0dHIuaW5zdGFuY2VkIHx8IDA7XG4gICAgICAgIGF0dHIubmVlZHNVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgYXR0ci51c2FnZSA9IGF0dHIudXNhZ2UgfHwgdGhpcy5nbC5TVEFUSUNfRFJBVztcblxuICAgICAgICBpZiAoIWF0dHIuYnVmZmVyKSB7XG4gICAgICAgICAgICAvLyBQdXNoIGRhdGEgdG8gYnVmZmVyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBnZW9tZXRyeSBjb3VudHMuIElmIGluZGV4ZWQsIGlnbm9yZSByZWd1bGFyIGF0dHJpYnV0ZXNcbiAgICAgICAgaWYgKGF0dHIuZGl2aXNvcikge1xuICAgICAgICAgICAgdGhpcy5pc0luc3RhbmNlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy5pbnN0YW5jZWRDb3VudCAmJiB0aGlzLmluc3RhbmNlZENvdW50ICE9PSBhdHRyLmNvdW50ICogYXR0ci5kaXZpc29yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdnZW9tZXRyeSBoYXMgbXVsdGlwbGUgaW5zdGFuY2VkIGJ1ZmZlcnMgb2YgZGlmZmVyZW50IGxlbmd0aCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5pbnN0YW5jZWRDb3VudCA9IE1hdGgubWluKHRoaXMuaW5zdGFuY2VkQ291bnQsIGF0dHIuY291bnQgKiBhdHRyLmRpdmlzb3IpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VkQ291bnQgPSBhdHRyLmNvdW50ICogYXR0ci5kaXZpc29yO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2luZGV4Jykge1xuICAgICAgICAgICAgdGhpcy5kcmF3UmFuZ2UuY291bnQgPSBhdHRyLmNvdW50O1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmF0dHJpYnV0ZXMuaW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd1JhbmdlLmNvdW50ID0gTWF0aC5tYXgodGhpcy5kcmF3UmFuZ2UuY291bnQsIGF0dHIuY291bnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlQXR0cmlidXRlKGF0dHIpIHtcbiAgICAgICAgY29uc3QgaXNOZXdCdWZmZXIgPSAhYXR0ci5idWZmZXI7XG4gICAgICAgIGlmIChpc05ld0J1ZmZlcikgYXR0ci5idWZmZXIgPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICBpZiAodGhpcy5nbFN0YXRlLmJvdW5kQnVmZmVyICE9PSBhdHRyLmJ1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKGF0dHIudGFyZ2V0LCBhdHRyLmJ1ZmZlcik7XG4gICAgICAgICAgICB0aGlzLmdsU3RhdGUuYm91bmRCdWZmZXIgPSBhdHRyLmJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOZXdCdWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YShhdHRyLnRhcmdldCwgYXR0ci5kYXRhLCBhdHRyLnVzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2wuYnVmZmVyU3ViRGF0YShhdHRyLnRhcmdldCwgMCwgYXR0ci5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBhdHRyLm5lZWRzVXBkYXRlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc2V0SW5kZXgodmFsdWUpIHtcbiAgICAgICAgdGhpcy5hZGRBdHRyaWJ1dGUoJ2luZGV4JywgdmFsdWUpO1xuICAgIH1cblxuICAgIHNldERyYXdSYW5nZShzdGFydCwgY291bnQpIHtcbiAgICAgICAgdGhpcy5kcmF3UmFuZ2Uuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgdGhpcy5kcmF3UmFuZ2UuY291bnQgPSBjb3VudDtcbiAgICB9XG5cbiAgICBzZXRJbnN0YW5jZWRDb3VudCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmluc3RhbmNlZENvdW50ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgY3JlYXRlVkFPKHByb2dyYW0pIHtcbiAgICAgICAgdGhpcy5WQU9zW3Byb2dyYW0uYXR0cmlidXRlT3JkZXJdID0gdGhpcy5nbC5yZW5kZXJlci5jcmVhdGVWZXJ0ZXhBcnJheSgpO1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmJpbmRWZXJ0ZXhBcnJheSh0aGlzLlZBT3NbcHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcl0pO1xuICAgICAgICB0aGlzLmJpbmRBdHRyaWJ1dGVzKHByb2dyYW0pO1xuICAgIH1cblxuICAgIGJpbmRBdHRyaWJ1dGVzKHByb2dyYW0pIHtcbiAgICAgICAgLy8gTGluayBhbGwgYXR0cmlidXRlcyB0byBwcm9ncmFtIHVzaW5nIGdsLnZlcnRleEF0dHJpYlBvaW50ZXJcbiAgICAgICAgcHJvZ3JhbS5hdHRyaWJ1dGVMb2NhdGlvbnMuZm9yRWFjaCgobG9jYXRpb24sIHsgbmFtZSwgdHlwZSB9KSA9PiB7XG4gICAgICAgICAgICAvLyBJZiBnZW9tZXRyeSBtaXNzaW5nIGEgcmVxdWlyZWQgc2hhZGVyIGF0dHJpYnV0ZVxuICAgICAgICAgICAgaWYgKCF0aGlzLmF0dHJpYnV0ZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYGFjdGl2ZSBhdHRyaWJ1dGUgJHtuYW1lfSBub3QgYmVpbmcgc3VwcGxpZWRgKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGF0dHIgPSB0aGlzLmF0dHJpYnV0ZXNbbmFtZV07XG5cbiAgICAgICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcihhdHRyLnRhcmdldCwgYXR0ci5idWZmZXIpO1xuICAgICAgICAgICAgdGhpcy5nbFN0YXRlLmJvdW5kQnVmZmVyID0gYXR0ci5idWZmZXI7XG5cbiAgICAgICAgICAgIC8vIEZvciBtYXRyaXggYXR0cmlidXRlcywgYnVmZmVyIG5lZWRzIHRvIGJlIGRlZmluZWQgcGVyIGNvbHVtblxuICAgICAgICAgICAgbGV0IG51bUxvYyA9IDE7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gMzU2NzQpIG51bUxvYyA9IDI7IC8vIG1hdDJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAzNTY3NSkgbnVtTG9jID0gMzsgLy8gbWF0M1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IDM1Njc2KSBudW1Mb2MgPSA0OyAvLyBtYXQ0XG5cbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSBhdHRyLnNpemUgLyBudW1Mb2M7XG4gICAgICAgICAgICBjb25zdCBzdHJpZGUgPSBudW1Mb2MgPT09IDEgPyAwIDogbnVtTG9jICogbnVtTG9jICogbnVtTG9jO1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbnVtTG9jID09PSAxID8gMCA6IG51bUxvYyAqIG51bUxvYztcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Mb2M7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcihsb2NhdGlvbiArIGksIHNpemUsIGF0dHIudHlwZSwgYXR0ci5ub3JtYWxpemVkLCBhdHRyLnN0cmlkZSArIHN0cmlkZSwgYXR0ci5vZmZzZXQgKyBpICogb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGxvY2F0aW9uICsgaSk7XG5cbiAgICAgICAgICAgICAgICAvLyBGb3IgaW5zdGFuY2VkIGF0dHJpYnV0ZXMsIGRpdmlzb3IgbmVlZHMgdG8gYmUgc2V0LlxuICAgICAgICAgICAgICAgIC8vIEZvciBmaXJlZm94LCBuZWVkIHRvIHNldCBiYWNrIHRvIDAgaWYgbm9uLWluc3RhbmNlZCBkcmF3biBhZnRlciBpbnN0YW5jZWQuIEVsc2Ugd29uJ3QgcmVuZGVyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci52ZXJ0ZXhBdHRyaWJEaXZpc29yKGxvY2F0aW9uICsgaSwgYXR0ci5kaXZpc29yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQmluZCBpbmRpY2VzIGlmIGdlb21ldHJ5IGluZGV4ZWRcbiAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5pbmRleCkgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuYXR0cmlidXRlcy5pbmRleC5idWZmZXIpO1xuICAgIH1cblxuICAgIGRyYXcoeyBwcm9ncmFtLCBtb2RlID0gdGhpcy5nbC5UUklBTkdMRVMgfSkge1xuICAgICAgICBpZiAodGhpcy5nbC5yZW5kZXJlci5jdXJyZW50R2VvbWV0cnkgIT09IGAke3RoaXMuaWR9XyR7cHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcn1gKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuVkFPc1twcm9ncmFtLmF0dHJpYnV0ZU9yZGVyXSkgdGhpcy5jcmVhdGVWQU8ocHJvZ3JhbSk7XG4gICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmJpbmRWZXJ0ZXhBcnJheSh0aGlzLlZBT3NbcHJvZ3JhbS5hdHRyaWJ1dGVPcmRlcl0pO1xuICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5jdXJyZW50R2VvbWV0cnkgPSBgJHt0aGlzLmlkfV8ke3Byb2dyYW0uYXR0cmlidXRlT3JkZXJ9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIGFueSBhdHRyaWJ1dGVzIG5lZWQgdXBkYXRpbmdcbiAgICAgICAgcHJvZ3JhbS5hdHRyaWJ1dGVMb2NhdGlvbnMuZm9yRWFjaCgobG9jYXRpb24sIHsgbmFtZSB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5hdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgICAgICAgaWYgKGF0dHIubmVlZHNVcGRhdGUpIHRoaXMudXBkYXRlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5pc0luc3RhbmNlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlcy5pbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuZHJhd0VsZW1lbnRzSW5zdGFuY2VkKFxuICAgICAgICAgICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdSYW5nZS5jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLmluZGV4LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5pbmRleC5vZmZzZXQgKyB0aGlzLmRyYXdSYW5nZS5zdGFydCAqIDIsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VkQ291bnRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLmRyYXdBcnJheXNJbnN0YW5jZWQobW9kZSwgdGhpcy5kcmF3UmFuZ2Uuc3RhcnQsIHRoaXMuZHJhd1JhbmdlLmNvdW50LCB0aGlzLmluc3RhbmNlZENvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmRyYXdFbGVtZW50cyhtb2RlLCB0aGlzLmRyYXdSYW5nZS5jb3VudCwgdGhpcy5hdHRyaWJ1dGVzLmluZGV4LnR5cGUsIHRoaXMuYXR0cmlidXRlcy5pbmRleC5vZmZzZXQgKyB0aGlzLmRyYXdSYW5nZS5zdGFydCAqIDIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdsLmRyYXdBcnJheXMobW9kZSwgdGhpcy5kcmF3UmFuZ2Uuc3RhcnQsIHRoaXMuZHJhd1JhbmdlLmNvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFBvc2l0aW9uKCkge1xuICAgICAgICAvLyBVc2UgcG9zaXRpb24gYnVmZmVyLCBvciBtaW4vbWF4IGlmIGF2YWlsYWJsZVxuICAgICAgICBjb25zdCBhdHRyID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuICAgICAgICAvLyBpZiAoYXR0ci5taW4pIHJldHVybiBbLi4uYXR0ci5taW4sIC4uLmF0dHIubWF4XTtcbiAgICAgICAgaWYgKGF0dHIuZGF0YSkgcmV0dXJuIGF0dHI7XG4gICAgICAgIGlmIChpc0JvdW5kc1dhcm5lZCkgcmV0dXJuO1xuICAgICAgICBjb25zb2xlLndhcm4oJ05vIHBvc2l0aW9uIGJ1ZmZlciBkYXRhIGZvdW5kIHRvIGNvbXB1dGUgYm91bmRzJyk7XG4gICAgICAgIHJldHVybiAoaXNCb3VuZHNXYXJuZWQgPSB0cnVlKTtcbiAgICB9XG5cbiAgICBjb21wdXRlQm91bmRpbmdCb3goYXR0cikge1xuICAgICAgICBpZiAoIWF0dHIpIGF0dHIgPSB0aGlzLmdldFBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IGFycmF5ID0gYXR0ci5kYXRhO1xuICAgICAgICBjb25zdCBzdHJpZGUgPSBhdHRyLnN0cmlkZSA/IGF0dHIuc3RyaWRlIC8gYXJyYXkuQllURVNfUEVSX0VMRU1FTlQgOiBhdHRyLnNpemU7XG5cbiAgICAgICAgaWYgKCF0aGlzLmJvdW5kcykge1xuICAgICAgICAgICAgdGhpcy5ib3VuZHMgPSB7XG4gICAgICAgICAgICAgICAgbWluOiBuZXcgVmVjMygpLFxuICAgICAgICAgICAgICAgIG1heDogbmV3IFZlYzMoKSxcbiAgICAgICAgICAgICAgICBjZW50ZXI6IG5ldyBWZWMzKCksXG4gICAgICAgICAgICAgICAgc2NhbGU6IG5ldyBWZWMzKCksXG4gICAgICAgICAgICAgICAgcmFkaXVzOiBJbmZpbml0eSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLmJvdW5kcy5taW47XG4gICAgICAgIGNvbnN0IG1heCA9IHRoaXMuYm91bmRzLm1heDtcbiAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5ib3VuZHMuY2VudGVyO1xuICAgICAgICBjb25zdCBzY2FsZSA9IHRoaXMuYm91bmRzLnNjYWxlO1xuXG4gICAgICAgIG1pbi5zZXQoK0luZmluaXR5KTtcbiAgICAgICAgbWF4LnNldCgtSW5maW5pdHkpO1xuXG4gICAgICAgIC8vIFRPRE86IGNoZWNrIHNpemUgb2YgcG9zaXRpb24gKGVnIHRyaWFuZ2xlIHdpdGggVmVjMilcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xuICAgICAgICAgICAgY29uc3QgeCA9IGFycmF5W2ldO1xuICAgICAgICAgICAgY29uc3QgeSA9IGFycmF5W2kgKyAxXTtcbiAgICAgICAgICAgIGNvbnN0IHogPSBhcnJheVtpICsgMl07XG5cbiAgICAgICAgICAgIG1pbi54ID0gTWF0aC5taW4oeCwgbWluLngpO1xuICAgICAgICAgICAgbWluLnkgPSBNYXRoLm1pbih5LCBtaW4ueSk7XG4gICAgICAgICAgICBtaW4ueiA9IE1hdGgubWluKHosIG1pbi56KTtcblxuICAgICAgICAgICAgbWF4LnggPSBNYXRoLm1heCh4LCBtYXgueCk7XG4gICAgICAgICAgICBtYXgueSA9IE1hdGgubWF4KHksIG1heC55KTtcbiAgICAgICAgICAgIG1heC56ID0gTWF0aC5tYXgoeiwgbWF4LnopO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NhbGUuc3ViKG1heCwgbWluKTtcbiAgICAgICAgY2VudGVyLmFkZChtaW4sIG1heCkuZGl2aWRlKDIpO1xuICAgIH1cblxuICAgIGNvbXB1dGVCb3VuZGluZ1NwaGVyZShhdHRyKSB7XG4gICAgICAgIGlmICghYXR0cikgYXR0ciA9IHRoaXMuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBhdHRyLmRhdGE7XG4gICAgICAgIGNvbnN0IHN0cmlkZSA9IGF0dHIuc3RyaWRlID8gYXR0ci5zdHJpZGUgLyBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCA6IGF0dHIuc2l6ZTtcblxuICAgICAgICBpZiAoIXRoaXMuYm91bmRzKSB0aGlzLmNvbXB1dGVCb3VuZGluZ0JveChhdHRyKTtcblxuICAgICAgICBsZXQgbWF4UmFkaXVzU3EgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKz0gc3RyaWRlKSB7XG4gICAgICAgICAgICB0ZW1wVmVjMy5mcm9tQXJyYXkoYXJyYXksIGkpO1xuICAgICAgICAgICAgbWF4UmFkaXVzU3EgPSBNYXRoLm1heChtYXhSYWRpdXNTcSwgdGhpcy5ib3VuZHMuY2VudGVyLnNxdWFyZWREaXN0YW5jZSh0ZW1wVmVjMykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ib3VuZHMucmFkaXVzID0gTWF0aC5zcXJ0KG1heFJhZGl1c1NxKTtcbiAgICB9XG5cbiAgICByZW1vdmUoKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLlZBT3MpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuZGVsZXRlVmVydGV4QXJyYXkodGhpcy5WQU9zW2tleV0pO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuVkFPc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wuZGVsZXRlQnVmZmVyKHRoaXMuYXR0cmlidXRlc1trZXldLmJ1ZmZlcik7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5hdHRyaWJ1dGVzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBUcmFuc2Zvcm0gfSBmcm9tICcuL1RyYW5zZm9ybS5qcyc7XG5pbXBvcnQgeyBNYXQzIH0gZnJvbSAnLi4vbWF0aC9NYXQzLmpzJztcbmltcG9ydCB7IE1hdDQgfSBmcm9tICcuLi9tYXRoL01hdDQuanMnO1xuXG5sZXQgSUQgPSAwO1xuXG5leHBvcnQgY2xhc3MgTWVzaCBleHRlbmRzIFRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IoZ2wsIHsgZ2VvbWV0cnksIHByb2dyYW0sIG1vZGUgPSBnbC5UUklBTkdMRVMsIGZydXN0dW1DdWxsZWQgPSB0cnVlLCByZW5kZXJPcmRlciA9IDAgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmICghZ2wuY2FudmFzKSBjb25zb2xlLmVycm9yKCdnbCBub3QgcGFzc2VkIGFzIGZpcnN0IGFyZ3VtZW50IHRvIE1lc2gnKTtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLmlkID0gSUQrKztcbiAgICAgICAgdGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuICAgICAgICB0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuXG4gICAgICAgIC8vIFVzZWQgdG8gc2tpcCBmcnVzdHVtIGN1bGxpbmdcbiAgICAgICAgdGhpcy5mcnVzdHVtQ3VsbGVkID0gZnJ1c3R1bUN1bGxlZDtcblxuICAgICAgICAvLyBPdmVycmlkZSBzb3J0aW5nIHRvIGZvcmNlIGFuIG9yZGVyXG4gICAgICAgIHRoaXMucmVuZGVyT3JkZXIgPSByZW5kZXJPcmRlcjtcbiAgICAgICAgdGhpcy5tb2RlbFZpZXdNYXRyaXggPSBuZXcgTWF0NCgpO1xuICAgICAgICB0aGlzLm5vcm1hbE1hdHJpeCA9IG5ldyBNYXQzKCk7XG4gICAgICAgIHRoaXMuYmVmb3JlUmVuZGVyQ2FsbGJhY2tzID0gW107XG4gICAgICAgIHRoaXMuYWZ0ZXJSZW5kZXJDYWxsYmFja3MgPSBbXTtcbiAgICB9XG5cbiAgICBvbkJlZm9yZVJlbmRlcihmKSB7XG4gICAgICAgIHRoaXMuYmVmb3JlUmVuZGVyQ2FsbGJhY2tzLnB1c2goZik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG9uQWZ0ZXJSZW5kZXIoZikge1xuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyQ2FsbGJhY2tzLnB1c2goZik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRyYXcoeyBjYW1lcmEgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMuYmVmb3JlUmVuZGVyQ2FsbGJhY2tzLmZvckVhY2goKGYpID0+IGYgJiYgZih7IG1lc2g6IHRoaXMsIGNhbWVyYSB9KSk7XG4gICAgICAgIGlmIChjYW1lcmEpIHtcbiAgICAgICAgICAgIC8vIEFkZCBlbXB0eSBtYXRyaXggdW5pZm9ybXMgdG8gcHJvZ3JhbSBpZiB1bnNldFxuICAgICAgICAgICAgaWYgKCF0aGlzLnByb2dyYW0udW5pZm9ybXMubW9kZWxNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMucHJvZ3JhbS51bmlmb3Jtcywge1xuICAgICAgICAgICAgICAgICAgICBtb2RlbE1hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICB2aWV3TWF0cml4OiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVmlld01hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICBub3JtYWxNYXRyaXg6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbk1hdHJpeDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgICAgICBjYW1lcmFQb3NpdGlvbjogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgdGhlIG1hdHJpeCB1bmlmb3Jtc1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLnByb2plY3Rpb25NYXRyaXgudmFsdWUgPSBjYW1lcmEucHJvamVjdGlvbk1hdHJpeDtcbiAgICAgICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy5jYW1lcmFQb3NpdGlvbi52YWx1ZSA9IGNhbWVyYS53b3JsZFBvc2l0aW9uO1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLnZpZXdNYXRyaXgudmFsdWUgPSBjYW1lcmEudmlld01hdHJpeDtcbiAgICAgICAgICAgIHRoaXMubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5KGNhbWVyYS52aWV3TWF0cml4LCB0aGlzLndvcmxkTWF0cml4KTtcbiAgICAgICAgICAgIHRoaXMubm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCh0aGlzLm1vZGVsVmlld01hdHJpeCk7XG4gICAgICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMubW9kZWxNYXRyaXgudmFsdWUgPSB0aGlzLndvcmxkTWF0cml4O1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLm1vZGVsVmlld01hdHJpeC52YWx1ZSA9IHRoaXMubW9kZWxWaWV3TWF0cml4O1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtLnVuaWZvcm1zLm5vcm1hbE1hdHJpeC52YWx1ZSA9IHRoaXMubm9ybWFsTWF0cml4O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIGZhY2VzIG5lZWQgdG8gYmUgZmxpcHBlZCAtIHdoZW4gbWVzaCBzY2FsZWQgbmVnYXRpdmVseVxuICAgICAgICBsZXQgZmxpcEZhY2VzID0gdGhpcy5wcm9ncmFtLmN1bGxGYWNlICYmIHRoaXMud29ybGRNYXRyaXguZGV0ZXJtaW5hbnQoKSA8IDA7XG4gICAgICAgIHRoaXMucHJvZ3JhbS51c2UoeyBmbGlwRmFjZXMgfSk7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnkuZHJhdyh7IG1vZGU6IHRoaXMubW9kZSwgcHJvZ3JhbTogdGhpcy5wcm9ncmFtIH0pO1xuICAgICAgICB0aGlzLmFmdGVyUmVuZGVyQ2FsbGJhY2tzLmZvckVhY2goKGYpID0+IGYgJiYgZih7IG1lc2g6IHRoaXMsIGNhbWVyYSB9KSk7XG4gICAgfVxufVxuIiwiLy8gVE9ETzogdXBsb2FkIGVtcHR5IHRleHR1cmUgaWYgbnVsbCA/IG1heWJlIG5vdFxuLy8gVE9ETzogdXBsb2FkIGlkZW50aXR5IG1hdHJpeCBpZiBudWxsID9cbi8vIFRPRE86IHNhbXBsZXIgQ3ViZVxuXG5sZXQgSUQgPSAxO1xuXG4vLyBjYWNoZSBvZiB0eXBlZCBhcnJheXMgdXNlZCB0byBmbGF0dGVuIHVuaWZvcm0gYXJyYXlzXG5jb25zdCBhcnJheUNhY2hlRjMyID0ge307XG5cbmV4cG9ydCBjbGFzcyBQcm9ncmFtIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2wsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZlcnRleCxcbiAgICAgICAgICAgIGZyYWdtZW50LFxuICAgICAgICAgICAgdW5pZm9ybXMgPSB7fSxcblxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgPSBmYWxzZSxcbiAgICAgICAgICAgIGN1bGxGYWNlID0gZ2wuQkFDSyxcbiAgICAgICAgICAgIGZyb250RmFjZSA9IGdsLkNDVyxcbiAgICAgICAgICAgIGRlcHRoVGVzdCA9IHRydWUsXG4gICAgICAgICAgICBkZXB0aFdyaXRlID0gdHJ1ZSxcbiAgICAgICAgICAgIGRlcHRoRnVuYyA9IGdsLkxFU1MsXG4gICAgICAgIH0gPSB7fVxuICAgICkge1xuICAgICAgICBpZiAoIWdsLmNhbnZhcykgY29uc29sZS5lcnJvcignZ2wgbm90IHBhc3NlZCBhcyBmaXN0IGFyZ3VtZW50IHRvIFByb2dyYW0nKTtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLnVuaWZvcm1zID0gdW5pZm9ybXM7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuXG4gICAgICAgIGlmICghdmVydGV4KSBjb25zb2xlLndhcm4oJ3ZlcnRleCBzaGFkZXIgbm90IHN1cHBsaWVkJyk7XG4gICAgICAgIGlmICghZnJhZ21lbnQpIGNvbnNvbGUud2FybignZnJhZ21lbnQgc2hhZGVyIG5vdCBzdXBwbGllZCcpO1xuXG4gICAgICAgIC8vIFN0b3JlIHByb2dyYW0gc3RhdGVcbiAgICAgICAgdGhpcy50cmFuc3BhcmVudCA9IHRyYW5zcGFyZW50O1xuICAgICAgICB0aGlzLmN1bGxGYWNlID0gY3VsbEZhY2U7XG4gICAgICAgIHRoaXMuZnJvbnRGYWNlID0gZnJvbnRGYWNlO1xuICAgICAgICB0aGlzLmRlcHRoVGVzdCA9IGRlcHRoVGVzdDtcbiAgICAgICAgdGhpcy5kZXB0aFdyaXRlID0gZGVwdGhXcml0ZTtcbiAgICAgICAgdGhpcy5kZXB0aEZ1bmMgPSBkZXB0aEZ1bmM7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jID0ge307XG4gICAgICAgIHRoaXMuYmxlbmRFcXVhdGlvbiA9IHt9O1xuXG4gICAgICAgIC8vIHNldCBkZWZhdWx0IGJsZW5kRnVuYyBpZiB0cmFuc3BhcmVudCBmbGFnZ2VkXG4gICAgICAgIGlmICh0aGlzLnRyYW5zcGFyZW50ICYmICF0aGlzLmJsZW5kRnVuYy5zcmMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdsLnJlbmRlcmVyLnByZW11bHRpcGxpZWRBbHBoYSkgdGhpcy5zZXRCbGVuZEZ1bmModGhpcy5nbC5PTkUsIHRoaXMuZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG4gICAgICAgICAgICBlbHNlIHRoaXMuc2V0QmxlbmRGdW5jKHRoaXMuZ2wuU1JDX0FMUEhBLCB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29tcGlsZSB2ZXJ0ZXggc2hhZGVyIGFuZCBsb2cgZXJyb3JzXG4gICAgICAgIGNvbnN0IHZlcnRleFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSKTtcbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKHZlcnRleFNoYWRlciwgdmVydGV4KTtcbiAgICAgICAgZ2wuY29tcGlsZVNoYWRlcih2ZXJ0ZXhTaGFkZXIpO1xuICAgICAgICBpZiAoZ2wuZ2V0U2hhZGVySW5mb0xvZyh2ZXJ0ZXhTaGFkZXIpICE9PSAnJykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGAke2dsLmdldFNoYWRlckluZm9Mb2codmVydGV4U2hhZGVyKX1cXG5WZXJ0ZXggU2hhZGVyXFxuJHthZGRMaW5lTnVtYmVycyh2ZXJ0ZXgpfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29tcGlsZSBmcmFnbWVudCBzaGFkZXIgYW5kIGxvZyBlcnJvcnNcbiAgICAgICAgY29uc3QgZnJhZ21lbnRTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKTtcbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKGZyYWdtZW50U2hhZGVyLCBmcmFnbWVudCk7XG4gICAgICAgIGdsLmNvbXBpbGVTaGFkZXIoZnJhZ21lbnRTaGFkZXIpO1xuICAgICAgICBpZiAoZ2wuZ2V0U2hhZGVySW5mb0xvZyhmcmFnbWVudFNoYWRlcikgIT09ICcnKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7Z2wuZ2V0U2hhZGVySW5mb0xvZyhmcmFnbWVudFNoYWRlcil9XFxuRnJhZ21lbnQgU2hhZGVyXFxuJHthZGRMaW5lTnVtYmVycyhmcmFnbWVudCl9YCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb21waWxlIHByb2dyYW0gYW5kIGxvZyBlcnJvcnNcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuICAgICAgICBnbC5hdHRhY2hTaGFkZXIodGhpcy5wcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xuICAgICAgICBnbC5hdHRhY2hTaGFkZXIodGhpcy5wcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XG4gICAgICAgIGdsLmxpbmtQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG4gICAgICAgIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLnByb2dyYW0sIGdsLkxJTktfU1RBVFVTKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihnbC5nZXRQcm9ncmFtSW5mb0xvZyh0aGlzLnByb2dyYW0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSBzaGFkZXIgb25jZSBsaW5rZWRcbiAgICAgICAgZ2wuZGVsZXRlU2hhZGVyKHZlcnRleFNoYWRlcik7XG4gICAgICAgIGdsLmRlbGV0ZVNoYWRlcihmcmFnbWVudFNoYWRlcik7XG5cbiAgICAgICAgLy8gR2V0IGFjdGl2ZSB1bmlmb3JtIGxvY2F0aW9uc1xuICAgICAgICB0aGlzLnVuaWZvcm1Mb2NhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGxldCBudW1Vbmlmb3JtcyA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIodGhpcy5wcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STVMpO1xuICAgICAgICBmb3IgKGxldCB1SW5kZXggPSAwOyB1SW5kZXggPCBudW1Vbmlmb3JtczsgdUluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCB1bmlmb3JtID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybSh0aGlzLnByb2dyYW0sIHVJbmRleCk7XG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1Mb2NhdGlvbnMuc2V0KHVuaWZvcm0sIGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnByb2dyYW0sIHVuaWZvcm0ubmFtZSkpO1xuXG4gICAgICAgICAgICAvLyBzcGxpdCB1bmlmb3JtcycgbmFtZXMgdG8gc2VwYXJhdGUgYXJyYXkgYW5kIHN0cnVjdCBkZWNsYXJhdGlvbnNcbiAgICAgICAgICAgIGNvbnN0IHNwbGl0ID0gdW5pZm9ybS5uYW1lLm1hdGNoKC8oXFx3KykvZyk7XG5cbiAgICAgICAgICAgIHVuaWZvcm0udW5pZm9ybU5hbWUgPSBzcGxpdFswXTtcblxuICAgICAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgIHVuaWZvcm0uaXNTdHJ1Y3RBcnJheSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdW5pZm9ybS5zdHJ1Y3RJbmRleCA9IE51bWJlcihzcGxpdFsxXSk7XG4gICAgICAgICAgICAgICAgdW5pZm9ybS5zdHJ1Y3RQcm9wZXJ0eSA9IHNwbGl0WzJdO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzcGxpdC5sZW5ndGggPT09IDIgJiYgaXNOYU4oTnVtYmVyKHNwbGl0WzFdKSkpIHtcbiAgICAgICAgICAgICAgICB1bmlmb3JtLmlzU3RydWN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB1bmlmb3JtLnN0cnVjdFByb3BlcnR5ID0gc3BsaXRbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgYWN0aXZlIGF0dHJpYnV0ZSBsb2NhdGlvbnNcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVMb2NhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGNvbnN0IGxvY2F0aW9ucyA9IFtdO1xuICAgICAgICBjb25zdCBudW1BdHRyaWJzID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLnByb2dyYW0sIGdsLkFDVElWRV9BVFRSSUJVVEVTKTtcbiAgICAgICAgZm9yIChsZXQgYUluZGV4ID0gMDsgYUluZGV4IDwgbnVtQXR0cmliczsgYUluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGdsLmdldEFjdGl2ZUF0dHJpYih0aGlzLnByb2dyYW0sIGFJbmRleCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgLy8gSWdub3JlIHNwZWNpYWwgYnVpbHQtaW4gaW5wdXRzLiBlZyBnbF9WZXJ0ZXhJRCwgZ2xfSW5zdGFuY2VJRFxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uID09PSAtMSkgY29udGludWU7XG4gICAgICAgICAgICBsb2NhdGlvbnNbbG9jYXRpb25dID0gYXR0cmlidXRlLm5hbWU7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZUxvY2F0aW9ucy5zZXQoYXR0cmlidXRlLCBsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVPcmRlciA9IGxvY2F0aW9ucy5qb2luKCcnKTtcbiAgICB9XG5cbiAgICBzZXRCbGVuZEZ1bmMoc3JjLCBkc3QsIHNyY0FscGhhLCBkc3RBbHBoYSkge1xuICAgICAgICB0aGlzLmJsZW5kRnVuYy5zcmMgPSBzcmM7XG4gICAgICAgIHRoaXMuYmxlbmRGdW5jLmRzdCA9IGRzdDtcbiAgICAgICAgdGhpcy5ibGVuZEZ1bmMuc3JjQWxwaGEgPSBzcmNBbHBoYTtcbiAgICAgICAgdGhpcy5ibGVuZEZ1bmMuZHN0QWxwaGEgPSBkc3RBbHBoYTtcbiAgICAgICAgaWYgKHNyYykgdGhpcy50cmFuc3BhcmVudCA9IHRydWU7XG4gICAgfVxuXG4gICAgc2V0QmxlbmRFcXVhdGlvbihtb2RlUkdCLCBtb2RlQWxwaGEpIHtcbiAgICAgICAgdGhpcy5ibGVuZEVxdWF0aW9uLm1vZGVSR0IgPSBtb2RlUkdCO1xuICAgICAgICB0aGlzLmJsZW5kRXF1YXRpb24ubW9kZUFscGhhID0gbW9kZUFscGhhO1xuICAgIH1cblxuICAgIGFwcGx5U3RhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmRlcHRoVGVzdCkgdGhpcy5nbC5yZW5kZXJlci5lbmFibGUodGhpcy5nbC5ERVBUSF9URVNUKTtcbiAgICAgICAgZWxzZSB0aGlzLmdsLnJlbmRlcmVyLmRpc2FibGUodGhpcy5nbC5ERVBUSF9URVNUKTtcblxuICAgICAgICBpZiAodGhpcy5jdWxsRmFjZSkgdGhpcy5nbC5yZW5kZXJlci5lbmFibGUodGhpcy5nbC5DVUxMX0ZBQ0UpO1xuICAgICAgICBlbHNlIHRoaXMuZ2wucmVuZGVyZXIuZGlzYWJsZSh0aGlzLmdsLkNVTExfRkFDRSk7XG5cbiAgICAgICAgaWYgKHRoaXMuYmxlbmRGdW5jLnNyYykgdGhpcy5nbC5yZW5kZXJlci5lbmFibGUodGhpcy5nbC5CTEVORCk7XG4gICAgICAgIGVsc2UgdGhpcy5nbC5yZW5kZXJlci5kaXNhYmxlKHRoaXMuZ2wuQkxFTkQpO1xuXG4gICAgICAgIGlmICh0aGlzLmN1bGxGYWNlKSB0aGlzLmdsLnJlbmRlcmVyLnNldEN1bGxGYWNlKHRoaXMuY3VsbEZhY2UpO1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnNldEZyb250RmFjZSh0aGlzLmZyb250RmFjZSk7XG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuc2V0RGVwdGhNYXNrKHRoaXMuZGVwdGhXcml0ZSk7XG4gICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuc2V0RGVwdGhGdW5jKHRoaXMuZGVwdGhGdW5jKTtcbiAgICAgICAgaWYgKHRoaXMuYmxlbmRGdW5jLnNyYylcbiAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuc2V0QmxlbmRGdW5jKHRoaXMuYmxlbmRGdW5jLnNyYywgdGhpcy5ibGVuZEZ1bmMuZHN0LCB0aGlzLmJsZW5kRnVuYy5zcmNBbHBoYSwgdGhpcy5ibGVuZEZ1bmMuZHN0QWxwaGEpO1xuICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnNldEJsZW5kRXF1YXRpb24odGhpcy5ibGVuZEVxdWF0aW9uLm1vZGVSR0IsIHRoaXMuYmxlbmRFcXVhdGlvbi5tb2RlQWxwaGEpO1xuICAgIH1cblxuICAgIHVzZSh7IGZsaXBGYWNlcyA9IGZhbHNlIH0gPSB7fSkge1xuICAgICAgICBsZXQgdGV4dHVyZVVuaXQgPSAtMTtcbiAgICAgICAgY29uc3QgcHJvZ3JhbUFjdGl2ZSA9IHRoaXMuZ2wucmVuZGVyZXIuc3RhdGUuY3VycmVudFByb2dyYW0gPT09IHRoaXMuaWQ7XG5cbiAgICAgICAgLy8gQXZvaWQgZ2wgY2FsbCBpZiBwcm9ncmFtIGFscmVhZHkgaW4gdXNlXG4gICAgICAgIGlmICghcHJvZ3JhbUFjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5nbC51c2VQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG4gICAgICAgICAgICB0aGlzLmdsLnJlbmRlcmVyLnN0YXRlLmN1cnJlbnRQcm9ncmFtID0gdGhpcy5pZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCBvbmx5IHRoZSBhY3RpdmUgdW5pZm9ybXMgZm91bmQgaW4gdGhlIHNoYWRlclxuICAgICAgICB0aGlzLnVuaWZvcm1Mb2NhdGlvbnMuZm9yRWFjaCgobG9jYXRpb24sIGFjdGl2ZVVuaWZvcm0pID0+IHtcbiAgICAgICAgICAgIGxldCBuYW1lID0gYWN0aXZlVW5pZm9ybS51bmlmb3JtTmFtZTtcblxuICAgICAgICAgICAgLy8gZ2V0IHN1cHBsaWVkIHVuaWZvcm1cbiAgICAgICAgICAgIGxldCB1bmlmb3JtID0gdGhpcy51bmlmb3Jtc1tuYW1lXTtcblxuICAgICAgICAgICAgLy8gRm9yIHN0cnVjdHMsIGdldCB0aGUgc3BlY2lmaWMgcHJvcGVydHkgaW5zdGVhZCBvZiB0aGUgZW50aXJlIG9iamVjdFxuICAgICAgICAgICAgaWYgKGFjdGl2ZVVuaWZvcm0uaXNTdHJ1Y3QpIHtcbiAgICAgICAgICAgICAgICB1bmlmb3JtID0gdW5pZm9ybVthY3RpdmVVbmlmb3JtLnN0cnVjdFByb3BlcnR5XTtcbiAgICAgICAgICAgICAgICBuYW1lICs9IGAuJHthY3RpdmVVbmlmb3JtLnN0cnVjdFByb3BlcnR5fWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWN0aXZlVW5pZm9ybS5pc1N0cnVjdEFycmF5KSB7XG4gICAgICAgICAgICAgICAgdW5pZm9ybSA9IHVuaWZvcm1bYWN0aXZlVW5pZm9ybS5zdHJ1Y3RJbmRleF1bYWN0aXZlVW5pZm9ybS5zdHJ1Y3RQcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgbmFtZSArPSBgWyR7YWN0aXZlVW5pZm9ybS5zdHJ1Y3RJbmRleH1dLiR7YWN0aXZlVW5pZm9ybS5zdHJ1Y3RQcm9wZXJ0eX1gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXVuaWZvcm0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2FybihgQWN0aXZlIHVuaWZvcm0gJHtuYW1lfSBoYXMgbm90IGJlZW4gc3VwcGxpZWRgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHVuaWZvcm0gJiYgdW5pZm9ybS52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdhcm4oYCR7bmFtZX0gdW5pZm9ybSBpcyBtaXNzaW5nIGEgdmFsdWUgcGFyYW1ldGVyYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1bmlmb3JtLnZhbHVlLnRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlVW5pdCA9IHRleHR1cmVVbml0ICsgMTtcblxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRleHR1cmUgbmVlZHMgdG8gYmUgdXBkYXRlZFxuICAgICAgICAgICAgICAgIHVuaWZvcm0udmFsdWUudXBkYXRlKHRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0VW5pZm9ybSh0aGlzLmdsLCBhY3RpdmVVbmlmb3JtLnR5cGUsIGxvY2F0aW9uLCB0ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZvciB0ZXh0dXJlIGFycmF5cywgc2V0IHVuaWZvcm0gYXMgYW4gYXJyYXkgb2YgdGV4dHVyZSB1bml0cyBpbnN0ZWFkIG9mIGp1c3Qgb25lXG4gICAgICAgICAgICBpZiAodW5pZm9ybS52YWx1ZS5sZW5ndGggJiYgdW5pZm9ybS52YWx1ZVswXS50ZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dHVyZVVuaXRzID0gW107XG4gICAgICAgICAgICAgICAgdW5pZm9ybS52YWx1ZS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlVW5pdCA9IHRleHR1cmVVbml0ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUudXBkYXRlKHRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZVVuaXRzLnB1c2godGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldFVuaWZvcm0odGhpcy5nbCwgYWN0aXZlVW5pZm9ybS50eXBlLCBsb2NhdGlvbiwgdGV4dHVyZVVuaXRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0VW5pZm9ybSh0aGlzLmdsLCBhY3RpdmVVbmlmb3JtLnR5cGUsIGxvY2F0aW9uLCB1bmlmb3JtLnZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hcHBseVN0YXRlKCk7XG4gICAgICAgIGlmIChmbGlwRmFjZXMpIHRoaXMuZ2wucmVuZGVyZXIuc2V0RnJvbnRGYWNlKHRoaXMuZnJvbnRGYWNlID09PSB0aGlzLmdsLkNDVyA/IHRoaXMuZ2wuQ1cgOiB0aGlzLmdsLkNDVyk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKCkge1xuICAgICAgICB0aGlzLmdsLmRlbGV0ZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFVuaWZvcm0oZ2wsIHR5cGUsIGxvY2F0aW9uLCB2YWx1ZSkge1xuICAgIHZhbHVlID0gdmFsdWUubGVuZ3RoID8gZmxhdHRlbih2YWx1ZSkgOiB2YWx1ZTtcbiAgICBjb25zdCBzZXRWYWx1ZSA9IGdsLnJlbmRlcmVyLnN0YXRlLnVuaWZvcm1Mb2NhdGlvbnMuZ2V0KGxvY2F0aW9uKTtcblxuICAgIC8vIEF2b2lkIHJlZHVuZGFudCB1bmlmb3JtIGNvbW1hbmRzXG4gICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICBpZiAoc2V0VmFsdWUgPT09IHVuZGVmaW5lZCB8fCBzZXRWYWx1ZS5sZW5ndGggIT09IHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gY2xvbmUgYXJyYXkgdG8gc3RvcmUgYXMgY2FjaGVcbiAgICAgICAgICAgIGdsLnJlbmRlcmVyLnN0YXRlLnVuaWZvcm1Mb2NhdGlvbnMuc2V0KGxvY2F0aW9uLCB2YWx1ZS5zbGljZSgwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYXJyYXlzRXF1YWwoc2V0VmFsdWUsIHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgY2FjaGVkIGFycmF5IHZhbHVlc1xuICAgICAgICAgICAgc2V0VmFsdWUuc2V0ID8gc2V0VmFsdWUuc2V0KHZhbHVlKSA6IHNldEFycmF5KHNldFZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICBnbC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLnNldChsb2NhdGlvbiwgc2V0VmFsdWUpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNldFZhbHVlID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICBnbC5yZW5kZXJlci5zdGF0ZS51bmlmb3JtTG9jYXRpb25zLnNldChsb2NhdGlvbiwgdmFsdWUpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIDUxMjY6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID8gZ2wudW5pZm9ybTFmdihsb2NhdGlvbiwgdmFsdWUpIDogZ2wudW5pZm9ybTFmKGxvY2F0aW9uLCB2YWx1ZSk7IC8vIEZMT0FUXG4gICAgICAgIGNhc2UgMzU2NjQ6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTJmdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVF9WRUMyXG4gICAgICAgIGNhc2UgMzU2NjU6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTNmdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVF9WRUMzXG4gICAgICAgIGNhc2UgMzU2NjY6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTRmdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBGTE9BVF9WRUM0XG4gICAgICAgIGNhc2UgMzU2NzA6IC8vIEJPT0xcbiAgICAgICAgY2FzZSA1MTI0OiAvLyBJTlRcbiAgICAgICAgY2FzZSAzNTY3ODogLy8gU0FNUExFUl8yRFxuICAgICAgICBjYXNlIDM1NjgwOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmxlbmd0aCA/IGdsLnVuaWZvcm0xaXYobG9jYXRpb24sIHZhbHVlKSA6IGdsLnVuaWZvcm0xaShsb2NhdGlvbiwgdmFsdWUpOyAvLyBTQU1QTEVSX0NVQkVcbiAgICAgICAgY2FzZSAzNTY3MTogLy8gQk9PTF9WRUMyXG4gICAgICAgIGNhc2UgMzU2Njc6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybTJpdihsb2NhdGlvbiwgdmFsdWUpOyAvLyBJTlRfVkVDMlxuICAgICAgICBjYXNlIDM1NjcyOiAvLyBCT09MX1ZFQzNcbiAgICAgICAgY2FzZSAzNTY2ODpcbiAgICAgICAgICAgIHJldHVybiBnbC51bmlmb3JtM2l2KGxvY2F0aW9uLCB2YWx1ZSk7IC8vIElOVF9WRUMzXG4gICAgICAgIGNhc2UgMzU2NzM6IC8vIEJPT0xfVkVDNFxuICAgICAgICBjYXNlIDM1NjY5OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm00aXYobG9jYXRpb24sIHZhbHVlKTsgLy8gSU5UX1ZFQzRcbiAgICAgICAgY2FzZSAzNTY3NDpcbiAgICAgICAgICAgIHJldHVybiBnbC51bmlmb3JtTWF0cml4MmZ2KGxvY2F0aW9uLCBmYWxzZSwgdmFsdWUpOyAvLyBGTE9BVF9NQVQyXG4gICAgICAgIGNhc2UgMzU2NzU6XG4gICAgICAgICAgICByZXR1cm4gZ2wudW5pZm9ybU1hdHJpeDNmdihsb2NhdGlvbiwgZmFsc2UsIHZhbHVlKTsgLy8gRkxPQVRfTUFUM1xuICAgICAgICBjYXNlIDM1Njc2OlxuICAgICAgICAgICAgcmV0dXJuIGdsLnVuaWZvcm1NYXRyaXg0ZnYobG9jYXRpb24sIGZhbHNlLCB2YWx1ZSk7IC8vIEZMT0FUX01BVDRcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFkZExpbmVOdW1iZXJzKHN0cmluZykge1xuICAgIGxldCBsaW5lcyA9IHN0cmluZy5zcGxpdCgnXFxuJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaW5lc1tpXSA9IGkgKyAxICsgJzogJyArIGxpbmVzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gbGluZXMuam9pbignXFxuJyk7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4oYSkge1xuICAgIGNvbnN0IGFycmF5TGVuID0gYS5sZW5ndGg7XG4gICAgY29uc3QgdmFsdWVMZW4gPSBhWzBdLmxlbmd0aDtcbiAgICBpZiAodmFsdWVMZW4gPT09IHVuZGVmaW5lZCkgcmV0dXJuIGE7XG4gICAgY29uc3QgbGVuZ3RoID0gYXJyYXlMZW4gKiB2YWx1ZUxlbjtcbiAgICBsZXQgdmFsdWUgPSBhcnJheUNhY2hlRjMyW2xlbmd0aF07XG4gICAgaWYgKCF2YWx1ZSkgYXJyYXlDYWNoZUYzMltsZW5ndGhdID0gdmFsdWUgPSBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheUxlbjsgaSsrKSB2YWx1ZS5zZXQoYVtpXSwgaSAqIHZhbHVlTGVuKTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGFycmF5c0VxdWFsKGEsIGIpIHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYVtpXSAhPT0gYltpXSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2V0QXJyYXkoYSwgYikge1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gYS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgYVtpXSA9IGJbaV07XG4gICAgfVxufVxuXG5sZXQgd2FybkNvdW50ID0gMDtcbmZ1bmN0aW9uIHdhcm4obWVzc2FnZSkge1xuICAgIGlmICh3YXJuQ291bnQgPiAxMDApIHJldHVybjtcbiAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgd2FybkNvdW50Kys7XG4gICAgaWYgKHdhcm5Db3VudCA+IDEwMCkgY29uc29sZS53YXJuKCdNb3JlIHRoYW4gMTAwIHByb2dyYW0gd2FybmluZ3MgLSBzdG9wcGluZyBsb2dzLicpO1xufVxuIiwiaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4uL21hdGgvVmVjMy5qcyc7XG5cbi8vIFRPRE86IEhhbmRsZSBjb250ZXh0IGxvc3MgaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvd2ViZ2wvd2lraS9IYW5kbGluZ0NvbnRleHRMb3N0XG5cbi8vIE5vdCBhdXRvbWF0aWMgLSBkZXZzIHRvIHVzZSB0aGVzZSBtZXRob2RzIG1hbnVhbGx5XG4vLyBnbC5jb2xvck1hc2soIGNvbG9yTWFzaywgY29sb3JNYXNrLCBjb2xvck1hc2ssIGNvbG9yTWFzayApO1xuLy8gZ2wuY2xlYXJDb2xvciggciwgZywgYiwgYSApO1xuLy8gZ2wuc3RlbmNpbE1hc2soIHN0ZW5jaWxNYXNrICk7XG4vLyBnbC5zdGVuY2lsRnVuYyggc3RlbmNpbEZ1bmMsIHN0ZW5jaWxSZWYsIHN0ZW5jaWxNYXNrICk7XG4vLyBnbC5zdGVuY2lsT3AoIHN0ZW5jaWxGYWlsLCBzdGVuY2lsWkZhaWwsIHN0ZW5jaWxaUGFzcyApO1xuLy8gZ2wuY2xlYXJTdGVuY2lsKCBzdGVuY2lsICk7XG5cbmNvbnN0IHRlbXBWZWMzID0gbmV3IFZlYzMoKTtcbmxldCBJRCA9IDE7XG5cbmV4cG9ydCBjbGFzcyBSZW5kZXJlciB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSxcbiAgICAgICAgd2lkdGggPSAzMDAsXG4gICAgICAgIGhlaWdodCA9IDE1MCxcbiAgICAgICAgZHByID0gMSxcbiAgICAgICAgYWxwaGEgPSBmYWxzZSxcbiAgICAgICAgZGVwdGggPSB0cnVlLFxuICAgICAgICBzdGVuY2lsID0gZmFsc2UsXG4gICAgICAgIGFudGlhbGlhcyA9IGZhbHNlLFxuICAgICAgICBwcmVtdWx0aXBsaWVkQWxwaGEgPSBmYWxzZSxcbiAgICAgICAgcHJlc2VydmVEcmF3aW5nQnVmZmVyID0gZmFsc2UsXG4gICAgICAgIHBvd2VyUHJlZmVyZW5jZSA9ICdkZWZhdWx0JyxcbiAgICAgICAgYXV0b0NsZWFyID0gdHJ1ZSxcbiAgICAgICAgd2ViZ2wgPSAyLFxuICAgIH0gPSB7fSkge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0geyBhbHBoYSwgZGVwdGgsIHN0ZW5jaWwsIGFudGlhbGlhcywgcHJlbXVsdGlwbGllZEFscGhhLCBwcmVzZXJ2ZURyYXdpbmdCdWZmZXIsIHBvd2VyUHJlZmVyZW5jZSB9O1xuICAgICAgICB0aGlzLmRwciA9IGRwcjtcbiAgICAgICAgdGhpcy5hbHBoYSA9IGFscGhhO1xuICAgICAgICB0aGlzLmNvbG9yID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZXB0aCA9IGRlcHRoO1xuICAgICAgICB0aGlzLnN0ZW5jaWwgPSBzdGVuY2lsO1xuICAgICAgICB0aGlzLnByZW11bHRpcGxpZWRBbHBoYSA9IHByZW11bHRpcGxpZWRBbHBoYTtcbiAgICAgICAgdGhpcy5hdXRvQ2xlYXIgPSBhdXRvQ2xlYXI7XG4gICAgICAgIHRoaXMuaWQgPSBJRCsrO1xuXG4gICAgICAgIC8vIEF0dGVtcHQgV2ViR0wyIHVubGVzcyBmb3JjZWQgdG8gMSwgaWYgbm90IHN1cHBvcnRlZCBmYWxsYmFjayB0byBXZWJHTDFcbiAgICAgICAgaWYgKHdlYmdsID09PSAyKSB0aGlzLmdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsMicsIGF0dHJpYnV0ZXMpO1xuICAgICAgICB0aGlzLmlzV2ViZ2wyID0gISF0aGlzLmdsO1xuICAgICAgICBpZiAoIXRoaXMuZ2wpIHRoaXMuZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnLCBhdHRyaWJ1dGVzKTtcbiAgICAgICAgaWYgKCF0aGlzLmdsKSBjb25zb2xlLmVycm9yKCd1bmFibGUgdG8gY3JlYXRlIHdlYmdsIGNvbnRleHQnKTtcblxuICAgICAgICAvLyBBdHRhY2ggcmVuZGVyZXIgdG8gZ2wgc28gdGhhdCBhbGwgY2xhc3NlcyBoYXZlIGFjY2VzcyB0byBpbnRlcm5hbCBzdGF0ZSBmdW5jdGlvbnNcbiAgICAgICAgdGhpcy5nbC5yZW5kZXJlciA9IHRoaXM7XG5cbiAgICAgICAgLy8gaW5pdGlhbGlzZSBzaXplIHZhbHVlc1xuICAgICAgICB0aGlzLnNldFNpemUod2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgLy8gZ2wgc3RhdGUgc3RvcmVzIHRvIGF2b2lkIHJlZHVuZGFudCBjYWxscyBvbiBtZXRob2RzIHVzZWQgaW50ZXJuYWxseVxuICAgICAgICB0aGlzLnN0YXRlID0ge307XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jID0geyBzcmM6IHRoaXMuZ2wuT05FLCBkc3Q6IHRoaXMuZ2wuWkVSTyB9O1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRXF1YXRpb24gPSB7IG1vZGVSR0I6IHRoaXMuZ2wuRlVOQ19BREQgfTtcbiAgICAgICAgdGhpcy5zdGF0ZS5jdWxsRmFjZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGUuZnJvbnRGYWNlID0gdGhpcy5nbC5DQ1c7XG4gICAgICAgIHRoaXMuc3RhdGUuZGVwdGhNYXNrID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGF0ZS5kZXB0aEZ1bmMgPSB0aGlzLmdsLkxFU1M7XG4gICAgICAgIHRoaXMuc3RhdGUucHJlbXVsdGlwbHlBbHBoYSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXRlLmZsaXBZID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3RhdGUudW5wYWNrQWxpZ25tZW50ID0gNDtcbiAgICAgICAgdGhpcy5zdGF0ZS5mcmFtZWJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGUudmlld3BvcnQgPSB7IHg6IDAsIHk6IDAsIHdpZHRoOiBudWxsLCBoZWlnaHQ6IG51bGwgfTtcbiAgICAgICAgdGhpcy5zdGF0ZS50ZXh0dXJlVW5pdHMgPSBbXTtcbiAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVUZXh0dXJlVW5pdCA9IDA7XG4gICAgICAgIHRoaXMuc3RhdGUuYm91bmRCdWZmZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlLnVuaWZvcm1Mb2NhdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuc3RhdGUuY3VycmVudFByb2dyYW0gPSBudWxsO1xuXG4gICAgICAgIC8vIHN0b3JlIHJlcXVlc3RlZCBleHRlbnNpb25zXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9ucyA9IHt9O1xuXG4gICAgICAgIC8vIEluaXRpYWxpc2UgZXh0cmEgZm9ybWF0IHR5cGVzXG4gICAgICAgIGlmICh0aGlzLmlzV2ViZ2wyKSB7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0Jyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2hhbGZfZmxvYXRfbGluZWFyJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignT0VTX2VsZW1lbnRfaW5kZXhfdWludCcpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcycpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ0VYVF9zUkdCJyk7XG4gICAgICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignV0VCR0xfZGVwdGhfdGV4dHVyZScpO1xuICAgICAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQkdMX2RyYXdfYnVmZmVycycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXN0YycpO1xuICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignRVhUX3RleHR1cmVfY29tcHJlc3Npb25fYnB0YycpO1xuICAgICAgICB0aGlzLmdldEV4dGVuc2lvbignV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnKTtcbiAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxJyk7XG4gICAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnKTtcbiAgICAgICAgdGhpcy5nZXRFeHRlbnNpb24oJ1dFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnKTtcblxuICAgICAgICAvLyBDcmVhdGUgbWV0aG9kIGFsaWFzZXMgdXNpbmcgZXh0ZW5zaW9uIChXZWJHTDEpIG9yIG5hdGl2ZSBpZiBhdmFpbGFibGUgKFdlYkdMMilcbiAgICAgICAgdGhpcy52ZXJ0ZXhBdHRyaWJEaXZpc29yID0gdGhpcy5nZXRFeHRlbnNpb24oJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnLCAndmVydGV4QXR0cmliRGl2aXNvcicsICd2ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUnKTtcbiAgICAgICAgdGhpcy5kcmF3QXJyYXlzSW5zdGFuY2VkID0gdGhpcy5nZXRFeHRlbnNpb24oJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnLCAnZHJhd0FycmF5c0luc3RhbmNlZCcsICdkcmF3QXJyYXlzSW5zdGFuY2VkQU5HTEUnKTtcbiAgICAgICAgdGhpcy5kcmF3RWxlbWVudHNJbnN0YW5jZWQgPSB0aGlzLmdldEV4dGVuc2lvbignQU5HTEVfaW5zdGFuY2VkX2FycmF5cycsICdkcmF3RWxlbWVudHNJbnN0YW5jZWQnLCAnZHJhd0VsZW1lbnRzSW5zdGFuY2VkQU5HTEUnKTtcbiAgICAgICAgdGhpcy5jcmVhdGVWZXJ0ZXhBcnJheSA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdPRVNfdmVydGV4X2FycmF5X29iamVjdCcsICdjcmVhdGVWZXJ0ZXhBcnJheScsICdjcmVhdGVWZXJ0ZXhBcnJheU9FUycpO1xuICAgICAgICB0aGlzLmJpbmRWZXJ0ZXhBcnJheSA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdPRVNfdmVydGV4X2FycmF5X29iamVjdCcsICdiaW5kVmVydGV4QXJyYXknLCAnYmluZFZlcnRleEFycmF5T0VTJyk7XG4gICAgICAgIHRoaXMuZGVsZXRlVmVydGV4QXJyYXkgPSB0aGlzLmdldEV4dGVuc2lvbignT0VTX3ZlcnRleF9hcnJheV9vYmplY3QnLCAnZGVsZXRlVmVydGV4QXJyYXknLCAnZGVsZXRlVmVydGV4QXJyYXlPRVMnKTtcbiAgICAgICAgdGhpcy5kcmF3QnVmZmVycyA9IHRoaXMuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9kcmF3X2J1ZmZlcnMnLCAnZHJhd0J1ZmZlcnMnLCAnZHJhd0J1ZmZlcnNXRUJHTCcpO1xuXG4gICAgICAgIC8vIFN0b3JlIGRldmljZSBwYXJhbWV0ZXJzXG4gICAgICAgIHRoaXMucGFyYW1ldGVycyA9IHt9O1xuICAgICAgICB0aGlzLnBhcmFtZXRlcnMubWF4VGV4dHVyZVVuaXRzID0gdGhpcy5nbC5nZXRQYXJhbWV0ZXIodGhpcy5nbC5NQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUyk7XG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5tYXhBbmlzb3Ryb3B5ID0gdGhpcy5nZXRFeHRlbnNpb24oJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpXG4gICAgICAgICAgICA/IHRoaXMuZ2wuZ2V0UGFyYW1ldGVyKHRoaXMuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKS5NQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQpXG4gICAgICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5nbC5jYW52YXMud2lkdGggPSB3aWR0aCAqIHRoaXMuZHByO1xuICAgICAgICB0aGlzLmdsLmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQgKiB0aGlzLmRwcjtcblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuZ2wuY2FudmFzLnN0eWxlLCB7XG4gICAgICAgICAgICB3aWR0aDogd2lkdGggKyAncHgnLFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKyAncHgnLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRWaWV3cG9ydCh3aWR0aCwgaGVpZ2h0LCB4ID0gMCwgeSA9IDApIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUudmlld3BvcnQud2lkdGggPT09IHdpZHRoICYmIHRoaXMuc3RhdGUudmlld3BvcnQuaGVpZ2h0ID09PSBoZWlnaHQpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS52aWV3cG9ydC53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLnN0YXRlLnZpZXdwb3J0LmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5zdGF0ZS52aWV3cG9ydC54ID0geDtcbiAgICAgICAgdGhpcy5zdGF0ZS52aWV3cG9ydC55ID0geTtcbiAgICAgICAgdGhpcy5nbC52aWV3cG9ydCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBzZXRTY2lzc29yKHdpZHRoLCBoZWlnaHQsIHggPSAwLCB5ID0gMCkge1xuICAgICAgICB0aGlzLmdsLnNjaXNzb3IoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgfVxuXG4gICAgZW5hYmxlKGlkKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlW2lkXSA9PT0gdHJ1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmdsLmVuYWJsZShpZCk7XG4gICAgICAgIHRoaXMuc3RhdGVbaWRdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBkaXNhYmxlKGlkKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlW2lkXSA9PT0gZmFsc2UpIHJldHVybjtcbiAgICAgICAgdGhpcy5nbC5kaXNhYmxlKGlkKTtcbiAgICAgICAgdGhpcy5zdGF0ZVtpZF0gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBzZXRCbGVuZEZ1bmMoc3JjLCBkc3QsIHNyY0FscGhhLCBkc3RBbHBoYSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5zcmMgPT09IHNyYyAmJlxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuZHN0ID09PSBkc3QgJiZcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLnNyY0FscGhhID09PSBzcmNBbHBoYSAmJlxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuZHN0QWxwaGEgPT09IGRzdEFscGhhXG4gICAgICAgIClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEZ1bmMuc3JjID0gc3JjO1xuICAgICAgICB0aGlzLnN0YXRlLmJsZW5kRnVuYy5kc3QgPSBkc3Q7XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLnNyY0FscGhhID0gc3JjQWxwaGE7XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRGdW5jLmRzdEFscGhhID0gZHN0QWxwaGE7XG4gICAgICAgIGlmIChzcmNBbHBoYSAhPT0gdW5kZWZpbmVkKSB0aGlzLmdsLmJsZW5kRnVuY1NlcGFyYXRlKHNyYywgZHN0LCBzcmNBbHBoYSwgZHN0QWxwaGEpO1xuICAgICAgICBlbHNlIHRoaXMuZ2wuYmxlbmRGdW5jKHNyYywgZHN0KTtcbiAgICB9XG5cbiAgICBzZXRCbGVuZEVxdWF0aW9uKG1vZGVSR0IsIG1vZGVBbHBoYSkge1xuICAgICAgICBtb2RlUkdCID0gbW9kZVJHQiB8fCB0aGlzLmdsLkZVTkNfQUREO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5ibGVuZEVxdWF0aW9uLm1vZGVSR0IgPT09IG1vZGVSR0IgJiYgdGhpcy5zdGF0ZS5ibGVuZEVxdWF0aW9uLm1vZGVBbHBoYSA9PT0gbW9kZUFscGhhKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuYmxlbmRFcXVhdGlvbi5tb2RlUkdCID0gbW9kZVJHQjtcbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZEVxdWF0aW9uLm1vZGVBbHBoYSA9IG1vZGVBbHBoYTtcbiAgICAgICAgaWYgKG1vZGVBbHBoYSAhPT0gdW5kZWZpbmVkKSB0aGlzLmdsLmJsZW5kRXF1YXRpb25TZXBhcmF0ZShtb2RlUkdCLCBtb2RlQWxwaGEpO1xuICAgICAgICBlbHNlIHRoaXMuZ2wuYmxlbmRFcXVhdGlvbihtb2RlUkdCKTtcbiAgICB9XG5cbiAgICBzZXRDdWxsRmFjZSh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5jdWxsRmFjZSA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5jdWxsRmFjZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmdsLmN1bGxGYWNlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBzZXRGcm9udEZhY2UodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZnJvbnRGYWNlID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmZyb250RmFjZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmdsLmZyb250RmFjZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgc2V0RGVwdGhNYXNrKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmRlcHRoTWFzayA9PT0gdmFsdWUpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5kZXB0aE1hc2sgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5nbC5kZXB0aE1hc2sodmFsdWUpO1xuICAgIH1cblxuICAgIHNldERlcHRoRnVuYyh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5kZXB0aEZ1bmMgPT09IHZhbHVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuc3RhdGUuZGVwdGhGdW5jID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZ2wuZGVwdGhGdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICBhY3RpdmVUZXh0dXJlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmFjdGl2ZVRleHR1cmVVbml0ID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLnN0YXRlLmFjdGl2ZVRleHR1cmVVbml0ID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUwICsgdmFsdWUpO1xuICAgIH1cblxuICAgIGJpbmRGcmFtZWJ1ZmZlcih7IHRhcmdldCA9IHRoaXMuZ2wuRlJBTUVCVUZGRVIsIGJ1ZmZlciA9IG51bGwgfSA9IHt9KSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmZyYW1lYnVmZmVyID09PSBidWZmZXIpIHJldHVybjtcbiAgICAgICAgdGhpcy5zdGF0ZS5mcmFtZWJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGFyZ2V0LCBidWZmZXIpO1xuICAgIH1cblxuICAgIGdldEV4dGVuc2lvbihleHRlbnNpb24sIHdlYmdsMkZ1bmMsIGV4dEZ1bmMpIHtcbiAgICAgICAgLy8gaWYgd2ViZ2wyIGZ1bmN0aW9uIHN1cHBvcnRlZCwgcmV0dXJuIGZ1bmMgYm91bmQgdG8gZ2wgY29udGV4dFxuICAgICAgICBpZiAod2ViZ2wyRnVuYyAmJiB0aGlzLmdsW3dlYmdsMkZ1bmNdKSByZXR1cm4gdGhpcy5nbFt3ZWJnbDJGdW5jXS5iaW5kKHRoaXMuZ2wpO1xuXG4gICAgICAgIC8vIGZldGNoIGV4dGVuc2lvbiBvbmNlIG9ubHlcbiAgICAgICAgaWYgKCF0aGlzLmV4dGVuc2lvbnNbZXh0ZW5zaW9uXSkge1xuICAgICAgICAgICAgdGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbl0gPSB0aGlzLmdsLmdldEV4dGVuc2lvbihleHRlbnNpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmV0dXJuIGV4dGVuc2lvbiBpZiBubyBmdW5jdGlvbiByZXF1ZXN0ZWRcbiAgICAgICAgaWYgKCF3ZWJnbDJGdW5jKSByZXR1cm4gdGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbl07XG5cbiAgICAgICAgLy8gUmV0dXJuIG51bGwgaWYgZXh0ZW5zaW9uIG5vdCBzdXBwb3J0ZWRcbiAgICAgICAgaWYgKCF0aGlzLmV4dGVuc2lvbnNbZXh0ZW5zaW9uXSkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgLy8gcmV0dXJuIGV4dGVuc2lvbiBmdW5jdGlvbiwgYm91bmQgdG8gZXh0ZW5zaW9uXG4gICAgICAgIHJldHVybiB0aGlzLmV4dGVuc2lvbnNbZXh0ZW5zaW9uXVtleHRGdW5jXS5iaW5kKHRoaXMuZXh0ZW5zaW9uc1tleHRlbnNpb25dKTtcbiAgICB9XG5cbiAgICBzb3J0T3BhcXVlKGEsIGIpIHtcbiAgICAgICAgaWYgKGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcjtcbiAgICAgICAgfSBlbHNlIGlmIChhLnByb2dyYW0uaWQgIT09IGIucHJvZ3JhbS5pZCkge1xuICAgICAgICAgICAgcmV0dXJuIGEucHJvZ3JhbS5pZCAtIGIucHJvZ3JhbS5pZDtcbiAgICAgICAgfSBlbHNlIGlmIChhLnpEZXB0aCAhPT0gYi56RGVwdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnpEZXB0aCAtIGIuekRlcHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGIuaWQgLSBhLmlkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc29ydFRyYW5zcGFyZW50KGEsIGIpIHtcbiAgICAgICAgaWYgKGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYS56RGVwdGggIT09IGIuekRlcHRoKSB7XG4gICAgICAgICAgICByZXR1cm4gYi56RGVwdGggLSBhLnpEZXB0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBiLmlkIC0gYS5pZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNvcnRVSShhLCBiKSB7XG4gICAgICAgIGlmIChhLnJlbmRlck9yZGVyICE9PSBiLnJlbmRlck9yZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG4gICAgICAgIH0gZWxzZSBpZiAoYS5wcm9ncmFtLmlkICE9PSBiLnByb2dyYW0uaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnByb2dyYW0uaWQgLSBiLnByb2dyYW0uaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYi5pZCAtIGEuaWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRSZW5kZXJMaXN0KHsgc2NlbmUsIGNhbWVyYSwgZnJ1c3R1bUN1bGwsIHNvcnQgfSkge1xuICAgICAgICBsZXQgcmVuZGVyTGlzdCA9IFtdO1xuXG4gICAgICAgIGlmIChjYW1lcmEgJiYgZnJ1c3R1bUN1bGwpIGNhbWVyYS51cGRhdGVGcnVzdHVtKCk7XG5cbiAgICAgICAgLy8gR2V0IHZpc2libGVcbiAgICAgICAgc2NlbmUudHJhdmVyc2UoKG5vZGUpID0+IHtcbiAgICAgICAgICAgIGlmICghbm9kZS52aXNpYmxlKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghbm9kZS5kcmF3KSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChmcnVzdHVtQ3VsbCAmJiBub2RlLmZydXN0dW1DdWxsZWQgJiYgY2FtZXJhKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYW1lcmEuZnJ1c3R1bUludGVyc2VjdHNNZXNoKG5vZGUpKSByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlbmRlckxpc3QucHVzaChub2RlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHNvcnQpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wYXF1ZSA9IFtdO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNwYXJlbnQgPSBbXTsgLy8gZGVwdGhUZXN0IHRydWVcbiAgICAgICAgICAgIGNvbnN0IHVpID0gW107IC8vIGRlcHRoVGVzdCBmYWxzZVxuXG4gICAgICAgICAgICByZW5kZXJMaXN0LmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBpbnRvIHRoZSAzIHJlbmRlciBncm91cHNcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUucHJvZ3JhbS50cmFuc3BhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICBvcGFxdWUucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUucHJvZ3JhbS5kZXB0aFRlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1aS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG5vZGUuekRlcHRoID0gMDtcblxuICAgICAgICAgICAgICAgIC8vIE9ubHkgY2FsY3VsYXRlIHotZGVwdGggaWYgcmVuZGVyT3JkZXIgdW5zZXQgYW5kIGRlcHRoVGVzdCBpcyB0cnVlXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUucmVuZGVyT3JkZXIgIT09IDAgfHwgIW5vZGUucHJvZ3JhbS5kZXB0aFRlc3QgfHwgIWNhbWVyYSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIHotZGVwdGhcbiAgICAgICAgICAgICAgICBub2RlLndvcmxkTWF0cml4LmdldFRyYW5zbGF0aW9uKHRlbXBWZWMzKTtcbiAgICAgICAgICAgICAgICB0ZW1wVmVjMy5hcHBseU1hdHJpeDQoY2FtZXJhLnByb2plY3Rpb25WaWV3TWF0cml4KTtcbiAgICAgICAgICAgICAgICBub2RlLnpEZXB0aCA9IHRlbXBWZWMzLno7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgb3BhcXVlLnNvcnQodGhpcy5zb3J0T3BhcXVlKTtcbiAgICAgICAgICAgIHRyYW5zcGFyZW50LnNvcnQodGhpcy5zb3J0VHJhbnNwYXJlbnQpO1xuICAgICAgICAgICAgdWkuc29ydCh0aGlzLnNvcnRVSSk7XG5cbiAgICAgICAgICAgIHJlbmRlckxpc3QgPSBvcGFxdWUuY29uY2F0KHRyYW5zcGFyZW50LCB1aSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVuZGVyTGlzdDtcbiAgICB9XG5cbiAgICByZW5kZXIoeyBzY2VuZSwgY2FtZXJhLCB0YXJnZXQgPSBudWxsLCB1cGRhdGUgPSB0cnVlLCBzb3J0ID0gdHJ1ZSwgZnJ1c3R1bUN1bGwgPSB0cnVlLCBjbGVhciB9KSB7XG4gICAgICAgIGlmICh0YXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBubyByZW5kZXIgdGFyZ2V0IGJvdW5kIHNvIGRyYXdzIHRvIGNhbnZhc1xuICAgICAgICAgICAgdGhpcy5iaW5kRnJhbWVidWZmZXIoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Vmlld3BvcnQodGhpcy53aWR0aCAqIHRoaXMuZHByLCB0aGlzLmhlaWdodCAqIHRoaXMuZHByKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGJpbmQgc3VwcGxpZWQgcmVuZGVyIHRhcmdldCBhbmQgdXBkYXRlIHZpZXdwb3J0XG4gICAgICAgICAgICB0aGlzLmJpbmRGcmFtZWJ1ZmZlcih0YXJnZXQpO1xuICAgICAgICAgICAgdGhpcy5zZXRWaWV3cG9ydCh0YXJnZXQud2lkdGgsIHRhcmdldC5oZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNsZWFyIHx8ICh0aGlzLmF1dG9DbGVhciAmJiBjbGVhciAhPT0gZmFsc2UpKSB7XG4gICAgICAgICAgICAvLyBFbnN1cmUgZGVwdGggYnVmZmVyIHdyaXRpbmcgaXMgZW5hYmxlZCBzbyBpdCBjYW4gYmUgY2xlYXJlZFxuICAgICAgICAgICAgaWYgKHRoaXMuZGVwdGggJiYgKCF0YXJnZXQgfHwgdGFyZ2V0LmRlcHRoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5hYmxlKHRoaXMuZ2wuREVQVEhfVEVTVCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXREZXB0aE1hc2sodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmdsLmNsZWFyKFxuICAgICAgICAgICAgICAgICh0aGlzLmNvbG9yID8gdGhpcy5nbC5DT0xPUl9CVUZGRVJfQklUIDogMCkgfFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5kZXB0aCA/IHRoaXMuZ2wuREVQVEhfQlVGRkVSX0JJVCA6IDApIHxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuc3RlbmNpbCA/IHRoaXMuZ2wuU1RFTkNJTF9CVUZGRVJfQklUIDogMClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGVzIGFsbCBzY2VuZSBncmFwaCBtYXRyaWNlc1xuICAgICAgICBpZiAodXBkYXRlKSBzY2VuZS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBjYW1lcmEgc2VwYXJhdGVseSwgaW4gY2FzZSBub3QgaW4gc2NlbmUgZ3JhcGhcbiAgICAgICAgaWYgKGNhbWVyYSkgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cbiAgICAgICAgLy8gR2V0IHJlbmRlciBsaXN0IC0gZW50YWlscyBjdWxsaW5nIGFuZCBzb3J0aW5nXG4gICAgICAgIGNvbnN0IHJlbmRlckxpc3QgPSB0aGlzLmdldFJlbmRlckxpc3QoeyBzY2VuZSwgY2FtZXJhLCBmcnVzdHVtQ3VsbCwgc29ydCB9KTtcblxuICAgICAgICByZW5kZXJMaXN0LmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgIG5vZGUuZHJhdyh7IGNhbWVyYSB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiLy8gVE9ETzogZGVsZXRlIHRleHR1cmVcbi8vIFRPRE86IHVzZSB0ZXhTdWJJbWFnZTJEIGZvciB1cGRhdGVzICh2aWRlbyBvciB3aGVuIGxvYWRlZClcbi8vIFRPRE86IG5lZWQ/IGVuY29kaW5nID0gbGluZWFyRW5jb2Rpbmdcbi8vIFRPRE86IHN1cHBvcnQgbm9uLWNvbXByZXNzZWQgbWlwbWFwcyB1cGxvYWRzXG5cbmNvbnN0IGVtcHR5UGl4ZWwgPSBuZXcgVWludDhBcnJheSg0KTtcblxuZnVuY3Rpb24gaXNQb3dlck9mMih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiAodmFsdWUgLSAxKSkgPT09IDA7XG59XG5cbmxldCBJRCA9IDE7XG5cbmV4cG9ydCBjbGFzcyBUZXh0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZ2wsXG4gICAgICAgIHtcbiAgICAgICAgICAgIGltYWdlLFxuICAgICAgICAgICAgdGFyZ2V0ID0gZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgICAgIHR5cGUgPSBnbC5VTlNJR05FRF9CWVRFLFxuICAgICAgICAgICAgZm9ybWF0ID0gZ2wuUkdCQSxcbiAgICAgICAgICAgIGludGVybmFsRm9ybWF0ID0gZm9ybWF0LFxuICAgICAgICAgICAgd3JhcFMgPSBnbC5DTEFNUF9UT19FREdFLFxuICAgICAgICAgICAgd3JhcFQgPSBnbC5DTEFNUF9UT19FREdFLFxuICAgICAgICAgICAgZ2VuZXJhdGVNaXBtYXBzID0gdHJ1ZSxcbiAgICAgICAgICAgIG1pbkZpbHRlciA9IGdlbmVyYXRlTWlwbWFwcyA/IGdsLk5FQVJFU1RfTUlQTUFQX0xJTkVBUiA6IGdsLkxJTkVBUixcbiAgICAgICAgICAgIG1hZ0ZpbHRlciA9IGdsLkxJTkVBUixcbiAgICAgICAgICAgIHByZW11bHRpcGx5QWxwaGEgPSBmYWxzZSxcbiAgICAgICAgICAgIHVucGFja0FsaWdubWVudCA9IDQsXG4gICAgICAgICAgICBmbGlwWSA9IHRhcmdldCA9PSBnbC5URVhUVVJFXzJEID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgYW5pc290cm9weSA9IDAsXG4gICAgICAgICAgICBsZXZlbCA9IDAsXG4gICAgICAgICAgICB3aWR0aCwgLy8gdXNlZCBmb3IgUmVuZGVyVGFyZ2V0cyBvciBEYXRhIFRleHR1cmVzXG4gICAgICAgICAgICBoZWlnaHQgPSB3aWR0aCxcbiAgICAgICAgfSA9IHt9XG4gICAgKSB7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy5pZCA9IElEKys7XG5cbiAgICAgICAgdGhpcy5pbWFnZSA9IGltYWdlO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5mb3JtYXQgPSBmb3JtYXQ7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxGb3JtYXQgPSBpbnRlcm5hbEZvcm1hdDtcbiAgICAgICAgdGhpcy5taW5GaWx0ZXIgPSBtaW5GaWx0ZXI7XG4gICAgICAgIHRoaXMubWFnRmlsdGVyID0gbWFnRmlsdGVyO1xuICAgICAgICB0aGlzLndyYXBTID0gd3JhcFM7XG4gICAgICAgIHRoaXMud3JhcFQgPSB3cmFwVDtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBnZW5lcmF0ZU1pcG1hcHM7XG4gICAgICAgIHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IHByZW11bHRpcGx5QWxwaGE7XG4gICAgICAgIHRoaXMudW5wYWNrQWxpZ25tZW50ID0gdW5wYWNrQWxpZ25tZW50O1xuICAgICAgICB0aGlzLmZsaXBZID0gZmxpcFk7XG4gICAgICAgIHRoaXMuYW5pc290cm9weSA9IE1hdGgubWluKGFuaXNvdHJvcHksIHRoaXMuZ2wucmVuZGVyZXIucGFyYW1ldGVycy5tYXhBbmlzb3Ryb3B5KTtcbiAgICAgICAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLnRleHR1cmUgPSB0aGlzLmdsLmNyZWF0ZVRleHR1cmUoKTtcblxuICAgICAgICB0aGlzLnN0b3JlID0ge1xuICAgICAgICAgICAgaW1hZ2U6IG51bGwsXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gQWxpYXMgZm9yIHN0YXRlIHN0b3JlIHRvIGF2b2lkIHJlZHVuZGFudCBjYWxscyBmb3IgZ2xvYmFsIHN0YXRlXG4gICAgICAgIHRoaXMuZ2xTdGF0ZSA9IHRoaXMuZ2wucmVuZGVyZXIuc3RhdGU7XG5cbiAgICAgICAgLy8gU3RhdGUgc3RvcmUgdG8gYXZvaWQgcmVkdW5kYW50IGNhbGxzIGZvciBwZXItdGV4dHVyZSBzdGF0ZVxuICAgICAgICB0aGlzLnN0YXRlID0ge307XG4gICAgICAgIHRoaXMuc3RhdGUubWluRmlsdGVyID0gdGhpcy5nbC5ORUFSRVNUX01JUE1BUF9MSU5FQVI7XG4gICAgICAgIHRoaXMuc3RhdGUubWFnRmlsdGVyID0gdGhpcy5nbC5MSU5FQVI7XG4gICAgICAgIHRoaXMuc3RhdGUud3JhcFMgPSB0aGlzLmdsLlJFUEVBVDtcbiAgICAgICAgdGhpcy5zdGF0ZS53cmFwVCA9IHRoaXMuZ2wuUkVQRUFUO1xuICAgICAgICB0aGlzLnN0YXRlLmFuaXNvdHJvcHkgPSAwO1xuICAgIH1cblxuICAgIGJpbmQoKSB7XG4gICAgICAgIC8vIEFscmVhZHkgYm91bmQgdG8gYWN0aXZlIHRleHR1cmUgdW5pdFxuICAgICAgICBpZiAodGhpcy5nbFN0YXRlLnRleHR1cmVVbml0c1t0aGlzLmdsU3RhdGUuYWN0aXZlVGV4dHVyZVVuaXRdID09PSB0aGlzLmlkKSByZXR1cm47XG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy50YXJnZXQsIHRoaXMudGV4dHVyZSk7XG4gICAgICAgIHRoaXMuZ2xTdGF0ZS50ZXh0dXJlVW5pdHNbdGhpcy5nbFN0YXRlLmFjdGl2ZVRleHR1cmVVbml0XSA9IHRoaXMuaWQ7XG4gICAgfVxuXG4gICAgdXBkYXRlKHRleHR1cmVVbml0ID0gMCkge1xuICAgICAgICBjb25zdCBuZWVkc1VwZGF0ZSA9ICEodGhpcy5pbWFnZSA9PT0gdGhpcy5zdG9yZS5pbWFnZSAmJiAhdGhpcy5uZWVkc1VwZGF0ZSk7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdGV4dHVyZSBpcyBib3VuZCB0byBpdHMgdGV4dHVyZSB1bml0XG4gICAgICAgIGlmIChuZWVkc1VwZGF0ZSB8fCB0aGlzLmdsU3RhdGUudGV4dHVyZVVuaXRzW3RleHR1cmVVbml0XSAhPT0gdGhpcy5pZCkge1xuICAgICAgICAgICAgLy8gc2V0IGFjdGl2ZSB0ZXh0dXJlIHVuaXQgdG8gcGVyZm9ybSB0ZXh0dXJlIGZ1bmN0aW9uc1xuICAgICAgICAgICAgdGhpcy5nbC5yZW5kZXJlci5hY3RpdmVUZXh0dXJlKHRleHR1cmVVbml0KTtcbiAgICAgICAgICAgIHRoaXMuYmluZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFuZWVkc1VwZGF0ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHRoaXMuZmxpcFkgIT09IHRoaXMuZ2xTdGF0ZS5mbGlwWSkge1xuICAgICAgICAgICAgdGhpcy5nbC5waXhlbFN0b3JlaSh0aGlzLmdsLlVOUEFDS19GTElQX1lfV0VCR0wsIHRoaXMuZmxpcFkpO1xuICAgICAgICAgICAgdGhpcy5nbFN0YXRlLmZsaXBZID0gdGhpcy5mbGlwWTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByZW11bHRpcGx5QWxwaGEgIT09IHRoaXMuZ2xTdGF0ZS5wcmVtdWx0aXBseUFscGhhKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnBpeGVsU3RvcmVpKHRoaXMuZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCB0aGlzLnByZW11bHRpcGx5QWxwaGEpO1xuICAgICAgICAgICAgdGhpcy5nbFN0YXRlLnByZW11bHRpcGx5QWxwaGEgPSB0aGlzLnByZW11bHRpcGx5QWxwaGE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy51bnBhY2tBbGlnbm1lbnQgIT09IHRoaXMuZ2xTdGF0ZS51bnBhY2tBbGlnbm1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZ2wucGl4ZWxTdG9yZWkodGhpcy5nbC5VTlBBQ0tfQUxJR05NRU5ULCB0aGlzLnVucGFja0FsaWdubWVudCk7XG4gICAgICAgICAgICB0aGlzLmdsU3RhdGUudW5wYWNrQWxpZ25tZW50ID0gdGhpcy51bnBhY2tBbGlnbm1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5taW5GaWx0ZXIgIT09IHRoaXMuc3RhdGUubWluRmlsdGVyKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkodGhpcy50YXJnZXQsIHRoaXMuZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCB0aGlzLm1pbkZpbHRlcik7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLm1pbkZpbHRlciA9IHRoaXMubWluRmlsdGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubWFnRmlsdGVyICE9PSB0aGlzLnN0YXRlLm1hZ0ZpbHRlcikge1xuICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMudGFyZ2V0LCB0aGlzLmdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgdGhpcy5tYWdGaWx0ZXIpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5tYWdGaWx0ZXIgPSB0aGlzLm1hZ0ZpbHRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLndyYXBTICE9PSB0aGlzLnN0YXRlLndyYXBTKSB7XG4gICAgICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkodGhpcy50YXJnZXQsIHRoaXMuZ2wuVEVYVFVSRV9XUkFQX1MsIHRoaXMud3JhcFMpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS53cmFwUyA9IHRoaXMud3JhcFM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy53cmFwVCAhPT0gdGhpcy5zdGF0ZS53cmFwVCkge1xuICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMudGFyZ2V0LCB0aGlzLmdsLlRFWFRVUkVfV1JBUF9ULCB0aGlzLndyYXBUKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUud3JhcFQgPSB0aGlzLndyYXBUO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYW5pc290cm9weSAmJiB0aGlzLmFuaXNvdHJvcHkgIT09IHRoaXMuc3RhdGUuYW5pc290cm9weSkge1xuICAgICAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJmKFxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LFxuICAgICAgICAgICAgICAgIHRoaXMuZ2wucmVuZGVyZXIuZ2V0RXh0ZW5zaW9uKCdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKS5URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCxcbiAgICAgICAgICAgICAgICB0aGlzLmFuaXNvdHJvcHlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLmFuaXNvdHJvcHkgPSB0aGlzLmFuaXNvdHJvcHk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pbWFnZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW1hZ2Uud2lkdGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5pbWFnZS53aWR0aDtcbiAgICAgICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuaW1hZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy50YXJnZXQgPT09IHRoaXMuZ2wuVEVYVFVSRV9DVUJFX01BUCkge1xuICAgICAgICAgICAgICAgIC8vIEZvciBjdWJlIG1hcHNcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLnRleEltYWdlMkQoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxldmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWFnZVtpXVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHRoaXMuaW1hZ2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gRGF0YSB0ZXh0dXJlXG4gICAgICAgICAgICAgICAgdGhpcy5nbC50ZXhJbWFnZTJEKHRoaXMudGFyZ2V0LCB0aGlzLmxldmVsLCB0aGlzLmludGVybmFsRm9ybWF0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgMCwgdGhpcy5mb3JtYXQsIHRoaXMudHlwZSwgdGhpcy5pbWFnZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaW1hZ2UuaXNDb21wcmVzc2VkVGV4dHVyZSkge1xuICAgICAgICAgICAgICAgIC8vIENvbXByZXNzZWQgdGV4dHVyZVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGxldmVsID0gMDsgbGV2ZWwgPCB0aGlzLmltYWdlLmxlbmd0aDsgbGV2ZWwrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLmNvbXByZXNzZWRUZXhJbWFnZTJEKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXZlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxGb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmltYWdlW2xldmVsXS53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2VbbGV2ZWxdLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmltYWdlW2xldmVsXS5kYXRhXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBSZWd1bGFyIHRleHR1cmVcbiAgICAgICAgICAgICAgICB0aGlzLmdsLnRleEltYWdlMkQodGhpcy50YXJnZXQsIHRoaXMubGV2ZWwsIHRoaXMuaW50ZXJuYWxGb3JtYXQsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIHRoaXMuaW1hZ2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5nZW5lcmF0ZU1pcG1hcHMpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgV2ViR0wxLCBpZiBub3QgYSBwb3dlciBvZiAyLCB0dXJuIG9mZiBtaXBzLCBzZXQgd3JhcHBpbmcgdG8gY2xhbXAgdG8gZWRnZSBhbmQgbWluRmlsdGVyIHRvIGxpbmVhclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5nbC5yZW5kZXJlci5pc1dlYmdsMiAmJiAoIWlzUG93ZXJPZjIodGhpcy5pbWFnZS53aWR0aCkgfHwgIWlzUG93ZXJPZjIodGhpcy5pbWFnZS5oZWlnaHQpKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndyYXBTID0gdGhpcy53cmFwVCA9IHRoaXMuZ2wuQ0xBTVBfVE9fRURHRTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taW5GaWx0ZXIgPSB0aGlzLmdsLkxJTkVBUjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsLmdlbmVyYXRlTWlwbWFwKHRoaXMudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENhbGxiYWNrIGZvciB3aGVuIGRhdGEgaXMgcHVzaGVkIHRvIEdQVVxuICAgICAgICAgICAgdGhpcy5vblVwZGF0ZSAmJiB0aGlzLm9uVXBkYXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy50YXJnZXQgPT09IHRoaXMuZ2wuVEVYVFVSRV9DVUJFX01BUCkge1xuICAgICAgICAgICAgICAgIC8vIFVwbG9hZCBlbXB0eSBwaXhlbCBmb3IgZWFjaCBzaWRlIHdoaWxlIG5vIGltYWdlIHRvIGF2b2lkIGVycm9ycyB3aGlsZSBpbWFnZSBvciB2aWRlbyBsb2FkaW5nXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC50ZXhJbWFnZTJEKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wuUkdCQSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wuUkdCQSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2wuVU5TSUdORURfQllURSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtcHR5UGl4ZWxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMud2lkdGgpIHtcbiAgICAgICAgICAgICAgICAvLyBpbWFnZSBpbnRlbnRpb25hbGx5IGxlZnQgbnVsbCBmb3IgUmVuZGVyVGFyZ2V0XG4gICAgICAgICAgICAgICAgdGhpcy5nbC50ZXhJbWFnZTJEKHRoaXMudGFyZ2V0LCB0aGlzLmxldmVsLCB0aGlzLmludGVybmFsRm9ybWF0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgMCwgdGhpcy5mb3JtYXQsIHRoaXMudHlwZSwgbnVsbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFVwbG9hZCBlbXB0eSBwaXhlbCBpZiBubyBpbWFnZSB0byBhdm9pZCBlcnJvcnMgd2hpbGUgaW1hZ2Ugb3IgdmlkZW8gbG9hZGluZ1xuICAgICAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRCh0aGlzLnRhcmdldCwgMCwgdGhpcy5nbC5SR0JBLCAxLCAxLCAwLCB0aGlzLmdsLlJHQkEsIHRoaXMuZ2wuVU5TSUdORURfQllURSwgZW1wdHlQaXhlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdG9yZS5pbWFnZSA9IHRoaXMuaW1hZ2U7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4uL21hdGgvVmVjMy5qcyc7XG5pbXBvcnQgeyBRdWF0IH0gZnJvbSAnLi4vbWF0aC9RdWF0LmpzJztcbmltcG9ydCB7IE1hdDQgfSBmcm9tICcuLi9tYXRoL01hdDQuanMnO1xuaW1wb3J0IHsgRXVsZXIgfSBmcm9tICcuLi9tYXRoL0V1bGVyLmpzJztcblxuZXhwb3J0IGNsYXNzIFRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdDQoKTtcbiAgICAgICAgdGhpcy53b3JsZE1hdHJpeCA9IG5ldyBNYXQ0KCk7XG4gICAgICAgIHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBWZWMzKCk7XG4gICAgICAgIHRoaXMucXVhdGVybmlvbiA9IG5ldyBRdWF0KCk7XG4gICAgICAgIHRoaXMuc2NhbGUgPSBuZXcgVmVjMygxKTtcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IG5ldyBFdWxlcigpO1xuICAgICAgICB0aGlzLnVwID0gbmV3IFZlYzMoMCwgMSwgMCk7XG5cbiAgICAgICAgdGhpcy5yb3RhdGlvbi5vbkNoYW5nZSA9ICgpID0+IHRoaXMucXVhdGVybmlvbi5mcm9tRXVsZXIodGhpcy5yb3RhdGlvbik7XG4gICAgICAgIHRoaXMucXVhdGVybmlvbi5vbkNoYW5nZSA9ICgpID0+IHRoaXMucm90YXRpb24uZnJvbVF1YXRlcm5pb24odGhpcy5xdWF0ZXJuaW9uKTtcbiAgICB9XG5cbiAgICBzZXRQYXJlbnQocGFyZW50LCBub3RpZnlQYXJlbnQgPSB0cnVlKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCAmJiBwYXJlbnQgIT09IHRoaXMucGFyZW50KSB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLCBmYWxzZSk7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICBpZiAobm90aWZ5UGFyZW50ICYmIHBhcmVudCkgcGFyZW50LmFkZENoaWxkKHRoaXMsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBhZGRDaGlsZChjaGlsZCwgbm90aWZ5Q2hpbGQgPSB0cnVlKSB7XG4gICAgICAgIGlmICghfnRoaXMuY2hpbGRyZW4uaW5kZXhPZihjaGlsZCkpIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIGlmIChub3RpZnlDaGlsZCkgY2hpbGQuc2V0UGFyZW50KHRoaXMsIGZhbHNlKTtcbiAgICB9XG5cbiAgICByZW1vdmVDaGlsZChjaGlsZCwgbm90aWZ5Q2hpbGQgPSB0cnVlKSB7XG4gICAgICAgIGlmICghIX50aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpKSB0aGlzLmNoaWxkcmVuLnNwbGljZSh0aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpLCAxKTtcbiAgICAgICAgaWYgKG5vdGlmeUNoaWxkKSBjaGlsZC5zZXRQYXJlbnQobnVsbCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHVwZGF0ZU1hdHJpeFdvcmxkKGZvcmNlKSB7XG4gICAgICAgIGlmICh0aGlzLm1hdHJpeEF1dG9VcGRhdGUpIHRoaXMudXBkYXRlTWF0cml4KCk7XG4gICAgICAgIGlmICh0aGlzLndvcmxkTWF0cml4TmVlZHNVcGRhdGUgfHwgZm9yY2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudCA9PT0gbnVsbCkgdGhpcy53b3JsZE1hdHJpeC5jb3B5KHRoaXMubWF0cml4KTtcbiAgICAgICAgICAgIGVsc2UgdGhpcy53b3JsZE1hdHJpeC5tdWx0aXBseSh0aGlzLnBhcmVudC53b3JsZE1hdHJpeCwgdGhpcy5tYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy53b3JsZE1hdHJpeE5lZWRzVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBmb3JjZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuW2ldLnVwZGF0ZU1hdHJpeFdvcmxkKGZvcmNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZU1hdHJpeCgpIHtcbiAgICAgICAgdGhpcy5tYXRyaXguY29tcG9zZSh0aGlzLnF1YXRlcm5pb24sIHRoaXMucG9zaXRpb24sIHRoaXMuc2NhbGUpO1xuICAgICAgICB0aGlzLndvcmxkTWF0cml4TmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHRyYXZlcnNlKGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIFJldHVybiB0cnVlIGluIGNhbGxiYWNrIHRvIHN0b3AgdHJhdmVyc2luZyBjaGlsZHJlblxuICAgICAgICBpZiAoY2FsbGJhY2sodGhpcykpIHJldHVybjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbltpXS50cmF2ZXJzZShjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWNvbXBvc2UoKSB7XG4gICAgICAgIHRoaXMubWF0cml4LmdldFRyYW5zbGF0aW9uKHRoaXMucG9zaXRpb24pO1xuICAgICAgICB0aGlzLm1hdHJpeC5nZXRSb3RhdGlvbih0aGlzLnF1YXRlcm5pb24pO1xuICAgICAgICB0aGlzLm1hdHJpeC5nZXRTY2FsaW5nKHRoaXMuc2NhbGUpO1xuICAgICAgICB0aGlzLnJvdGF0aW9uLmZyb21RdWF0ZXJuaW9uKHRoaXMucXVhdGVybmlvbik7XG4gICAgfVxuXG4gICAgbG9va0F0KHRhcmdldCwgaW52ZXJ0ID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKGludmVydCkgdGhpcy5tYXRyaXgubG9va0F0KHRoaXMucG9zaXRpb24sIHRhcmdldCwgdGhpcy51cCk7XG4gICAgICAgIGVsc2UgdGhpcy5tYXRyaXgubG9va0F0KHRhcmdldCwgdGhpcy5wb3NpdGlvbiwgdGhpcy51cCk7XG4gICAgICAgIHRoaXMubWF0cml4LmdldFJvdGF0aW9uKHRoaXMucXVhdGVybmlvbik7XG4gICAgICAgIHRoaXMucm90YXRpb24uZnJvbVF1YXRlcm5pb24odGhpcy5xdWF0ZXJuaW9uKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvR2VvbWV0cnkuanMnO1xuXG5leHBvcnQgY2xhc3MgUGxhbmUgZXh0ZW5kcyBHZW9tZXRyeSB7XG4gICAgY29uc3RydWN0b3IoZ2wsIHsgd2lkdGggPSAxLCBoZWlnaHQgPSAxLCB3aWR0aFNlZ21lbnRzID0gMSwgaGVpZ2h0U2VnbWVudHMgPSAxLCBhdHRyaWJ1dGVzID0ge30gfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHdTZWdzID0gd2lkdGhTZWdtZW50cztcbiAgICAgICAgY29uc3QgaFNlZ3MgPSBoZWlnaHRTZWdtZW50cztcblxuICAgICAgICAvLyBEZXRlcm1pbmUgbGVuZ3RoIG9mIGFycmF5c1xuICAgICAgICBjb25zdCBudW0gPSAod1NlZ3MgKyAxKSAqIChoU2VncyArIDEpO1xuICAgICAgICBjb25zdCBudW1JbmRpY2VzID0gd1NlZ3MgKiBoU2VncyAqIDY7XG5cbiAgICAgICAgLy8gR2VuZXJhdGUgZW1wdHkgYXJyYXlzIG9uY2VcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBuZXcgRmxvYXQzMkFycmF5KG51bSAqIDMpO1xuICAgICAgICBjb25zdCBub3JtYWwgPSBuZXcgRmxvYXQzMkFycmF5KG51bSAqIDMpO1xuICAgICAgICBjb25zdCB1diA9IG5ldyBGbG9hdDMyQXJyYXkobnVtICogMik7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gbnVtSW5kaWNlcyA+IDY1NTM2ID8gbmV3IFVpbnQzMkFycmF5KG51bUluZGljZXMpIDogbmV3IFVpbnQxNkFycmF5KG51bUluZGljZXMpO1xuXG4gICAgICAgIFBsYW5lLmJ1aWxkUGxhbmUocG9zaXRpb24sIG5vcm1hbCwgdXYsIGluZGV4LCB3aWR0aCwgaGVpZ2h0LCAwLCB3U2VncywgaFNlZ3MpO1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24oYXR0cmlidXRlcywge1xuICAgICAgICAgICAgcG9zaXRpb246IHsgc2l6ZTogMywgZGF0YTogcG9zaXRpb24gfSxcbiAgICAgICAgICAgIG5vcm1hbDogeyBzaXplOiAzLCBkYXRhOiBub3JtYWwgfSxcbiAgICAgICAgICAgIHV2OiB7IHNpemU6IDIsIGRhdGE6IHV2IH0sXG4gICAgICAgICAgICBpbmRleDogeyBkYXRhOiBpbmRleCB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBzdXBlcihnbCwgYXR0cmlidXRlcyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGJ1aWxkUGxhbmUocG9zaXRpb24sIG5vcm1hbCwgdXYsIGluZGV4LCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd1NlZ3MsIGhTZWdzLCB1ID0gMCwgdiA9IDEsIHcgPSAyLCB1RGlyID0gMSwgdkRpciA9IC0xLCBpID0gMCwgaWkgPSAwKSB7XG4gICAgICAgIGNvbnN0IGlvID0gaTtcbiAgICAgICAgY29uc3Qgc2VnVyA9IHdpZHRoIC8gd1NlZ3M7XG4gICAgICAgIGNvbnN0IHNlZ0ggPSBoZWlnaHQgLyBoU2VncztcblxuICAgICAgICBmb3IgKGxldCBpeSA9IDA7IGl5IDw9IGhTZWdzOyBpeSsrKSB7XG4gICAgICAgICAgICBsZXQgeSA9IGl5ICogc2VnSCAtIGhlaWdodCAvIDI7XG4gICAgICAgICAgICBmb3IgKGxldCBpeCA9IDA7IGl4IDw9IHdTZWdzOyBpeCsrLCBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgeCA9IGl4ICogc2VnVyAtIHdpZHRoIC8gMjtcblxuICAgICAgICAgICAgICAgIHBvc2l0aW9uW2kgKiAzICsgdV0gPSB4ICogdURpcjtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbltpICogMyArIHZdID0geSAqIHZEaXI7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25baSAqIDMgKyB3XSA9IGRlcHRoIC8gMjtcblxuICAgICAgICAgICAgICAgIG5vcm1hbFtpICogMyArIHVdID0gMDtcbiAgICAgICAgICAgICAgICBub3JtYWxbaSAqIDMgKyB2XSA9IDA7XG4gICAgICAgICAgICAgICAgbm9ybWFsW2kgKiAzICsgd10gPSBkZXB0aCA+PSAwID8gMSA6IC0xO1xuXG4gICAgICAgICAgICAgICAgdXZbaSAqIDJdID0gaXggLyB3U2VncztcbiAgICAgICAgICAgICAgICB1dltpICogMiArIDFdID0gMSAtIGl5IC8gaFNlZ3M7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXkgPT09IGhTZWdzIHx8IGl4ID09PSB3U2VncykgY29udGludWU7XG4gICAgICAgICAgICAgICAgbGV0IGEgPSBpbyArIGl4ICsgaXkgKiAod1NlZ3MgKyAxKTtcbiAgICAgICAgICAgICAgICBsZXQgYiA9IGlvICsgaXggKyAoaXkgKyAxKSAqICh3U2VncyArIDEpO1xuICAgICAgICAgICAgICAgIGxldCBjID0gaW8gKyBpeCArIChpeSArIDEpICogKHdTZWdzICsgMSkgKyAxO1xuICAgICAgICAgICAgICAgIGxldCBkID0gaW8gKyBpeCArIGl5ICogKHdTZWdzICsgMSkgKyAxO1xuXG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2XSA9IGE7XG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2ICsgMV0gPSBiO1xuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNiArIDJdID0gZDtcbiAgICAgICAgICAgICAgICBpbmRleFtpaSAqIDYgKyAzXSA9IGI7XG4gICAgICAgICAgICAgICAgaW5kZXhbaWkgKiA2ICsgNF0gPSBjO1xuICAgICAgICAgICAgICAgIGluZGV4W2lpICogNiArIDVdID0gZDtcbiAgICAgICAgICAgICAgICBpaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgRXVsZXJGdW5jIGZyb20gJy4vZnVuY3Rpb25zL0V1bGVyRnVuYy5qcyc7XG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSAnLi9NYXQ0LmpzJztcblxuY29uc3QgdG1wTWF0NCA9IG5ldyBNYXQ0KCk7XG5cbmV4cG9ydCBjbGFzcyBFdWxlciBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IHgsIHogPSB4LCBvcmRlciA9ICdZWFonKSB7XG4gICAgICAgIHN1cGVyKHgsIHksIHopO1xuICAgICAgICB0aGlzLm9yZGVyID0gb3JkZXI7XG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSAoKSA9PiB7fTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0IHgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzBdO1xuICAgIH1cblxuICAgIGdldCB5KCkge1xuICAgICAgICByZXR1cm4gdGhpc1sxXTtcbiAgICB9XG5cbiAgICBnZXQgeigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMl07XG4gICAgfVxuXG4gICAgc2V0IHgodikge1xuICAgICAgICB0aGlzWzBdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCB5KHYpIHtcbiAgICAgICAgdGhpc1sxXSA9IHY7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBzZXQgeih2KSB7XG4gICAgICAgIHRoaXNbMl0gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc2V0KHgsIHkgPSB4LCB6ID0geCkge1xuICAgICAgICBpZiAoeC5sZW5ndGgpIHJldHVybiB0aGlzLmNvcHkoeCk7XG4gICAgICAgIHRoaXNbMF0gPSB4O1xuICAgICAgICB0aGlzWzFdID0geTtcbiAgICAgICAgdGhpc1syXSA9IHo7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29weSh2KSB7XG4gICAgICAgIHRoaXNbMF0gPSB2WzBdO1xuICAgICAgICB0aGlzWzFdID0gdlsxXTtcbiAgICAgICAgdGhpc1syXSA9IHZbMl07XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmVvcmRlcihvcmRlcikge1xuICAgICAgICB0aGlzLm9yZGVyID0gb3JkZXI7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVJvdGF0aW9uTWF0cml4KG0sIG9yZGVyID0gdGhpcy5vcmRlcikge1xuICAgICAgICBFdWxlckZ1bmMuZnJvbVJvdGF0aW9uTWF0cml4KHRoaXMsIG0sIG9yZGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVF1YXRlcm5pb24ocSwgb3JkZXIgPSB0aGlzLm9yZGVyKSB7XG4gICAgICAgIHRtcE1hdDQuZnJvbVF1YXRlcm5pb24ocSk7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21Sb3RhdGlvbk1hdHJpeCh0bXBNYXQ0LCBvcmRlcik7XG4gICAgfVxuXG4gICAgdG9BcnJheShhID0gW10sIG8gPSAwKSB7XG4gICAgICAgIGFbb10gPSB0aGlzWzBdO1xuICAgICAgICBhW28gKyAxXSA9IHRoaXNbMV07XG4gICAgICAgIGFbbyArIDJdID0gdGhpc1syXTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgTWF0M0Z1bmMgZnJvbSAnLi9mdW5jdGlvbnMvTWF0M0Z1bmMuanMnO1xuXG5leHBvcnQgY2xhc3MgTWF0MyBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3RvcihtMDAgPSAxLCBtMDEgPSAwLCBtMDIgPSAwLCBtMTAgPSAwLCBtMTEgPSAxLCBtMTIgPSAwLCBtMjAgPSAwLCBtMjEgPSAwLCBtMjIgPSAxKSB7XG4gICAgICAgIHN1cGVyKG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzZXQobTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMikge1xuICAgICAgICBpZiAobTAwLmxlbmd0aCkgcmV0dXJuIHRoaXMuY29weShtMDApO1xuICAgICAgICBNYXQzRnVuYy5zZXQodGhpcywgbTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRyYW5zbGF0ZSh2LCBtID0gdGhpcykge1xuICAgICAgICBNYXQzRnVuYy50cmFuc2xhdGUodGhpcywgbSwgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJvdGF0ZSh2LCBtID0gdGhpcykge1xuICAgICAgICBNYXQzRnVuYy5yb3RhdGUodGhpcywgbSwgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNjYWxlKHYsIG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDNGdW5jLnNjYWxlKHRoaXMsIG0sIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtdWx0aXBseShtYSwgbWIpIHtcbiAgICAgICAgaWYgKG1iKSB7XG4gICAgICAgICAgICBNYXQzRnVuYy5tdWx0aXBseSh0aGlzLCBtYSwgbWIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgTWF0M0Z1bmMubXVsdGlwbHkodGhpcywgdGhpcywgbWEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlkZW50aXR5KCkge1xuICAgICAgICBNYXQzRnVuYy5pZGVudGl0eSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29weShtKSB7XG4gICAgICAgIE1hdDNGdW5jLmNvcHkodGhpcywgbSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZyb21NYXRyaXg0KG0pIHtcbiAgICAgICAgTWF0M0Z1bmMuZnJvbU1hdDQodGhpcywgbSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZyb21RdWF0ZXJuaW9uKHEpIHtcbiAgICAgICAgTWF0M0Z1bmMuZnJvbVF1YXQodGhpcywgcSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZyb21CYXNpcyh2ZWMzYSwgdmVjM2IsIHZlYzNjKSB7XG4gICAgICAgIHRoaXMuc2V0KHZlYzNhWzBdLCB2ZWMzYVsxXSwgdmVjM2FbMl0sIHZlYzNiWzBdLCB2ZWMzYlsxXSwgdmVjM2JbMl0sIHZlYzNjWzBdLCB2ZWMzY1sxXSwgdmVjM2NbMl0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbnZlcnNlKG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDNGdW5jLmludmVydCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0Tm9ybWFsTWF0cml4KG0pIHtcbiAgICAgICAgTWF0M0Z1bmMubm9ybWFsRnJvbU1hdDQodGhpcywgbSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIE1hdDRGdW5jIGZyb20gJy4vZnVuY3Rpb25zL01hdDRGdW5jLmpzJztcblxuZXhwb3J0IGNsYXNzIE1hdDQgZXh0ZW5kcyBBcnJheSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIG0wMCA9IDEsXG4gICAgICAgIG0wMSA9IDAsXG4gICAgICAgIG0wMiA9IDAsXG4gICAgICAgIG0wMyA9IDAsXG4gICAgICAgIG0xMCA9IDAsXG4gICAgICAgIG0xMSA9IDEsXG4gICAgICAgIG0xMiA9IDAsXG4gICAgICAgIG0xMyA9IDAsXG4gICAgICAgIG0yMCA9IDAsXG4gICAgICAgIG0yMSA9IDAsXG4gICAgICAgIG0yMiA9IDEsXG4gICAgICAgIG0yMyA9IDAsXG4gICAgICAgIG0zMCA9IDAsXG4gICAgICAgIG0zMSA9IDAsXG4gICAgICAgIG0zMiA9IDAsXG4gICAgICAgIG0zMyA9IDFcbiAgICApIHtcbiAgICAgICAgc3VwZXIobTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0IHgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzEyXTtcbiAgICB9XG5cbiAgICBnZXQgeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMTNdO1xuICAgIH1cblxuICAgIGdldCB6KCkge1xuICAgICAgICByZXR1cm4gdGhpc1sxNF07XG4gICAgfVxuXG4gICAgZ2V0IHcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzE1XTtcbiAgICB9XG5cbiAgICBzZXQgeCh2KSB7XG4gICAgICAgIHRoaXNbMTJdID0gdjtcbiAgICB9XG5cbiAgICBzZXQgeSh2KSB7XG4gICAgICAgIHRoaXNbMTNdID0gdjtcbiAgICB9XG5cbiAgICBzZXQgeih2KSB7XG4gICAgICAgIHRoaXNbMTRdID0gdjtcbiAgICB9XG5cbiAgICBzZXQgdyh2KSB7XG4gICAgICAgIHRoaXNbMTVdID0gdjtcbiAgICB9XG5cbiAgICBzZXQobTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKSB7XG4gICAgICAgIGlmIChtMDAubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KG0wMCk7XG4gICAgICAgIE1hdDRGdW5jLnNldCh0aGlzLCBtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0cmFuc2xhdGUodiwgbSA9IHRoaXMpIHtcbiAgICAgICAgTWF0NEZ1bmMudHJhbnNsYXRlKHRoaXMsIG0sIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByb3RhdGUodiwgYXhpcywgbSA9IHRoaXMpIHtcbiAgICAgICAgTWF0NEZ1bmMucm90YXRlKHRoaXMsIG0sIHYsIGF4aXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzY2FsZSh2LCBtID0gdGhpcykge1xuICAgICAgICBNYXQ0RnVuYy5zY2FsZSh0aGlzLCBtLCB0eXBlb2YgdiA9PT0gJ251bWJlcicgPyBbdiwgdiwgdl0gOiB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbXVsdGlwbHkobWEsIG1iKSB7XG4gICAgICAgIGlmIChtYikge1xuICAgICAgICAgICAgTWF0NEZ1bmMubXVsdGlwbHkodGhpcywgbWEsIG1iKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE1hdDRGdW5jLm11bHRpcGx5KHRoaXMsIHRoaXMsIG1hKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZGVudGl0eSgpIHtcbiAgICAgICAgTWF0NEZ1bmMuaWRlbnRpdHkodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkobSkge1xuICAgICAgICBNYXQ0RnVuYy5jb3B5KHRoaXMsIG0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tUGVyc3BlY3RpdmUoeyBmb3YsIGFzcGVjdCwgbmVhciwgZmFyIH0gPSB7fSkge1xuICAgICAgICBNYXQ0RnVuYy5wZXJzcGVjdGl2ZSh0aGlzLCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbU9ydGhvZ29uYWwoeyBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhciB9KSB7XG4gICAgICAgIE1hdDRGdW5jLm9ydGhvKHRoaXMsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnJvbVF1YXRlcm5pb24ocSkge1xuICAgICAgICBNYXQ0RnVuYy5mcm9tUXVhdCh0aGlzLCBxKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2V0UG9zaXRpb24odikge1xuICAgICAgICB0aGlzLnggPSB2WzBdO1xuICAgICAgICB0aGlzLnkgPSB2WzFdO1xuICAgICAgICB0aGlzLnogPSB2WzJdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbnZlcnNlKG0gPSB0aGlzKSB7XG4gICAgICAgIE1hdDRGdW5jLmludmVydCh0aGlzLCBtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29tcG9zZShxLCBwb3MsIHNjYWxlKSB7XG4gICAgICAgIE1hdDRGdW5jLmZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGUodGhpcywgcSwgcG9zLCBzY2FsZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldFJvdGF0aW9uKHEpIHtcbiAgICAgICAgTWF0NEZ1bmMuZ2V0Um90YXRpb24ocSwgdGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldFRyYW5zbGF0aW9uKHBvcykge1xuICAgICAgICBNYXQ0RnVuYy5nZXRUcmFuc2xhdGlvbihwb3MsIHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRTY2FsaW5nKHNjYWxlKSB7XG4gICAgICAgIE1hdDRGdW5jLmdldFNjYWxpbmcoc2NhbGUsIHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRNYXhTY2FsZU9uQXhpcygpIHtcbiAgICAgICAgcmV0dXJuIE1hdDRGdW5jLmdldE1heFNjYWxlT25BeGlzKHRoaXMpO1xuICAgIH1cblxuICAgIGxvb2tBdChleWUsIHRhcmdldCwgdXApIHtcbiAgICAgICAgTWF0NEZ1bmMudGFyZ2V0VG8odGhpcywgZXllLCB0YXJnZXQsIHVwKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZGV0ZXJtaW5hbnQoKSB7XG4gICAgICAgIHJldHVybiBNYXQ0RnVuYy5kZXRlcm1pbmFudCh0aGlzKTtcbiAgICB9XG5cbiAgICBmcm9tQXJyYXkoYSwgbyA9IDApIHtcbiAgICAgICAgdGhpc1swXSA9IGFbb107XG4gICAgICAgIHRoaXNbMV0gPSBhW28gKyAxXTtcbiAgICAgICAgdGhpc1syXSA9IGFbbyArIDJdO1xuICAgICAgICB0aGlzWzNdID0gYVtvICsgM107XG4gICAgICAgIHRoaXNbNF0gPSBhW28gKyA0XTtcbiAgICAgICAgdGhpc1s1XSA9IGFbbyArIDVdO1xuICAgICAgICB0aGlzWzZdID0gYVtvICsgNl07XG4gICAgICAgIHRoaXNbN10gPSBhW28gKyA3XTtcbiAgICAgICAgdGhpc1s4XSA9IGFbbyArIDhdO1xuICAgICAgICB0aGlzWzldID0gYVtvICsgOV07XG4gICAgICAgIHRoaXNbMTBdID0gYVtvICsgMTBdO1xuICAgICAgICB0aGlzWzExXSA9IGFbbyArIDExXTtcbiAgICAgICAgdGhpc1sxMl0gPSBhW28gKyAxMl07XG4gICAgICAgIHRoaXNbMTNdID0gYVtvICsgMTNdO1xuICAgICAgICB0aGlzWzE0XSA9IGFbbyArIDE0XTtcbiAgICAgICAgdGhpc1sxNV0gPSBhW28gKyAxNV07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRvQXJyYXkoYSA9IFtdLCBvID0gMCkge1xuICAgICAgICBhW29dID0gdGhpc1swXTtcbiAgICAgICAgYVtvICsgMV0gPSB0aGlzWzFdO1xuICAgICAgICBhW28gKyAyXSA9IHRoaXNbMl07XG4gICAgICAgIGFbbyArIDNdID0gdGhpc1szXTtcbiAgICAgICAgYVtvICsgNF0gPSB0aGlzWzRdO1xuICAgICAgICBhW28gKyA1XSA9IHRoaXNbNV07XG4gICAgICAgIGFbbyArIDZdID0gdGhpc1s2XTtcbiAgICAgICAgYVtvICsgN10gPSB0aGlzWzddO1xuICAgICAgICBhW28gKyA4XSA9IHRoaXNbOF07XG4gICAgICAgIGFbbyArIDldID0gdGhpc1s5XTtcbiAgICAgICAgYVtvICsgMTBdID0gdGhpc1sxMF07XG4gICAgICAgIGFbbyArIDExXSA9IHRoaXNbMTFdO1xuICAgICAgICBhW28gKyAxMl0gPSB0aGlzWzEyXTtcbiAgICAgICAgYVtvICsgMTNdID0gdGhpc1sxM107XG4gICAgICAgIGFbbyArIDE0XSA9IHRoaXNbMTRdO1xuICAgICAgICBhW28gKyAxNV0gPSB0aGlzWzE1XTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgUXVhdEZ1bmMgZnJvbSAnLi9mdW5jdGlvbnMvUXVhdEZ1bmMuanMnO1xuXG5leHBvcnQgY2xhc3MgUXVhdCBleHRlbmRzIEFycmF5IHtcbiAgICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IDAsIHogPSAwLCB3ID0gMSkge1xuICAgICAgICBzdXBlcih4LCB5LCB6LCB3KTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9ICgpID0+IHt9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXQgeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMF07XG4gICAgfVxuXG4gICAgZ2V0IHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzFdO1xuICAgIH1cblxuICAgIGdldCB6KCkge1xuICAgICAgICByZXR1cm4gdGhpc1syXTtcbiAgICB9XG5cbiAgICBnZXQgdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbM107XG4gICAgfVxuXG4gICAgc2V0IHgodikge1xuICAgICAgICB0aGlzWzBdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIHNldCB5KHYpIHtcbiAgICAgICAgdGhpc1sxXSA9IHY7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBzZXQgeih2KSB7XG4gICAgICAgIHRoaXNbMl0gPSB2O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgc2V0IHcodikge1xuICAgICAgICB0aGlzWzNdID0gdjtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIGlkZW50aXR5KCkge1xuICAgICAgICBRdWF0RnVuYy5pZGVudGl0eSh0aGlzKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzZXQoeCwgeSwgeiwgdykge1xuICAgICAgICBpZiAoeC5sZW5ndGgpIHJldHVybiB0aGlzLmNvcHkoeCk7XG4gICAgICAgIFF1YXRGdW5jLnNldCh0aGlzLCB4LCB5LCB6LCB3KTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByb3RhdGVYKGEpIHtcbiAgICAgICAgUXVhdEZ1bmMucm90YXRlWCh0aGlzLCB0aGlzLCBhKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByb3RhdGVZKGEpIHtcbiAgICAgICAgUXVhdEZ1bmMucm90YXRlWSh0aGlzLCB0aGlzLCBhKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByb3RhdGVaKGEpIHtcbiAgICAgICAgUXVhdEZ1bmMucm90YXRlWih0aGlzLCB0aGlzLCBhKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbnZlcnNlKHEgPSB0aGlzKSB7XG4gICAgICAgIFF1YXRGdW5jLmludmVydCh0aGlzLCBxKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjb25qdWdhdGUocSA9IHRoaXMpIHtcbiAgICAgICAgUXVhdEZ1bmMuY29uanVnYXRlKHRoaXMsIHEpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkocSkge1xuICAgICAgICBRdWF0RnVuYy5jb3B5KHRoaXMsIHEpO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG5vcm1hbGl6ZShxID0gdGhpcykge1xuICAgICAgICBRdWF0RnVuYy5ub3JtYWxpemUodGhpcywgcSk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbXVsdGlwbHkocUEsIHFCKSB7XG4gICAgICAgIGlmIChxQikge1xuICAgICAgICAgICAgUXVhdEZ1bmMubXVsdGlwbHkodGhpcywgcUEsIHFCKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFF1YXRGdW5jLm11bHRpcGx5KHRoaXMsIHRoaXMsIHFBKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRvdCh2KSB7XG4gICAgICAgIHJldHVybiBRdWF0RnVuYy5kb3QodGhpcywgdik7XG4gICAgfVxuXG4gICAgZnJvbU1hdHJpeDMobWF0cml4Mykge1xuICAgICAgICBRdWF0RnVuYy5mcm9tTWF0Myh0aGlzLCBtYXRyaXgzKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmcm9tRXVsZXIoZXVsZXIpIHtcbiAgICAgICAgUXVhdEZ1bmMuZnJvbUV1bGVyKHRoaXMsIGV1bGVyLCBldWxlci5vcmRlcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZyb21BeGlzQW5nbGUoYXhpcywgYSkge1xuICAgICAgICBRdWF0RnVuYy5zZXRBeGlzQW5nbGUodGhpcywgYXhpcywgYSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNsZXJwKHEsIHQpIHtcbiAgICAgICAgUXVhdEZ1bmMuc2xlcnAodGhpcywgdGhpcywgcSwgdCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZyb21BcnJheShhLCBvID0gMCkge1xuICAgICAgICB0aGlzWzBdID0gYVtvXTtcbiAgICAgICAgdGhpc1sxXSA9IGFbbyArIDFdO1xuICAgICAgICB0aGlzWzJdID0gYVtvICsgMl07XG4gICAgICAgIHRoaXNbM10gPSBhW28gKyAzXTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdG9BcnJheShhID0gW10sIG8gPSAwKSB7XG4gICAgICAgIGFbb10gPSB0aGlzWzBdO1xuICAgICAgICBhW28gKyAxXSA9IHRoaXNbMV07XG4gICAgICAgIGFbbyArIDJdID0gdGhpc1syXTtcbiAgICAgICAgYVtvICsgM10gPSB0aGlzWzNdO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBWZWMzRnVuYyBmcm9tICcuL2Z1bmN0aW9ucy9WZWMzRnVuYy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBWZWMzIGV4dGVuZHMgQXJyYXkge1xuICAgIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0geCwgeiA9IHgpIHtcbiAgICAgICAgc3VwZXIoeCwgeSwgeik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldCB4KCkge1xuICAgICAgICByZXR1cm4gdGhpc1swXTtcbiAgICB9XG5cbiAgICBnZXQgeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMV07XG4gICAgfVxuXG4gICAgZ2V0IHooKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzJdO1xuICAgIH1cblxuICAgIHNldCB4KHYpIHtcbiAgICAgICAgdGhpc1swXSA9IHY7XG4gICAgfVxuXG4gICAgc2V0IHkodikge1xuICAgICAgICB0aGlzWzFdID0gdjtcbiAgICB9XG5cbiAgICBzZXQgeih2KSB7XG4gICAgICAgIHRoaXNbMl0gPSB2O1xuICAgIH1cblxuICAgIHNldCh4LCB5ID0geCwgeiA9IHgpIHtcbiAgICAgICAgaWYgKHgubGVuZ3RoKSByZXR1cm4gdGhpcy5jb3B5KHgpO1xuICAgICAgICBWZWMzRnVuYy5zZXQodGhpcywgeCwgeSwgeik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNvcHkodikge1xuICAgICAgICBWZWMzRnVuYy5jb3B5KHRoaXMsIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhZGQodmEsIHZiKSB7XG4gICAgICAgIGlmICh2YikgVmVjM0Z1bmMuYWRkKHRoaXMsIHZhLCB2Yik7XG4gICAgICAgIGVsc2UgVmVjM0Z1bmMuYWRkKHRoaXMsIHRoaXMsIHZhKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3ViKHZhLCB2Yikge1xuICAgICAgICBpZiAodmIpIFZlYzNGdW5jLnN1YnRyYWN0KHRoaXMsIHZhLCB2Yik7XG4gICAgICAgIGVsc2UgVmVjM0Z1bmMuc3VidHJhY3QodGhpcywgdGhpcywgdmEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtdWx0aXBseSh2KSB7XG4gICAgICAgIGlmICh2Lmxlbmd0aCkgVmVjM0Z1bmMubXVsdGlwbHkodGhpcywgdGhpcywgdik7XG4gICAgICAgIGVsc2UgVmVjM0Z1bmMuc2NhbGUodGhpcywgdGhpcywgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRpdmlkZSh2KSB7XG4gICAgICAgIGlmICh2Lmxlbmd0aCkgVmVjM0Z1bmMuZGl2aWRlKHRoaXMsIHRoaXMsIHYpO1xuICAgICAgICBlbHNlIFZlYzNGdW5jLnNjYWxlKHRoaXMsIHRoaXMsIDEgLyB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaW52ZXJzZSh2ID0gdGhpcykge1xuICAgICAgICBWZWMzRnVuYy5pbnZlcnNlKHRoaXMsIHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBDYW4ndCB1c2UgJ2xlbmd0aCcgYXMgQXJyYXkucHJvdG90eXBlIHVzZXMgaXRcbiAgICBsZW4oKSB7XG4gICAgICAgIHJldHVybiBWZWMzRnVuYy5sZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgZGlzdGFuY2Uodikge1xuICAgICAgICBpZiAodikgcmV0dXJuIFZlYzNGdW5jLmRpc3RhbmNlKHRoaXMsIHYpO1xuICAgICAgICBlbHNlIHJldHVybiBWZWMzRnVuYy5sZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgc3F1YXJlZExlbigpIHtcbiAgICAgICAgcmV0dXJuIFZlYzNGdW5jLnNxdWFyZWRMZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgc3F1YXJlZERpc3RhbmNlKHYpIHtcbiAgICAgICAgaWYgKHYpIHJldHVybiBWZWMzRnVuYy5zcXVhcmVkRGlzdGFuY2UodGhpcywgdik7XG4gICAgICAgIGVsc2UgcmV0dXJuIFZlYzNGdW5jLnNxdWFyZWRMZW5ndGgodGhpcyk7XG4gICAgfVxuXG4gICAgbmVnYXRlKHYgPSB0aGlzKSB7XG4gICAgICAgIFZlYzNGdW5jLm5lZ2F0ZSh0aGlzLCB2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY3Jvc3ModmEsIHZiKSB7XG4gICAgICAgIGlmICh2YikgVmVjM0Z1bmMuY3Jvc3ModGhpcywgdmEsIHZiKTtcbiAgICAgICAgZWxzZSBWZWMzRnVuYy5jcm9zcyh0aGlzLCB0aGlzLCB2YSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNjYWxlKHYpIHtcbiAgICAgICAgVmVjM0Z1bmMuc2NhbGUodGhpcywgdGhpcywgdik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG5vcm1hbGl6ZSgpIHtcbiAgICAgICAgVmVjM0Z1bmMubm9ybWFsaXplKHRoaXMsIHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkb3Qodikge1xuICAgICAgICByZXR1cm4gVmVjM0Z1bmMuZG90KHRoaXMsIHYpO1xuICAgIH1cblxuICAgIGVxdWFscyh2KSB7XG4gICAgICAgIHJldHVybiBWZWMzRnVuYy5leGFjdEVxdWFscyh0aGlzLCB2KTtcbiAgICB9XG5cbiAgICBhcHBseU1hdHJpeDMobWF0Mykge1xuICAgICAgICBWZWMzRnVuYy50cmFuc2Zvcm1NYXQzKHRoaXMsIHRoaXMsIG1hdDMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhcHBseU1hdHJpeDQobWF0NCkge1xuICAgICAgICBWZWMzRnVuYy50cmFuc2Zvcm1NYXQ0KHRoaXMsIHRoaXMsIG1hdDQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzY2FsZVJvdGF0ZU1hdHJpeDQobWF0NCkge1xuICAgICAgICBWZWMzRnVuYy5zY2FsZVJvdGF0ZU1hdDQodGhpcywgdGhpcywgbWF0NCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFwcGx5UXVhdGVybmlvbihxKSB7XG4gICAgICAgIFZlYzNGdW5jLnRyYW5zZm9ybVF1YXQodGhpcywgdGhpcywgcSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFuZ2xlKHYpIHtcbiAgICAgICAgcmV0dXJuIFZlYzNGdW5jLmFuZ2xlKHRoaXMsIHYpO1xuICAgIH1cblxuICAgIGxlcnAodiwgdCkge1xuICAgICAgICBWZWMzRnVuYy5sZXJwKHRoaXMsIHRoaXMsIHYsIHQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWMzKHRoaXNbMF0sIHRoaXNbMV0sIHRoaXNbMl0pO1xuICAgIH1cblxuICAgIGZyb21BcnJheShhLCBvID0gMCkge1xuICAgICAgICB0aGlzWzBdID0gYVtvXTtcbiAgICAgICAgdGhpc1sxXSA9IGFbbyArIDFdO1xuICAgICAgICB0aGlzWzJdID0gYVtvICsgMl07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRvQXJyYXkoYSA9IFtdLCBvID0gMCkge1xuICAgICAgICBhW29dID0gdGhpc1swXTtcbiAgICAgICAgYVtvICsgMV0gPSB0aGlzWzFdO1xuICAgICAgICBhW28gKyAyXSA9IHRoaXNbMl07XG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIHRyYW5zZm9ybURpcmVjdGlvbihtYXQ0KSB7XG4gICAgICAgIGNvbnN0IHggPSB0aGlzWzBdO1xuICAgICAgICBjb25zdCB5ID0gdGhpc1sxXTtcbiAgICAgICAgY29uc3QgeiA9IHRoaXNbMl07XG5cbiAgICAgICAgdGhpc1swXSA9IG1hdDRbMF0gKiB4ICsgbWF0NFs0XSAqIHkgKyBtYXQ0WzhdICogejtcbiAgICAgICAgdGhpc1sxXSA9IG1hdDRbMV0gKiB4ICsgbWF0NFs1XSAqIHkgKyBtYXQ0WzldICogejtcbiAgICAgICAgdGhpc1syXSA9IG1hdDRbMl0gKiB4ICsgbWF0NFs2XSAqIHkgKyBtYXQ0WzEwXSAqIHo7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XG4gICAgfVxufVxuIiwiLy8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25NYXRyaXgob3V0LCBtLCBvcmRlciA9ICdZWFonKSB7XG4gICAgaWYgKG9yZGVyID09PSAnWFlaJykge1xuICAgICAgICBvdXRbMV0gPSBNYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgobVs4XSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzhdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIoLW1bOV0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIoLW1bNF0sIG1bMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzBdID0gTWF0aC5hdGFuMihtWzZdLCBtWzVdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IDA7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVhaJykge1xuICAgICAgICBvdXRbMF0gPSBNYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KG1bOV0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVs5XSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKG1bOF0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIobVsxXSwgbVs1XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMV0gPSBNYXRoLmF0YW4yKC1tWzJdLCBtWzBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IDA7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWlhZJykge1xuICAgICAgICBvdXRbMF0gPSBNYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgobVs2XSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzZdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFsxXSA9IE1hdGguYXRhbjIoLW1bMl0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIoLW1bNF0sIG1bNV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0WzFdID0gMDtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIobVsxXSwgbVswXSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWllYJykge1xuICAgICAgICBvdXRbMV0gPSBNYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KG1bMl0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVsyXSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKG1bNl0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsyXSA9IE1hdGguYXRhbjIobVsxXSwgbVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMF0gPSAwO1xuICAgICAgICAgICAgb3V0WzJdID0gTWF0aC5hdGFuMigtbVs0XSwgbVs1XSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVpYJykge1xuICAgICAgICBvdXRbMl0gPSBNYXRoLmFzaW4oTWF0aC5taW4oTWF0aC5tYXgobVsxXSwgLTEpLCAxKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhtWzFdKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIoLW1bOV0sIG1bNV0pO1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMigtbVsyXSwgbVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRbMF0gPSAwO1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMihtWzhdLCBtWzEwXSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWFpZJykge1xuICAgICAgICBvdXRbMl0gPSBNYXRoLmFzaW4oLU1hdGgubWluKE1hdGgubWF4KG1bNF0sIC0xKSwgMSkpO1xuICAgICAgICBpZiAoTWF0aC5hYnMobVs0XSkgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICBvdXRbMF0gPSBNYXRoLmF0YW4yKG1bNl0sIG1bNV0pO1xuICAgICAgICAgICAgb3V0WzFdID0gTWF0aC5hdGFuMihtWzhdLCBtWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dFswXSA9IE1hdGguYXRhbjIoLW1bOV0sIG1bMTBdKTtcbiAgICAgICAgICAgIG91dFsxXSA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuIiwiY29uc3QgRVBTSUxPTiA9IDAuMDAwMDAxO1xuXG4vKipcbiAqIENvcGllcyB0aGUgdXBwZXItbGVmdCAzeDMgdmFsdWVzIGludG8gdGhlIGdpdmVuIG1hdDMuXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyAzeDMgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgICB0aGUgc291cmNlIDR4NCBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21NYXQ0KG91dCwgYSkge1xuICAgIG91dFswXSA9IGFbMF07XG4gICAgb3V0WzFdID0gYVsxXTtcbiAgICBvdXRbMl0gPSBhWzJdO1xuICAgIG91dFszXSA9IGFbNF07XG4gICAgb3V0WzRdID0gYVs1XTtcbiAgICBvdXRbNV0gPSBhWzZdO1xuICAgIG91dFs2XSA9IGFbOF07XG4gICAgb3V0WzddID0gYVs5XTtcbiAgICBvdXRbOF0gPSBhWzEwXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgYSAzeDMgbWF0cml4IGZyb20gdGhlIGdpdmVuIHF1YXRlcm5pb25cbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IHEgUXVhdGVybmlvbiB0byBjcmVhdGUgbWF0cml4IGZyb21cbiAqXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUXVhdChvdXQsIHEpIHtcbiAgICBsZXQgeCA9IHFbMF0sXG4gICAgICAgIHkgPSBxWzFdLFxuICAgICAgICB6ID0gcVsyXSxcbiAgICAgICAgdyA9IHFbM107XG4gICAgbGV0IHgyID0geCArIHg7XG4gICAgbGV0IHkyID0geSArIHk7XG4gICAgbGV0IHoyID0geiArIHo7XG5cbiAgICBsZXQgeHggPSB4ICogeDI7XG4gICAgbGV0IHl4ID0geSAqIHgyO1xuICAgIGxldCB5eSA9IHkgKiB5MjtcbiAgICBsZXQgenggPSB6ICogeDI7XG4gICAgbGV0IHp5ID0geiAqIHkyO1xuICAgIGxldCB6eiA9IHogKiB6MjtcbiAgICBsZXQgd3ggPSB3ICogeDI7XG4gICAgbGV0IHd5ID0gdyAqIHkyO1xuICAgIGxldCB3eiA9IHcgKiB6MjtcblxuICAgIG91dFswXSA9IDEgLSB5eSAtIHp6O1xuICAgIG91dFszXSA9IHl4IC0gd3o7XG4gICAgb3V0WzZdID0genggKyB3eTtcblxuICAgIG91dFsxXSA9IHl4ICsgd3o7XG4gICAgb3V0WzRdID0gMSAtIHh4IC0geno7XG4gICAgb3V0WzddID0genkgLSB3eDtcblxuICAgIG91dFsyXSA9IHp4IC0gd3k7XG4gICAgb3V0WzVdID0genkgKyB3eDtcbiAgICBvdXRbOF0gPSAxIC0geHggLSB5eTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDMgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICBvdXRbNF0gPSBhWzRdO1xuICAgIG91dFs1XSA9IGFbNV07XG4gICAgb3V0WzZdID0gYVs2XTtcbiAgICBvdXRbN10gPSBhWzddO1xuICAgIG91dFs4XSA9IGFbOF07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQzIHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgbTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMikge1xuICAgIG91dFswXSA9IG0wMDtcbiAgICBvdXRbMV0gPSBtMDE7XG4gICAgb3V0WzJdID0gbTAyO1xuICAgIG91dFszXSA9IG0xMDtcbiAgICBvdXRbNF0gPSBtMTE7XG4gICAgb3V0WzVdID0gbTEyO1xuICAgIG91dFs2XSA9IG0yMDtcbiAgICBvdXRbN10gPSBtMjE7XG4gICAgb3V0WzhdID0gbTIyO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IGEgbWF0MyB0byB0aGUgaWRlbnRpdHkgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICAgIG91dFswXSA9IDE7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMTtcbiAgICBvdXRbNV0gPSAwO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xuICAgIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGUgc29tZSB2YWx1ZXNcbiAgICBpZiAob3V0ID09PSBhKSB7XG4gICAgICAgIGxldCBhMDEgPSBhWzFdLFxuICAgICAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgICAgIGExMiA9IGFbNV07XG4gICAgICAgIG91dFsxXSA9IGFbM107XG4gICAgICAgIG91dFsyXSA9IGFbNl07XG4gICAgICAgIG91dFszXSA9IGEwMTtcbiAgICAgICAgb3V0WzVdID0gYVs3XTtcbiAgICAgICAgb3V0WzZdID0gYTAyO1xuICAgICAgICBvdXRbN10gPSBhMTI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb3V0WzBdID0gYVswXTtcbiAgICAgICAgb3V0WzFdID0gYVszXTtcbiAgICAgICAgb3V0WzJdID0gYVs2XTtcbiAgICAgICAgb3V0WzNdID0gYVsxXTtcbiAgICAgICAgb3V0WzRdID0gYVs0XTtcbiAgICAgICAgb3V0WzVdID0gYVs3XTtcbiAgICAgICAgb3V0WzZdID0gYVsyXTtcbiAgICAgICAgb3V0WzddID0gYVs1XTtcbiAgICAgICAgb3V0WzhdID0gYVs4XTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEludmVydHMgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdO1xuICAgIGxldCBhMTAgPSBhWzNdLFxuICAgICAgICBhMTEgPSBhWzRdLFxuICAgICAgICBhMTIgPSBhWzVdO1xuICAgIGxldCBhMjAgPSBhWzZdLFxuICAgICAgICBhMjEgPSBhWzddLFxuICAgICAgICBhMjIgPSBhWzhdO1xuXG4gICAgbGV0IGIwMSA9IGEyMiAqIGExMSAtIGExMiAqIGEyMTtcbiAgICBsZXQgYjExID0gLWEyMiAqIGExMCArIGExMiAqIGEyMDtcbiAgICBsZXQgYjIxID0gYTIxICogYTEwIC0gYTExICogYTIwO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuICAgIGxldCBkZXQgPSBhMDAgKiBiMDEgKyBhMDEgKiBiMTEgKyBhMDIgKiBiMjE7XG5cbiAgICBpZiAoIWRldCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZGV0ID0gMS4wIC8gZGV0O1xuXG4gICAgb3V0WzBdID0gYjAxICogZGV0O1xuICAgIG91dFsxXSA9ICgtYTIyICogYTAxICsgYTAyICogYTIxKSAqIGRldDtcbiAgICBvdXRbMl0gPSAoYTEyICogYTAxIC0gYTAyICogYTExKSAqIGRldDtcbiAgICBvdXRbM10gPSBiMTEgKiBkZXQ7XG4gICAgb3V0WzRdID0gKGEyMiAqIGEwMCAtIGEwMiAqIGEyMCkgKiBkZXQ7XG4gICAgb3V0WzVdID0gKC1hMTIgKiBhMDAgKyBhMDIgKiBhMTApICogZGV0O1xuICAgIG91dFs2XSA9IGIyMSAqIGRldDtcbiAgICBvdXRbN10gPSAoLWEyMSAqIGEwMCArIGEwMSAqIGEyMCkgKiBkZXQ7XG4gICAgb3V0WzhdID0gKGExMSAqIGEwMCAtIGEwMSAqIGExMCkgKiBkZXQ7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluYW50KGEpIHtcbiAgICBsZXQgYTAwID0gYVswXSxcbiAgICAgICAgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXTtcbiAgICBsZXQgYTEwID0gYVszXSxcbiAgICAgICAgYTExID0gYVs0XSxcbiAgICAgICAgYTEyID0gYVs1XTtcbiAgICBsZXQgYTIwID0gYVs2XSxcbiAgICAgICAgYTIxID0gYVs3XSxcbiAgICAgICAgYTIyID0gYVs4XTtcblxuICAgIHJldHVybiBhMDAgKiAoYTIyICogYTExIC0gYTEyICogYTIxKSArIGEwMSAqICgtYTIyICogYTEwICsgYTEyICogYTIwKSArIGEwMiAqIChhMjEgKiBhMTAgLSBhMTEgKiBhMjApO1xufVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDMnc1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdO1xuICAgIGxldCBhMTAgPSBhWzNdLFxuICAgICAgICBhMTEgPSBhWzRdLFxuICAgICAgICBhMTIgPSBhWzVdO1xuICAgIGxldCBhMjAgPSBhWzZdLFxuICAgICAgICBhMjEgPSBhWzddLFxuICAgICAgICBhMjIgPSBhWzhdO1xuXG4gICAgbGV0IGIwMCA9IGJbMF0sXG4gICAgICAgIGIwMSA9IGJbMV0sXG4gICAgICAgIGIwMiA9IGJbMl07XG4gICAgbGV0IGIxMCA9IGJbM10sXG4gICAgICAgIGIxMSA9IGJbNF0sXG4gICAgICAgIGIxMiA9IGJbNV07XG4gICAgbGV0IGIyMCA9IGJbNl0sXG4gICAgICAgIGIyMSA9IGJbN10sXG4gICAgICAgIGIyMiA9IGJbOF07XG5cbiAgICBvdXRbMF0gPSBiMDAgKiBhMDAgKyBiMDEgKiBhMTAgKyBiMDIgKiBhMjA7XG4gICAgb3V0WzFdID0gYjAwICogYTAxICsgYjAxICogYTExICsgYjAyICogYTIxO1xuICAgIG91dFsyXSA9IGIwMCAqIGEwMiArIGIwMSAqIGExMiArIGIwMiAqIGEyMjtcblxuICAgIG91dFszXSA9IGIxMCAqIGEwMCArIGIxMSAqIGExMCArIGIxMiAqIGEyMDtcbiAgICBvdXRbNF0gPSBiMTAgKiBhMDEgKyBiMTEgKiBhMTEgKyBiMTIgKiBhMjE7XG4gICAgb3V0WzVdID0gYjEwICogYTAyICsgYjExICogYTEyICsgYjEyICogYTIyO1xuXG4gICAgb3V0WzZdID0gYjIwICogYTAwICsgYjIxICogYTEwICsgYjIyICogYTIwO1xuICAgIG91dFs3XSA9IGIyMCAqIGEwMSArIGIyMSAqIGExMSArIGIyMiAqIGEyMTtcbiAgICBvdXRbOF0gPSBiMjAgKiBhMDIgKyBiMjEgKiBhMTIgKyBiMjIgKiBhMjI7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBUcmFuc2xhdGUgYSBtYXQzIGJ5IHRoZSBnaXZlbiB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXG4gKiBAcGFyYW0ge3ZlYzJ9IHYgdmVjdG9yIHRvIHRyYW5zbGF0ZSBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMTAgPSBhWzNdLFxuICAgICAgICBhMTEgPSBhWzRdLFxuICAgICAgICBhMTIgPSBhWzVdLFxuICAgICAgICBhMjAgPSBhWzZdLFxuICAgICAgICBhMjEgPSBhWzddLFxuICAgICAgICBhMjIgPSBhWzhdLFxuICAgICAgICB4ID0gdlswXSxcbiAgICAgICAgeSA9IHZbMV07XG5cbiAgICBvdXRbMF0gPSBhMDA7XG4gICAgb3V0WzFdID0gYTAxO1xuICAgIG91dFsyXSA9IGEwMjtcblxuICAgIG91dFszXSA9IGExMDtcbiAgICBvdXRbNF0gPSBhMTE7XG4gICAgb3V0WzVdID0gYTEyO1xuXG4gICAgb3V0WzZdID0geCAqIGEwMCArIHkgKiBhMTAgKyBhMjA7XG4gICAgb3V0WzddID0geCAqIGEwMSArIHkgKiBhMTEgKyBhMjE7XG4gICAgb3V0WzhdID0geCAqIGEwMiArIHkgKiBhMTIgKyBhMjI7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0MyBieSB0aGUgZ2l2ZW4gYW5nbGVcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgcmFkKSB7XG4gICAgbGV0IGEwMCA9IGFbMF0sXG4gICAgICAgIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgIGExMCA9IGFbM10sXG4gICAgICAgIGExMSA9IGFbNF0sXG4gICAgICAgIGExMiA9IGFbNV0sXG4gICAgICAgIGEyMCA9IGFbNl0sXG4gICAgICAgIGEyMSA9IGFbN10sXG4gICAgICAgIGEyMiA9IGFbOF0sXG4gICAgICAgIHMgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgICBjID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dFswXSA9IGMgKiBhMDAgKyBzICogYTEwO1xuICAgIG91dFsxXSA9IGMgKiBhMDEgKyBzICogYTExO1xuICAgIG91dFsyXSA9IGMgKiBhMDIgKyBzICogYTEyO1xuXG4gICAgb3V0WzNdID0gYyAqIGExMCAtIHMgKiBhMDA7XG4gICAgb3V0WzRdID0gYyAqIGExMSAtIHMgKiBhMDE7XG4gICAgb3V0WzVdID0gYyAqIGExMiAtIHMgKiBhMDI7XG5cbiAgICBvdXRbNl0gPSBhMjA7XG4gICAgb3V0WzddID0gYTIxO1xuICAgIG91dFs4XSA9IGEyMjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNjYWxlcyB0aGUgbWF0MyBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7dmVjMn0gdiB0aGUgdmVjMiB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKiovXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCB2KSB7XG4gICAgbGV0IHggPSB2WzBdLFxuICAgICAgICB5ID0gdlsxXTtcblxuICAgIG91dFswXSA9IHggKiBhWzBdO1xuICAgIG91dFsxXSA9IHggKiBhWzFdO1xuICAgIG91dFsyXSA9IHggKiBhWzJdO1xuXG4gICAgb3V0WzNdID0geSAqIGFbM107XG4gICAgb3V0WzRdID0geSAqIGFbNF07XG4gICAgb3V0WzVdID0geSAqIGFbNV07XG5cbiAgICBvdXRbNl0gPSBhWzZdO1xuICAgIG91dFs3XSA9IGFbN107XG4gICAgb3V0WzhdID0gYVs4XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgYSAzeDMgbm9ybWFsIG1hdHJpeCAodHJhbnNwb3NlIGludmVyc2UpIGZyb20gdGhlIDR4NCBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge21hdDR9IGEgTWF0NCB0byBkZXJpdmUgdGhlIG5vcm1hbCBtYXRyaXggZnJvbVxuICpcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbEZyb21NYXQ0KG91dCwgYSkge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdO1xuICAgIGxldCBhMTAgPSBhWzRdLFxuICAgICAgICBhMTEgPSBhWzVdLFxuICAgICAgICBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuICAgIGxldCBhMjAgPSBhWzhdLFxuICAgICAgICBhMjEgPSBhWzldLFxuICAgICAgICBhMjIgPSBhWzEwXSxcbiAgICAgICAgYTIzID0gYVsxMV07XG4gICAgbGV0IGEzMCA9IGFbMTJdLFxuICAgICAgICBhMzEgPSBhWzEzXSxcbiAgICAgICAgYTMyID0gYVsxNF0sXG4gICAgICAgIGEzMyA9IGFbMTVdO1xuXG4gICAgbGV0IGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgICBsZXQgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xuICAgIGxldCBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XG4gICAgbGV0IGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgICBsZXQgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xuICAgIGxldCBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XG4gICAgbGV0IGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgICBsZXQgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xuICAgIGxldCBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XG4gICAgbGV0IGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgICBsZXQgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xuICAgIGxldCBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gICAgbGV0IGRldCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcblxuICAgIGlmICghZGV0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBkZXQgPSAxLjAgLyBkZXQ7XG5cbiAgICBvdXRbMF0gPSAoYTExICogYjExIC0gYTEyICogYjEwICsgYTEzICogYjA5KSAqIGRldDtcbiAgICBvdXRbMV0gPSAoYTEyICogYjA4IC0gYTEwICogYjExIC0gYTEzICogYjA3KSAqIGRldDtcbiAgICBvdXRbMl0gPSAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldDtcblxuICAgIG91dFszXSA9IChhMDIgKiBiMTAgLSBhMDEgKiBiMTEgLSBhMDMgKiBiMDkpICogZGV0O1xuICAgIG91dFs0XSA9IChhMDAgKiBiMTEgLSBhMDIgKiBiMDggKyBhMDMgKiBiMDcpICogZGV0O1xuICAgIG91dFs1XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0O1xuXG4gICAgb3V0WzZdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XG4gICAgb3V0WzddID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XG4gICAgb3V0WzhdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQ7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIDJEIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kc1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBXaWR0aCBvZiB5b3VyIGdsIGNvbnRleHRcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgSGVpZ2h0IG9mIGdsIGNvbnRleHRcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2plY3Rpb24ob3V0LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgb3V0WzBdID0gMiAvIHdpZHRoO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IC0yIC8gaGVpZ2h0O1xuICAgIG91dFs1XSA9IDA7XG4gICAgb3V0WzZdID0gLTE7XG4gICAgb3V0WzddID0gMTtcbiAgICBvdXRbOF0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQWRkcyB0d28gbWF0MydzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICAgIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICAgIG91dFs0XSA9IGFbNF0gKyBiWzRdO1xuICAgIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xuICAgIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xuICAgIG91dFs3XSA9IGFbN10gKyBiWzddO1xuICAgIG91dFs4XSA9IGFbOF0gKyBiWzhdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGFcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcbiAgICBvdXRbNV0gPSBhWzVdIC0gYls1XTtcbiAgICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcbiAgICBvdXRbN10gPSBhWzddIC0gYls3XTtcbiAgICBvdXRbOF0gPSBhWzhdIC0gYls4XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGI7XG4gICAgb3V0WzFdID0gYVsxXSAqIGI7XG4gICAgb3V0WzJdID0gYVsyXSAqIGI7XG4gICAgb3V0WzNdID0gYVszXSAqIGI7XG4gICAgb3V0WzRdID0gYVs0XSAqIGI7XG4gICAgb3V0WzVdID0gYVs1XSAqIGI7XG4gICAgb3V0WzZdID0gYVs2XSAqIGI7XG4gICAgb3V0WzddID0gYVs3XSAqIGI7XG4gICAgb3V0WzhdID0gYVs4XSAqIGI7XG4gICAgcmV0dXJuIG91dDtcbn1cbiIsImNvbnN0IEVQU0lMT04gPSAwLjAwMDAwMTtcblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0NCB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIG91dFs0XSA9IGFbNF07XG4gICAgb3V0WzVdID0gYVs1XTtcbiAgICBvdXRbNl0gPSBhWzZdO1xuICAgIG91dFs3XSA9IGFbN107XG4gICAgb3V0WzhdID0gYVs4XTtcbiAgICBvdXRbOV0gPSBhWzldO1xuICAgIG91dFsxMF0gPSBhWzEwXTtcbiAgICBvdXRbMTFdID0gYVsxMV07XG4gICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0NCB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIG0wMCwgbTAxLCBtMDIsIG0wMywgbTEwLCBtMTEsIG0xMiwgbTEzLCBtMjAsIG0yMSwgbTIyLCBtMjMsIG0zMCwgbTMxLCBtMzIsIG0zMykge1xuICAgIG91dFswXSA9IG0wMDtcbiAgICBvdXRbMV0gPSBtMDE7XG4gICAgb3V0WzJdID0gbTAyO1xuICAgIG91dFszXSA9IG0wMztcbiAgICBvdXRbNF0gPSBtMTA7XG4gICAgb3V0WzVdID0gbTExO1xuICAgIG91dFs2XSA9IG0xMjtcbiAgICBvdXRbN10gPSBtMTM7XG4gICAgb3V0WzhdID0gbTIwO1xuICAgIG91dFs5XSA9IG0yMTtcbiAgICBvdXRbMTBdID0gbTIyO1xuICAgIG91dFsxMV0gPSBtMjM7XG4gICAgb3V0WzEyXSA9IG0zMDtcbiAgICBvdXRbMTNdID0gbTMxO1xuICAgIG91dFsxNF0gPSBtMzI7XG4gICAgb3V0WzE1XSA9IG0zMztcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldCBhIG1hdDQgdG8gdGhlIGlkZW50aXR5IG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHtcbiAgICBvdXRbMF0gPSAxO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IDA7XG4gICAgb3V0WzVdID0gMTtcbiAgICBvdXRbNl0gPSAwO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gMDtcbiAgICBvdXRbOV0gPSAwO1xuICAgIG91dFsxMF0gPSAxO1xuICAgIG91dFsxMV0gPSAwO1xuICAgIG91dFsxMl0gPSAwO1xuICAgIG91dFsxM10gPSAwO1xuICAgIG91dFsxNF0gPSAwO1xuICAgIG91dFsxNV0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xuICAgIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGUgc29tZSB2YWx1ZXNcbiAgICBpZiAob3V0ID09PSBhKSB7XG4gICAgICAgIGxldCBhMDEgPSBhWzFdLFxuICAgICAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgICAgIGEwMyA9IGFbM107XG4gICAgICAgIGxldCBhMTIgPSBhWzZdLFxuICAgICAgICAgICAgYTEzID0gYVs3XTtcbiAgICAgICAgbGV0IGEyMyA9IGFbMTFdO1xuXG4gICAgICAgIG91dFsxXSA9IGFbNF07XG4gICAgICAgIG91dFsyXSA9IGFbOF07XG4gICAgICAgIG91dFszXSA9IGFbMTJdO1xuICAgICAgICBvdXRbNF0gPSBhMDE7XG4gICAgICAgIG91dFs2XSA9IGFbOV07XG4gICAgICAgIG91dFs3XSA9IGFbMTNdO1xuICAgICAgICBvdXRbOF0gPSBhMDI7XG4gICAgICAgIG91dFs5XSA9IGExMjtcbiAgICAgICAgb3V0WzExXSA9IGFbMTRdO1xuICAgICAgICBvdXRbMTJdID0gYTAzO1xuICAgICAgICBvdXRbMTNdID0gYTEzO1xuICAgICAgICBvdXRbMTRdID0gYTIzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG91dFswXSA9IGFbMF07XG4gICAgICAgIG91dFsxXSA9IGFbNF07XG4gICAgICAgIG91dFsyXSA9IGFbOF07XG4gICAgICAgIG91dFszXSA9IGFbMTJdO1xuICAgICAgICBvdXRbNF0gPSBhWzFdO1xuICAgICAgICBvdXRbNV0gPSBhWzVdO1xuICAgICAgICBvdXRbNl0gPSBhWzldO1xuICAgICAgICBvdXRbN10gPSBhWzEzXTtcbiAgICAgICAgb3V0WzhdID0gYVsyXTtcbiAgICAgICAgb3V0WzldID0gYVs2XTtcbiAgICAgICAgb3V0WzEwXSA9IGFbMTBdO1xuICAgICAgICBvdXRbMTFdID0gYVsxNF07XG4gICAgICAgIG91dFsxMl0gPSBhWzNdO1xuICAgICAgICBvdXRbMTNdID0gYVs3XTtcbiAgICAgICAgb3V0WzE0XSA9IGFbMTFdO1xuICAgICAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBJbnZlcnRzIGEgbWF0NFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgICBsZXQgYTAwID0gYVswXSxcbiAgICAgICAgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgYTAzID0gYVszXTtcbiAgICBsZXQgYTEwID0gYVs0XSxcbiAgICAgICAgYTExID0gYVs1XSxcbiAgICAgICAgYTEyID0gYVs2XSxcbiAgICAgICAgYTEzID0gYVs3XTtcbiAgICBsZXQgYTIwID0gYVs4XSxcbiAgICAgICAgYTIxID0gYVs5XSxcbiAgICAgICAgYTIyID0gYVsxMF0sXG4gICAgICAgIGEyMyA9IGFbMTFdO1xuICAgIGxldCBhMzAgPSBhWzEyXSxcbiAgICAgICAgYTMxID0gYVsxM10sXG4gICAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgICBhMzMgPSBhWzE1XTtcblxuICAgIGxldCBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XG4gICAgbGV0IGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgICBsZXQgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwO1xuICAgIGxldCBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XG4gICAgbGV0IGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgICBsZXQgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyO1xuICAgIGxldCBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XG4gICAgbGV0IGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgICBsZXQgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwO1xuICAgIGxldCBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XG4gICAgbGV0IGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgICBsZXQgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuICAgIGxldCBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG5cbiAgICBpZiAoIWRldCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZGV0ID0gMS4wIC8gZGV0O1xuXG4gICAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7XG4gICAgb3V0WzFdID0gKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQ7XG4gICAgb3V0WzJdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XG4gICAgb3V0WzNdID0gKGEyMiAqIGIwNCAtIGEyMSAqIGIwNSAtIGEyMyAqIGIwMykgKiBkZXQ7XG4gICAgb3V0WzRdID0gKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgKiBkZXQ7XG4gICAgb3V0WzVdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XG4gICAgb3V0WzZdID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XG4gICAgb3V0WzddID0gKGEyMCAqIGIwNSAtIGEyMiAqIGIwMiArIGEyMyAqIGIwMSkgKiBkZXQ7XG4gICAgb3V0WzhdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzldID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzEwXSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogZGV0O1xuICAgIG91dFsxMV0gPSAoYTIxICogYjAyIC0gYTIwICogYjA0IC0gYTIzICogYjAwKSAqIGRldDtcbiAgICBvdXRbMTJdID0gKGExMSAqIGIwNyAtIGExMCAqIGIwOSAtIGExMiAqIGIwNikgKiBkZXQ7XG4gICAgb3V0WzEzXSA9IChhMDAgKiBiMDkgLSBhMDEgKiBiMDcgKyBhMDIgKiBiMDYpICogZGV0O1xuICAgIG91dFsxNF0gPSAoYTMxICogYjAxIC0gYTMwICogYjAzIC0gYTMyICogYjAwKSAqIGRldDtcbiAgICBvdXRbMTVdID0gKGEyMCAqIGIwMyAtIGEyMSAqIGIwMSArIGEyMiAqIGIwMCkgKiBkZXQ7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0NFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdO1xuICAgIGxldCBhMTAgPSBhWzRdLFxuICAgICAgICBhMTEgPSBhWzVdLFxuICAgICAgICBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuICAgIGxldCBhMjAgPSBhWzhdLFxuICAgICAgICBhMjEgPSBhWzldLFxuICAgICAgICBhMjIgPSBhWzEwXSxcbiAgICAgICAgYTIzID0gYVsxMV07XG4gICAgbGV0IGEzMCA9IGFbMTJdLFxuICAgICAgICBhMzEgPSBhWzEzXSxcbiAgICAgICAgYTMyID0gYVsxNF0sXG4gICAgICAgIGEzMyA9IGFbMTVdO1xuXG4gICAgbGV0IGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgICBsZXQgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xuICAgIGxldCBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XG4gICAgbGV0IGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgICBsZXQgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xuICAgIGxldCBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XG4gICAgbGV0IGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgICBsZXQgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xuICAgIGxldCBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XG4gICAgbGV0IGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgICBsZXQgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xuICAgIGxldCBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gICAgcmV0dXJuIGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcbn1cblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBtYXQ0c1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7bWF0NH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICAgIGxldCBhMDAgPSBhWzBdLFxuICAgICAgICBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdO1xuICAgIGxldCBhMTAgPSBhWzRdLFxuICAgICAgICBhMTEgPSBhWzVdLFxuICAgICAgICBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuICAgIGxldCBhMjAgPSBhWzhdLFxuICAgICAgICBhMjEgPSBhWzldLFxuICAgICAgICBhMjIgPSBhWzEwXSxcbiAgICAgICAgYTIzID0gYVsxMV07XG4gICAgbGV0IGEzMCA9IGFbMTJdLFxuICAgICAgICBhMzEgPSBhWzEzXSxcbiAgICAgICAgYTMyID0gYVsxNF0sXG4gICAgICAgIGEzMyA9IGFbMTVdO1xuXG4gICAgLy8gQ2FjaGUgb25seSB0aGUgY3VycmVudCBsaW5lIG9mIHRoZSBzZWNvbmQgbWF0cml4XG4gICAgbGV0IGIwID0gYlswXSxcbiAgICAgICAgYjEgPSBiWzFdLFxuICAgICAgICBiMiA9IGJbMl0sXG4gICAgICAgIGIzID0gYlszXTtcbiAgICBvdXRbMF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgICBvdXRbMV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgICBvdXRbMl0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcbiAgICBvdXRbM10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcblxuICAgIGIwID0gYls0XTtcbiAgICBiMSA9IGJbNV07XG4gICAgYjIgPSBiWzZdO1xuICAgIGIzID0gYls3XTtcbiAgICBvdXRbNF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgICBvdXRbNV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgICBvdXRbNl0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcbiAgICBvdXRbN10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcblxuICAgIGIwID0gYls4XTtcbiAgICBiMSA9IGJbOV07XG4gICAgYjIgPSBiWzEwXTtcbiAgICBiMyA9IGJbMTFdO1xuICAgIG91dFs4XSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICAgIG91dFs5XSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xuICAgIG91dFsxMF0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcbiAgICBvdXRbMTFdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XG5cbiAgICBiMCA9IGJbMTJdO1xuICAgIGIxID0gYlsxM107XG4gICAgYjIgPSBiWzE0XTtcbiAgICBiMyA9IGJbMTVdO1xuICAgIG91dFsxMl0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgICBvdXRbMTNdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gICAgb3V0WzE0XSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICAgIG91dFsxNV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zbGF0ZSBhIG1hdDQgYnkgdGhlIGdpdmVuIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcbiAqIEBwYXJhbSB7dmVjM30gdiB2ZWN0b3IgdG8gdHJhbnNsYXRlIGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGUob3V0LCBhLCB2KSB7XG4gICAgbGV0IHggPSB2WzBdLFxuICAgICAgICB5ID0gdlsxXSxcbiAgICAgICAgeiA9IHZbMl07XG4gICAgbGV0IGEwMCwgYTAxLCBhMDIsIGEwMztcbiAgICBsZXQgYTEwLCBhMTEsIGExMiwgYTEzO1xuICAgIGxldCBhMjAsIGEyMSwgYTIyLCBhMjM7XG5cbiAgICBpZiAoYSA9PT0gb3V0KSB7XG4gICAgICAgIG91dFsxMl0gPSBhWzBdICogeCArIGFbNF0gKiB5ICsgYVs4XSAqIHogKyBhWzEyXTtcbiAgICAgICAgb3V0WzEzXSA9IGFbMV0gKiB4ICsgYVs1XSAqIHkgKyBhWzldICogeiArIGFbMTNdO1xuICAgICAgICBvdXRbMTRdID0gYVsyXSAqIHggKyBhWzZdICogeSArIGFbMTBdICogeiArIGFbMTRdO1xuICAgICAgICBvdXRbMTVdID0gYVszXSAqIHggKyBhWzddICogeSArIGFbMTFdICogeiArIGFbMTVdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGEwMCA9IGFbMF07XG4gICAgICAgIGEwMSA9IGFbMV07XG4gICAgICAgIGEwMiA9IGFbMl07XG4gICAgICAgIGEwMyA9IGFbM107XG4gICAgICAgIGExMCA9IGFbNF07XG4gICAgICAgIGExMSA9IGFbNV07XG4gICAgICAgIGExMiA9IGFbNl07XG4gICAgICAgIGExMyA9IGFbN107XG4gICAgICAgIGEyMCA9IGFbOF07XG4gICAgICAgIGEyMSA9IGFbOV07XG4gICAgICAgIGEyMiA9IGFbMTBdO1xuICAgICAgICBhMjMgPSBhWzExXTtcblxuICAgICAgICBvdXRbMF0gPSBhMDA7XG4gICAgICAgIG91dFsxXSA9IGEwMTtcbiAgICAgICAgb3V0WzJdID0gYTAyO1xuICAgICAgICBvdXRbM10gPSBhMDM7XG4gICAgICAgIG91dFs0XSA9IGExMDtcbiAgICAgICAgb3V0WzVdID0gYTExO1xuICAgICAgICBvdXRbNl0gPSBhMTI7XG4gICAgICAgIG91dFs3XSA9IGExMztcbiAgICAgICAgb3V0WzhdID0gYTIwO1xuICAgICAgICBvdXRbOV0gPSBhMjE7XG4gICAgICAgIG91dFsxMF0gPSBhMjI7XG4gICAgICAgIG91dFsxMV0gPSBhMjM7XG5cbiAgICAgICAgb3V0WzEyXSA9IGEwMCAqIHggKyBhMTAgKiB5ICsgYTIwICogeiArIGFbMTJdO1xuICAgICAgICBvdXRbMTNdID0gYTAxICogeCArIGExMSAqIHkgKyBhMjEgKiB6ICsgYVsxM107XG4gICAgICAgIG91dFsxNF0gPSBhMDIgKiB4ICsgYTEyICogeSArIGEyMiAqIHogKyBhWzE0XTtcbiAgICAgICAgb3V0WzE1XSA9IGEwMyAqIHggKyBhMTMgKiB5ICsgYTIzICogeiArIGFbMTVdO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2NhbGVzIHRoZSBtYXQ0IGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMzIG5vdCB1c2luZyB2ZWN0b3JpemF0aW9uXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXG4gKiBAcGFyYW0ge3ZlYzN9IHYgdGhlIHZlYzMgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgdikge1xuICAgIGxldCB4ID0gdlswXSxcbiAgICAgICAgeSA9IHZbMV0sXG4gICAgICAgIHogPSB2WzJdO1xuXG4gICAgb3V0WzBdID0gYVswXSAqIHg7XG4gICAgb3V0WzFdID0gYVsxXSAqIHg7XG4gICAgb3V0WzJdID0gYVsyXSAqIHg7XG4gICAgb3V0WzNdID0gYVszXSAqIHg7XG4gICAgb3V0WzRdID0gYVs0XSAqIHk7XG4gICAgb3V0WzVdID0gYVs1XSAqIHk7XG4gICAgb3V0WzZdID0gYVs2XSAqIHk7XG4gICAgb3V0WzddID0gYVs3XSAqIHk7XG4gICAgb3V0WzhdID0gYVs4XSAqIHo7XG4gICAgb3V0WzldID0gYVs5XSAqIHo7XG4gICAgb3V0WzEwXSA9IGFbMTBdICogejtcbiAgICBvdXRbMTFdID0gYVsxMV0gKiB6O1xuICAgIG91dFsxMl0gPSBhWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM107XG4gICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJvdGF0ZXMgYSBtYXQ0IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIGdpdmVuIGF4aXNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHBhcmFtIHt2ZWMzfSBheGlzIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZShvdXQsIGEsIHJhZCwgYXhpcykge1xuICAgIGxldCB4ID0gYXhpc1swXSxcbiAgICAgICAgeSA9IGF4aXNbMV0sXG4gICAgICAgIHogPSBheGlzWzJdO1xuICAgIGxldCBsZW4gPSBNYXRoLmh5cG90KHgsIHksIHopO1xuICAgIGxldCBzLCBjLCB0O1xuICAgIGxldCBhMDAsIGEwMSwgYTAyLCBhMDM7XG4gICAgbGV0IGExMCwgYTExLCBhMTIsIGExMztcbiAgICBsZXQgYTIwLCBhMjEsIGEyMiwgYTIzO1xuICAgIGxldCBiMDAsIGIwMSwgYjAyO1xuICAgIGxldCBiMTAsIGIxMSwgYjEyO1xuICAgIGxldCBiMjAsIGIyMSwgYjIyO1xuXG4gICAgaWYgKE1hdGguYWJzKGxlbikgPCBFUFNJTE9OKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxlbiA9IDEgLyBsZW47XG4gICAgeCAqPSBsZW47XG4gICAgeSAqPSBsZW47XG4gICAgeiAqPSBsZW47XG5cbiAgICBzID0gTWF0aC5zaW4ocmFkKTtcbiAgICBjID0gTWF0aC5jb3MocmFkKTtcbiAgICB0ID0gMSAtIGM7XG5cbiAgICBhMDAgPSBhWzBdO1xuICAgIGEwMSA9IGFbMV07XG4gICAgYTAyID0gYVsyXTtcbiAgICBhMDMgPSBhWzNdO1xuICAgIGExMCA9IGFbNF07XG4gICAgYTExID0gYVs1XTtcbiAgICBhMTIgPSBhWzZdO1xuICAgIGExMyA9IGFbN107XG4gICAgYTIwID0gYVs4XTtcbiAgICBhMjEgPSBhWzldO1xuICAgIGEyMiA9IGFbMTBdO1xuICAgIGEyMyA9IGFbMTFdO1xuXG4gICAgLy8gQ29uc3RydWN0IHRoZSBlbGVtZW50cyBvZiB0aGUgcm90YXRpb24gbWF0cml4XG4gICAgYjAwID0geCAqIHggKiB0ICsgYztcbiAgICBiMDEgPSB5ICogeCAqIHQgKyB6ICogcztcbiAgICBiMDIgPSB6ICogeCAqIHQgLSB5ICogcztcbiAgICBiMTAgPSB4ICogeSAqIHQgLSB6ICogcztcbiAgICBiMTEgPSB5ICogeSAqIHQgKyBjO1xuICAgIGIxMiA9IHogKiB5ICogdCArIHggKiBzO1xuICAgIGIyMCA9IHggKiB6ICogdCArIHkgKiBzO1xuICAgIGIyMSA9IHkgKiB6ICogdCAtIHggKiBzO1xuICAgIGIyMiA9IHogKiB6ICogdCArIGM7XG5cbiAgICAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgIG91dFswXSA9IGEwMCAqIGIwMCArIGExMCAqIGIwMSArIGEyMCAqIGIwMjtcbiAgICBvdXRbMV0gPSBhMDEgKiBiMDAgKyBhMTEgKiBiMDEgKyBhMjEgKiBiMDI7XG4gICAgb3V0WzJdID0gYTAyICogYjAwICsgYTEyICogYjAxICsgYTIyICogYjAyO1xuICAgIG91dFszXSA9IGEwMyAqIGIwMCArIGExMyAqIGIwMSArIGEyMyAqIGIwMjtcbiAgICBvdXRbNF0gPSBhMDAgKiBiMTAgKyBhMTAgKiBiMTEgKyBhMjAgKiBiMTI7XG4gICAgb3V0WzVdID0gYTAxICogYjEwICsgYTExICogYjExICsgYTIxICogYjEyO1xuICAgIG91dFs2XSA9IGEwMiAqIGIxMCArIGExMiAqIGIxMSArIGEyMiAqIGIxMjtcbiAgICBvdXRbN10gPSBhMDMgKiBiMTAgKyBhMTMgKiBiMTEgKyBhMjMgKiBiMTI7XG4gICAgb3V0WzhdID0gYTAwICogYjIwICsgYTEwICogYjIxICsgYTIwICogYjIyO1xuICAgIG91dFs5XSA9IGEwMSAqIGIyMCArIGExMSAqIGIyMSArIGEyMSAqIGIyMjtcbiAgICBvdXRbMTBdID0gYTAyICogYjIwICsgYTEyICogYjIxICsgYTIyICogYjIyO1xuICAgIG91dFsxMV0gPSBhMDMgKiBiMjAgKyBhMTMgKiBiMjEgKyBhMjMgKiBiMjI7XG5cbiAgICBpZiAoYSAhPT0gb3V0KSB7XG4gICAgICAgIC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIGxhc3Qgcm93XG4gICAgICAgIG91dFsxMl0gPSBhWzEyXTtcbiAgICAgICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgICAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3IgY29tcG9uZW50IG9mIGEgdHJhbnNmb3JtYXRpb25cbiAqICBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGggZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24sXG4gKiAgdGhlIHJldHVybmVkIHZlY3RvciB3aWxsIGJlIHRoZSBzYW1lIGFzIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3JcbiAqICBvcmlnaW5hbGx5IHN1cHBsaWVkLlxuICogQHBhcmFtICB7dmVjM30gb3V0IFZlY3RvciB0byByZWNlaXZlIHRyYW5zbGF0aW9uIGNvbXBvbmVudFxuICogQHBhcmFtICB7bWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNsYXRpb24ob3V0LCBtYXQpIHtcbiAgICBvdXRbMF0gPSBtYXRbMTJdO1xuICAgIG91dFsxXSA9IG1hdFsxM107XG4gICAgb3V0WzJdID0gbWF0WzE0XTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2NhbGluZyBmYWN0b3IgY29tcG9uZW50IG9mIGEgdHJhbnNmb3JtYXRpb25cbiAqICBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGggZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZVxuICogIHdpdGggYSBub3JtYWxpemVkIFF1YXRlcm5pb24gcGFyYW10ZXIsIHRoZSByZXR1cm5lZCB2ZWN0b3Igd2lsbCBiZVxuICogIHRoZSBzYW1lIGFzIHRoZSBzY2FsaW5nIHZlY3RvclxuICogIG9yaWdpbmFsbHkgc3VwcGxpZWQuXG4gKiBAcGFyYW0gIHt2ZWMzfSBvdXQgVmVjdG9yIHRvIHJlY2VpdmUgc2NhbGluZyBmYWN0b3IgY29tcG9uZW50XG4gKiBAcGFyYW0gIHttYXQ0fSBtYXQgTWF0cml4IHRvIGJlIGRlY29tcG9zZWQgKGlucHV0KVxuICogQHJldHVybiB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2FsaW5nKG91dCwgbWF0KSB7XG4gICAgbGV0IG0xMSA9IG1hdFswXTtcbiAgICBsZXQgbTEyID0gbWF0WzFdO1xuICAgIGxldCBtMTMgPSBtYXRbMl07XG4gICAgbGV0IG0yMSA9IG1hdFs0XTtcbiAgICBsZXQgbTIyID0gbWF0WzVdO1xuICAgIGxldCBtMjMgPSBtYXRbNl07XG4gICAgbGV0IG0zMSA9IG1hdFs4XTtcbiAgICBsZXQgbTMyID0gbWF0WzldO1xuICAgIGxldCBtMzMgPSBtYXRbMTBdO1xuXG4gICAgb3V0WzBdID0gTWF0aC5oeXBvdChtMTEsIG0xMiwgbTEzKTtcbiAgICBvdXRbMV0gPSBNYXRoLmh5cG90KG0yMSwgbTIyLCBtMjMpO1xuICAgIG91dFsyXSA9IE1hdGguaHlwb3QobTMxLCBtMzIsIG0zMyk7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWF4U2NhbGVPbkF4aXMobWF0KSB7XG4gICAgbGV0IG0xMSA9IG1hdFswXTtcbiAgICBsZXQgbTEyID0gbWF0WzFdO1xuICAgIGxldCBtMTMgPSBtYXRbMl07XG4gICAgbGV0IG0yMSA9IG1hdFs0XTtcbiAgICBsZXQgbTIyID0gbWF0WzVdO1xuICAgIGxldCBtMjMgPSBtYXRbNl07XG4gICAgbGV0IG0zMSA9IG1hdFs4XTtcbiAgICBsZXQgbTMyID0gbWF0WzldO1xuICAgIGxldCBtMzMgPSBtYXRbMTBdO1xuXG4gICAgY29uc3QgeCA9IG0xMSAqIG0xMSArIG0xMiAqIG0xMiArIG0xMyAqIG0xMztcbiAgICBjb25zdCB5ID0gbTIxICogbTIxICsgbTIyICogbTIyICsgbTIzICogbTIzO1xuICAgIGNvbnN0IHogPSBtMzEgKiBtMzEgKyBtMzIgKiBtMzIgKyBtMzMgKiBtMzM7XG5cbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgubWF4KHgsIHksIHopKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIHJvdGF0aW9uYWwgY29tcG9uZW50XG4gKiAgb2YgYSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGhcbiAqICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbiwgdGhlIHJldHVybmVkIHF1YXRlcm5pb24gd2lsbCBiZSB0aGVcbiAqICBzYW1lIGFzIHRoZSBxdWF0ZXJuaW9uIG9yaWdpbmFsbHkgc3VwcGxpZWQuXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBRdWF0ZXJuaW9uIHRvIHJlY2VpdmUgdGhlIHJvdGF0aW9uIGNvbXBvbmVudFxuICogQHBhcmFtIHttYXQ0fSBtYXQgTWF0cml4IHRvIGJlIGRlY29tcG9zZWQgKGlucHV0KVxuICogQHJldHVybiB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRSb3RhdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgdGVtcCA9IFswLCAwLCAwXTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAob3V0LCBtYXQpIHtcbiAgICAgICAgbGV0IHNjYWxpbmcgPSB0ZW1wO1xuICAgICAgICBnZXRTY2FsaW5nKHNjYWxpbmcsIG1hdCk7XG5cbiAgICAgICAgbGV0IGlzMSA9IDEgLyBzY2FsaW5nWzBdO1xuICAgICAgICBsZXQgaXMyID0gMSAvIHNjYWxpbmdbMV07XG4gICAgICAgIGxldCBpczMgPSAxIC8gc2NhbGluZ1syXTtcblxuICAgICAgICBsZXQgc20xMSA9IG1hdFswXSAqIGlzMTtcbiAgICAgICAgbGV0IHNtMTIgPSBtYXRbMV0gKiBpczI7XG4gICAgICAgIGxldCBzbTEzID0gbWF0WzJdICogaXMzO1xuICAgICAgICBsZXQgc20yMSA9IG1hdFs0XSAqIGlzMTtcbiAgICAgICAgbGV0IHNtMjIgPSBtYXRbNV0gKiBpczI7XG4gICAgICAgIGxldCBzbTIzID0gbWF0WzZdICogaXMzO1xuICAgICAgICBsZXQgc20zMSA9IG1hdFs4XSAqIGlzMTtcbiAgICAgICAgbGV0IHNtMzIgPSBtYXRbOV0gKiBpczI7XG4gICAgICAgIGxldCBzbTMzID0gbWF0WzEwXSAqIGlzMztcblxuICAgICAgICBsZXQgdHJhY2UgPSBzbTExICsgc20yMiArIHNtMzM7XG4gICAgICAgIGxldCBTID0gMDtcblxuICAgICAgICBpZiAodHJhY2UgPiAwKSB7XG4gICAgICAgICAgICBTID0gTWF0aC5zcXJ0KHRyYWNlICsgMS4wKSAqIDI7XG4gICAgICAgICAgICBvdXRbM10gPSAwLjI1ICogUztcbiAgICAgICAgICAgIG91dFswXSA9IChzbTIzIC0gc20zMikgLyBTO1xuICAgICAgICAgICAgb3V0WzFdID0gKHNtMzEgLSBzbTEzKSAvIFM7XG4gICAgICAgICAgICBvdXRbMl0gPSAoc20xMiAtIHNtMjEpIC8gUztcbiAgICAgICAgfSBlbHNlIGlmIChzbTExID4gc20yMiAmJiBzbTExID4gc20zMykge1xuICAgICAgICAgICAgUyA9IE1hdGguc3FydCgxLjAgKyBzbTExIC0gc20yMiAtIHNtMzMpICogMjtcbiAgICAgICAgICAgIG91dFszXSA9IChzbTIzIC0gc20zMikgLyBTO1xuICAgICAgICAgICAgb3V0WzBdID0gMC4yNSAqIFM7XG4gICAgICAgICAgICBvdXRbMV0gPSAoc20xMiArIHNtMjEpIC8gUztcbiAgICAgICAgICAgIG91dFsyXSA9IChzbTMxICsgc20xMykgLyBTO1xuICAgICAgICB9IGVsc2UgaWYgKHNtMjIgPiBzbTMzKSB7XG4gICAgICAgICAgICBTID0gTWF0aC5zcXJ0KDEuMCArIHNtMjIgLSBzbTExIC0gc20zMykgKiAyO1xuICAgICAgICAgICAgb3V0WzNdID0gKHNtMzEgLSBzbTEzKSAvIFM7XG4gICAgICAgICAgICBvdXRbMF0gPSAoc20xMiArIHNtMjEpIC8gUztcbiAgICAgICAgICAgIG91dFsxXSA9IDAuMjUgKiBTO1xuICAgICAgICAgICAgb3V0WzJdID0gKHNtMjMgKyBzbTMyKSAvIFM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBTID0gTWF0aC5zcXJ0KDEuMCArIHNtMzMgLSBzbTExIC0gc20yMikgKiAyO1xuICAgICAgICAgICAgb3V0WzNdID0gKHNtMTIgLSBzbTIxKSAvIFM7XG4gICAgICAgICAgICBvdXRbMF0gPSAoc20zMSArIHNtMTMpIC8gUztcbiAgICAgICAgICAgIG91dFsxXSA9IChzbTIzICsgc20zMikgLyBTO1xuICAgICAgICAgICAgb3V0WzJdID0gMC4yNSAqIFM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH07XG59KSgpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHF1YXRlcm5pb24gcm90YXRpb24sIHZlY3RvciB0cmFuc2xhdGlvbiBhbmQgdmVjdG9yIHNjYWxlXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCB2ZWMpO1xuICogICAgIGxldCBxdWF0TWF0ID0gbWF0NC5jcmVhdGUoKTtcbiAqICAgICBxdWF0NC50b01hdDQocXVhdCwgcXVhdE1hdCk7XG4gKiAgICAgbWF0NC5tdWx0aXBseShkZXN0LCBxdWF0TWF0KTtcbiAqICAgICBtYXQ0LnNjYWxlKGRlc3QsIHNjYWxlKVxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdDR9IHEgUm90YXRpb24gcXVhdGVybmlvblxuICogQHBhcmFtIHt2ZWMzfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBzIFNjYWxpbmcgdmVjdG9yXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlKG91dCwgcSwgdiwgcykge1xuICAgIC8vIFF1YXRlcm5pb24gbWF0aFxuICAgIGxldCB4ID0gcVswXSxcbiAgICAgICAgeSA9IHFbMV0sXG4gICAgICAgIHogPSBxWzJdLFxuICAgICAgICB3ID0gcVszXTtcbiAgICBsZXQgeDIgPSB4ICsgeDtcbiAgICBsZXQgeTIgPSB5ICsgeTtcbiAgICBsZXQgejIgPSB6ICsgejtcblxuICAgIGxldCB4eCA9IHggKiB4MjtcbiAgICBsZXQgeHkgPSB4ICogeTI7XG4gICAgbGV0IHh6ID0geCAqIHoyO1xuICAgIGxldCB5eSA9IHkgKiB5MjtcbiAgICBsZXQgeXogPSB5ICogejI7XG4gICAgbGV0IHp6ID0geiAqIHoyO1xuICAgIGxldCB3eCA9IHcgKiB4MjtcbiAgICBsZXQgd3kgPSB3ICogeTI7XG4gICAgbGV0IHd6ID0gdyAqIHoyO1xuICAgIGxldCBzeCA9IHNbMF07XG4gICAgbGV0IHN5ID0gc1sxXTtcbiAgICBsZXQgc3ogPSBzWzJdO1xuXG4gICAgb3V0WzBdID0gKDEgLSAoeXkgKyB6eikpICogc3g7XG4gICAgb3V0WzFdID0gKHh5ICsgd3opICogc3g7XG4gICAgb3V0WzJdID0gKHh6IC0gd3kpICogc3g7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAoeHkgLSB3eikgKiBzeTtcbiAgICBvdXRbNV0gPSAoMSAtICh4eCArIHp6KSkgKiBzeTtcbiAgICBvdXRbNl0gPSAoeXogKyB3eCkgKiBzeTtcbiAgICBvdXRbN10gPSAwO1xuICAgIG91dFs4XSA9ICh4eiArIHd5KSAqIHN6O1xuICAgIG91dFs5XSA9ICh5eiAtIHd4KSAqIHN6O1xuICAgIG91dFsxMF0gPSAoMSAtICh4eCArIHl5KSkgKiBzejtcbiAgICBvdXRbMTFdID0gMDtcbiAgICBvdXRbMTJdID0gdlswXTtcbiAgICBvdXRbMTNdID0gdlsxXTtcbiAgICBvdXRbMTRdID0gdlsyXTtcbiAgICBvdXRbMTVdID0gMTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyBhIDR4NCBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdH0gcSBRdWF0ZXJuaW9uIHRvIGNyZWF0ZSBtYXRyaXggZnJvbVxuICpcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21RdWF0KG91dCwgcSkge1xuICAgIGxldCB4ID0gcVswXSxcbiAgICAgICAgeSA9IHFbMV0sXG4gICAgICAgIHogPSBxWzJdLFxuICAgICAgICB3ID0gcVszXTtcbiAgICBsZXQgeDIgPSB4ICsgeDtcbiAgICBsZXQgeTIgPSB5ICsgeTtcbiAgICBsZXQgejIgPSB6ICsgejtcblxuICAgIGxldCB4eCA9IHggKiB4MjtcbiAgICBsZXQgeXggPSB5ICogeDI7XG4gICAgbGV0IHl5ID0geSAqIHkyO1xuICAgIGxldCB6eCA9IHogKiB4MjtcbiAgICBsZXQgenkgPSB6ICogeTI7XG4gICAgbGV0IHp6ID0geiAqIHoyO1xuICAgIGxldCB3eCA9IHcgKiB4MjtcbiAgICBsZXQgd3kgPSB3ICogeTI7XG4gICAgbGV0IHd6ID0gdyAqIHoyO1xuXG4gICAgb3V0WzBdID0gMSAtIHl5IC0geno7XG4gICAgb3V0WzFdID0geXggKyB3ejtcbiAgICBvdXRbMl0gPSB6eCAtIHd5O1xuICAgIG91dFszXSA9IDA7XG5cbiAgICBvdXRbNF0gPSB5eCAtIHd6O1xuICAgIG91dFs1XSA9IDEgLSB4eCAtIHp6O1xuICAgIG91dFs2XSA9IHp5ICsgd3g7XG4gICAgb3V0WzddID0gMDtcblxuICAgIG91dFs4XSA9IHp4ICsgd3k7XG4gICAgb3V0WzldID0genkgLSB3eDtcbiAgICBvdXRbMTBdID0gMSAtIHh4IC0geXk7XG4gICAgb3V0WzExXSA9IDA7XG5cbiAgICBvdXRbMTJdID0gMDtcbiAgICBvdXRbMTNdID0gMDtcbiAgICBvdXRbMTRdID0gMDtcbiAgICBvdXRbMTVdID0gMTtcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGZvdnkgVmVydGljYWwgZmllbGQgb2YgdmlldyBpbiByYWRpYW5zXG4gKiBAcGFyYW0ge251bWJlcn0gYXNwZWN0IEFzcGVjdCByYXRpby4gdHlwaWNhbGx5IHZpZXdwb3J0IHdpZHRoL2hlaWdodFxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBlcnNwZWN0aXZlKG91dCwgZm92eSwgYXNwZWN0LCBuZWFyLCBmYXIpIHtcbiAgICBsZXQgZiA9IDEuMCAvIE1hdGgudGFuKGZvdnkgLyAyKTtcbiAgICBsZXQgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xuICAgIG91dFswXSA9IGYgLyBhc3BlY3Q7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMDtcbiAgICBvdXRbNV0gPSBmO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAwO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzEwXSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICAgIG91dFsxMV0gPSAtMTtcbiAgICBvdXRbMTJdID0gMDtcbiAgICBvdXRbMTNdID0gMDtcbiAgICBvdXRbMTRdID0gMiAqIGZhciAqIG5lYXIgKiBuZjtcbiAgICBvdXRbMTVdID0gMDtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIG9ydGhvZ29uYWwgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgTGVmdCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IHJpZ2h0IFJpZ2h0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gYm90dG9tIEJvdHRvbSBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IHRvcCBUb3AgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvcnRobyhvdXQsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKSB7XG4gICAgbGV0IGxyID0gMSAvIChsZWZ0IC0gcmlnaHQpO1xuICAgIGxldCBidCA9IDEgLyAoYm90dG9tIC0gdG9wKTtcbiAgICBsZXQgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xuICAgIG91dFswXSA9IC0yICogbHI7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzRdID0gMDtcbiAgICBvdXRbNV0gPSAtMiAqIGJ0O1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAwO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzEwXSA9IDIgKiBuZjtcbiAgICBvdXRbMTFdID0gMDtcbiAgICBvdXRbMTJdID0gKGxlZnQgKyByaWdodCkgKiBscjtcbiAgICBvdXRbMTNdID0gKHRvcCArIGJvdHRvbSkgKiBidDtcbiAgICBvdXRbMTRdID0gKGZhciArIG5lYXIpICogbmY7XG4gICAgb3V0WzE1XSA9IDE7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBtYXRyaXggdGhhdCBtYWtlcyBzb21ldGhpbmcgbG9vayBhdCBzb21ldGhpbmcgZWxzZS5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge3ZlYzN9IGV5ZSBQb3NpdGlvbiBvZiB0aGUgdmlld2VyXG4gKiBAcGFyYW0ge3ZlYzN9IHRhcmdldCBQb2ludCB0aGUgdmlld2VyIGlzIGxvb2tpbmcgYXRcbiAqIEBwYXJhbSB7dmVjM30gdXAgdmVjMyBwb2ludGluZyB1cFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFyZ2V0VG8ob3V0LCBleWUsIHRhcmdldCwgdXApIHtcbiAgICBsZXQgZXlleCA9IGV5ZVswXSxcbiAgICAgICAgZXlleSA9IGV5ZVsxXSxcbiAgICAgICAgZXlleiA9IGV5ZVsyXSxcbiAgICAgICAgdXB4ID0gdXBbMF0sXG4gICAgICAgIHVweSA9IHVwWzFdLFxuICAgICAgICB1cHogPSB1cFsyXTtcblxuICAgIGxldCB6MCA9IGV5ZXggLSB0YXJnZXRbMF0sXG4gICAgICAgIHoxID0gZXlleSAtIHRhcmdldFsxXSxcbiAgICAgICAgejIgPSBleWV6IC0gdGFyZ2V0WzJdO1xuXG4gICAgbGV0IGxlbiA9IHowICogejAgKyB6MSAqIHoxICsgejIgKiB6MjtcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgIC8vIGV5ZSBhbmQgdGFyZ2V0IGFyZSBpbiB0aGUgc2FtZSBwb3NpdGlvblxuICAgICAgICB6MiA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgICAgICB6MCAqPSBsZW47XG4gICAgICAgIHoxICo9IGxlbjtcbiAgICAgICAgejIgKj0gbGVuO1xuICAgIH1cblxuICAgIGxldCB4MCA9IHVweSAqIHoyIC0gdXB6ICogejEsXG4gICAgICAgIHgxID0gdXB6ICogejAgLSB1cHggKiB6MixcbiAgICAgICAgeDIgPSB1cHggKiB6MSAtIHVweSAqIHowO1xuXG4gICAgbGVuID0geDAgKiB4MCArIHgxICogeDEgKyB4MiAqIHgyO1xuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgLy8gdXAgYW5kIHogYXJlIHBhcmFsbGVsXG4gICAgICAgIGlmICh1cHopIHtcbiAgICAgICAgICAgIHVweCArPSAxZS02O1xuICAgICAgICB9IGVsc2UgaWYgKHVweSkge1xuICAgICAgICAgICAgdXB6ICs9IDFlLTY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cHkgKz0gMWUtNjtcbiAgICAgICAgfVxuICAgICAgICAoeDAgPSB1cHkgKiB6MiAtIHVweiAqIHoxKSwgKHgxID0gdXB6ICogejAgLSB1cHggKiB6MiksICh4MiA9IHVweCAqIHoxIC0gdXB5ICogejApO1xuXG4gICAgICAgIGxlbiA9IHgwICogeDAgKyB4MSAqIHgxICsgeDIgKiB4MjtcbiAgICB9XG5cbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gICAgeDAgKj0gbGVuO1xuICAgIHgxICo9IGxlbjtcbiAgICB4MiAqPSBsZW47XG5cbiAgICBvdXRbMF0gPSB4MDtcbiAgICBvdXRbMV0gPSB4MTtcbiAgICBvdXRbMl0gPSB4MjtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IHoxICogeDIgLSB6MiAqIHgxO1xuICAgIG91dFs1XSA9IHoyICogeDAgLSB6MCAqIHgyO1xuICAgIG91dFs2XSA9IHowICogeDEgLSB6MSAqIHgwO1xuICAgIG91dFs3XSA9IDA7XG4gICAgb3V0WzhdID0gejA7XG4gICAgb3V0WzldID0gejE7XG4gICAgb3V0WzEwXSA9IHoyO1xuICAgIG91dFsxMV0gPSAwO1xuICAgIG91dFsxMl0gPSBleWV4O1xuICAgIG91dFsxM10gPSBleWV5O1xuICAgIG91dFsxNF0gPSBleWV6O1xuICAgIG91dFsxNV0gPSAxO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQWRkcyB0d28gbWF0NCdzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHttYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICAgIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICAgIG91dFs0XSA9IGFbNF0gKyBiWzRdO1xuICAgIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xuICAgIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xuICAgIG91dFs3XSA9IGFbN10gKyBiWzddO1xuICAgIG91dFs4XSA9IGFbOF0gKyBiWzhdO1xuICAgIG91dFs5XSA9IGFbOV0gKyBiWzldO1xuICAgIG91dFsxMF0gPSBhWzEwXSArIGJbMTBdO1xuICAgIG91dFsxMV0gPSBhWzExXSArIGJbMTFdO1xuICAgIG91dFsxMl0gPSBhWzEyXSArIGJbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXSArIGJbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XSArIGJbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XSArIGJbMTVdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGFcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge21hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcbiAgICBvdXRbNV0gPSBhWzVdIC0gYls1XTtcbiAgICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcbiAgICBvdXRbN10gPSBhWzddIC0gYls3XTtcbiAgICBvdXRbOF0gPSBhWzhdIC0gYls4XTtcbiAgICBvdXRbOV0gPSBhWzldIC0gYls5XTtcbiAgICBvdXRbMTBdID0gYVsxMF0gLSBiWzEwXTtcbiAgICBvdXRbMTFdID0gYVsxMV0gLSBiWzExXTtcbiAgICBvdXRbMTJdID0gYVsxMl0gLSBiWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM10gLSBiWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF0gLSBiWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV0gLSBiWzE1XTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGI7XG4gICAgb3V0WzFdID0gYVsxXSAqIGI7XG4gICAgb3V0WzJdID0gYVsyXSAqIGI7XG4gICAgb3V0WzNdID0gYVszXSAqIGI7XG4gICAgb3V0WzRdID0gYVs0XSAqIGI7XG4gICAgb3V0WzVdID0gYVs1XSAqIGI7XG4gICAgb3V0WzZdID0gYVs2XSAqIGI7XG4gICAgb3V0WzddID0gYVs3XSAqIGI7XG4gICAgb3V0WzhdID0gYVs4XSAqIGI7XG4gICAgb3V0WzldID0gYVs5XSAqIGI7XG4gICAgb3V0WzEwXSA9IGFbMTBdICogYjtcbiAgICBvdXRbMTFdID0gYVsxMV0gKiBiO1xuICAgIG91dFsxMl0gPSBhWzEyXSAqIGI7XG4gICAgb3V0WzEzXSA9IGFbMTNdICogYjtcbiAgICBvdXRbMTRdID0gYVsxNF0gKiBiO1xuICAgIG91dFsxNV0gPSBhWzE1XSAqIGI7XG4gICAgcmV0dXJuIG91dDtcbn1cbiIsImltcG9ydCAqIGFzIHZlYzQgZnJvbSAnLi9WZWM0RnVuYy5qcyc7XG5cbi8qKlxuICogU2V0IGEgcXVhdCB0byB0aGUgaWRlbnRpdHkgcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gICAgb3V0WzBdID0gMDtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNldHMgYSBxdWF0IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFuZCByb3RhdGlvbiBheGlzLFxuICogdGhlbiByZXR1cm5zIGl0LlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHt2ZWMzfSBheGlzIHRoZSBheGlzIGFyb3VuZCB3aGljaCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIGluIHJhZGlhbnNcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRBeGlzQW5nbGUob3V0LCBheGlzLCByYWQpIHtcbiAgICByYWQgPSByYWQgKiAwLjU7XG4gICAgbGV0IHMgPSBNYXRoLnNpbihyYWQpO1xuICAgIG91dFswXSA9IHMgKiBheGlzWzBdO1xuICAgIG91dFsxXSA9IHMgKiBheGlzWzFdO1xuICAgIG91dFsyXSA9IHMgKiBheGlzWzJdO1xuICAgIG91dFszXSA9IE1hdGguY29zKHJhZCk7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBxdWF0c1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXSxcbiAgICAgICAgYXcgPSBhWzNdO1xuICAgIGxldCBieCA9IGJbMF0sXG4gICAgICAgIGJ5ID0gYlsxXSxcbiAgICAgICAgYnogPSBiWzJdLFxuICAgICAgICBidyA9IGJbM107XG5cbiAgICBvdXRbMF0gPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5O1xuICAgIG91dFsxXSA9IGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYno7XG4gICAgb3V0WzJdID0gYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieDtcbiAgICBvdXRbM10gPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBYIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWChvdXQsIGEsIHJhZCkge1xuICAgIHJhZCAqPSAwLjU7XG5cbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXSxcbiAgICAgICAgYXcgPSBhWzNdO1xuICAgIGxldCBieCA9IE1hdGguc2luKHJhZCksXG4gICAgICAgIGJ3ID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dFswXSA9IGF4ICogYncgKyBhdyAqIGJ4O1xuICAgIG91dFsxXSA9IGF5ICogYncgKyBheiAqIGJ4O1xuICAgIG91dFsyXSA9IGF6ICogYncgLSBheSAqIGJ4O1xuICAgIG91dFszXSA9IGF3ICogYncgLSBheCAqIGJ4O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBZIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWShvdXQsIGEsIHJhZCkge1xuICAgIHJhZCAqPSAwLjU7XG5cbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXSxcbiAgICAgICAgYXcgPSBhWzNdO1xuICAgIGxldCBieSA9IE1hdGguc2luKHJhZCksXG4gICAgICAgIGJ3ID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dFswXSA9IGF4ICogYncgLSBheiAqIGJ5O1xuICAgIG91dFsxXSA9IGF5ICogYncgKyBhdyAqIGJ5O1xuICAgIG91dFsyXSA9IGF6ICogYncgKyBheCAqIGJ5O1xuICAgIG91dFszXSA9IGF3ICogYncgLSBheSAqIGJ5O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBaIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWihvdXQsIGEsIHJhZCkge1xuICAgIHJhZCAqPSAwLjU7XG5cbiAgICBsZXQgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXSxcbiAgICAgICAgYXcgPSBhWzNdO1xuICAgIGxldCBieiA9IE1hdGguc2luKHJhZCksXG4gICAgICAgIGJ3ID0gTWF0aC5jb3MocmFkKTtcblxuICAgIG91dFswXSA9IGF4ICogYncgKyBheSAqIGJ6O1xuICAgIG91dFsxXSA9IGF5ICogYncgLSBheCAqIGJ6O1xuICAgIG91dFsyXSA9IGF6ICogYncgKyBhdyAqIGJ6O1xuICAgIG91dFszXSA9IGF3ICogYncgLSBheiAqIGJ6O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBzcGhlcmljYWwgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgICAvLyBiZW5jaG1hcmtzOlxuICAgIC8vICAgIGh0dHA6Ly9qc3BlcmYuY29tL3F1YXRlcm5pb24tc2xlcnAtaW1wbGVtZW50YXRpb25zXG4gICAgbGV0IGF4ID0gYVswXSxcbiAgICAgICAgYXkgPSBhWzFdLFxuICAgICAgICBheiA9IGFbMl0sXG4gICAgICAgIGF3ID0gYVszXTtcbiAgICBsZXQgYnggPSBiWzBdLFxuICAgICAgICBieSA9IGJbMV0sXG4gICAgICAgIGJ6ID0gYlsyXSxcbiAgICAgICAgYncgPSBiWzNdO1xuXG4gICAgbGV0IG9tZWdhLCBjb3NvbSwgc2lub20sIHNjYWxlMCwgc2NhbGUxO1xuXG4gICAgLy8gY2FsYyBjb3NpbmVcbiAgICBjb3NvbSA9IGF4ICogYnggKyBheSAqIGJ5ICsgYXogKiBieiArIGF3ICogYnc7XG4gICAgLy8gYWRqdXN0IHNpZ25zIChpZiBuZWNlc3NhcnkpXG4gICAgaWYgKGNvc29tIDwgMC4wKSB7XG4gICAgICAgIGNvc29tID0gLWNvc29tO1xuICAgICAgICBieCA9IC1ieDtcbiAgICAgICAgYnkgPSAtYnk7XG4gICAgICAgIGJ6ID0gLWJ6O1xuICAgICAgICBidyA9IC1idztcbiAgICB9XG4gICAgLy8gY2FsY3VsYXRlIGNvZWZmaWNpZW50c1xuICAgIGlmICgxLjAgLSBjb3NvbSA+IDAuMDAwMDAxKSB7XG4gICAgICAgIC8vIHN0YW5kYXJkIGNhc2UgKHNsZXJwKVxuICAgICAgICBvbWVnYSA9IE1hdGguYWNvcyhjb3NvbSk7XG4gICAgICAgIHNpbm9tID0gTWF0aC5zaW4ob21lZ2EpO1xuICAgICAgICBzY2FsZTAgPSBNYXRoLnNpbigoMS4wIC0gdCkgKiBvbWVnYSkgLyBzaW5vbTtcbiAgICAgICAgc2NhbGUxID0gTWF0aC5zaW4odCAqIG9tZWdhKSAvIHNpbm9tO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFwiZnJvbVwiIGFuZCBcInRvXCIgcXVhdGVybmlvbnMgYXJlIHZlcnkgY2xvc2VcbiAgICAgICAgLy8gIC4uLiBzbyB3ZSBjYW4gZG8gYSBsaW5lYXIgaW50ZXJwb2xhdGlvblxuICAgICAgICBzY2FsZTAgPSAxLjAgLSB0O1xuICAgICAgICBzY2FsZTEgPSB0O1xuICAgIH1cbiAgICAvLyBjYWxjdWxhdGUgZmluYWwgdmFsdWVzXG4gICAgb3V0WzBdID0gc2NhbGUwICogYXggKyBzY2FsZTEgKiBieDtcbiAgICBvdXRbMV0gPSBzY2FsZTAgKiBheSArIHNjYWxlMSAqIGJ5O1xuICAgIG91dFsyXSA9IHNjYWxlMCAqIGF6ICsgc2NhbGUxICogYno7XG4gICAgb3V0WzNdID0gc2NhbGUwICogYXcgKyBzY2FsZTEgKiBidztcblxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgaW52ZXJzZSBvZiBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBpbnZlcnNlIG9mXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XG4gICAgbGV0IGEwID0gYVswXSxcbiAgICAgICAgYTEgPSBhWzFdLFxuICAgICAgICBhMiA9IGFbMl0sXG4gICAgICAgIGEzID0gYVszXTtcbiAgICBsZXQgZG90ID0gYTAgKiBhMCArIGExICogYTEgKyBhMiAqIGEyICsgYTMgKiBhMztcbiAgICBsZXQgaW52RG90ID0gZG90ID8gMS4wIC8gZG90IDogMDtcblxuICAgIC8vIFRPRE86IFdvdWxkIGJlIGZhc3RlciB0byByZXR1cm4gWzAsMCwwLDBdIGltbWVkaWF0ZWx5IGlmIGRvdCA9PSAwXG5cbiAgICBvdXRbMF0gPSAtYTAgKiBpbnZEb3Q7XG4gICAgb3V0WzFdID0gLWExICogaW52RG90O1xuICAgIG91dFsyXSA9IC1hMiAqIGludkRvdDtcbiAgICBvdXRbM10gPSBhMyAqIGludkRvdDtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbmp1Z2F0ZSBvZiBhIHF1YXRcbiAqIElmIHRoZSBxdWF0ZXJuaW9uIGlzIG5vcm1hbGl6ZWQsIHRoaXMgZnVuY3Rpb24gaXMgZmFzdGVyIHRoYW4gcXVhdC5pbnZlcnNlIGFuZCBwcm9kdWNlcyB0aGUgc2FtZSByZXN1bHQuXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byBjYWxjdWxhdGUgY29uanVnYXRlIG9mXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25qdWdhdGUob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gLWFbMF07XG4gICAgb3V0WzFdID0gLWFbMV07XG4gICAgb3V0WzJdID0gLWFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIDN4MyByb3RhdGlvbiBtYXRyaXguXG4gKlxuICogTk9URTogVGhlIHJlc3VsdGFudCBxdWF0ZXJuaW9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyB5b3Ugc2hvdWxkIGJlIHN1cmVcbiAqIHRvIHJlbm9ybWFsaXplIHRoZSBxdWF0ZXJuaW9uIHlvdXJzZWxmIHdoZXJlIG5lY2Vzc2FyeS5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7bWF0M30gbSByb3RhdGlvbiBtYXRyaXhcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbU1hdDMob3V0LCBtKSB7XG4gICAgLy8gQWxnb3JpdGhtIGluIEtlbiBTaG9lbWFrZSdzIGFydGljbGUgaW4gMTk4NyBTSUdHUkFQSCBjb3Vyc2Ugbm90ZXNcbiAgICAvLyBhcnRpY2xlIFwiUXVhdGVybmlvbiBDYWxjdWx1cyBhbmQgRmFzdCBBbmltYXRpb25cIi5cbiAgICBsZXQgZlRyYWNlID0gbVswXSArIG1bNF0gKyBtWzhdO1xuICAgIGxldCBmUm9vdDtcblxuICAgIGlmIChmVHJhY2UgPiAwLjApIHtcbiAgICAgICAgLy8gfHd8ID4gMS8yLCBtYXkgYXMgd2VsbCBjaG9vc2UgdyA+IDEvMlxuICAgICAgICBmUm9vdCA9IE1hdGguc3FydChmVHJhY2UgKyAxLjApOyAvLyAyd1xuICAgICAgICBvdXRbM10gPSAwLjUgKiBmUm9vdDtcbiAgICAgICAgZlJvb3QgPSAwLjUgLyBmUm9vdDsgLy8gMS8oNHcpXG4gICAgICAgIG91dFswXSA9IChtWzVdIC0gbVs3XSkgKiBmUm9vdDtcbiAgICAgICAgb3V0WzFdID0gKG1bNl0gLSBtWzJdKSAqIGZSb290O1xuICAgICAgICBvdXRbMl0gPSAobVsxXSAtIG1bM10pICogZlJvb3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gfHd8IDw9IDEvMlxuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGlmIChtWzRdID4gbVswXSkgaSA9IDE7XG4gICAgICAgIGlmIChtWzhdID4gbVtpICogMyArIGldKSBpID0gMjtcbiAgICAgICAgbGV0IGogPSAoaSArIDEpICUgMztcbiAgICAgICAgbGV0IGsgPSAoaSArIDIpICUgMztcblxuICAgICAgICBmUm9vdCA9IE1hdGguc3FydChtW2kgKiAzICsgaV0gLSBtW2ogKiAzICsgal0gLSBtW2sgKiAzICsga10gKyAxLjApO1xuICAgICAgICBvdXRbaV0gPSAwLjUgKiBmUm9vdDtcbiAgICAgICAgZlJvb3QgPSAwLjUgLyBmUm9vdDtcbiAgICAgICAgb3V0WzNdID0gKG1baiAqIDMgKyBrXSAtIG1bayAqIDMgKyBqXSkgKiBmUm9vdDtcbiAgICAgICAgb3V0W2pdID0gKG1baiAqIDMgKyBpXSArIG1baSAqIDMgKyBqXSkgKiBmUm9vdDtcbiAgICAgICAgb3V0W2tdID0gKG1bayAqIDMgKyBpXSArIG1baSAqIDMgKyBrXSkgKiBmUm9vdDtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIGV1bGVyIGFuZ2xlIHgsIHksIHouXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3ZlYzN9IGV1bGVyIEFuZ2xlcyB0byByb3RhdGUgYXJvdW5kIGVhY2ggYXhpcyBpbiBkZWdyZWVzLlxuICogQHBhcmFtIHtTdHJpbmd9IG9yZGVyIGRldGFpbGluZyBvcmRlciBvZiBvcGVyYXRpb25zLiBEZWZhdWx0ICdYWVonLlxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXVsZXIob3V0LCBldWxlciwgb3JkZXIgPSAnWVhaJykge1xuICAgIGxldCBzeCA9IE1hdGguc2luKGV1bGVyWzBdICogMC41KTtcbiAgICBsZXQgY3ggPSBNYXRoLmNvcyhldWxlclswXSAqIDAuNSk7XG4gICAgbGV0IHN5ID0gTWF0aC5zaW4oZXVsZXJbMV0gKiAwLjUpO1xuICAgIGxldCBjeSA9IE1hdGguY29zKGV1bGVyWzFdICogMC41KTtcbiAgICBsZXQgc3ogPSBNYXRoLnNpbihldWxlclsyXSAqIDAuNSk7XG4gICAgbGV0IGN6ID0gTWF0aC5jb3MoZXVsZXJbMl0gKiAwLjUpO1xuXG4gICAgaWYgKG9yZGVyID09PSAnWFlaJykge1xuICAgICAgICBvdXRbMF0gPSBzeCAqIGN5ICogY3ogKyBjeCAqIHN5ICogc3o7XG4gICAgICAgIG91dFsxXSA9IGN4ICogc3kgKiBjeiAtIHN4ICogY3kgKiBzejtcbiAgICAgICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6ICsgc3ggKiBzeSAqIGN6O1xuICAgICAgICBvdXRbM10gPSBjeCAqIGN5ICogY3ogLSBzeCAqIHN5ICogc3o7XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1lYWicpIHtcbiAgICAgICAgb3V0WzBdID0gc3ggKiBjeSAqIGN6ICsgY3ggKiBzeSAqIHN6O1xuICAgICAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogLSBzeCAqIGN5ICogc3o7XG4gICAgICAgIG91dFsyXSA9IGN4ICogY3kgKiBzeiAtIHN4ICogc3kgKiBjejtcbiAgICAgICAgb3V0WzNdID0gY3ggKiBjeSAqIGN6ICsgc3ggKiBzeSAqIHN6O1xuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdaWFknKSB7XG4gICAgICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiAtIGN4ICogc3kgKiBzejtcbiAgICAgICAgb3V0WzFdID0gY3ggKiBzeSAqIGN6ICsgc3ggKiBjeSAqIHN6O1xuICAgICAgICBvdXRbMl0gPSBjeCAqIGN5ICogc3ogKyBzeCAqIHN5ICogY3o7XG4gICAgICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiAtIHN4ICogc3kgKiBzejtcbiAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWllYJykge1xuICAgICAgICBvdXRbMF0gPSBzeCAqIGN5ICogY3ogLSBjeCAqIHN5ICogc3o7XG4gICAgICAgIG91dFsxXSA9IGN4ICogc3kgKiBjeiArIHN4ICogY3kgKiBzejtcbiAgICAgICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6IC0gc3ggKiBzeSAqIGN6O1xuICAgICAgICBvdXRbM10gPSBjeCAqIGN5ICogY3ogKyBzeCAqIHN5ICogc3o7XG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1laWCcpIHtcbiAgICAgICAgb3V0WzBdID0gc3ggKiBjeSAqIGN6ICsgY3ggKiBzeSAqIHN6O1xuICAgICAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogKyBzeCAqIGN5ICogc3o7XG4gICAgICAgIG91dFsyXSA9IGN4ICogY3kgKiBzeiAtIHN4ICogc3kgKiBjejtcbiAgICAgICAgb3V0WzNdID0gY3ggKiBjeSAqIGN6IC0gc3ggKiBzeSAqIHN6O1xuICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdYWlknKSB7XG4gICAgICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiAtIGN4ICogc3kgKiBzejtcbiAgICAgICAgb3V0WzFdID0gY3ggKiBzeSAqIGN6IC0gc3ggKiBjeSAqIHN6O1xuICAgICAgICBvdXRbMl0gPSBjeCAqIGN5ICogc3ogKyBzeCAqIHN5ICogY3o7XG4gICAgICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiArIHN4ICogc3kgKiBzejtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBxdWF0IHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgc291cmNlIHF1YXRlcm5pb25cbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgY29weSA9IHZlYzQuY29weTtcblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBxdWF0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHNldCA9IHZlYzQuc2V0O1xuXG4vKipcbiAqIEFkZHMgdHdvIHF1YXQnc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGFkZCA9IHZlYzQuYWRkO1xuXG4vKipcbiAqIFNjYWxlcyBhIHF1YXQgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBzY2FsZSA9IHZlYzQuc2NhbGU7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHF1YXQnc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBkb3QgPSB2ZWM0LmRvdDtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHF1YXQnc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGNvbnN0IGxlcnAgPSB2ZWM0LmxlcnA7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuZXhwb3J0IGNvbnN0IGxlbmd0aCA9IHZlYzQubGVuZ3RoO1xuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0ZXJuaW9uIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBub3JtYWxpemUgPSB2ZWM0Lm5vcm1hbGl6ZTtcbiIsImNvbnN0IEVQU0lMT04gPSAwLjAwMDAwMTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVuZ3RoKGEpIHtcbiAgICBsZXQgeCA9IGFbMF07XG4gICAgbGV0IHkgPSBhWzFdO1xuICAgIGxldCB6ID0gYVsyXTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG59XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzMgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzIHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeikge1xuICAgIG91dFswXSA9IHg7XG4gICAgb3V0WzFdID0geTtcbiAgICBvdXRbMl0gPSB6O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQWRkcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU3VidHJhY3RzIHZlY3RvciBiIGZyb20gdmVjdG9yIGFcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKiBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gKiBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gKiBiWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogRGl2aWRlcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGl2aWRlKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gLyBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gLyBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gLyBiWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2NhbGVzIGEgdmVjMyBieSBhIHNjYWxhciBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICogYjtcbiAgICBvdXRbMV0gPSBhWzFdICogYjtcbiAgICBvdXRbMl0gPSBhWzJdICogYjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2UoYSwgYikge1xuICAgIGxldCB4ID0gYlswXSAtIGFbMF07XG4gICAgbGV0IHkgPSBiWzFdIC0gYVsxXTtcbiAgICBsZXQgeiA9IGJbMl0gLSBhWzJdO1xuICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkRGlzdGFuY2UoYSwgYikge1xuICAgIGxldCB4ID0gYlswXSAtIGFbMF07XG4gICAgbGV0IHkgPSBiWzFdIC0gYVsxXTtcbiAgICBsZXQgeiA9IGJbMl0gLSBhWzJdO1xuICAgIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWRMZW5ndGgoYSkge1xuICAgIGxldCB4ID0gYVswXTtcbiAgICBsZXQgeSA9IGFbMV07XG4gICAgbGV0IHogPSBhWzJdO1xuICAgIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG59XG5cbi8qKlxuICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBuZWdhdGVcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5lZ2F0ZShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSAtYVswXTtcbiAgICBvdXRbMV0gPSAtYVsxXTtcbiAgICBvdXRbMl0gPSAtYVsyXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gaW52ZXJ0XG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKG91dCwgYSkge1xuICAgIG91dFswXSA9IDEuMCAvIGFbMF07XG4gICAgb3V0WzFdID0gMS4wIC8gYVsxXTtcbiAgICBvdXRbMl0gPSAxLjAgLyBhWzJdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICAgIGxldCB4ID0gYVswXTtcbiAgICBsZXQgeSA9IGFbMV07XG4gICAgbGV0IHogPSBhWzJdO1xuICAgIGxldCBsZW4gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG4gICAgaWYgKGxlbiA+IDApIHtcbiAgICAgICAgLy9UT0RPOiBldmFsdWF0ZSB1c2Ugb2YgZ2xtX2ludnNxcnQgaGVyZT9cbiAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgIH1cbiAgICBvdXRbMF0gPSBhWzBdICogbGVuO1xuICAgIG91dFsxXSA9IGFbMV0gKiBsZW47XG4gICAgb3V0WzJdID0gYVsyXSAqIGxlbjtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXTtcbn1cblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3Mob3V0LCBhLCBiKSB7XG4gICAgbGV0IGF4ID0gYVswXSxcbiAgICAgICAgYXkgPSBhWzFdLFxuICAgICAgICBheiA9IGFbMl07XG4gICAgbGV0IGJ4ID0gYlswXSxcbiAgICAgICAgYnkgPSBiWzFdLFxuICAgICAgICBieiA9IGJbMl07XG5cbiAgICBvdXRbMF0gPSBheSAqIGJ6IC0gYXogKiBieTtcbiAgICBvdXRbMV0gPSBheiAqIGJ4IC0gYXggKiBiejtcbiAgICBvdXRbMl0gPSBheCAqIGJ5IC0gYXkgKiBieDtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgICBsZXQgYXggPSBhWzBdO1xuICAgIGxldCBheSA9IGFbMV07XG4gICAgbGV0IGF6ID0gYVsyXTtcbiAgICBvdXRbMF0gPSBheCArIHQgKiAoYlswXSAtIGF4KTtcbiAgICBvdXRbMV0gPSBheSArIHQgKiAoYlsxXSAtIGF5KTtcbiAgICBvdXRbMl0gPSBheiArIHQgKiAoYlsyXSAtIGF6KTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIG1hdDQuXG4gKiA0dGggdmVjdG9yIGNvbXBvbmVudCBpcyBpbXBsaWNpdGx5ICcxJ1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7bWF0NH0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XG4gICAgbGV0IHggPSBhWzBdLFxuICAgICAgICB5ID0gYVsxXSxcbiAgICAgICAgeiA9IGFbMl07XG4gICAgbGV0IHcgPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV07XG4gICAgdyA9IHcgfHwgMS4wO1xuICAgIG91dFswXSA9IChtWzBdICogeCArIG1bNF0gKiB5ICsgbVs4XSAqIHogKyBtWzEyXSkgLyB3O1xuICAgIG91dFsxXSA9IChtWzFdICogeCArIG1bNV0gKiB5ICsgbVs5XSAqIHogKyBtWzEzXSkgLyB3O1xuICAgIG91dFsyXSA9IChtWzJdICogeCArIG1bNl0gKiB5ICsgbVsxMF0gKiB6ICsgbVsxNF0pIC8gdztcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNhbWUgYXMgYWJvdmUgYnV0IGRvZXNuJ3QgYXBwbHkgdHJhbnNsYXRpb24uXG4gKiBVc2VmdWwgZm9yIHJheXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZVJvdGF0ZU1hdDQob3V0LCBhLCBtKSB7XG4gICAgbGV0IHggPSBhWzBdLFxuICAgICAgICB5ID0gYVsxXSxcbiAgICAgICAgeiA9IGFbMl07XG4gICAgbGV0IHcgPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV07XG4gICAgdyA9IHcgfHwgMS4wO1xuICAgIG91dFswXSA9IChtWzBdICogeCArIG1bNF0gKiB5ICsgbVs4XSAqIHopIC8gdztcbiAgICBvdXRbMV0gPSAobVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6KSAvIHc7XG4gICAgb3V0WzJdID0gKG1bMl0gKiB4ICsgbVs2XSAqIHkgKyBtWzEwXSAqIHopIC8gdztcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIG1hdDMuXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHttYXQzfSBtIHRoZSAzeDMgbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQzKG91dCwgYSwgbSkge1xuICAgIGxldCB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV0sXG4gICAgICAgIHogPSBhWzJdO1xuICAgIG91dFswXSA9IHggKiBtWzBdICsgeSAqIG1bM10gKyB6ICogbVs2XTtcbiAgICBvdXRbMV0gPSB4ICogbVsxXSArIHkgKiBtWzRdICsgeiAqIG1bN107XG4gICAgb3V0WzJdID0geCAqIG1bMl0gKyB5ICogbVs1XSArIHogKiBtWzhdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjMyB3aXRoIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7cXVhdH0gcSBxdWF0ZXJuaW9uIHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1RdWF0KG91dCwgYSwgcSkge1xuICAgIC8vIGJlbmNobWFya3M6IGh0dHBzOi8vanNwZXJmLmNvbS9xdWF0ZXJuaW9uLXRyYW5zZm9ybS12ZWMzLWltcGxlbWVudGF0aW9ucy1maXhlZFxuXG4gICAgbGV0IHggPSBhWzBdLFxuICAgICAgICB5ID0gYVsxXSxcbiAgICAgICAgeiA9IGFbMl07XG4gICAgbGV0IHF4ID0gcVswXSxcbiAgICAgICAgcXkgPSBxWzFdLFxuICAgICAgICBxeiA9IHFbMl0sXG4gICAgICAgIHF3ID0gcVszXTtcblxuICAgIGxldCB1dnggPSBxeSAqIHogLSBxeiAqIHk7XG4gICAgbGV0IHV2eSA9IHF6ICogeCAtIHF4ICogejtcbiAgICBsZXQgdXZ6ID0gcXggKiB5IC0gcXkgKiB4O1xuXG4gICAgbGV0IHV1dnggPSBxeSAqIHV2eiAtIHF6ICogdXZ5O1xuICAgIGxldCB1dXZ5ID0gcXogKiB1dnggLSBxeCAqIHV2ejtcbiAgICBsZXQgdXV2eiA9IHF4ICogdXZ5IC0gcXkgKiB1dng7XG5cbiAgICBsZXQgdzIgPSBxdyAqIDI7XG4gICAgdXZ4ICo9IHcyO1xuICAgIHV2eSAqPSB3MjtcbiAgICB1dnogKj0gdzI7XG5cbiAgICB1dXZ4ICo9IDI7XG4gICAgdXV2eSAqPSAyO1xuICAgIHV1dnogKj0gMjtcblxuICAgIG91dFswXSA9IHggKyB1dnggKyB1dXZ4O1xuICAgIG91dFsxXSA9IHkgKyB1dnkgKyB1dXZ5O1xuICAgIG91dFsyXSA9IHogKyB1dnogKyB1dXZ6O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBhbmdsZSBiZXR3ZWVuIHR3byAzRCB2ZWN0b3JzXG4gKiBAcGFyYW0ge3ZlYzN9IGEgVGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiBUaGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBhbmdsZSBpbiByYWRpYW5zXG4gKi9cbmV4cG9ydCBjb25zdCBhbmdsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgdGVtcEEgPSBbMCwgMCwgMF07XG4gICAgY29uc3QgdGVtcEIgPSBbMCwgMCwgMF07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgY29weSh0ZW1wQSwgYSk7XG4gICAgICAgIGNvcHkodGVtcEIsIGIpO1xuXG4gICAgICAgIG5vcm1hbGl6ZSh0ZW1wQSwgdGVtcEEpO1xuICAgICAgICBub3JtYWxpemUodGVtcEIsIHRlbXBCKTtcblxuICAgICAgICBsZXQgY29zaW5lID0gZG90KHRlbXBBLCB0ZW1wQik7XG5cbiAgICAgICAgaWYgKGNvc2luZSA+IDEuMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gZWxzZSBpZiAoY29zaW5lIDwgLTEuMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguUEk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hY29zKGNvc2luZSk7XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTtcblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgVGhlIGZpcnN0IHZlY3Rvci5cbiAqIEBwYXJhbSB7dmVjM30gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xuICAgIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXTtcbn1cbiIsImNvbnN0IEVQU0lMT04gPSAwLjAwMDAwMTtcblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgdmVjNCB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgc291cmNlIHZlY3RvclxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICBvdXRbM10gPSBhWzNdO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNCB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5LCB6LCB3KSB7XG4gICAgb3V0WzBdID0geDtcbiAgICBvdXRbMV0gPSB5O1xuICAgIG91dFsyXSA9IHo7XG4gICAgb3V0WzNdID0gdztcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIEFkZHMgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgICBvdXRbM10gPSBhWzNdICsgYlszXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG4vKipcbiAqIFNjYWxlcyBhIHZlYzQgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAqIGI7XG4gICAgb3V0WzFdID0gYVsxXSAqIGI7XG4gICAgb3V0WzJdID0gYVsyXSAqIGI7XG4gICAgb3V0WzNdID0gYVszXSAqIGI7XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGVuZ3RoKGEpIHtcbiAgICBsZXQgeCA9IGFbMF07XG4gICAgbGV0IHkgPSBhWzFdO1xuICAgIGxldCB6ID0gYVsyXTtcbiAgICBsZXQgdyA9IGFbM107XG4gICAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdyk7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICAgIGxldCB4ID0gYVswXTtcbiAgICBsZXQgeSA9IGFbMV07XG4gICAgbGV0IHogPSBhWzJdO1xuICAgIGxldCB3ID0gYVszXTtcbiAgICBsZXQgbGVuID0geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XG4gICAgaWYgKGxlbiA+IDApIHtcbiAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgIH1cbiAgICBvdXRbMF0gPSB4ICogbGVuO1xuICAgIG91dFsxXSA9IHkgKiBsZW47XG4gICAgb3V0WzJdID0geiAqIGxlbjtcbiAgICBvdXRbM10gPSB3ICogbGVuO1xuICAgIHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZG90KGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdICsgYVszXSAqIGJbM107XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsZXJwKG91dCwgYSwgYiwgdCkge1xuICAgIGxldCBheCA9IGFbMF07XG4gICAgbGV0IGF5ID0gYVsxXTtcbiAgICBsZXQgYXogPSBhWzJdO1xuICAgIGxldCBhdyA9IGFbM107XG4gICAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XG4gICAgb3V0WzFdID0gYXkgKyB0ICogKGJbMV0gLSBheSk7XG4gICAgb3V0WzJdID0gYXogKyB0ICogKGJbMl0gLSBheik7XG4gICAgb3V0WzNdID0gYXcgKyB0ICogKGJbM10gLSBhdyk7XG4gICAgcmV0dXJuIG91dDtcbn1cbiIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IChcIjAwZTgxYWJhZDJiOTc5NWJjM2RlXCIpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyJdLCJuYW1lcyI6WyJfd2luIiwiX2RvYyIsIl9kb2NFbGVtZW50IiwiX3BsdWdpbkluaXR0ZWQiLCJfdGVtcERpdiIsIl9yZWNlbnRTZXR0ZXJQbHVnaW4iLCJfcmV2ZXJ0aW5nIiwiX3N1cHBvcnRzM0QiLCJfdHJhbnNmb3JtUHJvcHMiLCJfUkFEMkRFRyIsIk1hdGgiLCJQSSIsIl9ERUcyUkFEIiwiX2F0YW4yIiwiYXRhbjIiLCJfY2Fwc0V4cCIsIl9ob3Jpem9udGFsRXhwIiwiX2NvbXBsZXhFeHAiLCJfcHJvcGVydHlBbGlhc2VzIiwiYXV0b0FscGhhIiwic2NhbGUiLCJhbHBoYSIsIl9yZW5kZXJDU1NQcm9wIiwicmF0aW8iLCJkYXRhIiwic2V0IiwidCIsInAiLCJyb3VuZCIsInMiLCJjIiwidSIsIl9yZW5kZXJQcm9wV2l0aEVuZCIsImUiLCJfcmVuZGVyQ1NTUHJvcFdpdGhCZWdpbm5pbmciLCJiIiwiX3JlbmRlclJvdW5kZWRDU1NQcm9wIiwidmFsdWUiLCJfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSIsIl9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kIiwiX3NldHRlckNTU1N0eWxlIiwidGFyZ2V0IiwicHJvcGVydHkiLCJzdHlsZSIsIl9zZXR0ZXJDU1NQcm9wIiwic2V0UHJvcGVydHkiLCJfc2V0dGVyVHJhbnNmb3JtIiwiX2dzYXAiLCJfc2V0dGVyU2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJfc2V0dGVyU2NhbGVXaXRoUmVuZGVyIiwiY2FjaGUiLCJyZW5kZXJUcmFuc2Zvcm0iLCJfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciIsIl90cmFuc2Zvcm1Qcm9wIiwiX3RyYW5zZm9ybU9yaWdpblByb3AiLCJfc2F2ZVN0eWxlIiwiX3RoaXMiLCJ0aGlzIiwidGZtIiwiaW5kZXhPZiIsInNwbGl0IiwiZm9yRWFjaCIsImEiLCJfZ2V0IiwieCIsInN2ZyIsImdldEF0dHJpYnV0ZSIsInByb3BzIiwicHVzaCIsIl9yZW1vdmVJbmRlcGVuZGVudFRyYW5zZm9ybXMiLCJ0cmFuc2xhdGUiLCJyZW1vdmVQcm9wZXJ0eSIsIl9yZXZlcnRTdHlsZSIsImkiLCJsZW5ndGgiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJzZXRBdHRyaWJ1dGUiLCJpc1N0YXJ0IiwidW5jYWNoZSIsIl9nZXRTdHlsZVNhdmVyIiwicHJvcGVydGllcyIsInNhdmVyIiwicmV2ZXJ0Iiwic2F2ZSIsIl9jcmVhdGVFbGVtZW50IiwidHlwZSIsIm5zIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlRWxlbWVudCIsIl9nZXRDb21wdXRlZFByb3BlcnR5Iiwic2tpcFByZWZpeEZhbGxiYWNrIiwiY3MiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIl9jaGVja1Byb3BQcmVmaXgiLCJfcHJlZml4ZXMiLCJlbGVtZW50IiwicHJlZmVyUHJlZml4IiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzdWJzdHIiLCJfaW5pdENvcmUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImNzc1RleHQiLCJnc2FwIiwiX2dldEJCb3hIYWNrIiwic3dhcElmUG9zc2libGUiLCJiYm94Iiwib3duZXJTVkdFbGVtZW50Iiwib2xkUGFyZW50IiwicGFyZW50Tm9kZSIsIm9sZFNpYmxpbmciLCJuZXh0U2libGluZyIsIm9sZENTUyIsImFwcGVuZENoaWxkIiwiZGlzcGxheSIsImdldEJCb3giLCJfZ3NhcEJCb3giLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmVDaGlsZCIsIl9nZXRBdHRyaWJ1dGVGYWxsYmFja3MiLCJhdHRyaWJ1dGVzQXJyYXkiLCJoYXNBdHRyaWJ1dGUiLCJfZ2V0QkJveCIsImJvdW5kcyIsImVycm9yIiwiY2FsbCIsIndpZHRoIiwiaGVpZ2h0IiwieSIsIl9pc1NWRyIsImdldENUTSIsIl9yZW1vdmVQcm9wZXJ0eSIsInJlbW92ZUF0dHJpYnV0ZSIsIl9hZGROb25Ud2VlbmluZ1BUIiwicGx1Z2luIiwiYmVnaW5uaW5nIiwiZW5kIiwib25seVNldEF0RW5kIiwicHQiLCJQcm9wVHdlZW4iLCJfcHQiLCJfcHJvcHMiLCJfbm9uQ29udmVydGlibGVVbml0cyIsImRlZyIsInJhZCIsInR1cm4iLCJfbm9uU3RhbmRhcmRMYXlvdXRzIiwiZ3JpZCIsImZsZXgiLCJfY29udmVydFRvVW5pdCIsInVuaXQiLCJweCIsInBhcmVudCIsImlzU1ZHIiwiY3VyVmFsdWUiLCJwYXJzZUZsb2F0IiwiY3VyVW5pdCIsInRyaW0iLCJob3Jpem9udGFsIiwidGVzdCIsImlzUm9vdFNWRyIsInRhZ05hbWUiLCJtZWFzdXJlUHJvcGVydHkiLCJhbW91bnQiLCJ0b1BpeGVscyIsInRvUGVyY2VudCIsImJvZHkiLCJ0aW1lIiwiX3RpY2tlciIsIl9yb3VuZCIsInBvc2l0aW9uIiwiX2dldENhY2hlIiwiX3BhcnNlVHJhbnNmb3JtIiwib3JpZ2luIiwiX2ZpcnN0VHdvT25seSIsInpPcmlnaW4iLCJfc3BlY2lhbFByb3BzIiwiX2dldFByb3BlcnR5IiwiX3R3ZWVuQ29tcGxleENTU1N0cmluZyIsInByb3AiLCJzdGFydCIsInJlc3VsdCIsInN0YXJ0VmFsdWVzIiwic3RhcnROdW0iLCJjb2xvciIsInN0YXJ0VmFsdWUiLCJlbmRWYWx1ZSIsImVuZE51bSIsImNodW5rIiwiZW5kVW5pdCIsInN0YXJ0VW5pdCIsIl9yZW5kZXJDb21wbGV4U3RyaW5nIiwiaW5kZXgiLCJtYXRjaEluZGV4IiwiX2NvbG9yU3RyaW5nRmlsdGVyIiwibWF0Y2giLCJfbnVtV2l0aFVuaXRFeHAiLCJzdWJzdHJpbmciLCJfcGFyc2VSZWxhdGl2ZSIsIl9jb25maWciLCJfbmV4dCIsIm0iLCJyIiwiX3JlbEV4cCIsIl9rZXl3b3JkVG9QZXJjZW50IiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwiY2VudGVyIiwiX3JlbmRlckNsZWFyUHJvcHMiLCJ0d2VlbiIsIl90aW1lIiwiX2R1ciIsImNsZWFyVHJhbnNmb3JtcyIsImNsZWFyUHJvcHMiLCJwciIsIl9pZGVudGl0eTJETWF0cml4IiwiX3JvdGF0aW9uYWxQcm9wZXJ0aWVzIiwiX2lzTnVsbFRyYW5zZm9ybSIsIl9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkiLCJtYXRyaXhTdHJpbmciLCJfbnVtRXhwIiwibWFwIiwiX2dldE1hdHJpeCIsImZvcmNlMkQiLCJ0ZW1wIiwiYWRkZWRUb0RPTSIsIm1hdHJpeCIsInRyYW5zZm9ybSIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsImQiLCJmIiwiam9pbiIsIm9mZnNldFBhcmVudCIsIm5leHRFbGVtZW50U2libGluZyIsIl9hcHBseVNWR09yaWdpbiIsIm9yaWdpbklzQWJzb2x1dGUiLCJzbW9vdGgiLCJtYXRyaXhBcnJheSIsInBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvIiwiZGV0ZXJtaW5hbnQiLCJ4T3JpZ2luT2xkIiwieE9yaWdpbiIsInlPcmlnaW5PbGQiLCJ5T3JpZ2luIiwieE9mZnNldE9sZCIsInhPZmZzZXQiLCJ5T2Zmc2V0T2xkIiwieU9mZnNldCIsInR4IiwidHkiLCJvcmlnaW5TcGxpdCIsIkdTQ2FjaGUiLCJ6Iiwicm90YXRpb24iLCJyb3RhdGlvblgiLCJyb3RhdGlvblkiLCJza2V3WCIsInNrZXdZIiwicGVyc3BlY3RpdmUiLCJhbmdsZSIsImNvcyIsInNpbiIsImExMiIsImEyMiIsInQxIiwidDIiLCJ0MyIsImExMyIsImEyMyIsImEzMyIsImE0MiIsImE0MyIsImEzMiIsImludmVydGVkU2NhbGVYIiwicm90YXRlIiwic2xpY2UiLCJzcXJ0IiwiYWJzIiwiZm9yY2VDU1MiLCJ4UGVyY2VudCIsIm9mZnNldFdpZHRoIiwieVBlcmNlbnQiLCJvZmZzZXRIZWlnaHQiLCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZSIsImZvcmNlM0QiLCJfcmVuZGVyU1ZHVHJhbnNmb3JtcyIsIl9yZW5kZXJDU1NUcmFuc2Zvcm1zIiwiX3JlbmRlck5vbjNEVHJhbnNmb3JtcyIsIl9hZGRQeFRyYW5zbGF0ZSIsImdldFVuaXQiLCJfemVyb0RlZyIsIl96ZXJvUHgiLCJfZW5kUGFyZW50aGVzaXMiLCJfcmVmIiwidHJhbnNmb3JtcyIsInVzZTNEIiwiYTExIiwiYTIxIiwiX3JlZjIiLCJ0YW4iLCJfYWRkUm90YXRpb25hbFByb3BUd2VlbiIsImRpcmVjdGlvbiIsImNhcCIsImlzU3RyaW5nIiwiX2lzU3RyaW5nIiwiY2hhbmdlIiwiZmluYWxWYWx1ZSIsIl9hc3NpZ24iLCJzb3VyY2UiLCJfYWRkUmF3VHJhbnNmb3JtUFRzIiwiZW5kQ2FjaGUiLCJzdGFydENhY2hlIiwiX2ZvckVhY2hOYW1lIiwibmFtZSIsImwiLCJzaWRlIiwidmFycyIsImFyZ3VtZW50cyIsImluaXQiLCJwb3NpdGlvbkFuZFNjYWxlIiwiYWxsIiwiQ1NTUGx1Z2luIiwicmVnaXN0ZXIiLCJ0YXJnZXRUZXN0Iiwibm9kZVR5cGUiLCJ0YXJnZXRzIiwic3BlY2lhbFByb3AiLCJyZWxhdGl2ZSIsImlzVHJhbnNmb3JtUmVsYXRlZCIsInRyYW5zZm9ybVByb3BUd2VlbiIsImhhc1ByaW9yaXR5IiwiaW5saW5lUHJvcHMiLCJzdGFydEF0Iiwic3R5bGVzIiwiX3BsdWdpbnMiLCJfY2hlY2tQbHVnaW4iLCJfcmVwbGFjZVJhbmRvbSIsIl9jb2xvckV4cCIsImFkZCIsInZpc2liaWxpdHkiLCJwYXJzZVRyYW5zZm9ybSIsInNtb290aE9yaWdpbiIsImRlcCIsImF1dG9Sb3VuZCIsIl9taXNzaW5nUGx1Z2luIiwiX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSIsInJlbmRlciIsImdldCIsImFsaWFzZXMiLCJnZXRTZXR0ZXIiLCJfaXNVbmRlZmluZWQiLCJfZ2V0U2V0dGVyIiwiY29yZSIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwiX3N1cHByZXNzT3ZlcndyaXRlcyIsIl9jb250ZXh0IiwiX2dsb2JhbFRpbWVsaW5lIiwiX2NvcmVJbml0dGVkIiwiX2NvcmVSZWFkeSIsIl9sYXN0UmVuZGVyZWRGcmFtZSIsIl9xdWlja1R3ZWVuIiwiX3RpY2tlckFjdGl2ZSIsIm4iLCJuMSIsImVhc2VPdXQiLCJhdXRvU2xlZXAiLCJudWxsVGFyZ2V0V2FybiIsInVuaXRzIiwibGluZUhlaWdodCIsIl9kZWZhdWx0cyIsImR1cmF0aW9uIiwib3ZlcndyaXRlIiwiZGVsYXkiLCJfYmlnTnVtIiwiX3RpbnlOdW0iLCJfMlBJIiwiX0hBTEZfUEkiLCJfZ3NJRCIsIl9zcXJ0IiwiX2NvcyIsIl9zaW4iLCJfaXNGdW5jdGlvbiIsIl9pc051bWJlciIsIl9pc09iamVjdCIsIl9pc05vdEZhbHNlIiwiX3dpbmRvd0V4aXN0cyIsIl9pc0Z1bmNPclN0cmluZyIsIl9pc1R5cGVkQXJyYXkiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIl9pc0FycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwiX3N0cmljdE51bUV4cCIsIl9jb21wbGV4U3RyaW5nTnVtRXhwIiwiX2RlbGltaXRlZFZhbHVlRXhwIiwiX3VuaXRFeHAiLCJfZ2xvYmFscyIsIl9pbnN0YWxsU2NvcGUiLCJfaW5zdGFsbCIsInNjb3BlIiwiX21lcmdlIiwiY29uc29sZSIsIndhcm4iLCJfd2FybiIsIm1lc3NhZ2UiLCJzdXBwcmVzcyIsIl9hZGRHbG9iYWwiLCJvYmoiLCJfZW1wdHlGdW5jIiwiX3N0YXJ0QXRSZXZlcnRDb25maWciLCJzdXBwcmVzc0V2ZW50cyIsIl9yZXZlcnRDb25maWciLCJfcmVzZXJ2ZWRQcm9wcyIsIl9sYXp5VHdlZW5zIiwiX2xhenlMb29rdXAiLCJfZWZmZWN0cyIsIl9uZXh0R0NGcmFtZSIsIl9oYXJuZXNzUGx1Z2lucyIsIl9jYWxsYmFja05hbWVzIiwiX2hhcm5lc3MiLCJoYXJuZXNzUGx1Z2luIiwiaGFybmVzcyIsInNwbGljZSIsInRvQXJyYXkiLCJ2IiwibmFtZXMiLCJmdW5jIiwiX3JvdW5kUHJlY2lzZSIsIm9wZXJhdG9yIiwiX2FycmF5Q29udGFpbnNBbnkiLCJ0b1NlYXJjaCIsInRvRmluZCIsIl9sYXp5UmVuZGVyIiwiX2xhenkiLCJfbGF6eVNhZmVSZW5kZXIiLCJhbmltYXRpb24iLCJmb3JjZSIsIl9udW1lcmljSWZQb3NzaWJsZSIsIl9wYXNzVGhyb3VnaCIsIl9zZXREZWZhdWx0cyIsImRlZmF1bHRzIiwiYmFzZSIsInRvTWVyZ2UiLCJfbWVyZ2VEZWVwIiwiX2NvcHlFeGNsdWRpbmciLCJleGNsdWRpbmciLCJjb3B5IiwiX2luaGVyaXREZWZhdWx0cyIsImV4Y2x1ZGVEdXJhdGlvbiIsImtleWZyYW1lcyIsImluaGVyaXQiLCJfZHAiLCJfYWRkTGlua2VkTGlzdEl0ZW0iLCJjaGlsZCIsImZpcnN0UHJvcCIsImxhc3RQcm9wIiwic29ydEJ5IiwicHJldiIsIl9wcmV2IiwiX3JlbW92ZUxpbmtlZExpc3RJdGVtIiwibmV4dCIsIl9yZW1vdmVGcm9tUGFyZW50Iiwib25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSIsImF1dG9SZW1vdmVDaGlsZHJlbiIsInJlbW92ZSIsIl9hY3QiLCJfdW5jYWNoZSIsIl9lbmQiLCJfc3RhcnQiLCJfZGlydHkiLCJfcmVjYWNoZUFuY2VzdG9ycyIsInRvdGFsRHVyYXRpb24iLCJfcmV3aW5kU3RhcnRBdCIsInRvdGFsVGltZSIsIl9zdGFydEF0IiwiaW1tZWRpYXRlUmVuZGVyIiwiYXV0b1JldmVydCIsIl9oYXNOb1BhdXNlZEFuY2VzdG9ycyIsIl90cyIsIl9lbGFwc2VkQ3ljbGVEdXJhdGlvbiIsIl9yZXBlYXQiLCJfYW5pbWF0aW9uQ3ljbGUiLCJfdFRpbWUiLCJfckRlbGF5IiwidFRpbWUiLCJjeWNsZUR1cmF0aW9uIiwid2hvbGUiLCJmbG9vciIsIl9wYXJlbnRUb0NoaWxkVG90YWxUaW1lIiwicGFyZW50VGltZSIsIl90RHVyIiwiX3NldEVuZCIsIl9ydHMiLCJfYWxpZ25QbGF5aGVhZCIsInNtb290aENoaWxkVGltaW5nIiwiX3Bvc3RBZGRDaGVja3MiLCJ0aW1lbGluZSIsIl9pbml0dGVkIiwicmF3VGltZSIsIl9jbGFtcCIsIl96VGltZSIsIl9hZGRUb1RpbWVsaW5lIiwic2tpcENoZWNrcyIsIl9wYXJzZVBvc2l0aW9uIiwiX2RlbGF5IiwidGltZVNjYWxlIiwiX3NvcnQiLCJfaXNGcm9tT3JGcm9tU3RhcnQiLCJfcmVjZW50IiwiX3Njcm9sbFRyaWdnZXIiLCJ0cmlnZ2VyIiwiU2Nyb2xsVHJpZ2dlciIsIl9hdHRlbXB0SW5pdFR3ZWVuIiwiX2luaXRUd2VlbiIsImxhenkiLCJmcmFtZSIsIl9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQiLCJfbG9jayIsIl9zZXREdXJhdGlvbiIsInNraXBVbmNhY2hlIiwibGVhdmVQbGF5aGVhZCIsInJlcGVhdCIsImR1ciIsInRvdGFsUHJvZ3Jlc3MiLCJfb25VcGRhdGVUb3RhbER1cmF0aW9uIiwiVGltZWxpbmUiLCJfemVyb1Bvc2l0aW9uIiwiZW5kVGltZSIsInBlcmNlbnRBbmltYXRpb24iLCJvZmZzZXQiLCJpc1BlcmNlbnQiLCJsYWJlbHMiLCJyZWNlbnQiLCJjbGlwcGVkRHVyYXRpb24iLCJpc05hTiIsIl9jcmVhdGVUd2VlblR5cGUiLCJwYXJhbXMiLCJpclZhcnMiLCJpc0xlZ2FjeSIsInZhcnNJbmRleCIsInJ1bkJhY2t3YXJkcyIsIlR3ZWVuIiwiX2NvbmRpdGlvbmFsUmV0dXJuIiwibWluIiwibWF4IiwiZXhlYyIsImNsYW1wIiwiX3NsaWNlIiwiX2lzQXJyYXlMaWtlIiwibm9uRW1wdHkiLCJfZmxhdHRlbiIsImFyIiwibGVhdmVTdHJpbmdzIiwiYWNjdW11bGF0b3IiLCJfYWNjdW11bGF0b3IiLCJhcHBseSIsInNlbGVjdG9yIiwiX3dha2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWwiLCJjdXJyZW50IiwibmF0aXZlRWxlbWVudCIsInNodWZmbGUiLCJzb3J0IiwicmFuZG9tIiwiZGlzdHJpYnV0ZSIsImVhY2giLCJlYXNlIiwiX3BhcnNlRWFzZSIsImZyb20iLCJpc0RlY2ltYWwiLCJyYXRpb3MiLCJheGlzIiwicmF0aW9YIiwicmF0aW9ZIiwiZWRnZXMiLCJvcmlnaW5YIiwib3JpZ2luWSIsImoiLCJ3cmFwQXQiLCJkaXN0YW5jZXMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJfaW52ZXJ0RWFzZSIsIl9yb3VuZE1vZGlmaWVyIiwicG93IiwicmF3Iiwic25hcCIsInNuYXBUbyIsInJhZGl1cyIsImlzMkQiLCJ2YWx1ZXMiLCJpbmNyZW1lbnQiLCJkeCIsImR5IiwiY2xvc2VzdCIsInJvdW5kaW5nSW5jcmVtZW50IiwicmV0dXJuRnVuY3Rpb24iLCJwaXBlIiwiX2xlbiIsImZ1bmN0aW9ucyIsIl9rZXkiLCJyZWR1Y2UiLCJ1bml0aXplIiwibm9ybWFsaXplIiwibWFwUmFuZ2UiLCJfd3JhcEFycmF5Iiwid3JhcHBlciIsIndyYXAiLCJyYW5nZSIsIndyYXBZb3lvIiwidG90YWwiLCJudW1zIiwiaW5NaW4iLCJpbk1heCIsIm91dE1pbiIsIm91dE1heCIsImluUmFuZ2UiLCJvdXRSYW5nZSIsImludGVycG9sYXRlIiwicHJvZ3Jlc3MiLCJtdXRhdGUiLCJpbnRlcnBvbGF0b3JzIiwiaWwiLCJtYXN0ZXIiLCJfYWRkUHJvcFR3ZWVuIiwiX3JlbmRlclByb3BUd2VlbnMiLCJfZ2V0TGFiZWxJbkRpcmVjdGlvbiIsImZyb21UaW1lIiwiYmFja3dhcmQiLCJkaXN0YW5jZSIsImxhYmVsIiwiX2NhbGxiYWNrIiwiZXhlY3V0ZUxhenlGaXJzdCIsImNhbGxiYWNrIiwicHJldkNvbnRleHQiLCJjb250ZXh0IiwiX2N0eCIsImNhbGxiYWNrU2NvcGUiLCJfaW50ZXJydXB0Iiwic2Nyb2xsVHJpZ2dlciIsImtpbGwiLCJfY3JlYXRlUGx1Z2luIiwiY29uZmlnIiwiaXNGdW5jIiwiUGx1Z2luIiwiaW5zdGFuY2VEZWZhdWx0cyIsIl9raWxsUHJvcFR3ZWVuc09mIiwibW9kaWZpZXIiLCJfYWRkUGx1Z2luTW9kaWZpZXIiLCJyYXdWYXJzIiwic3RhdGljcyIsIl8yNTUiLCJfY29sb3JMb29rdXAiLCJhcXVhIiwibGltZSIsInNpbHZlciIsImJsYWNrIiwibWFyb29uIiwidGVhbCIsImJsdWUiLCJuYXZ5Iiwid2hpdGUiLCJvbGl2ZSIsInllbGxvdyIsIm9yYW5nZSIsImdyYXkiLCJwdXJwbGUiLCJncmVlbiIsInJlZCIsInBpbmsiLCJjeWFuIiwidHJhbnNwYXJlbnQiLCJfaHVlIiwiaCIsIm0xIiwibTIiLCJzcGxpdENvbG9yIiwidG9IU0wiLCJmb3JjZUFscGhhIiwiZyIsIndhc0hTTCIsInBhcnNlSW50IiwiTnVtYmVyIiwiX2NvbG9yT3JkZXJEYXRhIiwiX2Zvcm1hdENvbG9ycyIsIm9yZGVyTWF0Y2hEYXRhIiwic2hlbGwiLCJjb2xvcnMiLCJzaGlmdCIsIlJlZ0V4cCIsIl9oc2xFeHAiLCJjb21iaW5lZCIsImxhc3RJbmRleCIsIl9pZCIsIl9yZXEiLCJfcmFmIiwiX3NlbGYiLCJfZGVsdGEiLCJfaSIsIl9nZXRUaW1lIiwiRGF0ZSIsIm5vdyIsIl9sYWdUaHJlc2hvbGQiLCJfYWRqdXN0ZWRMYWciLCJfc3RhcnRUaW1lIiwiX2xhc3RVcGRhdGUiLCJfZ2FwIiwiX25leHRUaW1lIiwiX2xpc3RlbmVycyIsIl90aWNrIiwib3ZlcmxhcCIsImRpc3BhdGNoIiwiZWxhcHNlZCIsIm1hbnVhbCIsInRpY2siLCJkZWx0YVJhdGlvIiwiZnBzIiwid2FrZSIsImdzYXBWZXJzaW9ucyIsInZlcnNpb24iLCJHcmVlblNvY2tHbG9iYWxzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2xlZXAiLCJzZXRUaW1lb3V0IiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjbGVhclRpbWVvdXQiLCJsYWdTbW9vdGhpbmciLCJ0aHJlc2hvbGQiLCJhZGp1c3RlZExhZyIsIl9mcHMiLCJvbmNlIiwicHJpb3JpdGl6ZSIsIl9lYXNlTWFwIiwiX2N1c3RvbUVhc2VFeHAiLCJfcXVvdGVzRXhwIiwiX3BhcnNlT2JqZWN0SW5TdHJpbmciLCJ2YWwiLCJwYXJzZWRWYWwiLCJrZXkiLCJsYXN0SW5kZXhPZiIsIl9wcm9wYWdhdGVZb3lvRWFzZSIsImlzWW95byIsIl9maXJzdCIsInlveW9FYXNlIiwiX3lveW8iLCJfZWFzZSIsIl95RWFzZSIsImRlZmF1bHRFYXNlIiwib3BlbiIsImNsb3NlIiwibmVzdGVkIiwiX0NFIiwiX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nIiwiX2luc2VydEVhc2UiLCJlYXNlSW4iLCJlYXNlSW5PdXQiLCJsb3dlcmNhc2VOYW1lIiwiX2Vhc2VJbk91dEZyb21PdXQiLCJfY29uZmlnRWxhc3RpYyIsImFtcGxpdHVkZSIsInBlcmlvZCIsInAxIiwicDIiLCJwMyIsImFzaW4iLCJfY29uZmlnQmFjayIsIm92ZXJzaG9vdCIsInBvd2VyIiwiTGluZWFyIiwiZWFzZU5vbmUiLCJub25lIiwiU3RlcHBlZEVhc2UiLCJzdGVwcyIsImltbWVkaWF0ZVN0YXJ0IiwiaWQiLCJBbmltYXRpb24iLCJJbmZpbml0eSIsInJlcGVhdERlbGF5IiwieW95byIsIl9wcm90byIsInN0YXJ0VGltZSIsIl90b3RhbFRpbWUiLCJfcHRMb29rdXAiLCJfcFRpbWUiLCJpdGVyYXRpb24iLCJfcHMiLCJwYXVzZWQiLCJpbmNsdWRlUmVwZWF0cyIsIndyYXBSZXBlYXRzIiwicHJldklzUmV2ZXJ0aW5nIiwiZ2xvYmFsVGltZSIsInNlZWsiLCJyZXN0YXJ0IiwiaW5jbHVkZURlbGF5IiwicGxheSIsInJldmVyc2VkIiwicmV2ZXJzZSIsInBhdXNlIiwiYXRUaW1lIiwicmVzdW1lIiwiaW52YWxpZGF0ZSIsImlzQWN0aXZlIiwiZXZlbnRDYWxsYmFjayIsIl9vblVwZGF0ZSIsInRoZW4iLCJvbkZ1bGZpbGxlZCIsIlByb21pc2UiLCJyZXNvbHZlIiwiX3Jlc29sdmUiLCJfdGhlbiIsIl9wcm9tIiwiX0FuaW1hdGlvbiIsInNvcnRDaGlsZHJlbiIsIl9wcm90bzIiLCJ0byIsImZyb21UbyIsImZyb21WYXJzIiwidG9WYXJzIiwiZGVsYXllZENhbGwiLCJzdGFnZ2VyVG8iLCJzdGFnZ2VyIiwib25Db21wbGV0ZUFsbCIsIm9uQ29tcGxldGVBbGxQYXJhbXMiLCJvbkNvbXBsZXRlIiwib25Db21wbGV0ZVBhcmFtcyIsInN0YWdnZXJGcm9tIiwic3RhZ2dlckZyb21UbyIsInByZXZQYXVzZWQiLCJwYXVzZVR3ZWVuIiwicHJldlN0YXJ0IiwicHJldkl0ZXJhdGlvbiIsInByZXZUaW1lIiwidER1ciIsImNyb3NzaW5nU3RhcnQiLCJyZXdpbmRpbmciLCJkb2VzV3JhcCIsInJlcGVhdFJlZnJlc2giLCJvblJlcGVhdCIsIl9oYXNQYXVzZSIsIl9mb3JjaW5nIiwiX2xhc3QiLCJfZmluZE5leHRQYXVzZVR3ZWVuIiwib25VcGRhdGUiLCJhZGp1c3RlZFRpbWUiLCJfdGhpczIiLCJhZGRMYWJlbCIsImdldENoaWxkcmVuIiwidHdlZW5zIiwidGltZWxpbmVzIiwiaWdub3JlQmVmb3JlVGltZSIsImdldEJ5SWQiLCJhbmltYXRpb25zIiwicmVtb3ZlTGFiZWwiLCJraWxsVHdlZW5zT2YiLCJfdG90YWxUaW1lMiIsImFkZFBhdXNlIiwicmVtb3ZlUGF1c2UiLCJvbmx5QWN0aXZlIiwiZ2V0VHdlZW5zT2YiLCJfb3ZlcndyaXRpbmdUd2VlbiIsImNoaWxkcmVuIiwicGFyc2VkVGFyZ2V0cyIsImlzR2xvYmFsVGltZSIsIl90YXJnZXRzIiwidHdlZW5UbyIsImluaXR0ZWQiLCJ0bCIsIl92YXJzIiwiX29uU3RhcnQiLCJvblN0YXJ0Iiwib25TdGFydFBhcmFtcyIsInR3ZWVuRnJvbVRvIiwiZnJvbVBvc2l0aW9uIiwidG9Qb3NpdGlvbiIsIm5leHRMYWJlbCIsImFmdGVyVGltZSIsInByZXZpb3VzTGFiZWwiLCJiZWZvcmVUaW1lIiwiY3VycmVudExhYmVsIiwic2hpZnRDaGlsZHJlbiIsImFkanVzdExhYmVscyIsImNsZWFyIiwiaW5jbHVkZUxhYmVscyIsInVwZGF0ZVJvb3QiLCJfZm9yY2VBbGxQcm9wVHdlZW5zIiwiX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4iLCJzZXR0ZXIiLCJzdHJpbmdGaWx0ZXIiLCJmdW5jUGFyYW0iLCJzdGFydE51bXMiLCJoYXNSYW5kb20iLCJmcCIsIm9wdGlvbmFsIiwiY3VycmVudFZhbHVlIiwicGFyc2VkU3RhcnQiLCJfc2V0dGVyRnVuY1dpdGhQYXJhbSIsIl9zZXR0ZXJGdW5jIiwiX3NldHRlclBsYWluIiwiX3JlbmRlckJvb2xlYW4iLCJfcmVuZGVyUGxhaW4iLCJwdExvb2t1cCIsIl9wYXJzZUZ1bmNPclN0cmluZyIsIl9wcm9jZXNzVmFycyIsInByaW9yaXR5IiwiY2xlYW5WYXJzIiwiZ3NEYXRhIiwiaGFybmVzc1ZhcnMiLCJvdmVyd3JpdHRlbiIsIm9uVXBkYXRlUGFyYW1zIiwicHJldlN0YXJ0QXQiLCJmdWxsVGFyZ2V0cyIsImF1dG9PdmVyd3JpdGUiLCJfb3ZlcndyaXRlIiwiX2Zyb20iLCJfcHRDYWNoZSIsIl9vcCIsIl9vbkluaXQiLCJfcGFyc2VLZXlmcmFtZSIsImFsbFByb3BzIiwiZWFzZUVhY2giLCJfc3RhZ2dlclR3ZWVuUHJvcHMiLCJfc3RhZ2dlclByb3BzVG9Ta2lwIiwiX0FuaW1hdGlvbjIiLCJza2lwSW5oZXJpdCIsIl90aGlzMyIsImN1clRhcmdldCIsInN0YWdnZXJGdW5jIiwic3RhZ2dlclZhcnNUb01lcmdlIiwiX3RoaXMzJHZhcnMiLCJrZiIsIl9wcm90bzMiLCJpc05lZ2F0aXZlIiwicHJldlJhdGlvIiwiX3JlbmRlclplcm9EdXJhdGlvblR3ZWVuIiwicmVzZXRUbyIsInN0YXJ0SXNSZWxhdGl2ZSIsInJvb3RQVCIsImxvb2t1cCIsInB0Q2FjaGUiLCJfdXBkYXRlUHJvcFR3ZWVucyIsIm92ZXJ3cml0dGVuUHJvcHMiLCJjdXJMb29rdXAiLCJjdXJPdmVyd3JpdGVQcm9wcyIsImtpbGxpbmdUYXJnZXRzIiwicHJvcFR3ZWVuTG9va3VwIiwiZmlyc3RQVCIsImExIiwiYTIiLCJfYXJyYXlzTWF0Y2giLCJwcm9wZXJ0eUFsaWFzZXMiLCJfYWRkQWxpYXNlc1RvVmFycyIsIm9uUmV2ZXJzZUNvbXBsZXRlIiwib25SZXZlcnNlQ29tcGxldGVQYXJhbXMiLCJfc2V0dGVyQXR0cmlidXRlIiwiaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nIiwib3AiLCJfc2V0dGVyV2l0aE1vZGlmaWVyIiwibVNldCIsIm10IiwicHQyIiwiZmlyc3QiLCJsYXN0IiwicmVuZGVyZXIiLCJUd2Vlbk1heCIsIlR3ZWVuTGl0ZSIsIlRpbWVsaW5lTGl0ZSIsIlRpbWVsaW5lTWF4IiwiX21lZGlhIiwiX2VtcHR5QXJyYXkiLCJfbGFzdE1lZGlhVGltZSIsIl9kaXNwYXRjaCIsIl9vbk1lZGlhQ2hhbmdlIiwibWF0Y2hlcyIsImFueU1hdGNoIiwidG9nZ2xlZCIsInF1ZXJpZXMiLCJjb25kaXRpb25zIiwibWF0Y2hNZWRpYSIsIm9uTWF0Y2giLCJDb250ZXh0IiwiX3IiLCJpc1JldmVydGVkIiwiX3Byb3RvNSIsInByZXZTZWxlY3RvciIsImlnbm9yZSIsImdldFR3ZWVucyIsIl90aGlzNCIsIm8iLCJNYXRjaE1lZGlhIiwiY29udGV4dHMiLCJfcHJvdG82IiwibXEiLCJhY3RpdmUiLCJjb25kIiwiYWRkTGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVnaXN0ZXJQbHVnaW4iLCJfbGVuMiIsImFyZ3MiLCJfa2V5MiIsImdldFByb3BlcnR5IiwiZ2V0dGVyIiwiZm9ybWF0IiwicXVpY2tTZXR0ZXIiLCJzZXR0ZXJzIiwicXVpY2tUbyIsIl9tZXJnZTIiLCJpc1R3ZWVuaW5nIiwicmVnaXN0ZXJFZmZlY3QiLCJfcmVmMyIsImVmZmVjdCIsInBsdWdpbnMiLCJleHRlbmRUaW1lbGluZSIsInBsdWdpbk5hbWUiLCJyZWdpc3RlckVhc2UiLCJwYXJzZUVhc2UiLCJleHBvcnRSb290IiwiaW5jbHVkZURlbGF5ZWRDYWxscyIsIm1hdGNoTWVkaWFSZWZyZXNoIiwiZm91bmQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidXRpbHMiLCJpbnN0YWxsIiwiZWZmZWN0cyIsInRpY2tlciIsImdsb2JhbFRpbWVsaW5lIiwiZ2xvYmFscyIsImdldENhY2hlIiwicmV2ZXJ0aW5nIiwidG9BZGQiLCJzdXBwcmVzc092ZXJ3cml0ZXMiLCJfZ2V0UGx1Z2luUHJvcFR3ZWVuIiwiX2J1aWxkTW9kaWZpZXJQbHVnaW4iLCJtb2RpZmllcnMiLCJfYWRkTW9kaWZpZXJzIiwiUG93ZXIwIiwiUG93ZXIxIiwiUG93ZXIyIiwiUG93ZXIzIiwiUG93ZXI0IiwiUXVhZCIsIkN1YmljIiwiUXVhcnQiLCJRdWludCIsIlN0cm9uZyIsIkVsYXN0aWMiLCJCYWNrIiwiQm91bmNlIiwiU2luZSIsIkV4cG8iLCJDaXJjIiwiZ3NhcFdpdGhDU1MiLCJUd2Vlbk1heFdpdGhDU1MiLCJEYXRhVmlldyIsInJlcXVpcmUiLCJnZXROYXRpdmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiaGFzaENsZWFyIiwiaGFzaERlbGV0ZSIsImhhc2hHZXQiLCJoYXNoSGFzIiwiaGFzaFNldCIsIkhhc2giLCJlbnRyaWVzIiwiZW50cnkiLCJoYXMiLCJsaXN0Q2FjaGVDbGVhciIsImxpc3RDYWNoZURlbGV0ZSIsImxpc3RDYWNoZUdldCIsImxpc3RDYWNoZUhhcyIsImxpc3RDYWNoZVNldCIsIkxpc3RDYWNoZSIsIk1hcCIsIm1hcENhY2hlQ2xlYXIiLCJtYXBDYWNoZURlbGV0ZSIsIm1hcENhY2hlR2V0IiwibWFwQ2FjaGVIYXMiLCJtYXBDYWNoZVNldCIsIk1hcENhY2hlIiwiU2V0Iiwic2V0Q2FjaGVBZGQiLCJzZXRDYWNoZUhhcyIsIlNldENhY2hlIiwiX19kYXRhX18iLCJzdGFja0NsZWFyIiwic3RhY2tEZWxldGUiLCJzdGFja0dldCIsInN0YWNrSGFzIiwic3RhY2tTZXQiLCJTdGFjayIsInNpemUiLCJTeW1ib2wiLCJVaW50OEFycmF5IiwiV2Vha01hcCIsImFycmF5IiwiaXRlcmF0ZWUiLCJwcmVkaWNhdGUiLCJyZXNJbmRleCIsImJhc2VUaW1lcyIsImlzQXJndW1lbnRzIiwiaXNCdWZmZXIiLCJpc0luZGV4IiwiaXNUeXBlZEFycmF5IiwiaGFzT3duUHJvcGVydHkiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJTdHJpbmciLCJlcSIsImJhc2VGb3JPd24iLCJiYXNlRWFjaCIsImNyZWF0ZUJhc2VFYWNoIiwiYmFzZUZvciIsImNyZWF0ZUJhc2VGb3IiLCJrZXlzIiwib2JqZWN0IiwiY2FzdFBhdGgiLCJ0b0tleSIsInBhdGgiLCJ1bmRlZmluZWQiLCJhcnJheVB1c2giLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiYmFzZUdldFRhZyIsImlzT2JqZWN0TGlrZSIsImJhc2VJc0VxdWFsRGVlcCIsImJhc2VJc0VxdWFsIiwib3RoZXIiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsInN0YWNrIiwiZXF1YWxBcnJheXMiLCJlcXVhbEJ5VGFnIiwiZXF1YWxPYmplY3RzIiwiZ2V0VGFnIiwiYXJnc1RhZyIsImFycmF5VGFnIiwib2JqZWN0VGFnIiwiZXF1YWxGdW5jIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJtYXRjaERhdGEiLCJub0N1c3RvbWl6ZXIiLCJvYmpWYWx1ZSIsInNyY1ZhbHVlIiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJpc0Z1bmN0aW9uIiwiaXNNYXNrZWQiLCJpc09iamVjdCIsInRvU291cmNlIiwicmVJc0hvc3RDdG9yIiwiZnVuY1Byb3RvIiwiRnVuY3Rpb24iLCJvYmplY3RQcm90byIsImZ1bmNUb1N0cmluZyIsInRvU3RyaW5nIiwicmVJc05hdGl2ZSIsImlzTGVuZ3RoIiwidHlwZWRBcnJheVRhZ3MiLCJiYXNlTWF0Y2hlcyIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJpZGVudGl0eSIsImlzUHJvdG90eXBlIiwibmF0aXZlS2V5cyIsImlzQXJyYXlMaWtlIiwiY29sbGVjdGlvbiIsImJhc2VJc01hdGNoIiwiZ2V0TWF0Y2hEYXRhIiwibWF0Y2hlc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImlzS2V5IiwiaXNTdHJpY3RDb21wYXJhYmxlIiwiYmFzZUdldCIsImFycmF5TWFwIiwiaXNTeW1ib2wiLCJzeW1ib2xQcm90byIsInN5bWJvbFRvU3RyaW5nIiwiYmFzZVRvU3RyaW5nIiwic3RyaW5nVG9QYXRoIiwiY29yZUpzRGF0YSIsImVhY2hGdW5jIiwiZnJvbVJpZ2h0IiwiaXRlcmFibGUiLCJhcnJheVNvbWUiLCJjYWNoZUhhcyIsImlzUGFydGlhbCIsImFyckxlbmd0aCIsIm90aExlbmd0aCIsImFyclN0YWNrZWQiLCJvdGhTdGFja2VkIiwic2VlbiIsImFyclZhbHVlIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm90aEluZGV4IiwibWFwVG9BcnJheSIsInNldFRvQXJyYXkiLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsInRhZyIsImJ5dGVMZW5ndGgiLCJieXRlT2Zmc2V0IiwiYnVmZmVyIiwiY29udmVydCIsInN0YWNrZWQiLCJnZXRBbGxLZXlzIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJvYmpTdGFja2VkIiwic2tpcEN0b3IiLCJvYmpDdG9yIiwib3RoQ3RvciIsImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJiYXNlR2V0QWxsS2V5cyIsImdldFN5bWJvbHMiLCJpc0tleWFibGUiLCJiYXNlSXNOYXRpdmUiLCJnZXRWYWx1ZSIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwiaXNPd24iLCJ1bm1hc2tlZCIsImFycmF5RmlsdGVyIiwic3R1YkFycmF5IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJuYXRpdmVHZXRTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9sIiwibWFwVGFnIiwicHJvbWlzZVRhZyIsInNldFRhZyIsIndlYWtNYXBUYWciLCJkYXRhVmlld1RhZyIsImRhdGFWaWV3Q3RvclN0cmluZyIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsIkN0b3IiLCJjdG9yU3RyaW5nIiwiaGFzRnVuYyIsIm5hdGl2ZUNyZWF0ZSIsInJlSXNVaW50IiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsInVpZCIsIm1hc2tTcmNLZXkiLCJJRV9QUk9UTyIsImFzc29jSW5kZXhPZiIsInBvcCIsImdldE1hcERhdGEiLCJtZW1vaXplIiwib3ZlckFyZyIsImZyZWVFeHBvcnRzIiwiZnJlZU1vZHVsZSIsImZyZWVQcm9jZXNzIiwicHJvY2VzcyIsIm5vZGVVdGlsIiwidHlwZXMiLCJiaW5kaW5nIiwiYXJnIiwiZnJlZVNlbGYiLCJyb290IiwicGFpcnMiLCJMQVJHRV9BUlJBWV9TSVpFIiwibWVtb2l6ZUNhcHBlZCIsInJlUHJvcE5hbWUiLCJyZUVzY2FwZUNoYXIiLCJzdHJpbmciLCJjaGFyQ29kZUF0IiwibnVtYmVyIiwicXVvdGUiLCJzdWJTdHJpbmciLCJhcnJheUVhY2giLCJjYXN0RnVuY3Rpb24iLCJkZWZhdWx0VmFsdWUiLCJiYXNlSGFzSW4iLCJoYXNQYXRoIiwiYmFzZUlzQXJndW1lbnRzIiwic3R1YkZhbHNlIiwiQnVmZmVyIiwiYmFzZUlzVHlwZWRBcnJheSIsImJhc2VVbmFyeSIsIm5vZGVJc1R5cGVkQXJyYXkiLCJhcnJheUxpa2VLZXlzIiwiYmFzZUtleXMiLCJiYXNlSXRlcmF0ZWUiLCJiYXNlTWFwIiwicmVzb2x2ZXIiLCJUeXBlRXJyb3IiLCJtZW1vaXplZCIsIkNhY2hlIiwiYmFzZVByb3BlcnR5IiwiYmFzZVByb3BlcnR5RGVlcCIsImNhblVzZURPTSIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiYXR0YWNoRXZlbnQiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJfaWUiLCJfZmlyZWZveCIsIl9vcGVyYSIsIl93ZWJraXQiLCJfY2hyb21lIiwiX2llX3JlYWxfdmVyc2lvbiIsIl9vc3giLCJfd2luZG93cyIsIl9saW51eCIsIl9hbmRyb2lkIiwiX3dpbjY0IiwiX2lwaG9uZSIsIl9pcGFkIiwiX25hdGl2ZSIsIl9tb2JpbGUiLCJfcG9wdWxhdGVkIiwiX3BvcHVsYXRlIiwidWFzIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiYWdlbnQiLCJvcyIsIk5hTiIsImRvY3VtZW50TW9kZSIsInRyaWRlbnQiLCJ2ZXIiLCJVc2VyQWdlbnRfREVQUkVDQVRFRCIsImllIiwiaWVDb21wYXRpYmlsaXR5TW9kZSIsImllNjQiLCJmaXJlZm94Iiwib3BlcmEiLCJ3ZWJraXQiLCJzYWZhcmkiLCJjaHJvbWUiLCJ3aW5kb3dzIiwib3N4IiwibGludXgiLCJpcGhvbmUiLCJtb2JpbGUiLCJuYXRpdmVBcHAiLCJhbmRyb2lkIiwiaXBhZCIsInVzZUhhc0ZlYXR1cmUiLCJpbXBsZW1lbnRhdGlvbiIsImhhc0ZlYXR1cmUiLCJldmVudE5hbWVTdWZmaXgiLCJjYXB0dXJlIiwiZXZlbnROYW1lIiwiaXNTdXBwb3J0ZWQiLCJpc0V2ZW50U3VwcG9ydGVkIiwibm9ybWFsaXplV2hlZWwiLCJldmVudCIsInNYIiwic1kiLCJwWCIsInBZIiwiZGV0YWlsIiwid2hlZWxEZWx0YSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YVgiLCJIT1JJWk9OVEFMX0FYSVMiLCJkZWx0YVkiLCJkZWx0YVgiLCJkZWx0YU1vZGUiLCJzcGluWCIsInNwaW5ZIiwicGl4ZWxYIiwicGl4ZWxZIiwiZ2V0RXZlbnRUeXBlIiwicHJlZml4ZXMiLCJ1cHBlciIsIm1lbW8iLCJwcmVmaXgiLCJfIiwiY2hhciIsIktleSIsImRhc2giLCJIaWdobGlnaHQiLCJlbGVtZW50cyIsInN1cGVyIiwiYW5pbWF0ZUluIiwidGltZWxpbmVJbiIsIkdTQVAiLCJhbmltYXRlT3V0IiwiTGFiZWwiLCJhcHBlbmQiLCJlbGVtZW50TGluZXNTcGFucyIsImVsZW1lbnRzTGluZXMiLCJsaW5lIiwib25SZXNpemUiLCJjYWxjdWxhdGUiLCJQYXJhZ3JhcGgiLCJUaXRsZSIsIkNvbXBvbmVudCIsImNyZWF0ZU9ic2VydmVyIiwib2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImlzSW50ZXJzZWN0aW5nIiwib2JzZXJ2ZSIsIkFzeW5jTG9hZCIsInNyYyIsIm9ubG9hZCIsImNsYXNzTGlzdCIsIkJ1dHRvbiIsInF1ZXJ5U2VsZWN0b3IiLCJwYXRoTGVuZ3RoIiwiZ2V0VG90YWxMZW5ndGgiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlRGFzaGFycmF5Iiwib25Nb3VzZUVudGVyIiwib25Nb3VzZUxlYXZlIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJvbk1vdXNlRW50ZXJFdmVudCIsImJpbmQiLCJvbk1vdXNlTGVhdmVFdmVudCIsInJlbW92ZXJFdmVudExpc3RlbmVyIiwiQ29sb3JzTWFuYWdlciIsImJhY2tncm91bmRDb2xvciIsIkV2ZW50RW1pdHRlciIsInNlbGVjdG9yQ2hpbGRyZW4iLCJIVE1MRWxlbWVudCIsIk5vZGVMaXN0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJQYWdlIiwiYW5pbWF0aW9uc1RpdGxlcyIsImFuaW1hdGlvbnNQYXJhZ3JhcGhzIiwiYW5pbWF0aW9uc0xhYmVsIiwiYW5pbWF0aW9uc0hpZ2hsaWdodHMiLCJwcmVsb2FkZXJzIiwidHJhbnNmb3JtUHJlZml4IiwiUHJlZml4Iiwic2Nyb2xsIiwibGltaXQiLCJjcmVhdGVBbmltYXRpb25zIiwiY3JlYXRlUHJlbG9hZGVyIiwic2hvdyIsImFuaW1hdGlvbkluIiwiaGlkZSIsImRlc3Ryb3kiLCJhbmltYXRpb25PdXQiLCJjbGllbnRIZWlnaHQiLCJpbm5lckhlaWdodCIsIm9uV2hlZWwiLCJ1cGRhdGUiLCJnZW9tZXRyeSIsImdsIiwic2NlbmUiLCJzaXplcyIsImNyZWF0ZVRleHR1cmUiLCJjcmVhdGVQcm9ncmFtIiwiY3JlYXRlTWVzaCIsImV4dHJhIiwidGV4dHVyZSIsIlRleHR1cmUiLCJpbWFnZSIsIkltYWdlIiwiY3Jvc3NPcmlnaW4iLCJwcm9ncmFtIiwiUHJvZ3JhbSIsImZyYWdtZW50IiwidmVydGV4IiwidW5pZm9ybXMiLCJ0TWFwIiwibWVzaCIsIk1lc2giLCJzZXRQYXJlbnQiLCJjcmVhdGVCb3VuZHMiLCJ1cGRhdGVTY2FsZSIsInVwZGF0ZVgiLCJ1cGRhdGVZIiwiaW5uZXJXaWR0aCIsImdyb3VwIiwiVHJhbnNmb3JtIiwiZ2FsbGVyeUVsZW1lbnQiLCJtZWRpYXNFbGVtZW50cyIsImNyZWF0ZUdlb21ldHJ5IiwiY3JlYXRlR2FsbGVyeSIsImxlcnAiLCJzY3JvbGxDdXJyZW50IiwiUGxhbmUiLCJtZWRpYXMiLCJNZWRpYSIsImdhbGxlcnlCb3VuZHMiLCJnYWxsZXJ5U2l6ZXMiLCJtZWRpYSIsIm9uVG91Y2hEb3duIiwib25Ub3VjaE1vdmUiLCJ4RGlzdGFuY2UiLCJ5RGlzdGFuY2UiLCJvblRvdWNoVXAiLCJDYW52YXMiLCJ0ZW1wbGF0ZSIsImNyZWF0ZVJlbmRlcmVyIiwiY3JlYXRlQ2FtZXJhIiwiY3JlYXRlU2NlbmUiLCJjcmVhdGVIb21lIiwiUmVuZGVyZXIiLCJhbnRpYWxpYXMiLCJjYW52YXMiLCJjYW1lcmEiLCJDYW1lcmEiLCJob21lIiwiSG9tZSIsInNldFNpemUiLCJhc3BlY3QiLCJmb3YiLCJpc0Rvd24iLCJ0b3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJOYXZpZ2F0aW9uIiwiaXRlbXMiLCJsaW5rcyIsIm9uQ2hhbmdlIiwiQ09MT1JfQlJJR0hUX0dSQVkiLCJDT0xPUl9RVUFSVEVSX1NQQU5JU0hfV0hJVEUiLCJQcmVsb2FkZXIiLCJ0aXRsZSIsIm51bWJlclRleHQiLCJpbWFnZXMiLCJleHByZXNzaW9uIiwidGl0bGVTcGFucyIsImNyZWF0ZUxvYWRlciIsIm9uQXNzZXRMb2FkZWQiLCJwZXJjZW50IiwiaW5uZXJIVE1MIiwib25Mb2FkZWQiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJlbWl0IiwiY3JlYXRlQ29udGVudCIsImNyZWF0ZU5hdmlnYXRpb24iLCJjcmVhdGVDYW52YXMiLCJjcmVhdGVQYWdlcyIsImFkZExpbmtMaXN0ZW5lcnMiLCJuYXZpZ2F0aW9uIiwicHJlbG9hZGVyIiwib25QcmVsb2FkZWQiLCJ0ZW1wbCIsImNvbnRlbnQiLCJwYWdlcyIsImFib3V0IiwiQWJvdXQiLCJjb2xsZWN0aW9ucyIsIkNvbGxlY3Rpb25zIiwiRGV0YWlsIiwicGFnZSIsIm9uUG9wU3RhdGUiLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwidXJsIiwicmVxdWVzdCIsImZldGNoIiwic3RhdHVzIiwiaHRtbCIsInRleHQiLCJkaXYiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiZGl2Q29udGVudCIsImxvZyIsIm5vcm1hbGl6ZWRXaGVlbCIsIk5vcm1hbGl6ZVdoZWVsIiwibGluayIsIm9uY2xpY2siLCJwcmV2ZW50RGVmYXVsdCIsImhyZWYiLCJidXR0b24iLCJ3b3JkcyIsInNwbGl0cyIsIml0ZW0iLCJjb25jYXQiLCJpc0xpbmsiLCJ3b3JkIiwiaW5jbHVkZXMiLCJzcGxpdFRleHQiLCJsaW5lcyIsInBhcnNlTGluZSIsInNwYW5zIiwic3BhbiIsImlzU2luZ2xlTGV0dGVyIiwidGV4dENvbnRlbnQiLCJpc05vdEVtcHR5IiwiaXNOb3RBbmRDaGFyYWN0ZXIiLCJpc05vdERhc2hDaGFyYWN0ZXIiLCJvZmZzZXRUb3AiLCJ0ZW1wTWF0NCIsIk1hdDQiLCJ0ZW1wVmVjM2EiLCJWZWMzIiwidGVtcFZlYzNiIiwibmVhciIsImZhciIsInpvb20iLCJhc3NpZ24iLCJwcm9qZWN0aW9uTWF0cml4Iiwidmlld01hdHJpeCIsInByb2plY3Rpb25WaWV3TWF0cml4Iiwid29ybGRQb3NpdGlvbiIsIm9ydGhvZ3JhcGhpYyIsImZyb21QZXJzcGVjdGl2ZSIsImZyb21PcnRob2dvbmFsIiwidXBkYXRlTWF0cml4V29ybGQiLCJpbnZlcnNlIiwid29ybGRNYXRyaXgiLCJnZXRUcmFuc2xhdGlvbiIsIm11bHRpcGx5IiwibG9va0F0IiwicHJvamVjdCIsImFwcGx5TWF0cml4NCIsInVucHJvamVjdCIsInVwZGF0ZUZydXN0dW0iLCJmcnVzdHVtIiwiY29uc3RhbnQiLCJpbnZMZW4iLCJmcnVzdHVtSW50ZXJzZWN0c01lc2giLCJub2RlIiwiYXR0cmlidXRlcyIsImNvbXB1dGVCb3VuZGluZ1NwaGVyZSIsImdldE1heFNjYWxlT25BeGlzIiwiZnJ1c3R1bUludGVyc2VjdHNTcGhlcmUiLCJub3JtYWwiLCJwbGFuZSIsImRvdCIsInRlbXBWZWMzIiwiSUQiLCJBVFRSX0lEIiwiaXNCb3VuZHNXYXJuZWQiLCJHZW9tZXRyeSIsIlZBT3MiLCJkcmF3UmFuZ2UiLCJjb3VudCIsImluc3RhbmNlZENvdW50IiwiYmluZFZlcnRleEFycmF5IiwiY3VycmVudEdlb21ldHJ5IiwiZ2xTdGF0ZSIsInN0YXRlIiwiYWRkQXR0cmlidXRlIiwiYXR0ciIsIkZsb2F0MzJBcnJheSIsIkZMT0FUIiwiVWludDE2QXJyYXkiLCJVTlNJR05FRF9TSE9SVCIsIlVOU0lHTkVEX0lOVCIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwiQVJSQVlfQlVGRkVSIiwibm9ybWFsaXplZCIsInN0cmlkZSIsImRpdmlzb3IiLCJpbnN0YW5jZWQiLCJuZWVkc1VwZGF0ZSIsInVzYWdlIiwiU1RBVElDX0RSQVciLCJ1cGRhdGVBdHRyaWJ1dGUiLCJpc0luc3RhbmNlZCIsImlzTmV3QnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiYm91bmRCdWZmZXIiLCJiaW5kQnVmZmVyIiwiYnVmZmVyRGF0YSIsImJ1ZmZlclN1YkRhdGEiLCJzZXRJbmRleCIsInNldERyYXdSYW5nZSIsInNldEluc3RhbmNlZENvdW50IiwiY3JlYXRlVkFPIiwiYXR0cmlidXRlT3JkZXIiLCJjcmVhdGVWZXJ0ZXhBcnJheSIsImJpbmRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlTG9jYXRpb25zIiwibnVtTG9jIiwidmVydGV4QXR0cmliUG9pbnRlciIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwidmVydGV4QXR0cmliRGl2aXNvciIsImRyYXciLCJtb2RlIiwiVFJJQU5HTEVTIiwiZHJhd0VsZW1lbnRzSW5zdGFuY2VkIiwiZHJhd0FycmF5c0luc3RhbmNlZCIsImRyYXdFbGVtZW50cyIsImRyYXdBcnJheXMiLCJnZXRQb3NpdGlvbiIsImNvbXB1dGVCb3VuZGluZ0JveCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwic3ViIiwiZGl2aWRlIiwibWF4UmFkaXVzU3EiLCJmcm9tQXJyYXkiLCJzcXVhcmVkRGlzdGFuY2UiLCJkZWxldGVWZXJ0ZXhBcnJheSIsImRlbGV0ZUJ1ZmZlciIsImZydXN0dW1DdWxsZWQiLCJyZW5kZXJPcmRlciIsIm1vZGVsVmlld01hdHJpeCIsIm5vcm1hbE1hdHJpeCIsIk1hdDMiLCJiZWZvcmVSZW5kZXJDYWxsYmFja3MiLCJhZnRlclJlbmRlckNhbGxiYWNrcyIsIm9uQmVmb3JlUmVuZGVyIiwib25BZnRlclJlbmRlciIsIm1vZGVsTWF0cml4IiwiY2FtZXJhUG9zaXRpb24iLCJnZXROb3JtYWxNYXRyaXgiLCJmbGlwRmFjZXMiLCJjdWxsRmFjZSIsInVzZSIsImFycmF5Q2FjaGVGMzIiLCJCQUNLIiwiZnJvbnRGYWNlIiwiQ0NXIiwiZGVwdGhUZXN0IiwiZGVwdGhXcml0ZSIsImRlcHRoRnVuYyIsIkxFU1MiLCJibGVuZEZ1bmMiLCJibGVuZEVxdWF0aW9uIiwicHJlbXVsdGlwbGllZEFscGhhIiwic2V0QmxlbmRGdW5jIiwiT05FIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsIlNSQ19BTFBIQSIsInZlcnRleFNoYWRlciIsImNyZWF0ZVNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVySW5mb0xvZyIsImFkZExpbmVOdW1iZXJzIiwiZnJhZ21lbnRTaGFkZXIiLCJGUkFHTUVOVF9TSEFERVIiLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImdldFByb2dyYW1JbmZvTG9nIiwiZGVsZXRlU2hhZGVyIiwidW5pZm9ybUxvY2F0aW9ucyIsIm51bVVuaWZvcm1zIiwiQUNUSVZFX1VOSUZPUk1TIiwidUluZGV4IiwidW5pZm9ybSIsImdldEFjdGl2ZVVuaWZvcm0iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJ1bmlmb3JtTmFtZSIsImlzU3RydWN0QXJyYXkiLCJzdHJ1Y3RJbmRleCIsInN0cnVjdFByb3BlcnR5IiwiaXNTdHJ1Y3QiLCJsb2NhdGlvbnMiLCJudW1BdHRyaWJzIiwiQUNUSVZFX0FUVFJJQlVURVMiLCJhSW5kZXgiLCJhdHRyaWJ1dGUiLCJnZXRBY3RpdmVBdHRyaWIiLCJnZXRBdHRyaWJMb2NhdGlvbiIsImRzdCIsInNyY0FscGhhIiwiZHN0QWxwaGEiLCJzZXRCbGVuZEVxdWF0aW9uIiwibW9kZVJHQiIsIm1vZGVBbHBoYSIsImFwcGx5U3RhdGUiLCJlbmFibGUiLCJERVBUSF9URVNUIiwiZGlzYWJsZSIsIkNVTExfRkFDRSIsIkJMRU5EIiwic2V0Q3VsbEZhY2UiLCJzZXRGcm9udEZhY2UiLCJzZXREZXB0aE1hc2siLCJzZXREZXB0aEZ1bmMiLCJ0ZXh0dXJlVW5pdCIsImN1cnJlbnRQcm9ncmFtIiwidXNlUHJvZ3JhbSIsImFjdGl2ZVVuaWZvcm0iLCJzZXRVbmlmb3JtIiwidGV4dHVyZVVuaXRzIiwiQ1ciLCJkZWxldGVQcm9ncmFtIiwiYXJyYXlMZW4iLCJ2YWx1ZUxlbiIsImZsYXR0ZW4iLCJzZXRWYWx1ZSIsImFycmF5c0VxdWFsIiwic2V0QXJyYXkiLCJ1bmlmb3JtMWZ2IiwidW5pZm9ybTFmIiwidW5pZm9ybTJmdiIsInVuaWZvcm0zZnYiLCJ1bmlmb3JtNGZ2IiwidW5pZm9ybTFpdiIsInVuaWZvcm0xaSIsInVuaWZvcm0yaXYiLCJ1bmlmb3JtM2l2IiwidW5pZm9ybTRpdiIsInVuaWZvcm1NYXRyaXgyZnYiLCJ1bmlmb3JtTWF0cml4M2Z2IiwidW5pZm9ybU1hdHJpeDRmdiIsIndhcm5Db3VudCIsImRwciIsImRlcHRoIiwic3RlbmNpbCIsInByZXNlcnZlRHJhd2luZ0J1ZmZlciIsInBvd2VyUHJlZmVyZW5jZSIsImF1dG9DbGVhciIsIndlYmdsIiwiZ2V0Q29udGV4dCIsImlzV2ViZ2wyIiwiWkVSTyIsIkZVTkNfQUREIiwiZGVwdGhNYXNrIiwicHJlbXVsdGlwbHlBbHBoYSIsImZsaXBZIiwidW5wYWNrQWxpZ25tZW50IiwiZnJhbWVidWZmZXIiLCJ2aWV3cG9ydCIsImFjdGl2ZVRleHR1cmVVbml0IiwiZXh0ZW5zaW9ucyIsImdldEV4dGVuc2lvbiIsImRyYXdCdWZmZXJzIiwicGFyYW1ldGVycyIsIm1heFRleHR1cmVVbml0cyIsImdldFBhcmFtZXRlciIsIk1BWF9DT01CSU5FRF9URVhUVVJFX0lNQUdFX1VOSVRTIiwibWF4QW5pc290cm9weSIsIk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsInNldFZpZXdwb3J0Iiwic2V0U2Npc3NvciIsInNjaXNzb3IiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsImJsZW5kRXF1YXRpb25TZXBhcmF0ZSIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsImJpbmRGcmFtZWJ1ZmZlciIsIkZSQU1FQlVGRkVSIiwiZXh0ZW5zaW9uIiwid2ViZ2wyRnVuYyIsImV4dEZ1bmMiLCJzb3J0T3BhcXVlIiwiekRlcHRoIiwic29ydFRyYW5zcGFyZW50Iiwic29ydFVJIiwiZ2V0UmVuZGVyTGlzdCIsImZydXN0dW1DdWxsIiwicmVuZGVyTGlzdCIsInRyYXZlcnNlIiwidmlzaWJsZSIsIm9wYXF1ZSIsInVpIiwiQ09MT1JfQlVGRkVSX0JJVCIsIkRFUFRIX0JVRkZFUl9CSVQiLCJTVEVOQ0lMX0JVRkZFUl9CSVQiLCJlbXB0eVBpeGVsIiwiaXNQb3dlck9mMiIsIlRFWFRVUkVfMkQiLCJVTlNJR05FRF9CWVRFIiwiUkdCQSIsImludGVybmFsRm9ybWF0Iiwid3JhcFMiLCJDTEFNUF9UT19FREdFIiwid3JhcFQiLCJnZW5lcmF0ZU1pcG1hcHMiLCJtaW5GaWx0ZXIiLCJORUFSRVNUX01JUE1BUF9MSU5FQVIiLCJMSU5FQVIiLCJtYWdGaWx0ZXIiLCJhbmlzb3Ryb3B5IiwibGV2ZWwiLCJzdG9yZSIsIlJFUEVBVCIsImJpbmRUZXh0dXJlIiwicGl4ZWxTdG9yZWkiLCJVTlBBQ0tfRkxJUF9ZX1dFQkdMIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwiVU5QQUNLX0FMSUdOTUVOVCIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX01JTl9GSUxURVIiLCJURVhUVVJFX01BR19GSUxURVIiLCJURVhUVVJFX1dSQVBfUyIsIlRFWFRVUkVfV1JBUF9UIiwidGV4UGFyYW1ldGVyZiIsIlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiVEVYVFVSRV9DVUJFX01BUCIsInRleEltYWdlMkQiLCJURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1giLCJpc0NvbXByZXNzZWRUZXh0dXJlIiwiY29tcHJlc3NlZFRleEltYWdlMkQiLCJnZW5lcmF0ZU1pcG1hcCIsIm1hdHJpeEF1dG9VcGRhdGUiLCJxdWF0ZXJuaW9uIiwiUXVhdCIsIkV1bGVyIiwidXAiLCJmcm9tRXVsZXIiLCJmcm9tUXVhdGVybmlvbiIsIm5vdGlmeVBhcmVudCIsImFkZENoaWxkIiwibm90aWZ5Q2hpbGQiLCJ1cGRhdGVNYXRyaXgiLCJ3b3JsZE1hdHJpeE5lZWRzVXBkYXRlIiwiY29tcG9zZSIsImRlY29tcG9zZSIsImdldFJvdGF0aW9uIiwiZ2V0U2NhbGluZyIsImludmVydCIsIndpZHRoU2VnbWVudHMiLCJoZWlnaHRTZWdtZW50cyIsIndTZWdzIiwiaFNlZ3MiLCJudW0iLCJudW1JbmRpY2VzIiwidXYiLCJVaW50MzJBcnJheSIsImJ1aWxkUGxhbmUiLCJ3IiwidURpciIsInZEaXIiLCJpaSIsImlvIiwic2VnVyIsInNlZ0giLCJpeSIsIml4IiwidG1wTWF0NCIsIm9yZGVyIiwicmVvcmRlciIsImZyb21Sb3RhdGlvbk1hdHJpeCIsIkV1bGVyRnVuYyIsInEiLCJtMDAiLCJtMDEiLCJtMDIiLCJtMTAiLCJtMTEiLCJtMTIiLCJtMjAiLCJtMjEiLCJtMjIiLCJNYXQzRnVuYyIsIm1hIiwibWIiLCJmcm9tTWF0cml4NCIsImZyb21CYXNpcyIsInZlYzNhIiwidmVjM2IiLCJ2ZWMzYyIsIm0wMyIsIm0xMyIsIm0yMyIsIm0zMCIsIm0zMSIsIm0zMiIsIm0zMyIsIk1hdDRGdW5jIiwic2V0UG9zaXRpb24iLCJwb3MiLCJleWUiLCJRdWF0RnVuYyIsInJvdGF0ZVgiLCJyb3RhdGVZIiwicm90YXRlWiIsImNvbmp1Z2F0ZSIsInFBIiwicUIiLCJmcm9tTWF0cml4MyIsIm1hdHJpeDMiLCJldWxlciIsImZyb21BeGlzQW5nbGUiLCJzbGVycCIsIlZlYzNGdW5jIiwidmEiLCJ2YiIsImxlbiIsInNxdWFyZWRMZW4iLCJuZWdhdGUiLCJjcm9zcyIsImVxdWFscyIsImFwcGx5TWF0cml4MyIsIm1hdDMiLCJtYXQ0Iiwic2NhbGVSb3RhdGVNYXRyaXg0IiwiYXBwbHlRdWF0ZXJuaW9uIiwiY2xvbmUiLCJ0cmFuc2Zvcm1EaXJlY3Rpb24iLCJvdXQiLCJmcm9tTWF0NCIsImZyb21RdWF0IiwieDIiLCJ5MiIsInoyIiwieHgiLCJ5eCIsInl5IiwiengiLCJ6eSIsInp6Iiwid3giLCJ3eSIsInd6IiwidHJhbnNwb3NlIiwiYTAxIiwiYTAyIiwiYTAwIiwiYTEwIiwiYTIwIiwiYjAxIiwiYjExIiwiYjIxIiwiZGV0IiwiYjAwIiwiYjAyIiwiYjEwIiwiYjEyIiwiYjIwIiwiYjIyIiwibm9ybWFsRnJvbU1hdDQiLCJhMDMiLCJhMzAiLCJhMzEiLCJiMDMiLCJiMDQiLCJiMDUiLCJiMDYiLCJiMDciLCJiMDgiLCJiMDkiLCJwcm9qZWN0aW9uIiwic3VidHJhY3QiLCJtdWx0aXBseVNjYWxhciIsImIwIiwiYjEiLCJiMiIsImIzIiwiaHlwb3QiLCJtYXQiLCJzY2FsaW5nIiwiaXMxIiwiaXMyIiwiaXMzIiwic20xMSIsInNtMTIiLCJzbTEzIiwic20yMSIsInNtMjIiLCJzbTIzIiwic20zMSIsInNtMzIiLCJzbTMzIiwidHJhY2UiLCJTIiwiZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZSIsInh5IiwieHoiLCJ5eiIsInN4Iiwic3kiLCJzeiIsImZvdnkiLCJuZiIsIm9ydGhvIiwibHIiLCJidCIsInRhcmdldFRvIiwiZXlleCIsImV5ZXkiLCJleWV6IiwidXB4IiwidXB5IiwidXB6IiwiejAiLCJ6MSIsIngwIiwieDEiLCJzZXRBeGlzQW5nbGUiLCJheCIsImF5IiwiYXoiLCJhdyIsImJ4IiwiYnkiLCJieiIsImJ3Iiwib21lZ2EiLCJjb3NvbSIsInNpbm9tIiwic2NhbGUwIiwic2NhbGUxIiwiYWNvcyIsImEwIiwiYTMiLCJpbnZEb3QiLCJmcm9tTWF0MyIsImZSb290IiwiZlRyYWNlIiwiayIsImN4IiwiY3kiLCJjeiIsInZlYzQiLCJzcXVhcmVkTGVuZ3RoIiwidHJhbnNmb3JtTWF0NCIsInNjYWxlUm90YXRlTWF0NCIsInRyYW5zZm9ybU1hdDMiLCJ0cmFuc2Zvcm1RdWF0IiwicXgiLCJxeSIsInF6IiwidXZ4IiwidXZ5IiwidXZ6IiwidXV2eCIsInV1dnkiLCJ1dXZ6IiwidzIiLCJ0ZW1wQSIsInRlbXBCIiwiY29zaW5lIiwiZXhhY3RFcXVhbHMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibm1kIiwicGF0aHMiXSwic291cmNlUm9vdCI6IiJ9